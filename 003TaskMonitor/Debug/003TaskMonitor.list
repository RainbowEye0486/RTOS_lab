
003TaskMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800d46c  0800d46c  0001d46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d628  0800d628  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d628  0800d628  0001d628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800d630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00013d70  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013e08  20013e08  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000346dc  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ee0  00000000  00000000  000547a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002208  00000000  00000000  0005a688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fe8  00000000  00000000  0005c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028513  00000000  00000000  0005e878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029c31  00000000  00000000  00086d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c9c  00000000  00000000  000b09bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00195658  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009510  00000000  00000000  001956ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d454 	.word	0x0800d454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d454 	.word	0x0800d454

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013d50 	.word	0x20013d50

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <Taskmonitor>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//User defined code
void Taskmonitor(void)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b0b1      	sub	sp, #196	; 0xc4
 800061c:	af04      	add	r7, sp, #16
	/* Initialize string */
    char Monitor_data[130];
    memset(Monitor_data,'\0',sizeof(Monitor_data));
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2282      	movs	r2, #130	; 0x82
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f00c faed 	bl	800cc04 <memset>

    /* Stop scheduler */
    /* Taskmonitor() will block when UART is transmitting data */
    /* Scheduler will change list data when Taskmonitor() is blocked */
    vTaskSuspendAll();
 800062a:	f009 fb8f 	bl	8009d4c <vTaskSuspendAll>


    /* Print title */
    sprintf(Monitor_data,"|Name      |Priority(Base/actual)  |pxStack    |pxTopOfStack    |State    |\n\r");
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4997      	ldr	r1, [pc, #604]	; (8000890 <Taskmonitor+0x278>)
 8000632:	4618      	mov	r0, r3
 8000634:	f00c fba8 	bl	800cd88 <siprintf>
    HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data, strlen(Monitor_data), 0xffff);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fe12 	bl	8000264 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	1d39      	adds	r1, r7, #4
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	4892      	ldr	r0, [pc, #584]	; (8000894 <Taskmonitor+0x27c>)
 800064c:	f004 feaf 	bl	80053ae <HAL_UART_Transmit>

    memset(Monitor_data,'\0',sizeof(Monitor_data));
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2282      	movs	r2, #130	; 0x82
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f00c fad4 	bl	800cc04 <memset>

    /* pxReadyTasksLists */
    if(listLIST_IS_EMPTY(ReadyLists) == pdFALSE)
 800065c:	4b8e      	ldr	r3, [pc, #568]	; (8000898 <Taskmonitor+0x280>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d068      	beq.n	8000738 <Taskmonitor+0x120>
    {

    	for (int j = 0; j < 15; j++){
 8000666:	2300      	movs	r3, #0
 8000668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800066c:	e060      	b.n	8000730 <Taskmonitor+0x118>
    		ListItem_t *head = listGET_ITEM_OF_HEAD_ENTRY(&ReadyLists[j]);
 800066e:	4b8a      	ldr	r3, [pc, #552]	; (8000898 <Taskmonitor+0x280>)
 8000670:	6819      	ldr	r1, [r3, #0]
 8000672:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        	for (int i = 0; i < listCURRENT_LIST_LENGTH(&ReadyLists[j]); i++){
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800068c:	e03d      	b.n	800070a <Taskmonitor+0xf2>
        		struct UserTCB *tcb = getTCB_Info(head->pvOwner);
 800068e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	4618      	mov	r0, r3
 8000696:	f009 f937 	bl	8009908 <getTCB_Info>
 800069a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        		sprintf(Monitor_data,"|%s%7lu/%lu%31p%13p%16s|\n\r",tcb->pcTaskName, tcb->uxBasePriority, tcb->uxPriority, (void *)tcb->pxStack, (void *)tcb->pxTopOfStack, "Ready");
 800069e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006a2:	681c      	ldr	r4, [r3, #0]
 80006a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006a8:	689d      	ldr	r5, [r3, #8]
 80006aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80006b4:	68d2      	ldr	r2, [r2, #12]
 80006b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80006ba:	6909      	ldr	r1, [r1, #16]
 80006bc:	1d38      	adds	r0, r7, #4
 80006be:	4e77      	ldr	r6, [pc, #476]	; (800089c <Taskmonitor+0x284>)
 80006c0:	9603      	str	r6, [sp, #12]
 80006c2:	9102      	str	r1, [sp, #8]
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	462b      	mov	r3, r5
 80006ca:	4622      	mov	r2, r4
 80006cc:	4974      	ldr	r1, [pc, #464]	; (80008a0 <Taskmonitor+0x288>)
 80006ce:	f00c fb5b 	bl	800cd88 <siprintf>
        		HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data, strlen(Monitor_data), 0xffff);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fdc5 	bl	8000264 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	1d39      	adds	r1, r7, #4
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	486b      	ldr	r0, [pc, #428]	; (8000894 <Taskmonitor+0x27c>)
 80006e6:	f004 fe62 	bl	80053ae <HAL_UART_Transmit>
        		memset(Monitor_data,'\0',sizeof(Monitor_data));
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2282      	movs	r2, #130	; 0x82
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00c fa87 	bl	800cc04 <memset>
        		head = head->pxNext;
 80006f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        	for (int i = 0; i < listCURRENT_LIST_LENGTH(&ReadyLists[j]); i++){
 8000700:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000704:	3301      	adds	r3, #1
 8000706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800070a:	4b63      	ldr	r3, [pc, #396]	; (8000898 <Taskmonitor+0x280>)
 800070c:	6819      	ldr	r1, [r3, #0]
 800070e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000712:	4613      	mov	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4413      	add	r3, r2
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	440b      	add	r3, r1
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000722:	429a      	cmp	r2, r3
 8000724:	d8b3      	bhi.n	800068e <Taskmonitor+0x76>
    	for (int j = 0; j < 15; j++){
 8000726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800072a:	3301      	adds	r3, #1
 800072c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000734:	2b0e      	cmp	r3, #14
 8000736:	dd9a      	ble.n	800066e <Taskmonitor+0x56>
    	}

    }

    /* pxDelayedTaskList*/
    if(listLIST_IS_EMPTY(DelayedList) == pdFALSE)
 8000738:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <Taskmonitor+0x28c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d04d      	beq.n	80007de <Taskmonitor+0x1c6>
    {
    	ListItem_t *head = listGET_ITEM_OF_HEAD_ENTRY(DelayedList);
 8000742:	4b58      	ldr	r3, [pc, #352]	; (80008a4 <Taskmonitor+0x28c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    	for (int i = 0; i < listCURRENT_LIST_LENGTH(DelayedList); i++){
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000752:	e03d      	b.n	80007d0 <Taskmonitor+0x1b8>
    		struct UserTCB *tcb = getTCB_Info(head->pvOwner);
 8000754:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	4618      	mov	r0, r3
 800075c:	f009 f8d4 	bl	8009908 <getTCB_Info>
 8000760:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    		sprintf(Monitor_data,"|%s%7lu/%lu%29p%9p%16s|\n\r",tcb->pcTaskName, tcb->uxBasePriority, tcb->uxPriority, (void *)tcb->pxStack, (void *)tcb->pxTopOfStack, "Blocked");
 8000764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000768:	681c      	ldr	r4, [r3, #0]
 800076a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800076e:	689d      	ldr	r5, [r3, #8]
 8000770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800077a:	68d2      	ldr	r2, [r2, #12]
 800077c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000780:	6909      	ldr	r1, [r1, #16]
 8000782:	1d38      	adds	r0, r7, #4
 8000784:	4e48      	ldr	r6, [pc, #288]	; (80008a8 <Taskmonitor+0x290>)
 8000786:	9603      	str	r6, [sp, #12]
 8000788:	9102      	str	r1, [sp, #8]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	9300      	str	r3, [sp, #0]
 800078e:	462b      	mov	r3, r5
 8000790:	4622      	mov	r2, r4
 8000792:	4946      	ldr	r1, [pc, #280]	; (80008ac <Taskmonitor+0x294>)
 8000794:	f00c faf8 	bl	800cd88 <siprintf>
    		HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data, strlen(Monitor_data), 0xffff);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fd62 	bl	8000264 <strlen>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007aa:	483a      	ldr	r0, [pc, #232]	; (8000894 <Taskmonitor+0x27c>)
 80007ac:	f004 fdff 	bl	80053ae <HAL_UART_Transmit>
    		memset(Monitor_data,'\0',sizeof(Monitor_data));
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2282      	movs	r2, #130	; 0x82
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00c fa24 	bl	800cc04 <memset>
    		head = head->pxNext;
 80007bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    	for (int i = 0; i < listCURRENT_LIST_LENGTH(DelayedList); i++){
 80007c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007ca:	3301      	adds	r3, #1
 80007cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <Taskmonitor+0x28c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007da:	429a      	cmp	r2, r3
 80007dc:	d8ba      	bhi.n	8000754 <Taskmonitor+0x13c>
    	}
    }
    /* pxOverflowDelayedTaskList */
    if(listLIST_IS_EMPTY(OverflowDelayedList) == pdFALSE)
 80007de:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <Taskmonitor+0x298>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d04d      	beq.n	8000884 <Taskmonitor+0x26c>
    {
    	ListItem_t *head = listGET_ITEM_OF_HEAD_ENTRY(OverflowDelayedList);
 80007e8:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <Taskmonitor+0x298>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    	for (int i = 0; i < listCURRENT_LIST_LENGTH(OverflowDelayedList); i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80007f8:	e03d      	b.n	8000876 <Taskmonitor+0x25e>
    		struct UserTCB *tcb = getTCB_Info(head->pvOwner);
 80007fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	4618      	mov	r0, r3
 8000802:	f009 f881 	bl	8009908 <getTCB_Info>
 8000806:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    		sprintf(Monitor_data,"|%s%7lu/%lu%31p%13p%16s|\n\r",tcb->pcTaskName, tcb->uxBasePriority, tcb->uxPriority, (void *)tcb->pxStack, (void *)tcb->pxTopOfStack, "Overflow");
 800080a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800080e:	681c      	ldr	r4, [r3, #0]
 8000810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000814:	689d      	ldr	r5, [r3, #8]
 8000816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000820:	68d2      	ldr	r2, [r2, #12]
 8000822:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8000826:	6909      	ldr	r1, [r1, #16]
 8000828:	1d38      	adds	r0, r7, #4
 800082a:	4e22      	ldr	r6, [pc, #136]	; (80008b4 <Taskmonitor+0x29c>)
 800082c:	9603      	str	r6, [sp, #12]
 800082e:	9102      	str	r1, [sp, #8]
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	462b      	mov	r3, r5
 8000836:	4622      	mov	r2, r4
 8000838:	4919      	ldr	r1, [pc, #100]	; (80008a0 <Taskmonitor+0x288>)
 800083a:	f00c faa5 	bl	800cd88 <siprintf>
    		HAL_UART_Transmit(&huart2,(uint8_t *)Monitor_data, strlen(Monitor_data), 0xffff);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fd0f 	bl	8000264 <strlen>
 8000846:	4603      	mov	r3, r0
 8000848:	b29a      	uxth	r2, r3
 800084a:	1d39      	adds	r1, r7, #4
 800084c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000850:	4810      	ldr	r0, [pc, #64]	; (8000894 <Taskmonitor+0x27c>)
 8000852:	f004 fdac 	bl	80053ae <HAL_UART_Transmit>
    		memset(Monitor_data,'\0',sizeof(Monitor_data));
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2282      	movs	r2, #130	; 0x82
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f00c f9d1 	bl	800cc04 <memset>
    		head = head->pxNext;
 8000862:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    	for (int i = 0; i < listCURRENT_LIST_LENGTH(OverflowDelayedList); i++){
 800086c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000870:	3301      	adds	r3, #1
 8000872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <Taskmonitor+0x298>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000880:	429a      	cmp	r2, r3
 8000882:	d8ba      	bhi.n	80007fa <Taskmonitor+0x1e2>
    	}
    }
    /* Resume scheduler */
    xTaskResumeAll();
 8000884:	f009 fa70 	bl	8009d68 <xTaskResumeAll>
}
 8000888:	bf00      	nop
 800088a:	37b4      	adds	r7, #180	; 0xb4
 800088c:	46bd      	mov	sp, r7
 800088e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000890:	0800d46c 	.word	0x0800d46c
 8000894:	20013558 	.word	0x20013558
 8000898:	200134f8 	.word	0x200134f8
 800089c:	0800d4d8 	.word	0x0800d4d8
 80008a0:	0800d4bc 	.word	0x0800d4bc
 80008a4:	2001359c 	.word	0x2001359c
 80008a8:	0800d4fc 	.word	0x0800d4fc
 80008ac:	0800d4e0 	.word	0x0800d4e0
 80008b0:	200134fc 	.word	0x200134fc
 80008b4:	0800d504 	.word	0x0800d504

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	; 0x30
 80008bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fda1 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f89d 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f9c3 	bl	8000c50 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008ca:	f000 f903 	bl	8000ad4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008ce:	f000 f92f 	bl	8000b30 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008d2:	f000 f95d 	bl	8000b90 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008d6:	f007 fedf 	bl	8008698 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80008da:	f000 f98f 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = xTaskCreate(Red_LED_App, "Red_LED", 200, NULL, 1, &red_handle);
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	2301      	movs	r3, #1
 80008e6:	9300      	str	r3, [sp, #0]
 80008e8:	2300      	movs	r3, #0
 80008ea:	22c8      	movs	r2, #200	; 0xc8
 80008ec:	4939      	ldr	r1, [pc, #228]	; (80009d4 <main+0x11c>)
 80008ee:	483a      	ldr	r0, [pc, #232]	; (80009d8 <main+0x120>)
 80008f0:	f009 f82f 	bl	8009952 <xTaskCreate>
 80008f4:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d00a      	beq.n	8000912 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000900:	f383 8811 	msr	BASEPRI, r3
 8000904:	f3bf 8f6f 	isb	sy
 8000908:	f3bf 8f4f 	dsb	sy
 800090c:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800090e:	bf00      	nop
 8000910:	e7fe      	b.n	8000910 <main+0x58>
  status = xTaskCreate(Green_LED_App, "Green_LED", 200, NULL, 1, &green_handle);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	2301      	movs	r3, #1
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	22c8      	movs	r2, #200	; 0xc8
 8000920:	492e      	ldr	r1, [pc, #184]	; (80009dc <main+0x124>)
 8000922:	482f      	ldr	r0, [pc, #188]	; (80009e0 <main+0x128>)
 8000924:	f009 f815 	bl	8009952 <xTaskCreate>
 8000928:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092c:	2b01      	cmp	r3, #1
 800092e:	d00a      	beq.n	8000946 <main+0x8e>
        __asm volatile
 8000930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000934:	f383 8811 	msr	BASEPRI, r3
 8000938:	f3bf 8f6f 	isb	sy
 800093c:	f3bf 8f4f 	dsb	sy
 8000940:	61fb      	str	r3, [r7, #28]
    }
 8000942:	bf00      	nop
 8000944:	e7fe      	b.n	8000944 <main+0x8c>
  status = xTaskCreate(Delay_App, "Delay_App", 200, NULL, 14, &delay_handle);
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	230e      	movs	r3, #14
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	22c8      	movs	r2, #200	; 0xc8
 8000954:	4923      	ldr	r1, [pc, #140]	; (80009e4 <main+0x12c>)
 8000956:	4824      	ldr	r0, [pc, #144]	; (80009e8 <main+0x130>)
 8000958:	f008 fffb 	bl	8009952 <xTaskCreate>
 800095c:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	2b01      	cmp	r3, #1
 8000962:	d00a      	beq.n	800097a <main+0xc2>
        __asm volatile
 8000964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000968:	f383 8811 	msr	BASEPRI, r3
 800096c:	f3bf 8f6f 	isb	sy
 8000970:	f3bf 8f4f 	dsb	sy
 8000974:	61bb      	str	r3, [r7, #24]
    }
 8000976:	bf00      	nop
 8000978:	e7fe      	b.n	8000978 <main+0xc0>
  status = xTaskCreate(TaskMonitor_App, "TaskMonit", 200, NULL, 3, &monitor_handle);
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	2303      	movs	r3, #3
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	22c8      	movs	r2, #200	; 0xc8
 8000986:	4919      	ldr	r1, [pc, #100]	; (80009ec <main+0x134>)
 8000988:	4819      	ldr	r0, [pc, #100]	; (80009f0 <main+0x138>)
 800098a:	f008 ffe2 	bl	8009952 <xTaskCreate>
 800098e:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	2b01      	cmp	r3, #1
 8000994:	d00a      	beq.n	80009ac <main+0xf4>
        __asm volatile
 8000996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800099a:	f383 8811 	msr	BASEPRI, r3
 800099e:	f3bf 8f6f 	isb	sy
 80009a2:	f3bf 8f4f 	dsb	sy
 80009a6:	617b      	str	r3, [r7, #20]
    }
 80009a8:	bf00      	nop
 80009aa:	e7fe      	b.n	80009aa <main+0xf2>

  ReadyLists = getReadyTasksLists();
 80009ac:	f008 ff8a 	bl	80098c4 <getReadyTasksLists>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <main+0x13c>)
 80009b4:	6013      	str	r3, [r2, #0]
  DelayedList = getDelayedTaskList();
 80009b6:	f008 ff8f 	bl	80098d8 <getDelayedTaskList>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <main+0x140>)
 80009be:	6013      	str	r3, [r2, #0]
  OverflowDelayedList = getOverflowDelayedTaskList();
 80009c0:	f008 ff96 	bl	80098f0 <getOverflowDelayedTaskList>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <main+0x144>)
 80009c8:	6013      	str	r3, [r2, #0]
  vTaskStartScheduler();
 80009ca:	f009 f95d 	bl	8009c88 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009ce:	f007 fe89 	bl	80086e4 <MX_USB_HOST_Process>
 80009d2:	e7fc      	b.n	80009ce <main+0x116>
 80009d4:	0800d510 	.word	0x0800d510
 80009d8:	08000e4d 	.word	0x08000e4d
 80009dc:	0800d518 	.word	0x0800d518
 80009e0:	08000e79 	.word	0x08000e79
 80009e4:	0800d524 	.word	0x0800d524
 80009e8:	08000ea5 	.word	0x08000ea5
 80009ec:	0800d530 	.word	0x0800d530
 80009f0:	08000ed1 	.word	0x08000ed1
 80009f4:	200134f8 	.word	0x200134f8
 80009f8:	2001359c 	.word	0x2001359c
 80009fc:	200134fc 	.word	0x200134fc

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	; 0x50
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2230      	movs	r2, #48	; 0x30
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00c f8f8 	bl	800cc04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <SystemClock_Config+0xcc>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <SystemClock_Config+0xcc>)
 8000a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SystemClock_Config+0xcc>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a40:	2300      	movs	r3, #0
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a70:	2308      	movs	r3, #8
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	4618      	mov	r0, r3
 8000a88:	f003 fb28 	bl	80040dc <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a92:	f000 fa3b 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	230f      	movs	r3, #15
 8000a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fd89 	bl	80045cc <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ac0:	f000 fa24 	bl	8000f0c <Error_Handler>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	3750      	adds	r7, #80	; 0x50
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40007000 	.word	0x40007000

08000ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <MX_I2C1_Init+0x54>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae0:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_I2C1_Init+0x58>)
 8000ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_I2C1_Init+0x50>)
 8000b12:	f002 fcff 	bl	8003514 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f000 f9f6 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200134a4 	.word	0x200134a4
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	000186a0 	.word	0x000186a0

08000b30 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <MX_I2S3_Init+0x58>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b40:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b58:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <MX_I2S3_Init+0x5c>)
 8000b5a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_I2S3_Init+0x54>)
 8000b70:	f002 fe14 	bl	800379c <HAL_I2S_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b7a:	f000 f9c7 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200135a0 	.word	0x200135a0
 8000b88:	40003c00 	.word	0x40003c00
 8000b8c:	00017700 	.word	0x00017700

08000b90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b96:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <MX_SPI1_Init+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ba0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000bdc:	220a      	movs	r2, #10
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_SPI1_Init+0x64>)
 8000be2:	f004 f861 	bl	8004ca8 <HAL_SPI_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bec:	f000 f98e 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20013500 	.word	0x20013500
 8000bf8:	40013000 	.word	0x40013000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f004 fb6e 	bl	8005314 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f965 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20013558 	.word	0x20013558
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
 8000c6a:	4b72      	ldr	r3, [pc, #456]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a71      	ldr	r2, [pc, #452]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b6f      	ldr	r3, [pc, #444]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	61bb      	str	r3, [r7, #24]
 8000c80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	4b6b      	ldr	r3, [pc, #428]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a6a      	ldr	r2, [pc, #424]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b68      	ldr	r3, [pc, #416]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b64      	ldr	r3, [pc, #400]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a63      	ldr	r2, [pc, #396]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a5c      	ldr	r2, [pc, #368]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	4b4f      	ldr	r3, [pc, #316]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a4e      	ldr	r2, [pc, #312]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <MX_GPIO_Init+0x1e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2108      	movs	r1, #8
 8000d12:	4849      	ldr	r0, [pc, #292]	; (8000e38 <MX_GPIO_Init+0x1e8>)
 8000d14:	f000 fe5a 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	4847      	ldr	r0, [pc, #284]	; (8000e3c <MX_GPIO_Init+0x1ec>)
 8000d1e:	f000 fe55 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d22:	2200      	movs	r2, #0
 8000d24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d28:	4845      	ldr	r0, [pc, #276]	; (8000e40 <MX_GPIO_Init+0x1f0>)
 8000d2a:	f000 fe4f 	bl	80019cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	4619      	mov	r1, r3
 8000d44:	483c      	ldr	r0, [pc, #240]	; (8000e38 <MX_GPIO_Init+0x1e8>)
 8000d46:	f000 fca5 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4836      	ldr	r0, [pc, #216]	; (8000e3c <MX_GPIO_Init+0x1ec>)
 8000d62:	f000 fc97 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d66:	2308      	movs	r3, #8
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d76:	2305      	movs	r3, #5
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482e      	ldr	r0, [pc, #184]	; (8000e3c <MX_GPIO_Init+0x1ec>)
 8000d82:	f000 fc87 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	482a      	ldr	r0, [pc, #168]	; (8000e44 <MX_GPIO_Init+0x1f4>)
 8000d9c:	f000 fc7a 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000da0:	2304      	movs	r3, #4
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	4825      	ldr	r0, [pc, #148]	; (8000e48 <MX_GPIO_Init+0x1f8>)
 8000db4:	f000 fc6e 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	481c      	ldr	r0, [pc, #112]	; (8000e48 <MX_GPIO_Init+0x1f8>)
 8000dd6:	f000 fc5d 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dda:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dde:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	4813      	ldr	r0, [pc, #76]	; (8000e40 <MX_GPIO_Init+0x1f0>)
 8000df4:	f000 fc4e 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000df8:	2320      	movs	r3, #32
 8000dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_GPIO_Init+0x1f0>)
 8000e0c:	f000 fc42 	bl	8001694 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4804      	ldr	r0, [pc, #16]	; (8000e38 <MX_GPIO_Init+0x1e8>)
 8000e26:	f000 fc35 	bl	8001694 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	; 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400

08000e4c <Red_LED_App>:

/* USER CODE BEGIN 4 */

void Red_LED_App(void *pvParameters){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000e54:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000e58:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000e5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <Red_LED_App+0x28>)
 8000e60:	f000 fdcd 	bl	80019fe <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f008 fed7 	bl	8009c18 <vTaskDelay>
		Redtimer+=1;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000e70:	e7f3      	b.n	8000e5a <Red_LED_App+0xe>
 8000e72:	bf00      	nop
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000e86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <Green_LED_App+0x28>)
 8000e8c:	f000 fdb7 	bl	80019fe <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f008 fec1 	bl	8009c18 <vTaskDelay>
		Greentimer+=2;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3302      	adds	r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000e9c:	e7f3      	b.n	8000e86 <Green_LED_App+0xe>
 8000e9e:	bf00      	nop
 8000ea0:	40020c00 	.word	0x40020c00

08000ea4 <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d105      	bne.n	8000ec2 <Delay_App+0x1e>
			delaytime = 1000;
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	60bb      	str	r3, [r7, #8]
			delayflag=1;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	e002      	b.n	8000ec8 <Delay_App+0x24>
		}else{
			delaytime=0xFFFFFFFF;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 8000ec8:	68b8      	ldr	r0, [r7, #8]
 8000eca:	f008 fea5 	bl	8009c18 <vTaskDelay>
		if(delayflag==0){
 8000ece:	e7ef      	b.n	8000eb0 <Delay_App+0xc>

08000ed0 <TaskMonitor_App>:
	}
}

void TaskMonitor_App(void *pvParameters){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	for(;;){
		Taskmonitor();
 8000ed8:	f7ff fb9e 	bl	8000618 <Taskmonitor>
		vTaskDelay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee0:	f008 fe9a 	bl	8009c18 <vTaskDelay>
		Taskmonitor();
 8000ee4:	e7f8      	b.n	8000ed8 <TaskMonitor_App+0x8>
	...

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f000 faa5 	bl	8001448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40001000 	.word	0x40001000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f10:	b672      	cpsid	i
}
 8000f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <Error_Handler+0x8>
	...

08000f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_MspInit+0x4c>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0x84>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12c      	bne.n	8000fe4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fa6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <HAL_I2C_MspInit+0x8c>)
 8000fc4:	f000 fb66 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_I2C_MspInit+0x88>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08e      	sub	sp, #56	; 0x38
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a31      	ldr	r2, [pc, #196]	; (80010e8 <HAL_I2S_MspInit+0xf0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d15a      	bne.n	80010de <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800102c:	23c0      	movs	r3, #192	; 0xc0
 800102e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fcf5 	bl	8004a28 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001044:	f7ff ff62 	bl	8000f0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 8001052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001056:	6413      	str	r3, [r2, #64]	; 0x40
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a18      	ldr	r2, [pc, #96]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_I2S_MspInit+0xf4>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800109c:	2310      	movs	r3, #16
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ac:	2306      	movs	r3, #6
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <HAL_I2S_MspInit+0xf8>)
 80010b8:	f000 faec 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010ce:	2306      	movs	r3, #6
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <HAL_I2S_MspInit+0xfc>)
 80010da:	f000 fadb 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3738      	adds	r7, #56	; 0x38
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40003c00 	.word	0x40003c00
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020800 	.word	0x40020800

080010f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <HAL_SPI_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12b      	bne.n	8001172 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001124:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <HAL_SPI_MspInit+0x88>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_SPI_MspInit+0x88>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_SPI_MspInit+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001152:	23e0      	movs	r3, #224	; 0xe0
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001162:	2305      	movs	r3, #5
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_SPI_MspInit+0x8c>)
 800116e:	f000 fa91 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40013000 	.word	0x40013000
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_UART_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011e2:	230c      	movs	r3, #12
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011f2:	2307      	movs	r3, #7
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_UART_MspInit+0x8c>)
 80011fe:	f000 fa49 	bl	8001694 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40004400 	.word	0x40004400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	2036      	movs	r0, #54	; 0x36
 800122e:	f000 fa07 	bl	8001640 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001232:	2036      	movs	r0, #54	; 0x36
 8001234:	f000 fa20 	bl	8001678 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <HAL_InitTick+0xa4>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <HAL_InitTick+0xa4>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_InitTick+0xa4>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001254:	f107 0210 	add.w	r2, r7, #16
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fbb0 	bl	80049c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001264:	f003 fb86 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8001268:	4603      	mov	r3, r0
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800126e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001270:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <HAL_InitTick+0xa8>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	0c9b      	lsrs	r3, r3, #18
 8001278:	3b01      	subs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <HAL_InitTick+0xac>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <HAL_InitTick+0xb0>)
 8001280:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_InitTick+0xac>)
 8001284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001288:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800128a:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_InitTick+0xac>)
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_InitTick+0xac>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_InitTick+0xac>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <HAL_InitTick+0xac>)
 800129e:	f003 fd8c 	bl	8004dba <HAL_TIM_Base_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d104      	bne.n	80012b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <HAL_InitTick+0xac>)
 80012aa:	f003 fddf 	bl	8004e6c <HAL_TIM_Base_Start_IT>
 80012ae:	4603      	mov	r3, r0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3730      	adds	r7, #48	; 0x30
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40023800 	.word	0x40023800
 80012c0:	431bde83 	.word	0x431bde83
 80012c4:	200135e8 	.word	0x200135e8
 80012c8:	40001000 	.word	0x40001000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <NMI_Handler+0x4>

080012d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <MemManage_Handler+0x4>

080012de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <BusFault_Handler+0x4>

080012e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <UsageFault_Handler+0x4>

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <TIM6_DAC_IRQHandler+0x10>)
 80012fe:	f003 fe25 	bl	8004f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200135e8 	.word	0x200135e8

0800130c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <OTG_FS_IRQHandler+0x10>)
 8001312:	f000 fdf9 	bl	8001f08 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20013a0c 	.word	0x20013a0c

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f00b fc02 	bl	800cb58 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20020000 	.word	0x20020000
 8001380:	00000400 	.word	0x00000400
 8001384:	200000b4 	.word	0x200000b4
 8001388:	20013e08 	.word	0x20013e08

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013da:	f7ff ffd7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f00b fbc1 	bl	800cb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fa69 	bl	80008b8 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80013f4:	0800d630 	.word	0x0800d630
  ldr r2, =_sbss
 80013f8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80013fc:	20013e08 	.word	0x20013e08

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f8fc 	bl	800162a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	2000      	movs	r0, #0
 8001434:	f7ff fef0 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fd6e 	bl	8000f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000008 	.word	0x20000008
 800146c:	20013630 	.word	0x20013630

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20013630 	.word	0x20013630

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff4c 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001652:	f7ff ff61 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001656:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	6978      	ldr	r0, [r7, #20]
 800165e:	f7ff ffb1 	bl	80015c4 <NVIC_EncodePriority>
 8001662:	4602      	mov	r2, r0
 8001664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff80 	bl	8001570 <__NVIC_SetPriority>
}
 8001670:	bf00      	nop
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff54 	bl	8001534 <__NVIC_EnableIRQ>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	; 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	e16b      	b.n	8001988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016b0:	2201      	movs	r2, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 815a 	bne.w	8001982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d005      	beq.n	80016e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d130      	bne.n	8001748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	2203      	movs	r2, #3
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	091b      	lsrs	r3, r3, #4
 8001732:	f003 0201 	and.w	r2, r3, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b03      	cmp	r3, #3
 8001752:	d017      	beq.n	8001784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d123      	bne.n	80017d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	08da      	lsrs	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3208      	adds	r2, #8
 80017d2:	69b9      	ldr	r1, [r7, #24]
 80017d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80b4 	beq.w	8001982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b60      	ldr	r3, [pc, #384]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a5f      	ldr	r2, [pc, #380]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b5d      	ldr	r3, [pc, #372]	; (80019a0 <HAL_GPIO_Init+0x30c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a5b      	ldr	r2, [pc, #364]	; (80019a4 <HAL_GPIO_Init+0x310>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_GPIO_Init+0x314>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d02b      	beq.n	80018ba <HAL_GPIO_Init+0x226>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a51      	ldr	r2, [pc, #324]	; (80019ac <HAL_GPIO_Init+0x318>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x222>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x31c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x21e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4f      	ldr	r2, [pc, #316]	; (80019b4 <HAL_GPIO_Init+0x320>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x21a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4e      	ldr	r2, [pc, #312]	; (80019b8 <HAL_GPIO_Init+0x324>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x216>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_GPIO_Init+0x328>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x212>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x32c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x20e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_GPIO_Init+0x330>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x20a>
 800189a:	2307      	movs	r3, #7
 800189c:	e00e      	b.n	80018bc <HAL_GPIO_Init+0x228>
 800189e:	2308      	movs	r3, #8
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018a2:	2306      	movs	r3, #6
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x228>
 80018ba:	2300      	movs	r3, #0
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018cc:	4935      	ldr	r1, [pc, #212]	; (80019a4 <HAL_GPIO_Init+0x310>)
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x334>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_GPIO_Init+0x334>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_GPIO_Init+0x334>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3301      	adds	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	f67f ae90 	bls.w	80016b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40020400 	.word	0x40020400
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40021400 	.word	0x40021400
 80019c0:	40021800 	.word	0x40021800
 80019c4:	40021c00 	.word	0x40021c00
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	400b      	ands	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a34:	b08f      	sub	sp, #60	; 0x3c
 8001a36:	af0a      	add	r7, sp, #40	; 0x28
 8001a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e054      	b.n	8001aee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f006 fe78 	bl	8008754 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2203      	movs	r2, #3
 8001a68:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f003 ffce 	bl	8005a24 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	687e      	ldr	r6, [r7, #4]
 8001a90:	466d      	mov	r5, sp
 8001a92:	f106 0410 	add.w	r4, r6, #16
 8001a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aa6:	1d33      	adds	r3, r6, #4
 8001aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aaa:	6838      	ldr	r0, [r7, #0]
 8001aac:	f003 ff48 	bl	8005940 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f003 ffc5 	bl	8005a46 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	687e      	ldr	r6, [r7, #4]
 8001ac4:	466d      	mov	r5, sp
 8001ac6:	f106 0410 	add.w	r4, r6, #16
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ada:	1d33      	adds	r3, r6, #4
 8001adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f004 f92c 	bl	8005d3c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001af6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001af6:	b590      	push	{r4, r7, lr}
 8001af8:	b089      	sub	sp, #36	; 0x24
 8001afa:	af04      	add	r7, sp, #16
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	4608      	mov	r0, r1
 8001b00:	4611      	mov	r1, r2
 8001b02:	461a      	mov	r2, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	70fb      	strb	r3, [r7, #3]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70bb      	strb	r3, [r7, #2]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_HCD_HC_Init+0x28>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e076      	b.n	8001c0c <HAL_HCD_HC_Init+0x116>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	212c      	movs	r1, #44	; 0x2c
 8001b2c:	fb01 f303 	mul.w	r3, r1, r3
 8001b30:	4413      	add	r3, r2
 8001b32:	333d      	adds	r3, #61	; 0x3d
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	212c      	movs	r1, #44	; 0x2c
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	3338      	adds	r3, #56	; 0x38
 8001b46:	787a      	ldrb	r2, [r7, #1]
 8001b48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b4a:	78fb      	ldrb	r3, [r7, #3]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	212c      	movs	r1, #44	; 0x2c
 8001b50:	fb01 f303 	mul.w	r3, r1, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3340      	adds	r3, #64	; 0x40
 8001b58:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b5a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3339      	adds	r3, #57	; 0x39
 8001b6a:	78fa      	ldrb	r2, [r7, #3]
 8001b6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	333f      	adds	r3, #63	; 0x3f
 8001b7c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b8a:	b2d0      	uxtb	r0, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	212c      	movs	r1, #44	; 0x2c
 8001b90:	fb01 f303 	mul.w	r3, r1, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	333a      	adds	r3, #58	; 0x3a
 8001b98:	4602      	mov	r2, r0
 8001b9a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da09      	bge.n	8001bb8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	333b      	adds	r3, #59	; 0x3b
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e008      	b.n	8001bca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	333b      	adds	r3, #59	; 0x3b
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	212c      	movs	r1, #44	; 0x2c
 8001bd0:	fb01 f303 	mul.w	r3, r1, r3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	333c      	adds	r3, #60	; 0x3c
 8001bd8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bdc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	787c      	ldrb	r4, [r7, #1]
 8001be4:	78ba      	ldrb	r2, [r7, #2]
 8001be6:	78f9      	ldrb	r1, [r7, #3]
 8001be8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f004 fa19 	bl	8006030 <USB_HC_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_HCD_HC_Halt+0x1e>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e00f      	b.n	8001c52 <HAL_HCD_HC_Halt+0x3e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	78fa      	ldrb	r2, [r7, #3]
 8001c40:	4611      	mov	r1, r2
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 fc55 	bl	80064f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	70fb      	strb	r3, [r7, #3]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70bb      	strb	r3, [r7, #2]
 8001c72:	4613      	mov	r3, r2
 8001c74:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c76:	78fb      	ldrb	r3, [r7, #3]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	212c      	movs	r1, #44	; 0x2c
 8001c7c:	fb01 f303 	mul.w	r3, r1, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	333b      	adds	r3, #59	; 0x3b
 8001c84:	78ba      	ldrb	r2, [r7, #2]
 8001c86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	333f      	adds	r3, #63	; 0x3f
 8001c96:	787a      	ldrb	r2, [r7, #1]
 8001c98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c9a:	7c3b      	ldrb	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d112      	bne.n	8001cc6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2203      	movs	r2, #3
 8001cb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	333d      	adds	r3, #61	; 0x3d
 8001cc0:	7f3a      	ldrb	r2, [r7, #28]
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e008      	b.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3342      	adds	r3, #66	; 0x42
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	f200 80c6 	bhi.w	8001e6c <HAL_HCD_HC_SubmitRequest+0x210>
 8001ce0:	a201      	add	r2, pc, #4	; (adr r2, 8001ce8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce6:	bf00      	nop
 8001ce8:	08001cf9 	.word	0x08001cf9
 8001cec:	08001e59 	.word	0x08001e59
 8001cf0:	08001d5d 	.word	0x08001d5d
 8001cf4:	08001ddb 	.word	0x08001ddb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001cf8:	7c3b      	ldrb	r3, [r7, #16]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	f040 80b8 	bne.w	8001e70 <HAL_HCD_HC_SubmitRequest+0x214>
 8001d00:	78bb      	ldrb	r3, [r7, #2]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f040 80b4 	bne.w	8001e70 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d08:	8b3b      	ldrh	r3, [r7, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3355      	adds	r3, #85	; 0x55
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3355      	adds	r3, #85	; 0x55
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	212c      	movs	r1, #44	; 0x2c
 8001d3a:	fb01 f303 	mul.w	r3, r1, r3
 8001d3e:	4413      	add	r3, r2
 8001d40:	3342      	adds	r3, #66	; 0x42
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d46:	e093      	b.n	8001e70 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	3342      	adds	r3, #66	; 0x42
 8001d56:	2202      	movs	r2, #2
 8001d58:	701a      	strb	r2, [r3, #0]
      break;
 8001d5a:	e089      	b.n	8001e70 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d5c:	78bb      	ldrb	r3, [r7, #2]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d11d      	bne.n	8001d9e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	212c      	movs	r1, #44	; 0x2c
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3355      	adds	r3, #85	; 0x55
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	212c      	movs	r1, #44	; 0x2c
 8001d7c:	fb01 f303 	mul.w	r3, r1, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	3342      	adds	r3, #66	; 0x42
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d88:	e073      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	3342      	adds	r3, #66	; 0x42
 8001d98:	2202      	movs	r2, #2
 8001d9a:	701a      	strb	r2, [r3, #0]
      break;
 8001d9c:	e069      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	3354      	adds	r3, #84	; 0x54
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3342      	adds	r3, #66	; 0x42
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
      break;
 8001dc4:	e055      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	212c      	movs	r1, #44	; 0x2c
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3342      	adds	r3, #66	; 0x42
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	701a      	strb	r2, [r3, #0]
      break;
 8001dd8:	e04b      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dda:	78bb      	ldrb	r3, [r7, #2]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11d      	bne.n	8001e1c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3355      	adds	r3, #85	; 0x55
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3342      	adds	r3, #66	; 0x42
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e06:	e034      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3342      	adds	r3, #66	; 0x42
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e02a      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3354      	adds	r3, #84	; 0x54
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	212c      	movs	r1, #44	; 0x2c
 8001e36:	fb01 f303 	mul.w	r3, r1, r3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3342      	adds	r3, #66	; 0x42
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
      break;
 8001e42:	e016      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3342      	adds	r3, #66	; 0x42
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
      break;
 8001e56:	e00c      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	212c      	movs	r1, #44	; 0x2c
 8001e5e:	fb01 f303 	mul.w	r3, r1, r3
 8001e62:	4413      	add	r3, r2
 8001e64:	3342      	adds	r3, #66	; 0x42
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e6c:	bf00      	nop
 8001e6e:	e000      	b.n	8001e72 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e70:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	212c      	movs	r1, #44	; 0x2c
 8001e78:	fb01 f303 	mul.w	r3, r1, r3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3344      	adds	r3, #68	; 0x44
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	8b3a      	ldrh	r2, [r7, #24]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	202c      	movs	r0, #44	; 0x2c
 8001e8c:	fb00 f303 	mul.w	r3, r0, r3
 8001e90:	440b      	add	r3, r1
 8001e92:	334c      	adds	r3, #76	; 0x4c
 8001e94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001ea8:	78fb      	ldrb	r3, [r7, #3]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	212c      	movs	r1, #44	; 0x2c
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3350      	adds	r3, #80	; 0x50
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3339      	adds	r3, #57	; 0x39
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3361      	adds	r3, #97	; 0x61
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	78fb      	ldrb	r3, [r7, #3]
 8001ee4:	222c      	movs	r2, #44	; 0x2c
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	3338      	adds	r3, #56	; 0x38
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	18d1      	adds	r1, r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f004 f9a8 	bl	800624c <USB_HC_StartXfer>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fecb 	bl	8005cba <USB_GetMode>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 80f6 	bne.w	8002118 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 feaf 	bl	8005c94 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80ec 	beq.w	8002116 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fea6 	bl	8005c94 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f52:	d104      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 fe96 	bl	8005c94 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f72:	d104      	bne.n	8001f7e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fe86 	bl	8005c94 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f92:	d104      	bne.n	8001f9e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f9c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fe76 	bl	8005c94 <USB_ReadInterrupts>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d103      	bne.n	8001fba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fe68 	bl	8005c94 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fce:	d11c      	bne.n	800200a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fd8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001fea:	2110      	movs	r1, #16
 8001fec:	6938      	ldr	r0, [r7, #16]
 8001fee:	f003 fd77 	bl	8005ae0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ff2:	6938      	ldr	r0, [r7, #16]
 8001ff4:	f003 fd98 	bl	8005b28 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 ff50 	bl	8005ea4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f006 fc23 	bl	8008850 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fe40 	bl	8005c94 <USB_ReadInterrupts>
 8002014:	4603      	mov	r3, r0
 8002016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800201e:	d102      	bne.n	8002026 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f001 fa03 	bl	800342c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fe32 	bl	8005c94 <USB_ReadInterrupts>
 8002030:	4603      	mov	r3, r0
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d106      	bne.n	8002048 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f006 fbec 	bl	8008818 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2208      	movs	r2, #8
 8002046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fe21 	bl	8005c94 <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b10      	cmp	r3, #16
 800205a:	d101      	bne.n	8002060 <HAL_HCD_IRQHandler+0x158>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_HCD_IRQHandler+0x15a>
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0210 	bic.w	r2, r2, #16
 8002074:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f001 f906 	bl	8003288 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0210 	orr.w	r2, r2, #16
 800208a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f003 fdff 	bl	8005c94 <USB_ReadInterrupts>
 8002096:	4603      	mov	r3, r0
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020a0:	d13a      	bne.n	8002118 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fa12 	bl	80064d0 <USB_HC_ReadInterrupt>
 80020ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	e025      	b.n	8002100 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d018      	beq.n	80020fa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020de:	d106      	bne.n	80020ee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8ab 	bl	8002242 <HCD_HC_IN_IRQHandler>
 80020ec:	e005      	b.n	80020fa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fcc6 	bl	8002a86 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	429a      	cmp	r2, r3
 8002108:	d3d4      	bcc.n	80020b4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002112:	615a      	str	r2, [r3, #20]
 8002114:	e000      	b.n	8002118 <HAL_HCD_IRQHandler+0x210>
      return;
 8002116:	bf00      	nop
    }
  }
}
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_HCD_Start+0x16>
 8002130:	2302      	movs	r3, #2
 8002132:	e013      	b.n	800215c <HAL_HCD_Start+0x3e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f003 ff12 	bl	8005f6c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fc58 	bl	8005a02 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_HCD_Stop+0x16>
 8002176:	2302      	movs	r3, #2
 8002178:	e00d      	b.n	8002196 <HAL_HCD_Stop+0x32>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fb0c 	bl	80067a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 feb4 	bl	8005f18 <USB_ResetPort>
 80021b0:	4603      	mov	r3, r0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	781b      	ldrb	r3, [r3, #0]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	3350      	adds	r3, #80	; 0x50
 80021fc:	681b      	ldr	r3, [r3, #0]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fef8 	bl	800600c <USB_GetCurrentFrame>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b082      	sub	sp, #8
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fed3 	bl	8005fde <USB_GetHostSpeed>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	460b      	mov	r3, r1
 800224c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b04      	cmp	r3, #4
 8002270:	d119      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	461a      	mov	r2, r3
 8002280:	2304      	movs	r3, #4
 8002282:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	0151      	lsls	r1, r2, #5
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	440a      	add	r2, r1
 800229a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800229e:	f043 0302 	orr.w	r3, r3, #2
 80022a2:	60d3      	str	r3, [r2, #12]
 80022a4:	e101      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d12b      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2207      	movs	r2, #7
 80022e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	0151      	lsls	r1, r2, #5
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	440a      	add	r2, r1
 80022fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f004 f8ef 	bl	80064f2 <USB_HC_Halt>
 8002314:	e0c9      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d109      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2320      	movs	r3, #32
 800233c:	6093      	str	r3, [r2, #8]
 800233e:	e0b4      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b08      	cmp	r3, #8
 8002354:	d133      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	0151      	lsls	r1, r2, #5
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	440a      	add	r2, r1
 800236c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	3361      	adds	r3, #97	; 0x61
 8002384:	2205      	movs	r2, #5
 8002386:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	461a      	mov	r2, r3
 8002396:	2310      	movs	r3, #16
 8002398:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	461a      	mov	r2, r3
 80023a8:	2308      	movs	r3, #8
 80023aa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 f89b 	bl	80064f2 <USB_HC_Halt>
 80023bc:	e075      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d4:	d134      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	0151      	lsls	r1, r2, #5
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	440a      	add	r2, r1
 80023ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	3361      	adds	r3, #97	; 0x61
 8002404:	2208      	movs	r2, #8
 8002406:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4413      	add	r3, r2
 8002410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f85a 	bl	80064f2 <USB_HC_Halt>
 800243e:	e034      	b.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d129      	bne.n	80024aa <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	0151      	lsls	r1, r2, #5
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	440a      	add	r2, r1
 800246c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3361      	adds	r3, #97	; 0x61
 8002484:	2206      	movs	r2, #6
 8002486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f82d 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	461a      	mov	r2, r3
 80024a6:	2380      	movs	r3, #128	; 0x80
 80024a8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c0:	d122      	bne.n	8002508 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	0151      	lsls	r1, r2, #5
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	440a      	add	r2, r1
 80024d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f004 f800 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fe:	461a      	mov	r2, r3
 8002500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002504:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002506:	e2ba      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	f040 811b 	bne.w	8002756 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d019      	beq.n	800255c <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3348      	adds	r3, #72	; 0x48
 8002536:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	0159      	lsls	r1, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	440b      	add	r3, r1
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800254a:	1ad2      	subs	r2, r2, r3
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	202c      	movs	r0, #44	; 0x2c
 8002552:	fb00 f303 	mul.w	r3, r0, r3
 8002556:	440b      	add	r3, r1
 8002558:	3350      	adds	r3, #80	; 0x50
 800255a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3361      	adds	r3, #97	; 0x61
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	461a      	mov	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	333f      	adds	r3, #63	; 0x3f
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333f      	adds	r3, #63	; 0x3f
 80025b4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d121      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	0151      	lsls	r1, r2, #5
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	440a      	add	r2, r1
 80025d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 ff84 	bl	80064f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2310      	movs	r3, #16
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	e066      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333f      	adds	r3, #63	; 0x3f
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d127      	bne.n	8002662 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	0151      	lsls	r1, r2, #5
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	440a      	add	r2, r1
 8002628:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002630:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	3360      	adds	r3, #96	; 0x60
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	b2d9      	uxtb	r1, r3
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	202c      	movs	r0, #44	; 0x2c
 800264e:	fb00 f303 	mul.w	r3, r0, r3
 8002652:	4413      	add	r3, r2
 8002654:	3360      	adds	r3, #96	; 0x60
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f006 f906 	bl	800886c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002660:	e034      	b.n	80026cc <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	333f      	adds	r3, #63	; 0x3f
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d12a      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3354      	adds	r3, #84	; 0x54
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	3354      	adds	r3, #84	; 0x54
 80026ac:	4602      	mov	r2, r0
 80026ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	b2d9      	uxtb	r1, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	202c      	movs	r0, #44	; 0x2c
 80026ba:	fb00 f303 	mul.w	r3, r0, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3360      	adds	r3, #96	; 0x60
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f006 f8d0 	bl	800886c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d12b      	bne.n	800272c <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3348      	adds	r3, #72	; 0x48
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	202c      	movs	r0, #44	; 0x2c
 80026ea:	fb00 f202 	mul.w	r2, r0, r2
 80026ee:	440a      	add	r2, r1
 80026f0:	3240      	adds	r2, #64	; 0x40
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 81be 	beq.w	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	3354      	adds	r3, #84	; 0x54
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	f083 0301 	eor.w	r3, r3, #1
 8002716:	b2d8      	uxtb	r0, r3
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	3354      	adds	r3, #84	; 0x54
 8002726:	4602      	mov	r2, r0
 8002728:	701a      	strb	r2, [r3, #0]
}
 800272a:	e1a8      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	212c      	movs	r1, #44	; 0x2c
 8002732:	fb01 f303 	mul.w	r3, r1, r3
 8002736:	4413      	add	r3, r2
 8002738:	3354      	adds	r3, #84	; 0x54
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f083 0301 	eor.w	r3, r3, #1
 8002740:	b2d8      	uxtb	r0, r3
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3354      	adds	r3, #84	; 0x54
 8002750:	4602      	mov	r2, r0
 8002752:	701a      	strb	r2, [r3, #0]
}
 8002754:	e193      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	f040 8106 	bne.w	800297a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	440a      	add	r2, r1
 8002784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002788:	f023 0302 	bic.w	r3, r3, #2
 800278c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3361      	adds	r3, #97	; 0x61
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d109      	bne.n	80027b6 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	212c      	movs	r1, #44	; 0x2c
 80027a8:	fb01 f303 	mul.w	r3, r1, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	3360      	adds	r3, #96	; 0x60
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e0c9      	b.n	800294a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	212c      	movs	r1, #44	; 0x2c
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3361      	adds	r3, #97	; 0x61
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d109      	bne.n	80027de <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3360      	adds	r3, #96	; 0x60
 80027d8:	2205      	movs	r2, #5
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e0b5      	b.n	800294a <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	212c      	movs	r1, #44	; 0x2c
 80027e4:	fb01 f303 	mul.w	r3, r1, r3
 80027e8:	4413      	add	r3, r2
 80027ea:	3361      	adds	r3, #97	; 0x61
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d009      	beq.n	8002806 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3361      	adds	r3, #97	; 0x61
 8002800:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002802:	2b08      	cmp	r3, #8
 8002804:	d150      	bne.n	80028a8 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	335c      	adds	r3, #92	; 0x5c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	202c      	movs	r0, #44	; 0x2c
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	440b      	add	r3, r1
 8002824:	335c      	adds	r3, #92	; 0x5c
 8002826:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	335c      	adds	r3, #92	; 0x5c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d912      	bls.n	8002862 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	335c      	adds	r3, #92	; 0x5c
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3360      	adds	r3, #96	; 0x60
 800285c:	2204      	movs	r2, #4
 800285e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002860:	e073      	b.n	800294a <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	3360      	adds	r3, #96	; 0x60
 8002870:	2202      	movs	r2, #2
 8002872:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800288a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002892:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028a6:	e050      	b.n	800294a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d122      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3360      	adds	r3, #96	; 0x60
 80028ca:	2202      	movs	r2, #2
 80028cc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028e4:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ec:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	461a      	mov	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e023      	b.n	800294a <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	212c      	movs	r1, #44	; 0x2c
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	3361      	adds	r3, #97	; 0x61
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b07      	cmp	r3, #7
 8002914:	d119      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	440b      	add	r3, r1
 8002934:	335c      	adds	r3, #92	; 0x5c
 8002936:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3360      	adds	r3, #96	; 0x60
 8002946:	2204      	movs	r2, #4
 8002948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	461a      	mov	r2, r3
 8002958:	2302      	movs	r3, #2
 800295a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	b2d9      	uxtb	r1, r3
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	202c      	movs	r0, #44	; 0x2c
 8002966:	fb00 f303 	mul.w	r3, r0, r3
 800296a:	4413      	add	r3, r2
 800296c:	3360      	adds	r3, #96	; 0x60
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f005 ff7a 	bl	800886c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002978:	e081      	b.n	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b10      	cmp	r3, #16
 800298e:	d176      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	333f      	adds	r3, #63	; 0x3f
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d121      	bne.n	80029e8 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	335c      	adds	r3, #92	; 0x5c
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	0151      	lsls	r1, r2, #5
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	440a      	add	r2, r1
 80029cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fd86 	bl	80064f2 <USB_HC_Halt>
 80029e6:	e041      	b.n	8002a6c <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	333f      	adds	r3, #63	; 0x3f
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d009      	beq.n	8002a10 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	333f      	adds	r3, #63	; 0x3f
 8002a0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d12d      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d120      	bne.n	8002a6c <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3361      	adds	r3, #97	; 0x61
 8002a38:	2203      	movs	r2, #3
 8002a3a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	0151      	lsls	r1, r2, #5
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	440a      	add	r2, r1
 8002a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fd43 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	6093      	str	r3, [r2, #8]
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d119      	bne.n	8002aea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2304      	movs	r3, #4
 8002ac6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	0151      	lsls	r1, r2, #5
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	440a      	add	r2, r1
 8002ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002ae8:	e3ca      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b20      	cmp	r3, #32
 8002afe:	d13e      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2320      	movs	r3, #32
 8002b10:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	333d      	adds	r3, #61	; 0x3d
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 83ac 	bne.w	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	333d      	adds	r3, #61	; 0x3d
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	212c      	movs	r1, #44	; 0x2c
 8002b40:	fb01 f303 	mul.w	r3, r1, r3
 8002b44:	4413      	add	r3, r2
 8002b46:	3360      	adds	r3, #96	; 0x60
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fcbb 	bl	80064f2 <USB_HC_Halt>
}
 8002b7c:	e380      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b94:	d122      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	0151      	lsls	r1, r2, #5
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fc96 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd8:	6093      	str	r3, [r2, #8]
}
 8002bda:	e351      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d150      	bne.n	8002c94 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d111      	bne.n	8002c3e <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	333d      	adds	r3, #61	; 0x3d
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2340      	movs	r3, #64	; 0x40
 8002c3c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	0151      	lsls	r1, r2, #5
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	440a      	add	r2, r1
 8002c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fc42 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	2201      	movs	r2, #1
 8002c90:	701a      	strb	r2, [r3, #0]
}
 8002c92:	e2f5      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d13c      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3361      	adds	r3, #97	; 0x61
 8002cb8:	2204      	movs	r2, #4
 8002cba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	212c      	movs	r1, #44	; 0x2c
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	333d      	adds	r3, #61	; 0x3d
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	212c      	movs	r1, #44	; 0x2c
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	335c      	adds	r3, #92	; 0x5c
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	0151      	lsls	r1, r2, #5
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f003 fbf1 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	6093      	str	r3, [r2, #8]
}
 8002d22:	e2ad      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d12a      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2308      	movs	r3, #8
 8002d4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d66:	f043 0302 	orr.w	r3, r3, #2
 8002d6a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 fbbb 	bl	80064f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3361      	adds	r3, #97	; 0x61
 8002d8a:	2205      	movs	r2, #5
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	e277      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b10      	cmp	r3, #16
 8002da4:	d150      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	335c      	adds	r3, #92	; 0x5c
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3361      	adds	r3, #97	; 0x61
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	333d      	adds	r3, #61	; 0x3d
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d112      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	333c      	adds	r3, #60	; 0x3c
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	333d      	adds	r3, #61	; 0x3d
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	0151      	lsls	r1, r2, #5
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	440a      	add	r2, r1
 8002e1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1e:	f043 0302 	orr.w	r3, r3, #2
 8002e22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fb5f 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
}
 8002e46:	e21b      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d174      	bne.n	8002f48 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d121      	bne.n	8002eaa <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	2206      	movs	r2, #6
 8002e76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	0151      	lsls	r1, r2, #5
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	440a      	add	r2, r1
 8002e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e92:	f043 0302 	orr.w	r3, r3, #2
 8002e96:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fb25 	bl	80064f2 <USB_HC_Halt>
 8002ea8:	e044      	b.n	8002f34 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	202c      	movs	r0, #44	; 0x2c
 8002ec2:	fb00 f303 	mul.w	r3, r0, r3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	335c      	adds	r3, #92	; 0x5c
 8002eca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d920      	bls.n	8002f22 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	335c      	adds	r3, #92	; 0x5c
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2204      	movs	r2, #4
 8002f02:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	b2d9      	uxtb	r1, r3
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	202c      	movs	r0, #44	; 0x2c
 8002f0e:	fb00 f303 	mul.w	r3, r0, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	3360      	adds	r3, #96	; 0x60
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f005 fca6 	bl	800886c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f20:	e008      	b.n	8002f34 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3360      	adds	r3, #96	; 0x60
 8002f30:	2202      	movs	r2, #2
 8002f32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	6093      	str	r3, [r2, #8]
}
 8002f46:	e19b      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d134      	bne.n	8002fca <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	0151      	lsls	r1, r2, #5
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	440a      	add	r2, r1
 8002f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f7a:	f043 0302 	orr.w	r3, r3, #2
 8002f7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 fab1 	bl	80064f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3361      	adds	r3, #97	; 0x61
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	701a      	strb	r2, [r3, #0]
}
 8002fc8:	e15a      	b.n	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	015a      	lsls	r2, r3, #5
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	f040 814f 	bne.w	8003280 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	0151      	lsls	r1, r2, #5
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	440a      	add	r2, r1
 8002ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ffc:	f023 0302 	bic.w	r3, r3, #2
 8003000:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3361      	adds	r3, #97	; 0x61
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d17d      	bne.n	8003112 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3360      	adds	r3, #96	; 0x60
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	333f      	adds	r3, #63	; 0x3f
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d00a      	beq.n	8003052 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	333f      	adds	r3, #63	; 0x3f
 800304a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800304c:	2b03      	cmp	r3, #3
 800304e:	f040 8100 	bne.w	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d113      	bne.n	8003082 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3355      	adds	r3, #85	; 0x55
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	f083 0301 	eor.w	r3, r3, #1
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3355      	adds	r3, #85	; 0x55
 800307e:	4602      	mov	r2, r0
 8003080:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b01      	cmp	r3, #1
 8003088:	f040 80e3 	bne.w	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	334c      	adds	r3, #76	; 0x4c
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80d8 	beq.w	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	334c      	adds	r3, #76	; 0x4c
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	202c      	movs	r0, #44	; 0x2c
 80030b8:	fb00 f202 	mul.w	r2, r0, r2
 80030bc:	440a      	add	r2, r1
 80030be:	3240      	adds	r2, #64	; 0x40
 80030c0:	8812      	ldrh	r2, [r2, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	3b01      	subs	r3, #1
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	202c      	movs	r0, #44	; 0x2c
 80030cc:	fb00 f202 	mul.w	r2, r0, r2
 80030d0:	440a      	add	r2, r1
 80030d2:	3240      	adds	r2, #64	; 0x40
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b5 	beq.w	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	212c      	movs	r1, #44	; 0x2c
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3355      	adds	r3, #85	; 0x55
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2d8      	uxtb	r0, r3
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3355      	adds	r3, #85	; 0x55
 800310c:	4602      	mov	r2, r0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e09f      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3361      	adds	r3, #97	; 0x61
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d109      	bne.n	800313a <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	212c      	movs	r1, #44	; 0x2c
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	4413      	add	r3, r2
 8003132:	3360      	adds	r3, #96	; 0x60
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e08b      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3361      	adds	r3, #97	; 0x61
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d109      	bne.n	8003162 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3360      	adds	r3, #96	; 0x60
 800315c:	2202      	movs	r2, #2
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e077      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3361      	adds	r3, #97	; 0x61
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d109      	bne.n	800318a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3360      	adds	r3, #96	; 0x60
 8003184:	2205      	movs	r2, #5
 8003186:	701a      	strb	r2, [r3, #0]
 8003188:	e063      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	212c      	movs	r1, #44	; 0x2c
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	3361      	adds	r3, #97	; 0x61
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d009      	beq.n	80031b2 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	3361      	adds	r3, #97	; 0x61
 80031ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031ae:	2b08      	cmp	r3, #8
 80031b0:	d14f      	bne.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	212c      	movs	r1, #44	; 0x2c
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	4413      	add	r3, r2
 80031be:	335c      	adds	r3, #92	; 0x5c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	202c      	movs	r0, #44	; 0x2c
 80031ca:	fb00 f303 	mul.w	r3, r0, r3
 80031ce:	440b      	add	r3, r1
 80031d0:	335c      	adds	r3, #92	; 0x5c
 80031d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	335c      	adds	r3, #92	; 0x5c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d912      	bls.n	800320e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	335c      	adds	r3, #92	; 0x5c
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3360      	adds	r3, #96	; 0x60
 8003208:	2204      	movs	r2, #4
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e021      	b.n	8003252 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	212c      	movs	r1, #44	; 0x2c
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	4413      	add	r3, r2
 800321a:	3360      	adds	r3, #96	; 0x60
 800321c:	2202      	movs	r2, #2
 800321e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003236:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800323e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	2302      	movs	r3, #2
 8003262:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	b2d9      	uxtb	r1, r3
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	202c      	movs	r0, #44	; 0x2c
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	4413      	add	r3, r2
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f005 faf6 	bl	800886c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003280:	bf00      	nop
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b08a      	sub	sp, #40	; 0x28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	0c5b      	lsrs	r3, r3, #17
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032bc:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d004      	beq.n	80032ce <HCD_RXQLVL_IRQHandler+0x46>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2b05      	cmp	r3, #5
 80032c8:	f000 80a9 	beq.w	800341e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032cc:	e0aa      	b.n	8003424 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a6 	beq.w	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3344      	adds	r3, #68	; 0x44
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 809b 	beq.w	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	212c      	movs	r1, #44	; 0x2c
 80032f2:	fb01 f303 	mul.w	r3, r1, r3
 80032f6:	4413      	add	r3, r2
 80032f8:	3350      	adds	r3, #80	; 0x50
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	441a      	add	r2, r3
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	202c      	movs	r0, #44	; 0x2c
 8003306:	fb00 f303 	mul.w	r3, r0, r3
 800330a:	440b      	add	r3, r1
 800330c:	334c      	adds	r3, #76	; 0x4c
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d87a      	bhi.n	800340a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6818      	ldr	r0, [r3, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3344      	adds	r3, #68	; 0x44
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	b292      	uxth	r2, r2
 800332c:	4619      	mov	r1, r3
 800332e:	f002 fc59 	bl	8005be4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	3344      	adds	r3, #68	; 0x44
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	441a      	add	r2, r3
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	202c      	movs	r0, #44	; 0x2c
 800334c:	fb00 f303 	mul.w	r3, r0, r3
 8003350:	440b      	add	r3, r1
 8003352:	3344      	adds	r3, #68	; 0x44
 8003354:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3350      	adds	r3, #80	; 0x50
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	441a      	add	r2, r3
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	202c      	movs	r0, #44	; 0x2c
 8003370:	fb00 f303 	mul.w	r3, r0, r3
 8003374:	440b      	add	r3, r1
 8003376:	3350      	adds	r3, #80	; 0x50
 8003378:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	0cdb      	lsrs	r3, r3, #19
 800338a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3340      	adds	r3, #64	; 0x40
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d13c      	bne.n	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d039      	beq.n	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033c4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033cc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3354      	adds	r3, #84	; 0x54
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	b2d8      	uxtb	r0, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3354      	adds	r3, #84	; 0x54
 8003404:	4602      	mov	r2, r0
 8003406:	701a      	strb	r2, [r3, #0]
      break;
 8003408:	e00b      	b.n	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3360      	adds	r3, #96	; 0x60
 8003418:	2204      	movs	r2, #4
 800341a:	701a      	strb	r2, [r3, #0]
      break;
 800341c:	e001      	b.n	8003422 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003422:	bf00      	nop
  }
}
 8003424:	bf00      	nop
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003458:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b02      	cmp	r3, #2
 8003462:	d10b      	bne.n	800347c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f005 f9e0 	bl	8008834 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f043 0302 	orr.w	r3, r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d132      	bne.n	80034ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d126      	bne.n	80034e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d113      	bne.n	80034c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034aa:	d106      	bne.n	80034ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 fcf6 	bl	8005ea4 <USB_InitFSLSPClkSel>
 80034b8:	e011      	b.n	80034de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fcef 	bl	8005ea4 <USB_InitFSLSPClkSel>
 80034c6:	e00a      	b.n	80034de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d6:	461a      	mov	r2, r3
 80034d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f005 f9d2 	bl	8008888 <HAL_HCD_PortEnabled_Callback>
 80034e4:	e002      	b.n	80034ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 f9dc 	bl	80088a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d103      	bne.n	80034fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f043 0320 	orr.w	r3, r3, #32
 80034fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003504:	461a      	mov	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6013      	str	r3, [r2, #0]
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
	...

08003514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e12b      	b.n	800377e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fd14 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003578:	f001 f9fc 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 800357c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	4a81      	ldr	r2, [pc, #516]	; (8003788 <HAL_I2C_Init+0x274>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d807      	bhi.n	8003598 <HAL_I2C_Init+0x84>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a80      	ldr	r2, [pc, #512]	; (800378c <HAL_I2C_Init+0x278>)
 800358c:	4293      	cmp	r3, r2
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e006      	b.n	80035a6 <HAL_I2C_Init+0x92>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a7d      	ldr	r2, [pc, #500]	; (8003790 <HAL_I2C_Init+0x27c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e0e7      	b.n	800377e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4a78      	ldr	r2, [pc, #480]	; (8003794 <HAL_I2C_Init+0x280>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9b      	lsrs	r3, r3, #18
 80035b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_I2C_Init+0x274>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d802      	bhi.n	80035e8 <HAL_I2C_Init+0xd4>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3301      	adds	r3, #1
 80035e6:	e009      	b.n	80035fc <HAL_I2C_Init+0xe8>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	4a69      	ldr	r2, [pc, #420]	; (8003798 <HAL_I2C_Init+0x284>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	099b      	lsrs	r3, r3, #6
 80035fa:	3301      	adds	r3, #1
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	6812      	ldr	r2, [r2, #0]
 8003600:	430b      	orrs	r3, r1
 8003602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800360e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	495c      	ldr	r1, [pc, #368]	; (8003788 <HAL_I2C_Init+0x274>)
 8003618:	428b      	cmp	r3, r1
 800361a:	d819      	bhi.n	8003650 <HAL_I2C_Init+0x13c>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e59      	subs	r1, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fbb1 f3f3 	udiv	r3, r1, r3
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003630:	400b      	ands	r3, r1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HAL_I2C_Init+0x138>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1e59      	subs	r1, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fbb1 f3f3 	udiv	r3, r1, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	e051      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 800364c:	2304      	movs	r3, #4
 800364e:	e04f      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <HAL_I2C_Init+0x168>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1e58      	subs	r0, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6859      	ldr	r1, [r3, #4]
 8003660:	460b      	mov	r3, r1
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	440b      	add	r3, r1
 8003666:	fbb0 f3f3 	udiv	r3, r0, r3
 800366a:	3301      	adds	r3, #1
 800366c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e012      	b.n	80036a2 <HAL_I2C_Init+0x18e>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1e58      	subs	r0, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	0099      	lsls	r1, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_I2C_Init+0x196>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e022      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10e      	bne.n	80036d0 <HAL_I2C_Init+0x1bc>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1e58      	subs	r0, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6859      	ldr	r1, [r3, #4]
 80036ba:	460b      	mov	r3, r1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	440b      	add	r3, r1
 80036c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	e00f      	b.n	80036f0 <HAL_I2C_Init+0x1dc>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	6809      	ldr	r1, [r1, #0]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800371e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6911      	ldr	r1, [r2, #16]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	4311      	orrs	r1, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	430b      	orrs	r3, r1
 8003732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	000186a0 	.word	0x000186a0
 800378c:	001e847f 	.word	0x001e847f
 8003790:	003d08ff 	.word	0x003d08ff
 8003794:	431bde83 	.word	0x431bde83
 8003798:	10624dd3 	.word	0x10624dd3

0800379c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e128      	b.n	8003a00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a90      	ldr	r2, [pc, #576]	; (8003a08 <HAL_I2S_Init+0x26c>)
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fd fc15 	bl	8000ff8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037e4:	f023 030f 	bic.w	r3, r3, #15
 80037e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2202      	movs	r2, #2
 80037f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d060      	beq.n	80038bc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003802:	2310      	movs	r3, #16
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	e001      	b.n	800380c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b20      	cmp	r3, #32
 8003812:	d802      	bhi.n	800381a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800381a:	2001      	movs	r0, #1
 800381c:	f001 f9e6 	bl	8004bec <HAL_RCCEx_GetPeriphCLKFreq>
 8003820:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382a:	d125      	bne.n	8003878 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d010      	beq.n	8003856 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	fbb2 f2f3 	udiv	r2, r2, r3
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	461a      	mov	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	3305      	adds	r3, #5
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e01f      	b.n	8003896 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	461a      	mov	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003872:	3305      	adds	r3, #5
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	e00e      	b.n	8003896 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	3305      	adds	r3, #5
 8003894:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4a5c      	ldr	r2, [pc, #368]	; (8003a0c <HAL_I2S_Init+0x270>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	08db      	lsrs	r3, r3, #3
 80038a0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038bc:	2302      	movs	r3, #2
 80038be:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d902      	bls.n	80038d0 <HAL_I2S_Init+0x134>
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	2bff      	cmp	r3, #255	; 0xff
 80038ce:	d907      	bls.n	80038e0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d4:	f043 0210 	orr.w	r2, r3, #16
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e08f      	b.n	8003a00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	ea42 0103 	orr.w	r1, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038fe:	f023 030f 	bic.w	r3, r3, #15
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6851      	ldr	r1, [r2, #4]
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6892      	ldr	r2, [r2, #8]
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6992      	ldr	r2, [r2, #24]
 8003916:	430a      	orrs	r2, r1
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003922:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d161      	bne.n	80039f0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a38      	ldr	r2, [pc, #224]	; (8003a10 <HAL_I2S_Init+0x274>)
 8003930:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a37      	ldr	r2, [pc, #220]	; (8003a14 <HAL_I2S_Init+0x278>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2S_Init+0x1a4>
 800393c:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_I2S_Init+0x27c>)
 800393e:	e001      	b.n	8003944 <HAL_I2S_Init+0x1a8>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	4932      	ldr	r1, [pc, #200]	; (8003a14 <HAL_I2S_Init+0x278>)
 800394c:	428a      	cmp	r2, r1
 800394e:	d101      	bne.n	8003954 <HAL_I2S_Init+0x1b8>
 8003950:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <HAL_I2S_Init+0x27c>)
 8003952:	e001      	b.n	8003958 <HAL_I2S_Init+0x1bc>
 8003954:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003958:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800395c:	f023 030f 	bic.w	r3, r3, #15
 8003960:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_I2S_Init+0x278>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_I2S_Init+0x1d4>
 800396c:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <HAL_I2S_Init+0x27c>)
 800396e:	e001      	b.n	8003974 <HAL_I2S_Init+0x1d8>
 8003970:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003974:	2202      	movs	r2, #2
 8003976:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <HAL_I2S_Init+0x278>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_I2S_Init+0x1ea>
 8003982:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_I2S_Init+0x27c>)
 8003984:	e001      	b.n	800398a <HAL_I2S_Init+0x1ee>
 8003986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003996:	d003      	beq.n	80039a0 <HAL_I2S_Init+0x204>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80039a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e001      	b.n	80039ac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039b6:	4313      	orrs	r3, r2
 80039b8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039c0:	4313      	orrs	r3, r2
 80039c2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039ca:	4313      	orrs	r3, r2
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	897b      	ldrh	r3, [r7, #10]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039d8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <HAL_I2S_Init+0x278>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_I2S_Init+0x24c>
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_I2S_Init+0x27c>)
 80039e6:	e001      	b.n	80039ec <HAL_I2S_Init+0x250>
 80039e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ec:	897a      	ldrh	r2, [r7, #10]
 80039ee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3720      	adds	r7, #32
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	08003b13 	.word	0x08003b13
 8003a0c:	cccccccd 	.word	0xcccccccd
 8003a10:	08003c29 	.word	0x08003c29
 8003a14:	40003800 	.word	0x40003800
 8003a18:	40003400 	.word	0x40003400

08003a1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c9a      	adds	r2, r3, #2
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10e      	bne.n	8003aac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ffb8 	bl	8003a1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10e      	bne.n	8003b0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff93 	bl	8003a30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d13a      	bne.n	8003ba4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d109      	bne.n	8003b4c <I2S_IRQHandler+0x3a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d102      	bne.n	8003b4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffb4 	bl	8003ab4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d126      	bne.n	8003ba4 <I2S_IRQHandler+0x92>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 0320 	and.w	r3, r3, #32
 8003b60:	2b20      	cmp	r3, #32
 8003b62:	d11f      	bne.n	8003ba4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f043 0202 	orr.w	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ff50 	bl	8003a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d136      	bne.n	8003c1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d109      	bne.n	8003bce <I2S_IRQHandler+0xbc>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d102      	bne.n	8003bce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff45 	bl	8003a58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d122      	bne.n	8003c1e <I2S_IRQHandler+0x10c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b20      	cmp	r3, #32
 8003be4:	d11b      	bne.n	8003c1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff ff13 	bl	8003a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4aa2      	ldr	r2, [pc, #648]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003c42:	4ba2      	ldr	r3, [pc, #648]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c44:	e001      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003c46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a9b      	ldr	r2, [pc, #620]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d101      	bne.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003c60:	4b9a      	ldr	r3, [pc, #616]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c62:	e001      	b.n	8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003c64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d004      	beq.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8099 	bne.w	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d107      	bne.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f925 	bl	8003ee4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d107      	bne.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f9c8 	bl	8004044 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d13a      	bne.n	8003d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d035      	beq.n	8003d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a7e      	ldr	r2, [pc, #504]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003cd2:	4b7e      	ldr	r3, [pc, #504]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003cd4:	e001      	b.n	8003cda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4979      	ldr	r1, [pc, #484]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ce2:	428b      	cmp	r3, r1
 8003ce4:	d101      	bne.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ce6:	4b79      	ldr	r3, [pc, #484]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ce8:	e001      	b.n	8003cee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f043 0202 	orr.w	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fe88 	bl	8003a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0308 	and.w	r3, r3, #8
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	f040 80be 	bne.w	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80b8 	beq.w	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a59      	ldr	r2, [pc, #356]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003d66:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d68:	e001      	b.n	8003d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4954      	ldr	r1, [pc, #336]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d76:	428b      	cmp	r3, r1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003d7a:	4b54      	ldr	r3, [pc, #336]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003d7c:	e001      	b.n	8003d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60bb      	str	r3, [r7, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fe4a 	bl	8003a44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003db0:	e084      	b.n	8003ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d107      	bne.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8be 	bl	8003f48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d107      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8fd 	bl	8003fe0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d12f      	bne.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d02a      	beq.n	8003e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e08:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a2e      	ldr	r2, [pc, #184]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003e14:	4b2d      	ldr	r3, [pc, #180]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e16:	e001      	b.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003e18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4929      	ldr	r1, [pc, #164]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d101      	bne.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003e28:	4b28      	ldr	r3, [pc, #160]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e2a:	e001      	b.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003e2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e34:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f043 0202 	orr.w	r2, r3, #2
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fdfa 	bl	8003a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d131      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f003 0320 	and.w	r3, r3, #32
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d02c      	beq.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e70:	e001      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4912      	ldr	r1, [pc, #72]	; (8003ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e7e:	428b      	cmp	r3, r1
 8003e80:	d101      	bne.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003e82:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e84:	e001      	b.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e9e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f043 0204 	orr.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fdc5 	bl	8003a44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eba:	e000      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ebc:	bf00      	nop
}
 8003ebe:	bf00      	nop
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40003800 	.word	0x40003800
 8003ecc:	40003400 	.word	0x40003400

08003ed0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	1c99      	adds	r1, r3, #2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ef6:	881a      	ldrh	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d113      	bne.n	8003f3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ffc9 	bl	8003ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	1c99      	adds	r1, r3, #2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6251      	str	r1, [r2, #36]	; 0x24
 8003f5a:	8819      	ldrh	r1, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <I2SEx_TxISR_I2SExt+0x22>
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <I2SEx_TxISR_I2SExt+0x94>)
 8003f68:	e001      	b.n	8003f6e <I2SEx_TxISR_I2SExt+0x26>
 8003f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f6e:	460a      	mov	r2, r1
 8003f70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d121      	bne.n	8003fce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <I2SEx_TxISR_I2SExt+0x50>
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <I2SEx_TxISR_I2SExt+0x94>)
 8003f96:	e001      	b.n	8003f9c <I2SEx_TxISR_I2SExt+0x54>
 8003f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	490d      	ldr	r1, [pc, #52]	; (8003fd8 <I2SEx_TxISR_I2SExt+0x90>)
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	d101      	bne.n	8003fac <I2SEx_TxISR_I2SExt+0x64>
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <I2SEx_TxISR_I2SExt+0x94>)
 8003faa:	e001      	b.n	8003fb0 <I2SEx_TxISR_I2SExt+0x68>
 8003fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d106      	bne.n	8003fce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ff81 	bl	8003ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40003800 	.word	0x40003800
 8003fdc:	40003400 	.word	0x40003400

08003fe0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68d8      	ldr	r0, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	1c99      	adds	r1, r3, #2
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ff8:	b282      	uxth	r2, r0
 8003ffa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d113      	bne.n	800403c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004022:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff ff4a 	bl	8003ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <I2SEx_RxISR_I2SExt+0x90>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <I2SEx_RxISR_I2SExt+0x16>
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004058:	e001      	b.n	800405e <I2SEx_RxISR_I2SExt+0x1a>
 800405a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405e:	68d8      	ldr	r0, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	1c99      	adds	r1, r3, #2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	62d1      	str	r1, [r2, #44]	; 0x2c
 800406a:	b282      	uxth	r2, r0
 800406c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004072:	b29b      	uxth	r3, r3
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d121      	bne.n	80040ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a12      	ldr	r2, [pc, #72]	; (80040d4 <I2SEx_RxISR_I2SExt+0x90>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <I2SEx_RxISR_I2SExt+0x50>
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <I2SEx_RxISR_I2SExt+0x94>)
 8004092:	e001      	b.n	8004098 <I2SEx_RxISR_I2SExt+0x54>
 8004094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	490d      	ldr	r1, [pc, #52]	; (80040d4 <I2SEx_RxISR_I2SExt+0x90>)
 80040a0:	428b      	cmp	r3, r1
 80040a2:	d101      	bne.n	80040a8 <I2SEx_RxISR_I2SExt+0x64>
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <I2SEx_RxISR_I2SExt+0x94>)
 80040a6:	e001      	b.n	80040ac <I2SEx_RxISR_I2SExt+0x68>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7ff ff03 	bl	8003ed0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	40003800 	.word	0x40003800
 80040d8:	40003400 	.word	0x40003400

080040dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e264      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d075      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00c      	beq.n	8004120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4ba0      	ldr	r3, [pc, #640]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d10b      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d157      	bne.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e23f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x74>
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a90      	ldr	r2, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a87      	ldr	r2, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004174:	4b84      	ldr	r3, [pc, #528]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fd f96c 	bl	8001470 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fd f968 	bl	8001470 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e204      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xc0>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fd f958 	bl	8001470 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fd f954 	bl	8001470 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1f0      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1c4      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fd f90d 	bl	8001470 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425a:	f7fd f909 	bl	8001470 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1a5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4940      	ldr	r1, [pc, #256]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd f8ec 	bl	8001470 <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fd f8e8 	bl	8001470 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e184      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd f8cc 	bl	8001470 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fd f8c8 	bl	8001470 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e164      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fd f8b5 	bl	8001470 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430a:	f7fd f8b1 	bl	8001470 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e14d      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a0 	beq.w	8004476 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fd f877 	bl	8001470 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e011      	b.n	80043aa <HAL_RCC_OscConfig+0x2ce>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
 8004394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fd f86a 	bl	8001470 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e106      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_RCC_OscConfig+0x4e4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 80043be:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e01c      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x312>
 80043d4:	4b7b      	ldr	r3, [pc, #492]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b78      	ldr	r3, [pc, #480]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a77      	ldr	r2, [pc, #476]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	e00b      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043ee:	4b75      	ldr	r3, [pc, #468]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a74      	ldr	r2, [pc, #464]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	4b72      	ldr	r3, [pc, #456]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d015      	beq.n	800443a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd f82f 	bl	8001470 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd f82b 	bl	8001470 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0c5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RCC_OscConfig+0x33a>
 8004438:	e014      	b.n	8004464 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fd f819 	bl	8001470 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fd f815 	bl	8001470 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0af      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 809b 	beq.w	80045b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	d05c      	beq.n	8004546 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d141      	bne.n	8004518 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fc ffe9 	bl	8001470 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fc ffe5 	bl	8001470 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e081      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4937      	ldr	r1, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fc ffbe 	bl	8001470 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fc ffba 	bl	8001470 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e056      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x41c>
 8004516:	e04e      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fc ffa7 	bl	8001470 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fc ffa3 	bl	8001470 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x44a>
 8004544:	e037      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e032      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d028      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d11a      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004588:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40007000 	.word	0x40007000
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470060 	.word	0x42470060

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cc      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d90c      	bls.n	8004608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b8      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800462a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b50      	ldr	r3, [pc, #320]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	494d      	ldr	r1, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d044      	beq.n	80046ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d003      	beq.n	800468a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e067      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4934      	ldr	r1, [pc, #208]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046bc:	f7fc fed8 	bl	8001470 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fc fed4 	bl	8001470 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 020c 	and.w	r2, r3, #12
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1eb      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d20c      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e032      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	4602      	mov	r2, r0
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	490a      	ldr	r1, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	5ccb      	ldrb	r3, [r1, r3]
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fd50 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00
 8004788:	40023800 	.word	0x40023800
 800478c:	0800d5c8 	.word	0x0800d5c8
 8004790:	20000000 	.word	0x20000000
 8004794:	20000004 	.word	0x20000004

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b0:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x40>
 80047bc:	2b08      	cmp	r3, #8
 80047be:	f200 80bd 	bhi.w	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ca:	e0b7      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047ce:	60bb      	str	r3, [r7, #8]
       break;
 80047d0:	e0b7      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047d4:	60bb      	str	r3, [r7, #8]
      break;
 80047d6:	e0b4      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d8:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e2:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04d      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b58      	ldr	r3, [pc, #352]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	ea02 0800 	and.w	r8, r2, r0
 8004806:	ea03 0901 	and.w	r9, r3, r1
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	014b      	lsls	r3, r1, #5
 8004818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800481c:	0142      	lsls	r2, r0, #5
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	ebb0 0008 	subs.w	r0, r0, r8
 8004826:	eb61 0109 	sbc.w	r1, r1, r9
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004838:	0182      	lsls	r2, r0, #6
 800483a:	1a12      	subs	r2, r2, r0
 800483c:	eb63 0301 	sbc.w	r3, r3, r1
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	00d9      	lsls	r1, r3, #3
 800484a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484e:	00d0      	lsls	r0, r2, #3
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	eb12 0208 	adds.w	r2, r2, r8
 8004858:	eb43 0309 	adc.w	r3, r3, r9
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	0259      	lsls	r1, r3, #9
 8004866:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800486a:	0250      	lsls	r0, r2, #9
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f7fb fd50 	bl	8000320 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e04a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	ea02 0400 	and.w	r4, r2, r0
 80048a2:	ea03 0501 	and.w	r5, r3, r1
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	014b      	lsls	r3, r1, #5
 80048b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048b8:	0142      	lsls	r2, r0, #5
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	1b00      	subs	r0, r0, r4
 80048c0:	eb61 0105 	sbc.w	r1, r1, r5
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	018b      	lsls	r3, r1, #6
 80048ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048d2:	0182      	lsls	r2, r0, #6
 80048d4:	1a12      	subs	r2, r2, r0
 80048d6:	eb63 0301 	sbc.w	r3, r3, r1
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e8:	00d0      	lsls	r0, r2, #3
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	1912      	adds	r2, r2, r4
 80048f0:	eb45 0303 	adc.w	r3, r5, r3
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	0299      	lsls	r1, r3, #10
 80048fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004902:	0290      	lsls	r0, r2, #10
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f7fb fd04 	bl	8000320 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	3301      	adds	r3, #1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	60bb      	str	r3, [r7, #8]
      break;
 800493a:	e002      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800493e:	60bb      	str	r3, [r7, #8]
      break;
 8004940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004942:	68bb      	ldr	r3, [r7, #8]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200

0800495c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000000 	.word	0x20000000

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a9b      	lsrs	r3, r3, #10
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	0800d5d8 	.word	0x0800d5d8

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049a0:	f7ff ffdc 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0b5b      	lsrs	r3, r3, #13
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800d5d8 	.word	0x0800d5d8

080049c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	220f      	movs	r2, #15
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	08db      	lsrs	r3, r3, #3
 80049fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCC_GetClockConfig+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40023c00 	.word	0x40023c00

08004a28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d035      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a50:	4b62      	ldr	r3, [pc, #392]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a56:	f7fc fd0b 	bl	8001470 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a5e:	f7fc fd07 	bl	8001470 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0b0      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a70:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f0      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	019a      	lsls	r2, r3, #6
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	071b      	lsls	r3, r3, #28
 8004a88:	4955      	ldr	r1, [pc, #340]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a90:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a92:	2201      	movs	r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fc fceb 	bl	8001470 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a9e:	f7fc fce7 	bl	8001470 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e090      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8083 	beq.w	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	4b44      	ldr	r3, [pc, #272]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a43      	ldr	r2, [pc, #268]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b41      	ldr	r3, [pc, #260]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3e      	ldr	r2, [pc, #248]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af2:	f7fc fcbd 	bl	8001470 <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fc fcb9 	bl	8001470 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e062      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b18:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d02f      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b36:	4b2a      	ldr	r3, [pc, #168]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b40:	4b29      	ldr	r3, [pc, #164]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b46:	4b28      	ldr	r3, [pc, #160]	; (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b4c:	4a24      	ldr	r2, [pc, #144]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b52:	4b23      	ldr	r3, [pc, #140]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d114      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fc87 	bl	8001470 <HAL_GetTick>
 8004b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b64:	e00a      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b66:	f7fc fc83 	bl	8001470 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e02a      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b7c:	4b18      	ldr	r3, [pc, #96]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ee      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d10d      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004baa:	490d      	ldr	r1, [pc, #52]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	608b      	str	r3, [r1, #8]
 8004bb0:	e005      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004bb2:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	4a0a      	ldr	r2, [pc, #40]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004bbc:	6093      	str	r3, [r2, #8]
 8004bbe:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	4905      	ldr	r1, [pc, #20]	; (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	42470068 	.word	0x42470068
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40007000 	.word	0x40007000
 8004be8:	42470e40 	.word	0x42470e40

08004bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d13e      	bne.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d12f      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004c22:	617b      	str	r3, [r7, #20]
          break;
 8004c24:	e02f      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c26:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c32:	d108      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	e007      	b.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c4e:	4a15      	ldr	r2, [pc, #84]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5c:	099b      	lsrs	r3, r3, #6
 8004c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	fb02 f303 	mul.w	r3, r2, r3
 8004c68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	0f1b      	lsrs	r3, r3, #28
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	617b      	str	r3, [r7, #20]
          break;
 8004c7e:	e002      	b.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
          break;
 8004c84:	bf00      	nop
        }
      }
      break;
 8004c86:	bf00      	nop
    }
  }
  return frequency;
 8004c88:	697b      	ldr	r3, [r7, #20]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	371c      	adds	r7, #28
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	00bb8000 	.word	0x00bb8000
 8004ca0:	007a1200 	.word	0x007a1200
 8004ca4:	00f42400 	.word	0x00f42400

08004ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07b      	b.n	8004db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cca:	d009      	beq.n	8004ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	61da      	str	r2, [r3, #28]
 8004cd2:	e005      	b.n	8004ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fc f9fc 	bl	80010f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d64:	ea42 0103 	orr.w	r1, r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	f003 0104 	and.w	r1, r3, #4
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0210 	and.w	r2, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e041      	b.n	8004e50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f839 	bl	8004e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	3304      	adds	r3, #4
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f000 f9d7 	bl	80051ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d001      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e04e      	b.n	8004f22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d022      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eae:	d01d      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d018      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d013      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00e      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d009      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	; (8004f44 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a18      	ldr	r2, [pc, #96]	; (8004f48 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d111      	bne.n	8004f10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d010      	beq.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0201 	orr.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f0e:	e007      	b.n	8004f20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40010400 	.word	0x40010400
 8004f44:	40014000 	.word	0x40014000
 8004f48:	40001800 	.word	0x40001800

08004f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0202 	mvn.w	r2, #2
 8004f78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8ee 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8e0 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8f1 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0204 	mvn.w	r2, #4
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f8c4 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8b6 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f8c7 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b08      	cmp	r3, #8
 8005008:	d122      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d11b      	bne.n	8005050 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0208 	mvn.w	r2, #8
 8005020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2204      	movs	r2, #4
 8005026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f89a 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 800503c:	e005      	b.n	800504a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f88c 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f89d 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b10      	cmp	r3, #16
 800505c:	d122      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b10      	cmp	r3, #16
 800506a:	d11b      	bne.n	80050a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f06f 0210 	mvn.w	r2, #16
 8005074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2208      	movs	r2, #8
 800507a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f870 	bl	8005170 <HAL_TIM_IC_CaptureCallback>
 8005090:	e005      	b.n	800509e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f862 	bl	800515c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f873 	bl	8005184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f06f 0201 	mvn.w	r2, #1
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb ff0c 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e8:	2b80      	cmp	r3, #128	; 0x80
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f902 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f838 	bl	8005198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b20      	cmp	r3, #32
 8005134:	d10e      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d107      	bne.n	8005154 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f06f 0220 	mvn.w	r2, #32
 800514c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8cc 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a40      	ldr	r2, [pc, #256]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d013      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ca:	d00f      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3d      	ldr	r2, [pc, #244]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d00b      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3c      	ldr	r2, [pc, #240]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d007      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3b      	ldr	r2, [pc, #236]	; (80052cc <TIM_Base_SetConfig+0x120>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d003      	beq.n	80051ec <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3a      	ldr	r2, [pc, #232]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d108      	bne.n	80051fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a2f      	ldr	r2, [pc, #188]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d027      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <TIM_Base_SetConfig+0x118>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d023      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <TIM_Base_SetConfig+0x11c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <TIM_Base_SetConfig+0x120>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a29      	ldr	r2, [pc, #164]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d017      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a28      	ldr	r2, [pc, #160]	; (80052d4 <TIM_Base_SetConfig+0x128>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_Base_SetConfig+0x12c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a26      	ldr	r2, [pc, #152]	; (80052dc <TIM_Base_SetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <TIM_Base_SetConfig+0x134>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <TIM_Base_SetConfig+0x138>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a23      	ldr	r2, [pc, #140]	; (80052e8 <TIM_Base_SetConfig+0x13c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <TIM_Base_SetConfig+0x114>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0xf8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <TIM_Base_SetConfig+0x124>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d103      	bne.n	80052ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	615a      	str	r2, [r3, #20]
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	40001800 	.word	0x40001800
 80052e4:	40001c00 	.word	0x40001c00
 80052e8:	40002000 	.word	0x40002000

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e03f      	b.n	80053a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb ff24 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f929 	bl	80055b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b08a      	sub	sp, #40	; 0x28
 80053b2:	af02      	add	r7, sp, #8
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	603b      	str	r3, [r7, #0]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d17c      	bne.n	80054c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d002      	beq.n	80053da <HAL_UART_Transmit+0x2c>
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e075      	b.n	80054ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_UART_Transmit+0x3e>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e06e      	b.n	80054ca <HAL_UART_Transmit+0x11c>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005402:	f7fc f835 	bl	8001470 <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	88fa      	ldrh	r2, [r7, #6]
 8005412:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541c:	d108      	bne.n	8005430 <HAL_UART_Transmit+0x82>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e003      	b.n	8005438 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005440:	e02a      	b.n	8005498 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2200      	movs	r2, #0
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f000 f840 	bl	80054d2 <UART_WaitOnFlagUntilTimeout>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e036      	b.n	80054ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	3302      	adds	r3, #2
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e007      	b.n	800548a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	3301      	adds	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800549c:	b29b      	uxth	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1cf      	bne.n	8005442 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2200      	movs	r2, #0
 80054aa:	2140      	movs	r1, #64	; 0x40
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 f810 	bl	80054d2 <UART_WaitOnFlagUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e006      	b.n	80054ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b090      	sub	sp, #64	; 0x40
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	603b      	str	r3, [r7, #0]
 80054de:	4613      	mov	r3, r2
 80054e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e2:	e050      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ea:	d04c      	beq.n	8005586 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d007      	beq.n	8005502 <UART_WaitOnFlagUntilTimeout+0x30>
 80054f2:	f7fb ffbd 	bl	8001470 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054fe:	429a      	cmp	r2, r3
 8005500:	d241      	bcs.n	8005586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	330c      	adds	r3, #12
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800550c:	e853 3f00 	ldrex	r3, [r3]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	330c      	adds	r3, #12
 8005520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005522:	637a      	str	r2, [r7, #52]	; 0x34
 8005524:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e5      	bne.n	8005502 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3314      	adds	r3, #20
 800553c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	613b      	str	r3, [r7, #16]
   return(result);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	63bb      	str	r3, [r7, #56]	; 0x38
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3314      	adds	r3, #20
 8005554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005556:	623a      	str	r2, [r7, #32]
 8005558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	69f9      	ldr	r1, [r7, #28]
 800555c:	6a3a      	ldr	r2, [r7, #32]
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	61bb      	str	r3, [r7, #24]
   return(result);
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e5      	bne.n	8005536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e00f      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4013      	ands	r3, r2
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	429a      	cmp	r2, r3
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d09f      	beq.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3740      	adds	r7, #64	; 0x40
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b4:	b09f      	sub	sp, #124	; 0x7c
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c6:	68d9      	ldr	r1, [r3, #12]
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	ea40 0301 	orr.w	r3, r0, r1
 80055d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	431a      	orrs	r2, r3
 80055dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055f4:	f021 010c 	bic.w	r1, r1, #12
 80055f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fe:	430b      	orrs	r3, r1
 8005600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560e:	6999      	ldr	r1, [r3, #24]
 8005610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	ea40 0301 	orr.w	r3, r0, r1
 8005618:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4bc5      	ldr	r3, [pc, #788]	; (8005934 <UART_SetConfig+0x384>)
 8005620:	429a      	cmp	r2, r3
 8005622:	d004      	beq.n	800562e <UART_SetConfig+0x7e>
 8005624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	4bc3      	ldr	r3, [pc, #780]	; (8005938 <UART_SetConfig+0x388>)
 800562a:	429a      	cmp	r2, r3
 800562c:	d103      	bne.n	8005636 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562e:	f7ff f9b5 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 8005632:	6778      	str	r0, [r7, #116]	; 0x74
 8005634:	e002      	b.n	800563c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7ff f99d 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 800563a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005644:	f040 80b6 	bne.w	80057b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564a:	461c      	mov	r4, r3
 800564c:	f04f 0500 	mov.w	r5, #0
 8005650:	4622      	mov	r2, r4
 8005652:	462b      	mov	r3, r5
 8005654:	1891      	adds	r1, r2, r2
 8005656:	6439      	str	r1, [r7, #64]	; 0x40
 8005658:	415b      	adcs	r3, r3
 800565a:	647b      	str	r3, [r7, #68]	; 0x44
 800565c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005660:	1912      	adds	r2, r2, r4
 8005662:	eb45 0303 	adc.w	r3, r5, r3
 8005666:	f04f 0000 	mov.w	r0, #0
 800566a:	f04f 0100 	mov.w	r1, #0
 800566e:	00d9      	lsls	r1, r3, #3
 8005670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005674:	00d0      	lsls	r0, r2, #3
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	1911      	adds	r1, r2, r4
 800567c:	6639      	str	r1, [r7, #96]	; 0x60
 800567e:	416b      	adcs	r3, r5
 8005680:	667b      	str	r3, [r7, #100]	; 0x64
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	1891      	adds	r1, r2, r2
 800568e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005690:	415b      	adcs	r3, r3
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005698:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800569c:	f7fa fe40 	bl	8000320 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4ba5      	ldr	r3, [pc, #660]	; (800593c <UART_SetConfig+0x38c>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011e      	lsls	r6, r3, #4
 80056ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056b0:	461c      	mov	r4, r3
 80056b2:	f04f 0500 	mov.w	r5, #0
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	1891      	adds	r1, r2, r2
 80056bc:	6339      	str	r1, [r7, #48]	; 0x30
 80056be:	415b      	adcs	r3, r3
 80056c0:	637b      	str	r3, [r7, #52]	; 0x34
 80056c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056c6:	1912      	adds	r2, r2, r4
 80056c8:	eb45 0303 	adc.w	r3, r5, r3
 80056cc:	f04f 0000 	mov.w	r0, #0
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	00d9      	lsls	r1, r3, #3
 80056d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056da:	00d0      	lsls	r0, r2, #3
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	1911      	adds	r1, r2, r4
 80056e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80056e4:	416b      	adcs	r3, r5
 80056e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	461a      	mov	r2, r3
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80056f6:	415b      	adcs	r3, r3
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005702:	f7fa fe0d 	bl	8000320 <__aeabi_uldivmod>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4b8c      	ldr	r3, [pc, #560]	; (800593c <UART_SetConfig+0x38c>)
 800570c:	fba3 1302 	umull	r1, r3, r3, r2
 8005710:	095b      	lsrs	r3, r3, #5
 8005712:	2164      	movs	r1, #100	; 0x64
 8005714:	fb01 f303 	mul.w	r3, r1, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	3332      	adds	r3, #50	; 0x32
 800571e:	4a87      	ldr	r2, [pc, #540]	; (800593c <UART_SetConfig+0x38c>)
 8005720:	fba2 2303 	umull	r2, r3, r2, r3
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800572c:	441e      	add	r6, r3
 800572e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005730:	4618      	mov	r0, r3
 8005732:	f04f 0100 	mov.w	r1, #0
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	1894      	adds	r4, r2, r2
 800573c:	623c      	str	r4, [r7, #32]
 800573e:	415b      	adcs	r3, r3
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005746:	1812      	adds	r2, r2, r0
 8005748:	eb41 0303 	adc.w	r3, r1, r3
 800574c:	f04f 0400 	mov.w	r4, #0
 8005750:	f04f 0500 	mov.w	r5, #0
 8005754:	00dd      	lsls	r5, r3, #3
 8005756:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800575a:	00d4      	lsls	r4, r2, #3
 800575c:	4622      	mov	r2, r4
 800575e:	462b      	mov	r3, r5
 8005760:	1814      	adds	r4, r2, r0
 8005762:	653c      	str	r4, [r7, #80]	; 0x50
 8005764:	414b      	adcs	r3, r1
 8005766:	657b      	str	r3, [r7, #84]	; 0x54
 8005768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	461a      	mov	r2, r3
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	1891      	adds	r1, r2, r2
 8005774:	61b9      	str	r1, [r7, #24]
 8005776:	415b      	adcs	r3, r3
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005782:	f7fa fdcd 	bl	8000320 <__aeabi_uldivmod>
 8005786:	4602      	mov	r2, r0
 8005788:	460b      	mov	r3, r1
 800578a:	4b6c      	ldr	r3, [pc, #432]	; (800593c <UART_SetConfig+0x38c>)
 800578c:	fba3 1302 	umull	r1, r3, r3, r2
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	2164      	movs	r1, #100	; 0x64
 8005794:	fb01 f303 	mul.w	r3, r1, r3
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	3332      	adds	r3, #50	; 0x32
 800579e:	4a67      	ldr	r2, [pc, #412]	; (800593c <UART_SetConfig+0x38c>)
 80057a0:	fba2 2303 	umull	r2, r3, r2, r3
 80057a4:	095b      	lsrs	r3, r3, #5
 80057a6:	f003 0207 	and.w	r2, r3, #7
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4432      	add	r2, r6
 80057b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057b2:	e0b9      	b.n	8005928 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b6:	461c      	mov	r4, r3
 80057b8:	f04f 0500 	mov.w	r5, #0
 80057bc:	4622      	mov	r2, r4
 80057be:	462b      	mov	r3, r5
 80057c0:	1891      	adds	r1, r2, r2
 80057c2:	6139      	str	r1, [r7, #16]
 80057c4:	415b      	adcs	r3, r3
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057cc:	1912      	adds	r2, r2, r4
 80057ce:	eb45 0303 	adc.w	r3, r5, r3
 80057d2:	f04f 0000 	mov.w	r0, #0
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	00d9      	lsls	r1, r3, #3
 80057dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057e0:	00d0      	lsls	r0, r2, #3
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	eb12 0804 	adds.w	r8, r2, r4
 80057ea:	eb43 0905 	adc.w	r9, r3, r5
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f04f 0100 	mov.w	r1, #0
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005806:	0082      	lsls	r2, r0, #2
 8005808:	4640      	mov	r0, r8
 800580a:	4649      	mov	r1, r9
 800580c:	f7fa fd88 	bl	8000320 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4b49      	ldr	r3, [pc, #292]	; (800593c <UART_SetConfig+0x38c>)
 8005816:	fba3 2302 	umull	r2, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	011e      	lsls	r6, r3, #4
 800581e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005820:	4618      	mov	r0, r3
 8005822:	f04f 0100 	mov.w	r1, #0
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	1894      	adds	r4, r2, r2
 800582c:	60bc      	str	r4, [r7, #8]
 800582e:	415b      	adcs	r3, r3
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005836:	1812      	adds	r2, r2, r0
 8005838:	eb41 0303 	adc.w	r3, r1, r3
 800583c:	f04f 0400 	mov.w	r4, #0
 8005840:	f04f 0500 	mov.w	r5, #0
 8005844:	00dd      	lsls	r5, r3, #3
 8005846:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800584a:	00d4      	lsls	r4, r2, #3
 800584c:	4622      	mov	r2, r4
 800584e:	462b      	mov	r3, r5
 8005850:	1814      	adds	r4, r2, r0
 8005852:	64bc      	str	r4, [r7, #72]	; 0x48
 8005854:	414b      	adcs	r3, r1
 8005856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	008b      	lsls	r3, r1, #2
 800586c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005870:	0082      	lsls	r2, r0, #2
 8005872:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005876:	f7fa fd53 	bl	8000320 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4b2f      	ldr	r3, [pc, #188]	; (800593c <UART_SetConfig+0x38c>)
 8005880:	fba3 1302 	umull	r1, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2164      	movs	r1, #100	; 0x64
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	3332      	adds	r3, #50	; 0x32
 8005892:	4a2a      	ldr	r2, [pc, #168]	; (800593c <UART_SetConfig+0x38c>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800589e:	441e      	add	r6, r3
 80058a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a2:	4618      	mov	r0, r3
 80058a4:	f04f 0100 	mov.w	r1, #0
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	1894      	adds	r4, r2, r2
 80058ae:	603c      	str	r4, [r7, #0]
 80058b0:	415b      	adcs	r3, r3
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b8:	1812      	adds	r2, r2, r0
 80058ba:	eb41 0303 	adc.w	r3, r1, r3
 80058be:	f04f 0400 	mov.w	r4, #0
 80058c2:	f04f 0500 	mov.w	r5, #0
 80058c6:	00dd      	lsls	r5, r3, #3
 80058c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058cc:	00d4      	lsls	r4, r2, #3
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	eb12 0a00 	adds.w	sl, r2, r0
 80058d6:	eb43 0b01 	adc.w	fp, r3, r1
 80058da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	f04f 0100 	mov.w	r1, #0
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	008b      	lsls	r3, r1, #2
 80058ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058f2:	0082      	lsls	r2, r0, #2
 80058f4:	4650      	mov	r0, sl
 80058f6:	4659      	mov	r1, fp
 80058f8:	f7fa fd12 	bl	8000320 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <UART_SetConfig+0x38c>)
 8005902:	fba3 1302 	umull	r1, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	2164      	movs	r1, #100	; 0x64
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	3332      	adds	r3, #50	; 0x32
 8005914:	4a09      	ldr	r2, [pc, #36]	; (800593c <UART_SetConfig+0x38c>)
 8005916:	fba2 2303 	umull	r2, r3, r2, r3
 800591a:	095b      	lsrs	r3, r3, #5
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4432      	add	r2, r6
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	bf00      	nop
 800592a:	377c      	adds	r7, #124	; 0x7c
 800592c:	46bd      	mov	sp, r7
 800592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005932:	bf00      	nop
 8005934:	40011000 	.word	0x40011000
 8005938:	40011400 	.word	0x40011400
 800593c:	51eb851f 	.word	0x51eb851f

08005940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005940:	b084      	sub	sp, #16
 8005942:	b580      	push	{r7, lr}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	f107 001c 	add.w	r0, r7, #28
 800594e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d122      	bne.n	800599e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800596c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d105      	bne.n	8005992 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9a0 	bl	8005cd8 <USB_CoreReset>
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e01a      	b.n	80059d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f994 	bl	8005cd8 <USB_CoreReset>
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d106      	bne.n	80059c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
 80059c6:	e005      	b.n	80059d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d10b      	bne.n	80059f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f043 0206 	orr.w	r2, r3, #6
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f043 0220 	orr.w	r2, r3, #32
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fe:	b004      	add	sp, #16
 8005a00:	4770      	bx	lr

08005a02 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f043 0201 	orr.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 0201 	bic.w	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d115      	bne.n	8005a94 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a74:	2001      	movs	r0, #1
 8005a76:	f7fb fd07 	bl	8001488 <HAL_Delay>
      ms++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f91a 	bl	8005cba <USB_GetMode>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d01e      	beq.n	8005aca <USB_SetCurrentMode+0x84>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b31      	cmp	r3, #49	; 0x31
 8005a90:	d9f0      	bls.n	8005a74 <USB_SetCurrentMode+0x2e>
 8005a92:	e01a      	b.n	8005aca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d115      	bne.n	8005ac6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7fb fcee 	bl	8001488 <HAL_Delay>
      ms++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f901 	bl	8005cba <USB_GetMode>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <USB_SetCurrentMode+0x84>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b31      	cmp	r3, #49	; 0x31
 8005ac2:	d9f0      	bls.n	8005aa6 <USB_SetCurrentMode+0x60>
 8005ac4:	e001      	b.n	8005aca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e005      	b.n	8005ad6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b32      	cmp	r3, #50	; 0x32
 8005ace:	d101      	bne.n	8005ad4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e000      	b.n	8005ad6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
	...

08005ae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <USB_FlushTxFifo+0x44>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e006      	b.n	8005b18 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d0f1      	beq.n	8005afa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	00030d40 	.word	0x00030d40

08005b28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2210      	movs	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	4a08      	ldr	r2, [pc, #32]	; (8005b64 <USB_FlushRxFifo+0x3c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e006      	b.n	8005b58 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b10      	cmp	r3, #16
 8005b54:	d0f1      	beq.n	8005b3a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	00030d40 	.word	0x00030d40

08005b68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	460b      	mov	r3, r1
 8005b78:	71fb      	strb	r3, [r7, #7]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d123      	bne.n	8005bd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b8e:	88bb      	ldrh	r3, [r7, #4]
 8005b90:	3303      	adds	r3, #3
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b96:	2300      	movs	r3, #0
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	e018      	b.n	8005bce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b9c:	79fb      	ldrb	r3, [r7, #7]
 8005b9e:	031a      	lsls	r2, r3, #12
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba8:	461a      	mov	r2, r3
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d3e2      	bcc.n	8005b9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3724      	adds	r7, #36	; 0x24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b08b      	sub	sp, #44	; 0x2c
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	089b      	lsrs	r3, r3, #2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	e014      	b.n	8005c3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	3301      	adds	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	3301      	adds	r3, #1
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	3301      	adds	r3, #1
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d3e6      	bcc.n	8005c10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c42:	8bfb      	ldrh	r3, [r7, #30]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01e      	beq.n	8005c86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c52:	461a      	mov	r2, r3
 8005c54:	f107 0310 	add.w	r3, r7, #16
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	fa22 f303 	lsr.w	r3, r2, r3
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	701a      	strb	r2, [r3, #0]
      i++;
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	3301      	adds	r3, #1
 8005c72:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	3301      	adds	r3, #1
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c7a:	8bfb      	ldrh	r3, [r7, #30]
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c80:	8bfb      	ldrh	r3, [r7, #30]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ea      	bne.n	8005c5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	372c      	adds	r7, #44	; 0x2c
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <USB_CoreReset+0x60>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e01a      	b.n	8005d2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	daf3      	bge.n	8005ce4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f043 0201 	orr.w	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <USB_CoreReset+0x60>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d901      	bls.n	8005d1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e006      	b.n	8005d2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d0f1      	beq.n	8005d0c <USB_CoreReset+0x34>

  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	00030d40 	.word	0x00030d40

08005d3c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b084      	sub	sp, #16
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	f107 001c 	add.w	r0, r7, #28
 8005d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d58:	461a      	mov	r2, r3
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d10a      	bne.n	8005daa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005da2:	f043 0304 	orr.w	r3, r3, #4
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e014      	b.n	8005dd4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005db8:	f023 0304 	bic.w	r3, r3, #4
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	e009      	b.n	8005dd4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005dce:	f023 0304 	bic.w	r3, r3, #4
 8005dd2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005dd4:	2110      	movs	r1, #16
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fe82 	bl	8005ae0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fea3 	bl	8005b28 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005de2:	2300      	movs	r3, #0
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	e015      	b.n	8005e14 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df4:	461a      	mov	r2, r3
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d3e5      	bcc.n	8005de8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <USB_HostInit+0x154>)
 8005e42:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <USB_HostInit+0x158>)
 8005e48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e4c:	e009      	b.n	8005e62 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2280      	movs	r2, #128	; 0x80
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <USB_HostInit+0x15c>)
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <USB_HostInit+0x160>)
 8005e5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f043 0210 	orr.w	r2, r3, #16
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699a      	ldr	r2, [r3, #24]
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <USB_HostInit+0x164>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e8c:	b004      	add	sp, #16
 8005e8e:	4770      	bx	lr
 8005e90:	01000200 	.word	0x01000200
 8005e94:	00e00300 	.word	0x00e00300
 8005e98:	00600080 	.word	0x00600080
 8005e9c:	004000e0 	.word	0x004000e0
 8005ea0:	a3200008 	.word	0xa3200008

08005ea4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ec2:	f023 0303 	bic.w	r3, r3, #3
 8005ec6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d107      	bne.n	8005ef6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eec:	461a      	mov	r2, r3
 8005eee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005ef2:	6053      	str	r3, [r2, #4]
 8005ef4:	e009      	b.n	8005f0a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d106      	bne.n	8005f0a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f02:	461a      	mov	r2, r3
 8005f04:	f241 7370 	movw	r3, #6000	; 0x1770
 8005f08:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f38:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f46:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f48:	2064      	movs	r0, #100	; 0x64
 8005f4a:	f7fb fa9d 	bl	8001488 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005f5c:	200a      	movs	r0, #10
 8005f5e:	f7fb fa93 	bl	8001488 <HAL_Delay>

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3710      	adds	r7, #16
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f90:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <USB_DriveVbus+0x44>
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d106      	bne.n	8005fb0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005fae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fba:	d109      	bne.n	8005fd0 <USB_DriveVbus+0x64>
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	0c5b      	lsrs	r3, r3, #17
 8005ffc:	f003 0303 	and.w	r3, r3, #3
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	b29b      	uxth	r3, r3
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b088      	sub	sp, #32
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	4608      	mov	r0, r1
 800603a:	4611      	mov	r1, r2
 800603c:	461a      	mov	r2, r3
 800603e:	4603      	mov	r3, r0
 8006040:	70fb      	strb	r3, [r7, #3]
 8006042:	460b      	mov	r3, r1
 8006044:	70bb      	strb	r3, [r7, #2]
 8006046:	4613      	mov	r3, r2
 8006048:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605e:	461a      	mov	r2, r3
 8006060:	f04f 33ff 	mov.w	r3, #4294967295
 8006064:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006066:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800606a:	2b03      	cmp	r3, #3
 800606c:	d87e      	bhi.n	800616c <USB_HC_Init+0x13c>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <USB_HC_Init+0x44>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006085 	.word	0x08006085
 8006078:	0800612f 	.word	0x0800612f
 800607c:	08006085 	.word	0x08006085
 8006080:	080060f1 	.word	0x080060f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	461a      	mov	r2, r3
 8006092:	f240 439d 	movw	r3, #1181	; 0x49d
 8006096:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006098:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	da10      	bge.n	80060c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80060c0:	e057      	b.n	8006172 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d051      	beq.n	8006172 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060ec:	60d3      	str	r3, [r2, #12]
      break;
 80060ee:	e040      	b.n	8006172 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fc:	461a      	mov	r2, r3
 80060fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8006102:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006104:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006108:	2b00      	cmp	r3, #0
 800610a:	da34      	bge.n	8006176 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	78fa      	ldrb	r2, [r7, #3]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	440a      	add	r2, r1
 8006122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800612a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800612c:	e023      	b.n	8006176 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	4413      	add	r3, r2
 8006136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613a:	461a      	mov	r2, r3
 800613c:	f240 2325 	movw	r3, #549	; 0x225
 8006140:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006142:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006146:	2b00      	cmp	r3, #0
 8006148:	da17      	bge.n	800617a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	78fa      	ldrb	r2, [r7, #3]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006164:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006168:	60d3      	str	r3, [r2, #12]
      }
      break;
 800616a:	e006      	b.n	800617a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	77fb      	strb	r3, [r7, #31]
      break;
 8006170:	e004      	b.n	800617c <USB_HC_Init+0x14c>
      break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <USB_HC_Init+0x14c>
      break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <USB_HC_Init+0x14c>
      break;
 800617a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006182:	699a      	ldr	r2, [r3, #24]
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	2101      	movs	r1, #1
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	6939      	ldr	r1, [r7, #16]
 8006192:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006196:	4313      	orrs	r3, r2
 8006198:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80061a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da03      	bge.n	80061b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80061ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b2:	61bb      	str	r3, [r7, #24]
 80061b4:	e001      	b.n	80061ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff ff0f 	bl	8005fde <USB_GetHostSpeed>
 80061c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80061c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061c6:	2b02      	cmp	r3, #2
 80061c8:	d106      	bne.n	80061d8 <USB_HC_Init+0x1a8>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d003      	beq.n	80061d8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80061d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	e001      	b.n	80061dc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061dc:	787b      	ldrb	r3, [r7, #1]
 80061de:	059b      	lsls	r3, r3, #22
 80061e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061e4:	78bb      	ldrb	r3, [r7, #2]
 80061e6:	02db      	lsls	r3, r3, #11
 80061e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061f2:	049b      	lsls	r3, r3, #18
 80061f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80061f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80061fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006200:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	0159      	lsls	r1, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	440b      	add	r3, r1
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006218:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800621a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800621e:	2b03      	cmp	r3, #3
 8006220:	d10f      	bne.n	8006242 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	78fa      	ldrb	r2, [r7, #3]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	440a      	add	r2, r1
 8006238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006240:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006242:	7ffb      	ldrb	r3, [r7, #31]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006264:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006268:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d02d      	beq.n	80062d2 <USB_HC_StartXfer+0x86>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d129      	bne.n	80062d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d117      	bne.n	80062b4 <USB_HC_StartXfer+0x68>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	79db      	ldrb	r3, [r3, #7]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <USB_HC_StartXfer+0x48>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	79db      	ldrb	r3, [r3, #7]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d10f      	bne.n	80062b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	0151      	lsls	r1, r2, #5
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	440a      	add	r2, r1
 80062aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <USB_HC_StartXfer+0x86>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	785b      	ldrb	r3, [r3, #1]
 80062c6:	4619      	mov	r1, r3
 80062c8:	68f8      	ldr	r0, [r7, #12]
 80062ca:	f000 fa2f 	bl	800672c <USB_DoPing>
      return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e0f8      	b.n	80064c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d018      	beq.n	800630c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	8912      	ldrh	r2, [r2, #8]
 80062e2:	4413      	add	r3, r2
 80062e4:	3b01      	subs	r3, #1
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	8912      	ldrh	r2, [r2, #8]
 80062ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80062f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062f2:	8b7b      	ldrh	r3, [r7, #26]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d90b      	bls.n	8006310 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062f8:	8b7b      	ldrh	r3, [r7, #26]
 80062fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	8912      	ldrh	r2, [r2, #8]
 8006302:	fb02 f203 	mul.w	r2, r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	611a      	str	r2, [r3, #16]
 800630a:	e001      	b.n	8006310 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800630c:	2301      	movs	r3, #1
 800630e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	78db      	ldrb	r3, [r3, #3]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d007      	beq.n	8006328 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	8912      	ldrh	r2, [r2, #8]
 800631e:	fb02 f203 	mul.w	r2, r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	611a      	str	r2, [r3, #16]
 8006326:	e003      	b.n	8006330 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800633a:	04d9      	lsls	r1, r3, #19
 800633c:	4b63      	ldr	r3, [pc, #396]	; (80064cc <USB_HC_StartXfer+0x280>)
 800633e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006340:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	7a9b      	ldrb	r3, [r3, #10]
 8006346:	075b      	lsls	r3, r3, #29
 8006348:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800634c:	69f9      	ldr	r1, [r7, #28]
 800634e:	0148      	lsls	r0, r1, #5
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	4401      	add	r1, r0
 8006354:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006358:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800635a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800635c:	79fb      	ldrb	r3, [r7, #7]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4413      	add	r3, r2
 800636e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006372:	460a      	mov	r2, r1
 8006374:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	bf0c      	ite	eq
 8006386:	2301      	moveq	r3, #1
 8006388:	2300      	movne	r3, #0
 800638a:	b2db      	uxtb	r3, r3
 800638c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	4413      	add	r3, r2
 8006396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	0151      	lsls	r1, r2, #5
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	440a      	add	r2, r1
 80063a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80063ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	7e7b      	ldrb	r3, [r7, #25]
 80063be:	075b      	lsls	r3, r3, #29
 80063c0:	69f9      	ldr	r1, [r7, #28]
 80063c2:	0148      	lsls	r0, r1, #5
 80063c4:	6a39      	ldr	r1, [r7, #32]
 80063c6:	4401      	add	r1, r0
 80063c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80063cc:	4313      	orrs	r3, r2
 80063ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	e003      	b.n	8006402 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006400:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006408:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	6a3b      	ldr	r3, [r7, #32]
 8006410:	4413      	add	r3, r2
 8006412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006416:	461a      	mov	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	e04e      	b.n	80064c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d149      	bne.n	80064c2 <USB_HC_StartXfer+0x276>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d045      	beq.n	80064c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	79db      	ldrb	r3, [r3, #7]
 800643a:	2b03      	cmp	r3, #3
 800643c:	d830      	bhi.n	80064a0 <USB_HC_StartXfer+0x254>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <USB_HC_StartXfer+0x1f8>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006455 	.word	0x08006455
 8006448:	08006479 	.word	0x08006479
 800644c:	08006455 	.word	0x08006455
 8006450:	08006479 	.word	0x08006479
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	3303      	adds	r3, #3
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800645e:	8afa      	ldrh	r2, [r7, #22]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006464:	b29b      	uxth	r3, r3
 8006466:	429a      	cmp	r2, r3
 8006468:	d91c      	bls.n	80064a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f043 0220 	orr.w	r2, r3, #32
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	619a      	str	r2, [r3, #24]
        }
        break;
 8006476:	e015      	b.n	80064a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	3303      	adds	r3, #3
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006482:	8afa      	ldrh	r2, [r7, #22]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	b29b      	uxth	r3, r3
 800648e:	429a      	cmp	r2, r3
 8006490:	d90a      	bls.n	80064a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	619a      	str	r2, [r3, #24]
        }
        break;
 800649e:	e003      	b.n	80064a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80064a0:	bf00      	nop
 80064a2:	e002      	b.n	80064aa <USB_HC_StartXfer+0x25e>
        break;
 80064a4:	bf00      	nop
 80064a6:	e000      	b.n	80064aa <USB_HC_StartXfer+0x25e>
        break;
 80064a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	68d9      	ldr	r1, [r3, #12]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	785a      	ldrb	r2, [r3, #1]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2000      	movs	r0, #0
 80064ba:	9000      	str	r0, [sp, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fb53 	bl	8005b68 <USB_WritePacket>
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3728      	adds	r7, #40	; 0x28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	1ff80000 	.word	0x1ff80000

080064d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	b29b      	uxth	r3, r3
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b089      	sub	sp, #36	; 0x24
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006502:	78fb      	ldrb	r3, [r7, #3]
 8006504:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	0c9b      	lsrs	r3, r3, #18
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	0fdb      	lsrs	r3, r3, #31
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d104      	bne.n	800654c <USB_HC_Halt+0x5a>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	e0e8      	b.n	800671e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <USB_HC_Halt+0x66>
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d173      	bne.n	8006640 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006576:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	f040 80cb 	bne.w	800671c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d143      	bne.n	800661a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	4413      	add	r3, r2
 800659a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	0151      	lsls	r1, r2, #5
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	440a      	add	r2, r1
 80065c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	0151      	lsls	r1, r2, #5
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	440a      	add	r2, r1
 80065e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065f0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065fe:	d81d      	bhi.n	800663c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006616:	d0ec      	beq.n	80065f2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006618:	e080      	b.n	800671c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	440a      	add	r2, r1
 8006630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006638:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800663a:	e06f      	b.n	800671c <USB_HC_Halt+0x22a>
            break;
 800663c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800663e:	e06d      	b.n	800671c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800665e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d143      	bne.n	80066f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800668e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	0151      	lsls	r1, r2, #5
 80066c2:	69ba      	ldr	r2, [r7, #24]
 80066c4:	440a      	add	r2, r1
 80066c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3301      	adds	r3, #1
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066dc:	d81d      	bhi.n	800671a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f4:	d0ec      	beq.n	80066d0 <USB_HC_Halt+0x1de>
 80066f6:	e011      	b.n	800671c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	440a      	add	r2, r1
 800670e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e000      	b.n	800671c <USB_HC_Halt+0x22a>
          break;
 800671a:	bf00      	nop
    }
  }

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
	...

0800672c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	04da      	lsls	r2, r3, #19
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <USB_DoPing+0x74>)
 800674a:	4013      	ands	r3, r2
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	440a      	add	r2, r1
 8006754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006758:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800675c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006774:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	461a      	mov	r2, r3
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	1ff80000 	.word	0x1ff80000

080067a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff f935 	bl	8005a24 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80067ba:	2110      	movs	r1, #16
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff f98f 	bl	8005ae0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff f9b0 	bl	8005b28 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	e01f      	b.n	800680e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067f4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	3301      	adds	r3, #1
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	2b0f      	cmp	r3, #15
 8006812:	d9dc      	bls.n	80067ce <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	e034      	b.n	8006884 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006830:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006838:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006840:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4413      	add	r3, r2
 800684a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684e:	461a      	mov	r2, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	3301      	adds	r3, #1
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006860:	d80c      	bhi.n	800687c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006878:	d0ec      	beq.n	8006854 <USB_StopHost+0xb0>
 800687a:	e000      	b.n	800687e <USB_StopHost+0xda>
        break;
 800687c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	2b0f      	cmp	r3, #15
 8006888:	d9c7      	bls.n	800681a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006890:	461a      	mov	r2, r3
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f04f 32ff 	mov.w	r2, #4294967295
 800689e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff f8ae 	bl	8005a02 <USB_EnableGlobalInt>

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80068b0:	b590      	push	{r4, r7, lr}
 80068b2:	b089      	sub	sp, #36	; 0x24
 80068b4:	af04      	add	r7, sp, #16
 80068b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80068b8:	2301      	movs	r3, #1
 80068ba:	2202      	movs	r2, #2
 80068bc:	2102      	movs	r1, #2
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fc66 	bl	8007190 <USBH_FindInterface>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2bff      	cmp	r3, #255	; 0xff
 80068cc:	d002      	beq.n	80068d4 <USBH_CDC_InterfaceInit+0x24>
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d901      	bls.n	80068d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80068d4:	2302      	movs	r3, #2
 80068d6:	e13d      	b.n	8006b54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fc3b 	bl	8007158 <USBH_SelectInterface>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	e131      	b.n	8006b54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80068f6:	2050      	movs	r0, #80	; 0x50
 80068f8:	f006 f958 	bl	800cbac <malloc>
 80068fc:	4603      	mov	r3, r0
 80068fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006910:	2302      	movs	r3, #2
 8006912:	e11f      	b.n	8006b54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006914:	2250      	movs	r2, #80	; 0x50
 8006916:	2100      	movs	r1, #0
 8006918:	68b8      	ldr	r0, [r7, #8]
 800691a:	f006 f973 	bl	800cc04 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	211a      	movs	r1, #26
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	b25b      	sxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	da15      	bge.n	8006962 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	211a      	movs	r1, #26
 800693c:	fb01 f303 	mul.w	r3, r1, r3
 8006940:	4413      	add	r3, r2
 8006942:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006946:	781a      	ldrb	r2, [r3, #0]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	211a      	movs	r1, #26
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	4413      	add	r3, r2
 8006958:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800695c:	881a      	ldrh	r2, [r3, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	785b      	ldrb	r3, [r3, #1]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f001 fe32 	bl	80085d2 <USBH_AllocPipe>
 800696e:	4603      	mov	r3, r0
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	7819      	ldrb	r1, [r3, #0]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	7858      	ldrb	r0, [r3, #1]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	8952      	ldrh	r2, [r2, #10]
 800698e:	9202      	str	r2, [sp, #8]
 8006990:	2203      	movs	r2, #3
 8006992:	9201      	str	r2, [sp, #4]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4623      	mov	r3, r4
 8006998:	4602      	mov	r2, r0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fdea 	bl	8008574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2200      	movs	r2, #0
 80069a6:	4619      	mov	r1, r3
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 f8f9 	bl	8008ba0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80069ae:	2300      	movs	r3, #0
 80069b0:	2200      	movs	r2, #0
 80069b2:	210a      	movs	r1, #10
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fbeb 	bl	8007190 <USBH_FindInterface>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2bff      	cmp	r3, #255	; 0xff
 80069c2:	d002      	beq.n	80069ca <USBH_CDC_InterfaceInit+0x11a>
 80069c4:	7bfb      	ldrb	r3, [r7, #15]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d901      	bls.n	80069ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80069ca:	2302      	movs	r3, #2
 80069cc:	e0c2      	b.n	8006b54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	211a      	movs	r1, #26
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b25b      	sxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	da16      	bge.n	8006a14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	211a      	movs	r1, #26
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	4413      	add	r3, r2
 80069f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069f6:	781a      	ldrb	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	211a      	movs	r1, #26
 8006a02:	fb01 f303 	mul.w	r3, r1, r3
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a0c:	881a      	ldrh	r2, [r3, #0]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	835a      	strh	r2, [r3, #26]
 8006a12:	e015      	b.n	8006a40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	211a      	movs	r1, #26
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006a24:	781a      	ldrb	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	211a      	movs	r1, #26
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	211a      	movs	r1, #26
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	da16      	bge.n	8006a86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	211a      	movs	r1, #26
 8006a5e:	fb01 f303 	mul.w	r3, r1, r3
 8006a62:	4413      	add	r3, r2
 8006a64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	211a      	movs	r1, #26
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	835a      	strh	r2, [r3, #26]
 8006a84:	e015      	b.n	8006ab2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	211a      	movs	r1, #26
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	211a      	movs	r1, #26
 8006aa2:	fb01 f303 	mul.w	r3, r1, r3
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006aac:	881a      	ldrh	r2, [r3, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	7b9b      	ldrb	r3, [r3, #14]
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fd8a 	bl	80085d2 <USBH_AllocPipe>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7bdb      	ldrb	r3, [r3, #15]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fd80 	bl	80085d2 <USBH_AllocPipe>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	7b59      	ldrb	r1, [r3, #13]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	7b98      	ldrb	r0, [r3, #14]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	8b12      	ldrh	r2, [r2, #24]
 8006af2:	9202      	str	r2, [sp, #8]
 8006af4:	2202      	movs	r2, #2
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4623      	mov	r3, r4
 8006afc:	4602      	mov	r2, r0
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fd38 	bl	8008574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	7b19      	ldrb	r1, [r3, #12]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	7bd8      	ldrb	r0, [r3, #15]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	8b52      	ldrh	r2, [r2, #26]
 8006b1c:	9202      	str	r2, [sp, #8]
 8006b1e:	2202      	movs	r2, #2
 8006b20:	9201      	str	r2, [sp, #4]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	4623      	mov	r3, r4
 8006b26:	4602      	mov	r2, r0
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f001 fd23 	bl	8008574 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	7b5b      	ldrb	r3, [r3, #13]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f002 f82e 	bl	8008ba0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 f827 	bl	8008ba0 <USBH_LL_SetToggle>

  return USBH_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd90      	pop	{r4, r7, pc}

08006b5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00e      	beq.n	8006b94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fd18 	bl	80085b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fd43 	bl	8008614 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	7b1b      	ldrb	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00e      	beq.n	8006bba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f001 fd05 	bl	80085b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	7b1b      	ldrb	r3, [r3, #12]
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f001 fd30 	bl	8008614 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	7b5b      	ldrb	r3, [r3, #13]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	7b5b      	ldrb	r3, [r3, #13]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f001 fcf2 	bl	80085b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	7b5b      	ldrb	r3, [r3, #13]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 fd1d 	bl	8008614 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f005 ffe1 	bl	800cbbc <free>
    phost->pActiveClass->pData = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c00:	2200      	movs	r2, #0
 8006c02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3340      	adds	r3, #64	; 0x40
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f8b1 	bl	8006d8e <GetLineCoding>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006c42:	7afb      	ldrb	r3, [r7, #11]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d877      	bhi.n	8006d60 <USBH_CDC_Process+0x114>
 8006c70:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <USBH_CDC_Process+0x2c>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006c93 	.word	0x08006c93
 8006c80:	08006cc3 	.word	0x08006cc3
 8006c84:	08006d37 	.word	0x08006d37
 8006c88:	08006d45 	.word	0x08006d45
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c90:	e06d      	b.n	8006d6e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f897 	bl	8006dcc <SetLineCoding>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cb0:	e058      	b.n	8006d64 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d055      	beq.n	8006d64 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2204      	movs	r2, #4
 8006cbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cc0:	e050      	b.n	8006d64 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	3340      	adds	r3, #64	; 0x40
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f860 	bl	8006d8e <GetLineCoding>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d126      	bne.n	8006d26 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cea:	791b      	ldrb	r3, [r3, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d13b      	bne.n	8006d68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cfa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d133      	bne.n	8006d68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d12b      	bne.n	8006d68 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d18:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d124      	bne.n	8006d68 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f958 	bl	8006fd4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006d24:	e020      	b.n	8006d68 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d01d      	beq.n	8006d68 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006d34:	e018      	b.n	8006d68 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f867 	bl	8006e0a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8da 	bl	8006ef6 <CDC_ProcessReception>
      break;
 8006d42:	e014      	b.n	8006d6e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 ffe3 	bl	8007d12 <USBH_ClrFeature>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006d5e:	e005      	b.n	8006d6c <USBH_CDC_Process+0x120>

    default:
      break;
 8006d60:	bf00      	nop
 8006d62:	e004      	b.n	8006d6e <USBH_CDC_Process+0x122>
      break;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <USBH_CDC_Process+0x122>
      break;
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <USBH_CDC_Process+0x122>
      break;
 8006d6c:	bf00      	nop

  }

  return status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	22a1      	movs	r2, #161	; 0xa1
 8006d9c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2221      	movs	r2, #33	; 0x21
 8006da2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2207      	movs	r2, #7
 8006db4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2207      	movs	r2, #7
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 f988 	bl	80080d2 <USBH_CtlReq>
 8006dc2:	4603      	mov	r3, r0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2221      	movs	r2, #33	; 0x21
 8006dda:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2207      	movs	r2, #7
 8006df2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2207      	movs	r2, #7
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f969 	bl	80080d2 <USBH_CtlReq>
 8006e00:	4603      	mov	r3, r0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af02      	add	r7, sp, #8
 8006e10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d002      	beq.n	8006e30 <CDC_ProcessTransmission+0x26>
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d023      	beq.n	8006e76 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006e2e:	e05e      	b.n	8006eee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	8b12      	ldrh	r2, [r2, #24]
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d90b      	bls.n	8006e54 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8b1a      	ldrh	r2, [r3, #24]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	7b5b      	ldrb	r3, [r3, #13]
 8006e48:	2001      	movs	r0, #1
 8006e4a:	9000      	str	r0, [sp, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 fb4e 	bl	80084ee <USBH_BulkSendData>
 8006e52:	e00b      	b.n	8006e6c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	7b5b      	ldrb	r3, [r3, #13]
 8006e62:	2001      	movs	r0, #1
 8006e64:	9000      	str	r0, [sp, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fb41 	bl	80084ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e74:	e03b      	b.n	8006eee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	7b5b      	ldrb	r3, [r3, #13]
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fe65 	bl	8008b4c <USBH_LL_GetURBState>
 8006e82:	4603      	mov	r3, r0
 8006e84:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d128      	bne.n	8006ede <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	8b12      	ldrh	r2, [r2, #24]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d90e      	bls.n	8006eb6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	8b12      	ldrh	r2, [r2, #24]
 8006ea0:	1a9a      	subs	r2, r3, r2
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	8b12      	ldrh	r2, [r2, #24]
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]
 8006eb4:	e002      	b.n	8006ebc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006ecc:	e00e      	b.n	8006eec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f868 	bl	8006fac <USBH_CDC_TransmitCallback>
      break;
 8006edc:	e006      	b.n	8006eec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d103      	bne.n	8006eec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006eec:	bf00      	nop
  }
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d002      	beq.n	8006f1c <CDC_ProcessReception+0x26>
 8006f16:	2b04      	cmp	r3, #4
 8006f18:	d00e      	beq.n	8006f38 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006f1a:	e043      	b.n	8006fa4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	6a19      	ldr	r1, [r3, #32]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	8b5a      	ldrh	r2, [r3, #26]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	7b1b      	ldrb	r3, [r3, #12]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 fb05 	bl	8008538 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2204      	movs	r2, #4
 8006f32:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f36:	e035      	b.n	8006fa4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	7b1b      	ldrb	r3, [r3, #12]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 fe04 	bl	8008b4c <USBH_LL_GetURBState>
 8006f44:	4603      	mov	r3, r0
 8006f46:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f48:	7cfb      	ldrb	r3, [r7, #19]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d129      	bne.n	8006fa2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	7b1b      	ldrb	r3, [r3, #12]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fd67 	bl	8008a28 <USBH_LL_GetLastXferSize>
 8006f5a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d016      	beq.n	8006f94 <CDC_ProcessReception+0x9e>
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	8b5b      	ldrh	r3, [r3, #26]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d910      	bls.n	8006f94 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	441a      	add	r2, r3
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f92:	e006      	b.n	8006fa2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f80f 	bl	8006fc0 <USBH_CDC_ReceiveCallback>
      break;
 8006fa2:	bf00      	nop
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e029      	b.n	8007054 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	79fa      	ldrb	r2, [r7, #7]
 8007004:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f81f 	bl	800705c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f001 fc37 	bl	80088c0 <USBH_LL_Init>

  return USBH_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e009      	b.n	8007082 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	33e0      	adds	r3, #224	; 0xe0
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	2200      	movs	r2, #0
 800707a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b0e      	cmp	r3, #14
 8007086:	d9f2      	bls.n	800706e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e009      	b.n	80070a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	3301      	adds	r3, #1
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a8:	d3f1      	bcc.n	800708e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	; 0x40
 80070ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10e      	bne.n	8007140 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007128:	1c59      	adds	r1, r3, #1
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	33de      	adds	r3, #222	; 0xde
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
 800713e:	e004      	b.n	800714a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	73fb      	strb	r3, [r7, #15]
 8007144:	e001      	b.n	800714a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007146:	2302      	movs	r3, #2
 8007148:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007164:	2300      	movs	r3, #0
 8007166:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	429a      	cmp	r2, r3
 8007172:	d204      	bcs.n	800717e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800717c:	e001      	b.n	8007182 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800717e:	2302      	movs	r3, #2
 8007180:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007182:	7bfb      	ldrb	r3, [r7, #15]
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	70fb      	strb	r3, [r7, #3]
 80071a2:	460b      	mov	r3, r1
 80071a4:	70bb      	strb	r3, [r7, #2]
 80071a6:	4613      	mov	r3, r2
 80071a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80071b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80071ba:	e025      	b.n	8007208 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	221a      	movs	r2, #26
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	3308      	adds	r3, #8
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	3302      	adds	r3, #2
 80071cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	78fa      	ldrb	r2, [r7, #3]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d002      	beq.n	80071de <USBH_FindInterface+0x4e>
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	2bff      	cmp	r3, #255	; 0xff
 80071dc:	d111      	bne.n	8007202 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80071e2:	78ba      	ldrb	r2, [r7, #2]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d002      	beq.n	80071ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071e8:	78bb      	ldrb	r3, [r7, #2]
 80071ea:	2bff      	cmp	r3, #255	; 0xff
 80071ec:	d109      	bne.n	8007202 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80071f2:	787a      	ldrb	r2, [r7, #1]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d002      	beq.n	80071fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80071f8:	787b      	ldrb	r3, [r7, #1]
 80071fa:	2bff      	cmp	r3, #255	; 0xff
 80071fc:	d101      	bne.n	8007202 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	e006      	b.n	8007210 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	3301      	adds	r3, #1
 8007206:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d9d6      	bls.n	80071bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800720e:	23ff      	movs	r3, #255	; 0xff
}
 8007210:	4618      	mov	r0, r3
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 fb87 	bl	8008938 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800722a:	2101      	movs	r1, #1
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f001 fca0 	bl	8008b72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af04      	add	r7, sp, #16
 8007242:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007244:	2302      	movs	r3, #2
 8007246:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d102      	bne.n	800725e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b0b      	cmp	r3, #11
 8007266:	f200 81b3 	bhi.w	80075d0 <USBH_Process+0x394>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBH_Process+0x34>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072d3 	.word	0x080072d3
 8007278:	0800733b 	.word	0x0800733b
 800727c:	0800756b 	.word	0x0800756b
 8007280:	080075d1 	.word	0x080075d1
 8007284:	080073df 	.word	0x080073df
 8007288:	08007511 	.word	0x08007511
 800728c:	08007415 	.word	0x08007415
 8007290:	08007435 	.word	0x08007435
 8007294:	08007455 	.word	0x08007455
 8007298:	08007483 	.word	0x08007483
 800729c:	08007553 	.word	0x08007553
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8193 	beq.w	80075d4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80072b4:	20c8      	movs	r0, #200	; 0xc8
 80072b6:	f001 fca3 	bl	8008c00 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 fb99 	bl	80089f2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80072d0:	e180      	b.n	80075d4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d107      	bne.n	80072ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80072ea:	e182      	b.n	80075f2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072f6:	d914      	bls.n	8007322 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80072fe:	3301      	adds	r3, #1
 8007300:	b2da      	uxtb	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800730e:	2b03      	cmp	r3, #3
 8007310:	d903      	bls.n	800731a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	220d      	movs	r2, #13
 8007316:	701a      	strb	r2, [r3, #0]
      break;
 8007318:	e16b      	b.n	80075f2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
      break;
 8007320:	e167      	b.n	80075f2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007328:	f103 020a 	add.w	r2, r3, #10
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007332:	200a      	movs	r0, #10
 8007334:	f001 fc64 	bl	8008c00 <USBH_Delay>
      break;
 8007338:	e15b      	b.n	80075f2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800734a:	2104      	movs	r1, #4
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007350:	2064      	movs	r0, #100	; 0x64
 8007352:	f001 fc55 	bl	8008c00 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fb24 	bl	80089a4 <USBH_LL_GetSpeed>
 800735c:	4603      	mov	r3, r0
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2205      	movs	r2, #5
 800736a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800736c:	2100      	movs	r1, #0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 f92f 	bl	80085d2 <USBH_AllocPipe>
 8007374:	4603      	mov	r3, r0
 8007376:	461a      	mov	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800737c:	2180      	movs	r1, #128	; 0x80
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 f927 	bl	80085d2 <USBH_AllocPipe>
 8007384:	4603      	mov	r3, r0
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7919      	ldrb	r1, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80073a0:	b292      	uxth	r2, r2
 80073a2:	9202      	str	r2, [sp, #8]
 80073a4:	2200      	movs	r2, #0
 80073a6:	9201      	str	r2, [sp, #4]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	4603      	mov	r3, r0
 80073ac:	2280      	movs	r2, #128	; 0x80
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f001 f8e0 	bl	8008574 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	7959      	ldrb	r1, [r3, #5]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80073c8:	b292      	uxth	r2, r2
 80073ca:	9202      	str	r2, [sp, #8]
 80073cc:	2200      	movs	r2, #0
 80073ce:	9201      	str	r2, [sp, #4]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4603      	mov	r3, r0
 80073d4:	2200      	movs	r2, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f8cc 	bl	8008574 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073dc:	e109      	b.n	80075f2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f90c 	bl	80075fc <USBH_HandleEnum>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f040 80f3 	bne.w	80075d8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007400:	2b01      	cmp	r3, #1
 8007402:	d103      	bne.n	800740c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2208      	movs	r2, #8
 8007408:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800740a:	e0e5      	b.n	80075d8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2207      	movs	r2, #7
 8007410:	701a      	strb	r2, [r3, #0]
      break;
 8007412:	e0e1      	b.n	80075d8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 80de 	beq.w	80075dc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2208      	movs	r2, #8
 8007430:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007432:	e0d3      	b.n	80075dc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800743a:	b29b      	uxth	r3, r3
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fc20 	bl	8007c84 <USBH_SetCfg>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	f040 80ca 	bne.w	80075e0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2209      	movs	r2, #9
 8007450:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007452:	e0c5      	b.n	80075e0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00b      	beq.n	800747a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007462:	2101      	movs	r1, #1
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc30 	bl	8007cca <USBH_SetFeature>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	f040 80b9 	bne.w	80075e4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	220a      	movs	r2, #10
 8007476:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007478:	e0b4      	b.n	80075e4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	220a      	movs	r2, #10
 800747e:	701a      	strb	r2, [r3, #0]
      break;
 8007480:	e0b0      	b.n	80075e4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 80ad 	beq.w	80075e8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
 800749a:	e016      	b.n	80074ca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800749c:	7bfa      	ldrb	r2, [r7, #15]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32de      	adds	r2, #222	; 0xde
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	791a      	ldrb	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d108      	bne.n	80074c4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	32de      	adds	r2, #222	; 0xde
 80074b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80074c2:	e005      	b.n	80074d0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	3301      	adds	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0e5      	beq.n	800749c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d016      	beq.n	8007508 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d109      	bne.n	8007500 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2206      	movs	r2, #6
 80074f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f8:	2103      	movs	r1, #3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074fe:	e073      	b.n	80075e8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	220d      	movs	r2, #13
 8007504:	701a      	strb	r2, [r3, #0]
      break;
 8007506:	e06f      	b.n	80075e8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	220d      	movs	r2, #13
 800750c:	701a      	strb	r2, [r3, #0]
      break;
 800750e:	e06b      	b.n	80075e8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d017      	beq.n	800754a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d103      	bne.n	800753a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	220b      	movs	r2, #11
 8007536:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007538:	e058      	b.n	80075ec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800753a:	7bbb      	ldrb	r3, [r7, #14]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d154      	bne.n	80075ec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	220d      	movs	r2, #13
 8007546:	701a      	strb	r2, [r3, #0]
      break;
 8007548:	e050      	b.n	80075ec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	220d      	movs	r2, #13
 800754e:	701a      	strb	r2, [r3, #0]
      break;
 8007550:	e04c      	b.n	80075ec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d049      	beq.n	80075f0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	4798      	blx	r3
      }
      break;
 8007568:	e042      	b.n	80075f0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fd72 	bl	800705c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075a6:	2105      	movs	r1, #5
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d107      	bne.n	80075c8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff fe2b 	bl	800721c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075c6:	e014      	b.n	80075f2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 f9b5 	bl	8008938 <USBH_LL_Start>
      break;
 80075ce:	e010      	b.n	80075f2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80075d0:	bf00      	nop
 80075d2:	e00e      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075d4:	bf00      	nop
 80075d6:	e00c      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075d8:	bf00      	nop
 80075da:	e00a      	b.n	80075f2 <USBH_Process+0x3b6>
    break;
 80075dc:	bf00      	nop
 80075de:	e008      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075e0:	bf00      	nop
 80075e2:	e006      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075e4:	bf00      	nop
 80075e6:	e004      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075e8:	bf00      	nop
 80075ea:	e002      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075ec:	bf00      	nop
 80075ee:	e000      	b.n	80075f2 <USBH_Process+0x3b6>
      break;
 80075f0:	bf00      	nop
  }
  return USBH_OK;
 80075f2:	2300      	movs	r3, #0
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3710      	adds	r7, #16
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af04      	add	r7, sp, #16
 8007602:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007604:	2301      	movs	r3, #1
 8007606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007608:	2301      	movs	r3, #1
 800760a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b07      	cmp	r3, #7
 8007612:	f200 81c1 	bhi.w	8007998 <USBH_HandleEnum+0x39c>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <USBH_HandleEnum+0x20>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	0800763d 	.word	0x0800763d
 8007620:	080076fb 	.word	0x080076fb
 8007624:	08007765 	.word	0x08007765
 8007628:	080077f3 	.word	0x080077f3
 800762c:	0800785d 	.word	0x0800785d
 8007630:	080078cd 	.word	0x080078cd
 8007634:	08007913 	.word	0x08007913
 8007638:	08007959 	.word	0x08007959
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800763c:	2108      	movs	r1, #8
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa50 	bl	8007ae4 <USBH_Get_DevDesc>
 8007644:	4603      	mov	r3, r0
 8007646:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d130      	bne.n	80076b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	7919      	ldrb	r1, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007672:	b292      	uxth	r2, r2
 8007674:	9202      	str	r2, [sp, #8]
 8007676:	2200      	movs	r2, #0
 8007678:	9201      	str	r2, [sp, #4]
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	4603      	mov	r3, r0
 800767e:	2280      	movs	r2, #128	; 0x80
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 ff77 	bl	8008574 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7959      	ldrb	r1, [r3, #5]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800769a:	b292      	uxth	r2, r2
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	9201      	str	r2, [sp, #4]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4603      	mov	r3, r0
 80076a6:	2200      	movs	r2, #0
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ff63 	bl	8008574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80076ae:	e175      	b.n	800799c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	f040 8172 	bne.w	800799c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076be:	3301      	adds	r3, #1
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	d903      	bls.n	80076da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	220d      	movs	r2, #13
 80076d6:	701a      	strb	r2, [r3, #0]
      break;
 80076d8:	e160      	b.n	800799c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ff97 	bl	8008614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ff91 	bl	8008614 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	701a      	strb	r2, [r3, #0]
      break;
 80076f8:	e150      	b.n	800799c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80076fa:	2112      	movs	r1, #18
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f9f1 	bl	8007ae4 <USBH_Get_DevDesc>
 8007702:	4603      	mov	r3, r0
 8007704:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d103      	bne.n	8007714 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007712:	e145      	b.n	80079a0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	2b03      	cmp	r3, #3
 8007718:	f040 8142 	bne.w	80079a0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007722:	3301      	adds	r3, #1
 8007724:	b2da      	uxtb	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007732:	2b03      	cmp	r3, #3
 8007734:	d903      	bls.n	800773e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	220d      	movs	r2, #13
 800773a:	701a      	strb	r2, [r3, #0]
      break;
 800773c:	e130      	b.n	80079a0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	795b      	ldrb	r3, [r3, #5]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ff65 	bl	8008614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	791b      	ldrb	r3, [r3, #4]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff5f 	bl	8008614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
      break;
 8007762:	e11d      	b.n	80079a0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007764:	2101      	movs	r1, #1
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fa68 	bl	8007c3c <USBH_SetAddress>
 800776c:	4603      	mov	r3, r0
 800776e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d132      	bne.n	80077dc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007776:	2002      	movs	r0, #2
 8007778:	f001 fa42 	bl	8008c00 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2203      	movs	r2, #3
 8007788:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7919      	ldrb	r1, [r3, #4]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800779e:	b292      	uxth	r2, r2
 80077a0:	9202      	str	r2, [sp, #8]
 80077a2:	2200      	movs	r2, #0
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	4603      	mov	r3, r0
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fee1 	bl	8008574 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	7959      	ldrb	r1, [r3, #5]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80077c6:	b292      	uxth	r2, r2
 80077c8:	9202      	str	r2, [sp, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	9201      	str	r2, [sp, #4]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	4603      	mov	r3, r0
 80077d2:	2200      	movs	r2, #0
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fecd 	bl	8008574 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80077da:	e0e3      	b.n	80079a4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	f040 80e0 	bne.w	80079a4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220d      	movs	r2, #13
 80077e8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	705a      	strb	r2, [r3, #1]
      break;
 80077f0:	e0d8      	b.n	80079a4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80077f2:	2109      	movs	r1, #9
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f99d 	bl	8007b34 <USBH_Get_CfgDesc>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2204      	movs	r2, #4
 8007808:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800780a:	e0cd      	b.n	80079a8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b03      	cmp	r3, #3
 8007810:	f040 80ca 	bne.w	80079a8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781a:	3301      	adds	r3, #1
 800781c:	b2da      	uxtb	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782a:	2b03      	cmp	r3, #3
 800782c:	d903      	bls.n	8007836 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	220d      	movs	r2, #13
 8007832:	701a      	strb	r2, [r3, #0]
      break;
 8007834:	e0b8      	b.n	80079a8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fee9 	bl	8008614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fee3 	bl	8008614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e0a5      	b.n	80079a8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f965 	bl	8007b34 <USBH_Get_CfgDesc>
 800786a:	4603      	mov	r3, r0
 800786c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800786e:	7bbb      	ldrb	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2205      	movs	r2, #5
 8007878:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800787a:	e097      	b.n	80079ac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b03      	cmp	r3, #3
 8007880:	f040 8094 	bne.w	80079ac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800788a:	3301      	adds	r3, #1
 800788c:	b2da      	uxtb	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800789a:	2b03      	cmp	r3, #3
 800789c:	d903      	bls.n	80078a6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220d      	movs	r2, #13
 80078a2:	701a      	strb	r2, [r3, #0]
      break;
 80078a4:	e082      	b.n	80079ac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	795b      	ldrb	r3, [r3, #5]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 feb1 	bl	8008614 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	791b      	ldrb	r3, [r3, #4]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 feab 	bl	8008614 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
      break;
 80078ca:	e06f      	b.n	80079ac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d019      	beq.n	800790a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80078e2:	23ff      	movs	r3, #255	; 0xff
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f949 	bl	8007b7c <USBH_Get_StringDesc>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2206      	movs	r2, #6
 80078f8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078fa:	e059      	b.n	80079b0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d156      	bne.n	80079b0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2206      	movs	r2, #6
 8007906:	705a      	strb	r2, [r3, #1]
      break;
 8007908:	e052      	b.n	80079b0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2206      	movs	r2, #6
 800790e:	705a      	strb	r2, [r3, #1]
      break;
 8007910:	e04e      	b.n	80079b0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007918:	2b00      	cmp	r3, #0
 800791a:	d019      	beq.n	8007950 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007928:	23ff      	movs	r3, #255	; 0xff
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f926 	bl	8007b7c <USBH_Get_StringDesc>
 8007930:	4603      	mov	r3, r0
 8007932:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2207      	movs	r2, #7
 800793e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007940:	e038      	b.n	80079b4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b03      	cmp	r3, #3
 8007946:	d135      	bne.n	80079b4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2207      	movs	r2, #7
 800794c:	705a      	strb	r2, [r3, #1]
      break;
 800794e:	e031      	b.n	80079b4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2207      	movs	r2, #7
 8007954:	705a      	strb	r2, [r3, #1]
      break;
 8007956:	e02d      	b.n	80079b4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800796e:	23ff      	movs	r3, #255	; 0xff
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f903 	bl	8007b7c <USBH_Get_StringDesc>
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007984:	e018      	b.n	80079b8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d115      	bne.n	80079b8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
      break;
 8007990:	e012      	b.n	80079b8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]
      break;
 8007996:	e00f      	b.n	80079b8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007998:	bf00      	nop
 800799a:	e00e      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 800799c:	bf00      	nop
 800799e:	e00c      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079a0:	bf00      	nop
 80079a2:	e00a      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079a4:	bf00      	nop
 80079a6:	e008      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079a8:	bf00      	nop
 80079aa:	e006      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079ac:	bf00      	nop
 80079ae:	e004      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079b0:	bf00      	nop
 80079b2:	e002      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079b4:	bf00      	nop
 80079b6:	e000      	b.n	80079ba <USBH_HandleEnum+0x3be>
      break;
 80079b8:	bf00      	nop
  }
  return Status;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f804 	bl	8007a06 <USBH_HandleSof>
}
 80079fe:	bf00      	nop
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b0b      	cmp	r3, #11
 8007a16:	d10a      	bne.n	8007a2e <USBH_HandleSof+0x28>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
  }
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007a46:	bf00      	nop
}
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b083      	sub	sp, #12
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007a62:	bf00      	nop
}
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 ff56 	bl	800896e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	791b      	ldrb	r3, [r3, #4]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fda3 	bl	8008614 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fd9d 	bl	8008614 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007af6:	78fb      	ldrb	r3, [r7, #3]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b02:	2100      	movs	r1, #0
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f864 	bl	8007bd2 <USBH_GetDescriptor>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	b292      	uxth	r2, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	f000 f918 	bl	8007d5a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	331c      	adds	r3, #28
 8007b44:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007b46:	887b      	ldrh	r3, [r7, #2]
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b50:	2100      	movs	r1, #0
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f83d 	bl	8007bd2 <USBH_GetDescriptor>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	72fb      	strb	r3, [r7, #11]
 8007b5c:	7afb      	ldrb	r3, [r7, #11]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d107      	bne.n	8007b72 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b68:	887a      	ldrh	r2, [r7, #2]
 8007b6a:	68f9      	ldr	r1, [r7, #12]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 f964 	bl	8007e3a <USBH_ParseCfgDesc>
  }

  return status;
 8007b72:	7afb      	ldrb	r3, [r7, #11]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	607a      	str	r2, [r7, #4]
 8007b86:	461a      	mov	r2, r3
 8007b88:	460b      	mov	r3, r1
 8007b8a:	72fb      	strb	r3, [r7, #11]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b98:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ba0:	893b      	ldrh	r3, [r7, #8]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f812 	bl	8007bd2 <USBH_GetDescriptor>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d107      	bne.n	8007bc8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bbe:	893a      	ldrh	r2, [r7, #8]
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fa37 	bl	8008036 <USBH_ParseStringDesc>
  }

  return status;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	607b      	str	r3, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	72fb      	strb	r3, [r7, #11]
 8007be0:	4613      	mov	r3, r2
 8007be2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	789b      	ldrb	r3, [r3, #2]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d11c      	bne.n	8007c26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	893a      	ldrh	r2, [r7, #8]
 8007c02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007c04:	893b      	ldrh	r3, [r7, #8]
 8007c06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c0e:	d104      	bne.n	8007c1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f240 4209 	movw	r2, #1033	; 0x409
 8007c16:	829a      	strh	r2, [r3, #20]
 8007c18:	e002      	b.n	8007c20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8b3a      	ldrh	r2, [r7, #24]
 8007c24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007c26:	8b3b      	ldrh	r3, [r7, #24]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 fa50 	bl	80080d2 <USBH_CtlReq>
 8007c32:	4603      	mov	r3, r0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	460b      	mov	r3, r1
 8007c46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	789b      	ldrb	r3, [r3, #2]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d10f      	bne.n	8007c70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2205      	movs	r2, #5
 8007c5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fa2c 	bl	80080d2 <USBH_CtlReq>
 8007c7a:	4603      	mov	r3, r0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10e      	bne.n	8007cb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2209      	movs	r2, #9
 8007ca2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	887a      	ldrh	r2, [r7, #2]
 8007ca8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa09 	bl	80080d2 <USBH_CtlReq>
 8007cc0:	4603      	mov	r3, r0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	789b      	ldrb	r3, [r3, #2]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10f      	bne.n	8007cfe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2100      	movs	r1, #0
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f9e5 	bl	80080d2 <USBH_CtlReq>
 8007d08:	4603      	mov	r3, r0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b082      	sub	sp, #8
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	789b      	ldrb	r3, [r3, #2]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d10f      	bne.n	8007d46 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d38:	78fb      	ldrb	r3, [r7, #3]
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2100      	movs	r1, #0
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f9c1 	bl	80080d2 <USBH_CtlReq>
 8007d50:	4603      	mov	r3, r0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	60f8      	str	r0, [r7, #12]
 8007d62:	60b9      	str	r1, [r7, #8]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	781a      	ldrb	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	785a      	ldrb	r2, [r3, #1]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3303      	adds	r3, #3
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	021b      	lsls	r3, r3, #8
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	791a      	ldrb	r2, [r3, #4]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	795a      	ldrb	r2, [r3, #5]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	799a      	ldrb	r2, [r3, #6]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	79da      	ldrb	r2, [r3, #7]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007db4:	88fb      	ldrh	r3, [r7, #6]
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d939      	bls.n	8007e2e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	3309      	adds	r3, #9
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	021b      	lsls	r3, r3, #8
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	b29a      	uxth	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	330a      	adds	r3, #10
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	330b      	adds	r3, #11
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	330c      	adds	r3, #12
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	330d      	adds	r3, #13
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	7b9a      	ldrb	r2, [r3, #14]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	7bda      	ldrb	r2, [r3, #15]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	7c1a      	ldrb	r2, [r3, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	7c5a      	ldrb	r2, [r3, #17]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	745a      	strb	r2, [r3, #17]
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b08a      	sub	sp, #40	; 0x28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	4613      	mov	r3, r2
 8007e46:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	781a      	ldrb	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3303      	adds	r3, #3
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	791a      	ldrb	r2, [r3, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	795a      	ldrb	r2, [r3, #5]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	799a      	ldrb	r2, [r3, #6]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	79da      	ldrb	r2, [r3, #7]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	7a1a      	ldrb	r2, [r3, #8]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	2b09      	cmp	r3, #9
 8007eb4:	d95f      	bls.n	8007f76 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007eb6:	2309      	movs	r3, #9
 8007eb8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ebe:	e051      	b.n	8007f64 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ec0:	f107 0316 	add.w	r3, r7, #22
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ec8:	f000 f8e8 	bl	800809c <USBH_GetNextDesc>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d146      	bne.n	8007f64 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eda:	221a      	movs	r2, #26
 8007edc:	fb02 f303 	mul.w	r3, r2, r3
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	3302      	adds	r3, #2
 8007ee8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007eec:	69f8      	ldr	r0, [r7, #28]
 8007eee:	f000 f846 	bl	8007f7e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007efc:	e022      	b.n	8007f44 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007efe:	f107 0316 	add.w	r3, r7, #22
 8007f02:	4619      	mov	r1, r3
 8007f04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f06:	f000 f8c9 	bl	800809c <USBH_GetNextDesc>
 8007f0a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b05      	cmp	r3, #5
 8007f12:	d117      	bne.n	8007f44 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f18:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f1c:	3201      	adds	r2, #1
 8007f1e:	00d2      	lsls	r2, r2, #3
 8007f20:	211a      	movs	r1, #26
 8007f22:	fb01 f303 	mul.w	r3, r1, r3
 8007f26:	4413      	add	r3, r2
 8007f28:	3308      	adds	r3, #8
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	3304      	adds	r3, #4
 8007f30:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f34:	69b8      	ldr	r0, [r7, #24]
 8007f36:	f000 f851 	bl	8007fdc <USBH_ParseEPDesc>
            ep_ix++;
 8007f3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d204      	bcs.n	8007f5a <USBH_ParseCfgDesc+0x120>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	885a      	ldrh	r2, [r3, #2]
 8007f54:	8afb      	ldrh	r3, [r7, #22]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d8d1      	bhi.n	8007efe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f5e:	3301      	adds	r3, #1
 8007f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d804      	bhi.n	8007f76 <USBH_ParseCfgDesc+0x13c>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	885a      	ldrh	r2, [r3, #2]
 8007f70:	8afb      	ldrh	r3, [r7, #22]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8a4      	bhi.n	8007ec0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f76:	bf00      	nop
 8007f78:	3728      	adds	r7, #40	; 0x28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f7e:	b480      	push	{r7}
 8007f80:	b083      	sub	sp, #12
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781a      	ldrb	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785a      	ldrb	r2, [r3, #1]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	789a      	ldrb	r2, [r3, #2]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	78da      	ldrb	r2, [r3, #3]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	791a      	ldrb	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	795a      	ldrb	r2, [r3, #5]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	799a      	ldrb	r2, [r3, #6]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	79da      	ldrb	r2, [r3, #7]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	7a1a      	ldrb	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	721a      	strb	r2, [r3, #8]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781a      	ldrb	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	785a      	ldrb	r2, [r3, #1]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	789a      	ldrb	r2, [r3, #2]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	78da      	ldrb	r2, [r3, #3]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	3304      	adds	r3, #4
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b29a      	uxth	r2, r3
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	3305      	adds	r3, #5
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	b29b      	uxth	r3, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	799a      	ldrb	r2, [r3, #6]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	719a      	strb	r2, [r3, #6]
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008036:	b480      	push	{r7}
 8008038:	b087      	sub	sp, #28
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	4613      	mov	r3, r2
 8008042:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b03      	cmp	r3, #3
 800804c:	d120      	bne.n	8008090 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	1e9a      	subs	r2, r3, #2
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	4293      	cmp	r3, r2
 8008058:	bf28      	it	cs
 800805a:	4613      	movcs	r3, r2
 800805c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3302      	adds	r3, #2
 8008062:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008064:	2300      	movs	r3, #0
 8008066:	82fb      	strh	r3, [r7, #22]
 8008068:	e00b      	b.n	8008082 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800806a:	8afb      	ldrh	r3, [r7, #22]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4413      	add	r3, r2
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3301      	adds	r3, #1
 800807a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800807c:	8afb      	ldrh	r3, [r7, #22]
 800807e:	3302      	adds	r3, #2
 8008080:	82fb      	strh	r3, [r7, #22]
 8008082:	8afa      	ldrh	r2, [r7, #22]
 8008084:	8abb      	ldrh	r3, [r7, #20]
 8008086:	429a      	cmp	r2, r3
 8008088:	d3ef      	bcc.n	800806a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
  }
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	881a      	ldrh	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4413      	add	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b086      	sub	sp, #24
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80080e0:	2301      	movs	r3, #1
 80080e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	789b      	ldrb	r3, [r3, #2]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d002      	beq.n	80080f2 <USBH_CtlReq+0x20>
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d00f      	beq.n	8008110 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80080f0:	e027      	b.n	8008142 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	88fa      	ldrh	r2, [r7, #6]
 80080fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2201      	movs	r2, #1
 8008102:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2202      	movs	r2, #2
 8008108:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800810a:	2301      	movs	r3, #1
 800810c:	75fb      	strb	r3, [r7, #23]
      break;
 800810e:	e018      	b.n	8008142 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 f81b 	bl	800814c <USBH_HandleControl>
 8008116:	4603      	mov	r3, r0
 8008118:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <USBH_CtlReq+0x54>
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	2b03      	cmp	r3, #3
 8008124:	d106      	bne.n	8008134 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	761a      	strb	r2, [r3, #24]
      break;
 8008132:	e005      	b.n	8008140 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d102      	bne.n	8008140 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2201      	movs	r2, #1
 800813e:	709a      	strb	r2, [r3, #2]
      break;
 8008140:	bf00      	nop
  }
  return status;
 8008142:	7dfb      	ldrb	r3, [r7, #23]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af02      	add	r7, sp, #8
 8008152:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008158:	2300      	movs	r3, #0
 800815a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7e1b      	ldrb	r3, [r3, #24]
 8008160:	3b01      	subs	r3, #1
 8008162:	2b0a      	cmp	r3, #10
 8008164:	f200 8156 	bhi.w	8008414 <USBH_HandleControl+0x2c8>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <USBH_HandleControl+0x24>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	0800819d 	.word	0x0800819d
 8008174:	080081b7 	.word	0x080081b7
 8008178:	08008221 	.word	0x08008221
 800817c:	08008247 	.word	0x08008247
 8008180:	0800827f 	.word	0x0800827f
 8008184:	080082a9 	.word	0x080082a9
 8008188:	080082fb 	.word	0x080082fb
 800818c:	0800831d 	.word	0x0800831d
 8008190:	08008359 	.word	0x08008359
 8008194:	0800837f 	.word	0x0800837f
 8008198:	080083bd 	.word	0x080083bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f103 0110 	add.w	r1, r3, #16
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	795b      	ldrb	r3, [r3, #5]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f943 	bl	8008434 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2202      	movs	r2, #2
 80081b2:	761a      	strb	r2, [r3, #24]
      break;
 80081b4:	e139      	b.n	800842a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	795b      	ldrb	r3, [r3, #5]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fcc5 	bl	8008b4c <USBH_LL_GetURBState>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d11e      	bne.n	800820a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	7c1b      	ldrb	r3, [r3, #16]
 80081d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80081d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8adb      	ldrh	r3, [r3, #22]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80081de:	7b7b      	ldrb	r3, [r7, #13]
 80081e0:	2b80      	cmp	r3, #128	; 0x80
 80081e2:	d103      	bne.n	80081ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2203      	movs	r2, #3
 80081e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081ea:	e115      	b.n	8008418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2205      	movs	r2, #5
 80081f0:	761a      	strb	r2, [r3, #24]
      break;
 80081f2:	e111      	b.n	8008418 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80081f4:	7b7b      	ldrb	r3, [r7, #13]
 80081f6:	2b80      	cmp	r3, #128	; 0x80
 80081f8:	d103      	bne.n	8008202 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2209      	movs	r2, #9
 80081fe:	761a      	strb	r2, [r3, #24]
      break;
 8008200:	e10a      	b.n	8008418 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2207      	movs	r2, #7
 8008206:	761a      	strb	r2, [r3, #24]
      break;
 8008208:	e106      	b.n	8008418 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d003      	beq.n	8008218 <USBH_HandleControl+0xcc>
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b02      	cmp	r3, #2
 8008214:	f040 8100 	bne.w	8008418 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	220b      	movs	r2, #11
 800821c:	761a      	strb	r2, [r3, #24]
      break;
 800821e:	e0fb      	b.n	8008418 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6899      	ldr	r1, [r3, #8]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	899a      	ldrh	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	791b      	ldrb	r3, [r3, #4]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f93a 	bl	80084b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2204      	movs	r2, #4
 8008242:	761a      	strb	r2, [r3, #24]
      break;
 8008244:	e0f1      	b.n	800842a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	791b      	ldrb	r3, [r3, #4]
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc7d 	bl	8008b4c <USBH_LL_GetURBState>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d102      	bne.n	8008262 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2209      	movs	r2, #9
 8008260:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b05      	cmp	r3, #5
 8008266:	d102      	bne.n	800826e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008268:	2303      	movs	r3, #3
 800826a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800826c:	e0d6      	b.n	800841c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b04      	cmp	r3, #4
 8008272:	f040 80d3 	bne.w	800841c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	220b      	movs	r2, #11
 800827a:	761a      	strb	r2, [r3, #24]
      break;
 800827c:	e0ce      	b.n	800841c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6899      	ldr	r1, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	899a      	ldrh	r2, [r3, #12]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	795b      	ldrb	r3, [r3, #5]
 800828a:	2001      	movs	r0, #1
 800828c:	9000      	str	r0, [sp, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8ea 	bl	8008468 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800829a:	b29a      	uxth	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2206      	movs	r2, #6
 80082a4:	761a      	strb	r2, [r3, #24]
      break;
 80082a6:	e0c0      	b.n	800842a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	795b      	ldrb	r3, [r3, #5]
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fc4c 	bl	8008b4c <USBH_LL_GetURBState>
 80082b4:	4603      	mov	r3, r0
 80082b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d103      	bne.n	80082c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2207      	movs	r2, #7
 80082c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082c4:	e0ac      	b.n	8008420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	2b05      	cmp	r3, #5
 80082ca:	d105      	bne.n	80082d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220c      	movs	r2, #12
 80082d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80082d2:	2303      	movs	r3, #3
 80082d4:	73fb      	strb	r3, [r7, #15]
      break;
 80082d6:	e0a3      	b.n	8008420 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d103      	bne.n	80082e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2205      	movs	r2, #5
 80082e2:	761a      	strb	r2, [r3, #24]
      break;
 80082e4:	e09c      	b.n	8008420 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	f040 8099 	bne.w	8008420 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	220b      	movs	r2, #11
 80082f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80082f4:	2302      	movs	r3, #2
 80082f6:	73fb      	strb	r3, [r7, #15]
      break;
 80082f8:	e092      	b.n	8008420 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	791b      	ldrb	r3, [r3, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	2100      	movs	r1, #0
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8d5 	bl	80084b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800830e:	b29a      	uxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2208      	movs	r2, #8
 8008318:	761a      	strb	r2, [r3, #24]

      break;
 800831a:	e086      	b.n	800842a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	791b      	ldrb	r3, [r3, #4]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc12 	bl	8008b4c <USBH_LL_GetURBState>
 8008328:	4603      	mov	r3, r0
 800832a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d105      	bne.n	800833e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	220d      	movs	r2, #13
 8008336:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800833c:	e072      	b.n	8008424 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d103      	bne.n	800834c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	220b      	movs	r2, #11
 8008348:	761a      	strb	r2, [r3, #24]
      break;
 800834a:	e06b      	b.n	8008424 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b05      	cmp	r3, #5
 8008350:	d168      	bne.n	8008424 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008352:	2303      	movs	r3, #3
 8008354:	73fb      	strb	r3, [r7, #15]
      break;
 8008356:	e065      	b.n	8008424 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	795b      	ldrb	r3, [r3, #5]
 800835c:	2201      	movs	r2, #1
 800835e:	9200      	str	r2, [sp, #0]
 8008360:	2200      	movs	r2, #0
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f87f 	bl	8008468 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008370:	b29a      	uxth	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	220a      	movs	r2, #10
 800837a:	761a      	strb	r2, [r3, #24]
      break;
 800837c:	e055      	b.n	800842a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	795b      	ldrb	r3, [r3, #5]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fbe1 	bl	8008b4c <USBH_LL_GetURBState>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d105      	bne.n	80083a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220d      	movs	r2, #13
 800839c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800839e:	e043      	b.n	8008428 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d103      	bne.n	80083ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2209      	movs	r2, #9
 80083aa:	761a      	strb	r2, [r3, #24]
      break;
 80083ac:	e03c      	b.n	8008428 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d139      	bne.n	8008428 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	220b      	movs	r2, #11
 80083b8:	761a      	strb	r2, [r3, #24]
      break;
 80083ba:	e035      	b.n	8008428 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7e5b      	ldrb	r3, [r3, #25]
 80083c0:	3301      	adds	r3, #1
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	765a      	strb	r2, [r3, #25]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	7e5b      	ldrb	r3, [r3, #25]
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d806      	bhi.n	80083de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80083dc:	e025      	b.n	800842a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083e4:	2106      	movs	r1, #6
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	795b      	ldrb	r3, [r3, #5]
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f90c 	bl	8008614 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	791b      	ldrb	r3, [r3, #4]
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f906 	bl	8008614 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800840e:	2302      	movs	r3, #2
 8008410:	73fb      	strb	r3, [r7, #15]
      break;
 8008412:	e00a      	b.n	800842a <USBH_HandleControl+0x2de>

    default:
      break;
 8008414:	bf00      	nop
 8008416:	e008      	b.n	800842a <USBH_HandleControl+0x2de>
      break;
 8008418:	bf00      	nop
 800841a:	e006      	b.n	800842a <USBH_HandleControl+0x2de>
      break;
 800841c:	bf00      	nop
 800841e:	e004      	b.n	800842a <USBH_HandleControl+0x2de>
      break;
 8008420:	bf00      	nop
 8008422:	e002      	b.n	800842a <USBH_HandleControl+0x2de>
      break;
 8008424:	bf00      	nop
 8008426:	e000      	b.n	800842a <USBH_HandleControl+0x2de>
      break;
 8008428:	bf00      	nop
  }

  return status;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b088      	sub	sp, #32
 8008438:	af04      	add	r7, sp, #16
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008442:	79f9      	ldrb	r1, [r7, #7]
 8008444:	2300      	movs	r3, #0
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	2308      	movs	r3, #8
 800844a:	9302      	str	r3, [sp, #8]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	2200      	movs	r2, #0
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fb46 	bl	8008aea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af04      	add	r7, sp, #16
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	460b      	mov	r3, r1
 8008478:	80fb      	strh	r3, [r7, #6]
 800847a:	4613      	mov	r3, r2
 800847c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800848c:	7979      	ldrb	r1, [r7, #5]
 800848e:	7e3b      	ldrb	r3, [r7, #24]
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	9302      	str	r3, [sp, #8]
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	2301      	movs	r3, #1
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	2300      	movs	r3, #0
 80084a0:	2200      	movs	r2, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fb21 	bl	8008aea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b088      	sub	sp, #32
 80084b6:	af04      	add	r7, sp, #16
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	4611      	mov	r1, r2
 80084be:	461a      	mov	r2, r3
 80084c0:	460b      	mov	r3, r1
 80084c2:	80fb      	strh	r3, [r7, #6]
 80084c4:	4613      	mov	r3, r2
 80084c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084c8:	7979      	ldrb	r1, [r7, #5]
 80084ca:	2300      	movs	r3, #0
 80084cc:	9303      	str	r3, [sp, #12]
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	9302      	str	r3, [sp, #8]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	2301      	movs	r3, #1
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	2201      	movs	r2, #1
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fb03 	bl	8008aea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084e4:	2300      	movs	r3, #0

}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b088      	sub	sp, #32
 80084f2:	af04      	add	r7, sp, #16
 80084f4:	60f8      	str	r0, [r7, #12]
 80084f6:	60b9      	str	r1, [r7, #8]
 80084f8:	4611      	mov	r1, r2
 80084fa:	461a      	mov	r2, r3
 80084fc:	460b      	mov	r3, r1
 80084fe:	80fb      	strh	r3, [r7, #6]
 8008500:	4613      	mov	r3, r2
 8008502:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008512:	7979      	ldrb	r1, [r7, #5]
 8008514:	7e3b      	ldrb	r3, [r7, #24]
 8008516:	9303      	str	r3, [sp, #12]
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	9302      	str	r3, [sp, #8]
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	2301      	movs	r3, #1
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	2302      	movs	r3, #2
 8008526:	2200      	movs	r2, #0
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fade 	bl	8008aea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af04      	add	r7, sp, #16
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4611      	mov	r1, r2
 8008544:	461a      	mov	r2, r3
 8008546:	460b      	mov	r3, r1
 8008548:	80fb      	strh	r3, [r7, #6]
 800854a:	4613      	mov	r3, r2
 800854c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800854e:	7979      	ldrb	r1, [r7, #5]
 8008550:	2300      	movs	r3, #0
 8008552:	9303      	str	r3, [sp, #12]
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	9302      	str	r3, [sp, #8]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	9301      	str	r3, [sp, #4]
 800855c:	2301      	movs	r3, #1
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	2302      	movs	r3, #2
 8008562:	2201      	movs	r2, #1
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fac0 	bl	8008aea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af04      	add	r7, sp, #16
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	461a      	mov	r2, r3
 8008582:	4603      	mov	r3, r0
 8008584:	70fb      	strb	r3, [r7, #3]
 8008586:	460b      	mov	r3, r1
 8008588:	70bb      	strb	r3, [r7, #2]
 800858a:	4613      	mov	r3, r2
 800858c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800858e:	7878      	ldrb	r0, [r7, #1]
 8008590:	78ba      	ldrb	r2, [r7, #2]
 8008592:	78f9      	ldrb	r1, [r7, #3]
 8008594:	8b3b      	ldrh	r3, [r7, #24]
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	7d3b      	ldrb	r3, [r7, #20]
 800859a:	9301      	str	r3, [sp, #4]
 800859c:	7c3b      	ldrb	r3, [r7, #16]
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	4603      	mov	r3, r0
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fa53 	bl	8008a4e <USBH_LL_OpenPipe>

  return USBH_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80085be:	78fb      	ldrb	r3, [r7, #3]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa72 	bl	8008aac <USBH_LL_ClosePipe>

  return USBH_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b084      	sub	sp, #16
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f836 	bl	8008650 <USBH_GetFreePipe>
 80085e4:	4603      	mov	r3, r0
 80085e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80085e8:	89fb      	ldrh	r3, [r7, #14]
 80085ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00a      	beq.n	8008608 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	89fb      	ldrh	r3, [r7, #14]
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	33e0      	adds	r3, #224	; 0xe0
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008608:	89fb      	ldrh	r3, [r7, #14]
 800860a:	b2db      	uxtb	r3, r3
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	2b0a      	cmp	r3, #10
 8008624:	d80d      	bhi.n	8008642 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	33e0      	adds	r3, #224	; 0xe0
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	78fb      	ldrb	r3, [r7, #3]
 8008634:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	33e0      	adds	r3, #224	; 0xe0
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	440b      	add	r3, r1
 8008640:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800865c:	2300      	movs	r3, #0
 800865e:	73fb      	strb	r3, [r7, #15]
 8008660:	e00f      	b.n	8008682 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	33e0      	adds	r3, #224	; 0xe0
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
 8008678:	b29b      	uxth	r3, r3
 800867a:	e007      	b.n	800868c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800867c:	7bfb      	ldrb	r3, [r7, #15]
 800867e:	3301      	adds	r3, #1
 8008680:	73fb      	strb	r3, [r7, #15]
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	2b0a      	cmp	r3, #10
 8008686:	d9ec      	bls.n	8008662 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008688:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800868c:	4618      	mov	r0, r3
 800868e:	3714      	adds	r7, #20
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800869c:	2201      	movs	r2, #1
 800869e:	490e      	ldr	r1, [pc, #56]	; (80086d8 <MX_USB_HOST_Init+0x40>)
 80086a0:	480e      	ldr	r0, [pc, #56]	; (80086dc <MX_USB_HOST_Init+0x44>)
 80086a2:	f7fe fca1 	bl	8006fe8 <USBH_Init>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80086ac:	f7f8 fc2e 	bl	8000f0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80086b0:	490b      	ldr	r1, [pc, #44]	; (80086e0 <MX_USB_HOST_Init+0x48>)
 80086b2:	480a      	ldr	r0, [pc, #40]	; (80086dc <MX_USB_HOST_Init+0x44>)
 80086b4:	f7fe fd26 	bl	8007104 <USBH_RegisterClass>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80086be:	f7f8 fc25 	bl	8000f0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80086c2:	4806      	ldr	r0, [pc, #24]	; (80086dc <MX_USB_HOST_Init+0x44>)
 80086c4:	f7fe fdaa 	bl	800721c <USBH_Start>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80086ce:	f7f8 fc1d 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80086d2:	bf00      	nop
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	20013634 	.word	0x20013634
 80086e0:	2000000c 	.word	0x2000000c

080086e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80086e8:	4802      	ldr	r0, [pc, #8]	; (80086f4 <MX_USB_HOST_Process+0x10>)
 80086ea:	f7fe fda7 	bl	800723c <USBH_Process>
}
 80086ee:	bf00      	nop
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20013634 	.word	0x20013634

080086f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	3b01      	subs	r3, #1
 8008708:	2b04      	cmp	r3, #4
 800870a:	d819      	bhi.n	8008740 <USBH_UserProcess+0x48>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <USBH_UserProcess+0x1c>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008741 	.word	0x08008741
 8008718:	08008731 	.word	0x08008731
 800871c:	08008741 	.word	0x08008741
 8008720:	08008739 	.word	0x08008739
 8008724:	08008729 	.word	0x08008729
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <USBH_UserProcess+0x58>)
 800872a:	2203      	movs	r2, #3
 800872c:	701a      	strb	r2, [r3, #0]
  break;
 800872e:	e008      	b.n	8008742 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <USBH_UserProcess+0x58>)
 8008732:	2202      	movs	r2, #2
 8008734:	701a      	strb	r2, [r3, #0]
  break;
 8008736:	e004      	b.n	8008742 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <USBH_UserProcess+0x58>)
 800873a:	2201      	movs	r2, #1
 800873c:	701a      	strb	r2, [r3, #0]
  break;
 800873e:	e000      	b.n	8008742 <USBH_UserProcess+0x4a>

  default:
  break;
 8008740:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	200000b8 	.word	0x200000b8

08008754 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800875c:	f107 0314 	add.w	r3, r7, #20
 8008760:	2200      	movs	r2, #0
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	605a      	str	r2, [r3, #4]
 8008766:	609a      	str	r2, [r3, #8]
 8008768:	60da      	str	r2, [r3, #12]
 800876a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008774:	d147      	bne.n	8008806 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008776:	2300      	movs	r3, #0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	4b25      	ldr	r3, [pc, #148]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 800877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877e:	4a24      	ldr	r2, [pc, #144]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	6313      	str	r3, [r2, #48]	; 0x30
 8008786:	4b22      	ldr	r3, [pc, #136]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 8008788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	4619      	mov	r1, r3
 80087a6:	481b      	ldr	r0, [pc, #108]	; (8008814 <HAL_HCD_MspInit+0xc0>)
 80087a8:	f7f8 ff74 	bl	8001694 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80087ac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80087b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087b2:	2302      	movs	r3, #2
 80087b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087ba:	2300      	movs	r3, #0
 80087bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80087be:	230a      	movs	r3, #10
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087c2:	f107 0314 	add.w	r3, r7, #20
 80087c6:	4619      	mov	r1, r3
 80087c8:	4812      	ldr	r0, [pc, #72]	; (8008814 <HAL_HCD_MspInit+0xc0>)
 80087ca:	f7f8 ff63 	bl	8001694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087ce:	4b10      	ldr	r3, [pc, #64]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	4a0f      	ldr	r2, [pc, #60]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 80087d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087d8:	6353      	str	r3, [r2, #52]	; 0x34
 80087da:	2300      	movs	r3, #0
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 80087e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e2:	4a0b      	ldr	r2, [pc, #44]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 80087e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087e8:	6453      	str	r3, [r2, #68]	; 0x44
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <HAL_HCD_MspInit+0xbc>)
 80087ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f2:	60fb      	str	r3, [r7, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	2043      	movs	r0, #67	; 0x43
 80087fc:	f7f8 ff20 	bl	8001640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008800:	2043      	movs	r0, #67	; 0x43
 8008802:	f7f8 ff39 	bl	8001678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008806:	bf00      	nop
 8008808:	3728      	adds	r7, #40	; 0x28
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40023800 	.word	0x40023800
 8008814:	40020000 	.word	0x40020000

08008818 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff f8db 	bl	80079e2 <USBH_LL_IncTimer>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff f913 	bl	8007a6e <USBH_LL_Connect>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff f91c 	bl	8007a9c <USBH_LL_Disconnect>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
 8008878:	4613      	mov	r3, r2
 800887a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff f8cd 	bl	8007a36 <USBH_LL_PortEnabled>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7ff f8cd 	bl	8007a52 <USBH_LL_PortDisabled>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d12a      	bne.n	8008928 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80088d2:	4a18      	ldr	r2, [pc, #96]	; (8008934 <USBH_LL_Init+0x74>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a15      	ldr	r2, [pc, #84]	; (8008934 <USBH_LL_Init+0x74>)
 80088de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088e2:	4b14      	ldr	r3, [pc, #80]	; (8008934 <USBH_LL_Init+0x74>)
 80088e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80088ea:	4b12      	ldr	r3, [pc, #72]	; (8008934 <USBH_LL_Init+0x74>)
 80088ec:	2208      	movs	r2, #8
 80088ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80088f0:	4b10      	ldr	r3, [pc, #64]	; (8008934 <USBH_LL_Init+0x74>)
 80088f2:	2201      	movs	r2, #1
 80088f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088f6:	4b0f      	ldr	r3, [pc, #60]	; (8008934 <USBH_LL_Init+0x74>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <USBH_LL_Init+0x74>)
 80088fe:	2202      	movs	r2, #2
 8008900:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008902:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <USBH_LL_Init+0x74>)
 8008904:	2200      	movs	r2, #0
 8008906:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008908:	480a      	ldr	r0, [pc, #40]	; (8008934 <USBH_LL_Init+0x74>)
 800890a:	f7f9 f892 	bl	8001a32 <HAL_HCD_Init>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008914:	f7f8 fafa 	bl	8000f0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008918:	4806      	ldr	r0, [pc, #24]	; (8008934 <USBH_LL_Init+0x74>)
 800891a:	f7f9 fc76 	bl	800220a <HAL_HCD_GetCurrentFrame>
 800891e:	4603      	mov	r3, r0
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff f84e 	bl	80079c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20013a0c 	.word	0x20013a0c

08008938 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800894e:	4618      	mov	r0, r3
 8008950:	f7f9 fbe5 	bl	800211e <HAL_HCD_Start>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f95c 	bl	8008c18 <USBH_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008984:	4618      	mov	r0, r3
 8008986:	f7f9 fbed 	bl	8002164 <HAL_HCD_Stop>
 800898a:	4603      	mov	r3, r0
 800898c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	4618      	mov	r0, r3
 8008992:	f000 f941 	bl	8008c18 <USBH_Get_USB_Status>
 8008996:	4603      	mov	r3, r0
 8008998:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800899a:	7bbb      	ldrb	r3, [r7, #14]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80089ac:	2301      	movs	r3, #1
 80089ae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7f9 fc35 	bl	8002226 <HAL_HCD_GetCurrentSpeed>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d00c      	beq.n	80089dc <USBH_LL_GetSpeed+0x38>
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d80d      	bhi.n	80089e2 <USBH_LL_GetSpeed+0x3e>
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d002      	beq.n	80089d0 <USBH_LL_GetSpeed+0x2c>
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d003      	beq.n	80089d6 <USBH_LL_GetSpeed+0x32>
 80089ce:	e008      	b.n	80089e2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
    break;
 80089d4:	e008      	b.n	80089e8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80089d6:	2301      	movs	r3, #1
 80089d8:	73fb      	strb	r3, [r7, #15]
    break;
 80089da:	e005      	b.n	80089e8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80089dc:	2302      	movs	r3, #2
 80089de:	73fb      	strb	r3, [r7, #15]
    break;
 80089e0:	e002      	b.n	80089e8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80089e2:	2301      	movs	r3, #1
 80089e4:	73fb      	strb	r3, [r7, #15]
    break;
 80089e6:	bf00      	nop
  }
  return  speed;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7f9 fbc8 	bl	800219e <HAL_HCD_ResetPort>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a12:	7bfb      	ldrb	r3, [r7, #15]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 f8ff 	bl	8008c18 <USBH_Get_USB_Status>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3710      	adds	r7, #16
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f9 fbcf 	bl	80021e2 <HAL_HCD_HC_GetXferCount>
 8008a44:	4603      	mov	r3, r0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a4e:	b590      	push	{r4, r7, lr}
 8008a50:	b089      	sub	sp, #36	; 0x24
 8008a52:	af04      	add	r7, sp, #16
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	4608      	mov	r0, r1
 8008a58:	4611      	mov	r1, r2
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	70fb      	strb	r3, [r7, #3]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70bb      	strb	r3, [r7, #2]
 8008a64:	4613      	mov	r3, r2
 8008a66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a76:	787c      	ldrb	r4, [r7, #1]
 8008a78:	78ba      	ldrb	r2, [r7, #2]
 8008a7a:	78f9      	ldrb	r1, [r7, #3]
 8008a7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4623      	mov	r3, r4
 8008a8e:	f7f9 f832 	bl	8001af6 <HAL_HCD_HC_Init>
 8008a92:	4603      	mov	r3, r0
 8008a94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 f8bd 	bl	8008c18 <USBH_Get_USB_Status>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd90      	pop	{r4, r7, pc}

08008aac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f9 f8a2 	bl	8001c14 <HAL_HCD_HC_Halt>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f000 f89e 	bl	8008c18 <USBH_Get_USB_Status>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008aea:	b590      	push	{r4, r7, lr}
 8008aec:	b089      	sub	sp, #36	; 0x24
 8008aee:	af04      	add	r7, sp, #16
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	4608      	mov	r0, r1
 8008af4:	4611      	mov	r1, r2
 8008af6:	461a      	mov	r2, r3
 8008af8:	4603      	mov	r3, r0
 8008afa:	70fb      	strb	r3, [r7, #3]
 8008afc:	460b      	mov	r3, r1
 8008afe:	70bb      	strb	r3, [r7, #2]
 8008b00:	4613      	mov	r3, r2
 8008b02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b12:	787c      	ldrb	r4, [r7, #1]
 8008b14:	78ba      	ldrb	r2, [r7, #2]
 8008b16:	78f9      	ldrb	r1, [r7, #3]
 8008b18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	f7f9 f895 	bl	8001c5c <HAL_HCD_HC_SubmitRequest>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008b36:	7bfb      	ldrb	r3, [r7, #15]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f000 f86d 	bl	8008c18 <USBH_Get_USB_Status>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd90      	pop	{r4, r7, pc}

08008b4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b5e:	78fa      	ldrb	r2, [r7, #3]
 8008b60:	4611      	mov	r1, r2
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f9 fb29 	bl	80021ba <HAL_HCD_HC_GetURBState>
 8008b68:	4603      	mov	r3, r0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d103      	bne.n	8008b90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b88:	78fb      	ldrb	r3, [r7, #3]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f870 	bl	8008c70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b90:	20c8      	movs	r0, #200	; 0xc8
 8008b92:	f7f8 fc79 	bl	8001488 <HAL_Delay>
  return USBH_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	70fb      	strb	r3, [r7, #3]
 8008bac:	4613      	mov	r3, r2
 8008bae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bb6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	212c      	movs	r1, #44	; 0x2c
 8008bbe:	fb01 f303 	mul.w	r3, r1, r3
 8008bc2:	4413      	add	r3, r2
 8008bc4:	333b      	adds	r3, #59	; 0x3b
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d009      	beq.n	8008be0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	212c      	movs	r1, #44	; 0x2c
 8008bd2:	fb01 f303 	mul.w	r3, r1, r3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3354      	adds	r3, #84	; 0x54
 8008bda:	78ba      	ldrb	r2, [r7, #2]
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e008      	b.n	8008bf2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	212c      	movs	r1, #44	; 0x2c
 8008be6:	fb01 f303 	mul.w	r3, r1, r3
 8008bea:	4413      	add	r3, r2
 8008bec:	3355      	adds	r3, #85	; 0x55
 8008bee:	78ba      	ldrb	r2, [r7, #2]
 8008bf0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7f8 fc3d 	bl	8001488 <HAL_Delay>
}
 8008c0e:	bf00      	nop
 8008c10:	3708      	adds	r7, #8
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d817      	bhi.n	8008c5c <USBH_Get_USB_Status+0x44>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <USBH_Get_USB_Status+0x1c>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008c4b 	.word	0x08008c4b
 8008c3c:	08008c51 	.word	0x08008c51
 8008c40:	08008c57 	.word	0x08008c57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e00b      	b.n	8008c62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e008      	b.n	8008c62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e005      	b.n	8008c62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008c56:	2302      	movs	r3, #2
 8008c58:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5a:	e002      	b.n	8008c62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	bf00      	nop
  }
  return usb_status;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73fb      	strb	r3, [r7, #15]
 8008c88:	e001      	b.n	8008c8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	461a      	mov	r2, r3
 8008c92:	2101      	movs	r1, #1
 8008c94:	4803      	ldr	r0, [pc, #12]	; (8008ca4 <MX_DriverVbusFS+0x34>)
 8008c96:	f7f8 fe99 	bl	80019cc <HAL_GPIO_WritePin>
}
 8008c9a:	bf00      	nop
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40020800 	.word	0x40020800

08008ca8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f103 0208 	add.w	r2, r3, #8
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f103 0208 	add.w	r2, r3, #8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f103 0208 	add.w	r2, r3, #8
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	683a      	ldr	r2, [r7, #0]
 8008d26:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d60:	d103      	bne.n	8008d6a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e00c      	b.n	8008d84 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e002      	b.n	8008d78 <vListInsert+0x2e>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	60fb      	str	r3, [r7, #12]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d2f6      	bcs.n	8008d72 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	683a      	ldr	r2, [r7, #0]
 8008d9e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	601a      	str	r2, [r3, #0]
}
 8008db0:	bf00      	nop
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6892      	ldr	r2, [r2, #8]
 8008dd2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6852      	ldr	r2, [r2, #4]
 8008ddc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d103      	bne.n	8008df0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1e5a      	subs	r2, r3, #1
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <xQueueGenericReset+0x2a>
        __asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	60bb      	str	r3, [r7, #8]
    }
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008e3a:	f002 f875 	bl	800af28 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e4a:	fb01 f303 	mul.w	r3, r1, r3
 8008e4e:	441a      	add	r2, r3
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	68f9      	ldr	r1, [r7, #12]
 8008e6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e70:	fb01 f303 	mul.w	r3, r1, r3
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	22ff      	movs	r2, #255	; 0xff
 8008e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d114      	bne.n	8008eba <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01a      	beq.n	8008ece <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3310      	adds	r3, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 f98b 	bl	800a1b8 <xTaskRemoveFromEventList>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d012      	beq.n	8008ece <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008ea8:	4b0c      	ldr	r3, [pc, #48]	; (8008edc <xQueueGenericReset+0xcc>)
 8008eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	e009      	b.n	8008ece <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	3310      	adds	r3, #16
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff fef2 	bl	8008ca8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3324      	adds	r3, #36	; 0x24
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff feed 	bl	8008ca8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008ece:	f002 f85b 	bl	800af88 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008ed2:	2301      	movs	r3, #1
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	; 0x30
 8008ee4:	af02      	add	r7, sp, #8
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <xQueueGenericCreate+0x2a>
        __asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	61bb      	str	r3, [r7, #24]
    }
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	fb02 f303 	mul.w	r3, r2, r3
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <xQueueGenericCreate+0x48>
 8008f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d101      	bne.n	8008f2c <xQueueGenericCreate+0x4c>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <xQueueGenericCreate+0x4e>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10a      	bne.n	8008f48 <xQueueGenericCreate+0x68>
        __asm volatile
 8008f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f36:	f383 8811 	msr	BASEPRI, r3
 8008f3a:	f3bf 8f6f 	isb	sy
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	617b      	str	r3, [r7, #20]
    }
 8008f44:	bf00      	nop
 8008f46:	e7fe      	b.n	8008f46 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8008f4e:	d90a      	bls.n	8008f66 <xQueueGenericCreate+0x86>
        __asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	613b      	str	r3, [r7, #16]
    }
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	3350      	adds	r3, #80	; 0x50
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 f906 	bl	800b17c <pvPortMalloc>
 8008f70:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008f72:	6a3b      	ldr	r3, [r7, #32]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00d      	beq.n	8008f94 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f78:	6a3b      	ldr	r3, [r7, #32]
 8008f7a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	3350      	adds	r3, #80	; 0x50
 8008f80:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f82:	79fa      	ldrb	r2, [r7, #7]
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 f805 	bl	8008f9e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008f94:	6a3b      	ldr	r3, [r7, #32]
    }
 8008f96:	4618      	mov	r0, r3
 8008f98:	3728      	adds	r7, #40	; 0x28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
 8008faa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	e002      	b.n	8008fc0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fcc:	2101      	movs	r1, #1
 8008fce:	69b8      	ldr	r0, [r7, #24]
 8008fd0:	f7ff ff1e 	bl	8008e10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	2073      	movs	r0, #115	; 0x73
 8008fe4:	f002 ff08 	bl	800bdf8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8008fe8:	bf00      	nop
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b090      	sub	sp, #64	; 0x40
 8008ff4:	af02      	add	r7, sp, #8
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
 8008ffc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ffe:	2300      	movs	r3, #0
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8009006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xQueueGenericSend+0x32>
        __asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <xQueueGenericSend+0x40>
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <xQueueGenericSend+0x44>
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <xQueueGenericSend+0x46>
 8009034:	2300      	movs	r3, #0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <xQueueGenericSend+0x60>
        __asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d103      	bne.n	800905e <xQueueGenericSend+0x6e>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <xQueueGenericSend+0x72>
 800905e:	2301      	movs	r3, #1
 8009060:	e000      	b.n	8009064 <xQueueGenericSend+0x74>
 8009062:	2300      	movs	r3, #0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <xQueueGenericSend+0x8e>
        __asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	623b      	str	r3, [r7, #32]
    }
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800907e:	f001 f9ff 	bl	800a480 <xTaskGetSchedulerState>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <xQueueGenericSend+0x9e>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <xQueueGenericSend+0xa2>
 800908e:	2301      	movs	r3, #1
 8009090:	e000      	b.n	8009094 <xQueueGenericSend+0xa4>
 8009092:	2300      	movs	r3, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10a      	bne.n	80090ae <xQueueGenericSend+0xbe>
        __asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	61fb      	str	r3, [r7, #28]
    }
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80090ae:	f001 ff3b 	bl	800af28 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d302      	bcc.n	80090c4 <xQueueGenericSend+0xd4>
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d136      	bne.n	8009132 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	4618      	mov	r0, r3
 80090c8:	f003 fbfe 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	460b      	mov	r3, r1
 80090d6:	4601      	mov	r1, r0
 80090d8:	205a      	movs	r0, #90	; 0x5a
 80090da:	f002 ff03 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e4:	f000 fa78 	bl	80095d8 <prvCopyDataToQueue>
 80090e8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d010      	beq.n	8009114 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 f85e 	bl	800a1b8 <xTaskRemoveFromEventList>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d013      	beq.n	800912a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009102:	4b4d      	ldr	r3, [pc, #308]	; (8009238 <xQueueGenericSend+0x248>)
 8009104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	e00a      	b.n	800912a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d007      	beq.n	800912a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800911a:	4b47      	ldr	r3, [pc, #284]	; (8009238 <xQueueGenericSend+0x248>)
 800911c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800912a:	f001 ff2d 	bl	800af88 <vPortExitCritical>
                return pdPASS;
 800912e:	2301      	movs	r3, #1
 8009130:	e07d      	b.n	800922e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d110      	bne.n	800915a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009138:	f001 ff26 	bl	800af88 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	4618      	mov	r0, r3
 8009140:	f003 fbc2 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	6879      	ldr	r1, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	460b      	mov	r3, r1
 800914e:	4601      	mov	r1, r0
 8009150:	205a      	movs	r0, #90	; 0x5a
 8009152:	f002 fec7 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009156:	2300      	movs	r3, #0
 8009158:	e069      	b.n	800922e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800915a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915c:	2b00      	cmp	r3, #0
 800915e:	d106      	bne.n	800916e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4618      	mov	r0, r3
 8009166:	f001 f88d 	bl	800a284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800916a:	2301      	movs	r3, #1
 800916c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800916e:	f001 ff0b 	bl	800af88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009172:	f000 fdeb 	bl	8009d4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009176:	f001 fed7 	bl	800af28 <vPortEnterCritical>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009180:	b25b      	sxtb	r3, r3
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d103      	bne.n	8009190 <xQueueGenericSend+0x1a0>
 8009188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009196:	b25b      	sxtb	r3, r3
 8009198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800919c:	d103      	bne.n	80091a6 <xQueueGenericSend+0x1b6>
 800919e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a6:	f001 feef 	bl	800af88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091aa:	1d3a      	adds	r2, r7, #4
 80091ac:	f107 0314 	add.w	r3, r7, #20
 80091b0:	4611      	mov	r1, r2
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 f87c 	bl	800a2b0 <xTaskCheckForTimeOut>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d124      	bne.n	8009208 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c0:	f000 fb02 	bl	80097c8 <prvIsQueueFull>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d018      	beq.n	80091fc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091cc:	3310      	adds	r3, #16
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4611      	mov	r1, r2
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 ff9e 	bl	800a114 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80091d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091da:	f000 fa8d 	bl	80096f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80091de:	f000 fdc3 	bl	8009d68 <xTaskResumeAll>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f47f af62 	bne.w	80090ae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <xQueueGenericSend+0x248>)
 80091ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091f0:	601a      	str	r2, [r3, #0]
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	e758      	b.n	80090ae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80091fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091fe:	f000 fa7b 	bl	80096f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009202:	f000 fdb1 	bl	8009d68 <xTaskResumeAll>
 8009206:	e752      	b.n	80090ae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920a:	f000 fa75 	bl	80096f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800920e:	f000 fdab 	bl	8009d68 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009214:	4618      	mov	r0, r3
 8009216:	f003 fb57 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	460b      	mov	r3, r1
 8009224:	4601      	mov	r1, r0
 8009226:	205a      	movs	r0, #90	; 0x5a
 8009228:	f002 fe5c 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800922c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800922e:	4618      	mov	r0, r3
 8009230:	3738      	adds	r7, #56	; 0x38
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b090      	sub	sp, #64	; 0x40
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <xQueueGenericSendFromISR+0x3c>
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueGenericSendFromISR+0x40>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueGenericSendFromISR+0x42>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b02      	cmp	r3, #2
 800929c:	d103      	bne.n	80092a6 <xQueueGenericSendFromISR+0x6a>
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <xQueueGenericSendFromISR+0x6e>
 80092a6:	2301      	movs	r3, #1
 80092a8:	e000      	b.n	80092ac <xQueueGenericSendFromISR+0x70>
 80092aa:	2300      	movs	r3, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	623b      	str	r3, [r7, #32]
    }
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092c6:	f001 ff19 	bl	800b0fc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80092ca:	f3ef 8211 	mrs	r2, BASEPRI
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	61fa      	str	r2, [r7, #28]
 80092e0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80092e2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d302      	bcc.n	80092f8 <xQueueGenericSendFromISR+0xbc>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d148      	bne.n	800938a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80092f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	4618      	mov	r0, r3
 800930c:	f003 fadc 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 8009310:	4601      	mov	r1, r0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	461a      	mov	r2, r3
 8009316:	2060      	movs	r0, #96	; 0x60
 8009318:	f002 fd14 	bl	800bd44 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009322:	f000 f959 	bl	80095d8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009326:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932e:	d112      	bne.n	8009356 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	2b00      	cmp	r3, #0
 8009336:	d025      	beq.n	8009384 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	3324      	adds	r3, #36	; 0x24
 800933c:	4618      	mov	r0, r3
 800933e:	f000 ff3b 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01d      	beq.n	8009384 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01a      	beq.n	8009384 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e016      	b.n	8009384 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009356:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800935a:	2b7f      	cmp	r3, #127	; 0x7f
 800935c:	d10a      	bne.n	8009374 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	617b      	str	r3, [r7, #20]
    }
 8009370:	bf00      	nop
 8009372:	e7fe      	b.n	8009372 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009378:	3301      	adds	r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	b25a      	sxtb	r2, r3
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009384:	2301      	movs	r3, #1
 8009386:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8009388:	e00b      	b.n	80093a2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	4618      	mov	r0, r3
 800938e:	f003 fa9b 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 8009392:	4601      	mov	r1, r0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	461a      	mov	r2, r3
 8009398:	2060      	movs	r0, #96	; 0x60
 800939a:	f002 fcd3 	bl	800bd44 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800939e:	2300      	movs	r3, #0
 80093a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80093ac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80093ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3740      	adds	r7, #64	; 0x40
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b08f      	sub	sp, #60	; 0x3c
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80093c4:	2300      	movs	r3, #0
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <xQueueReceive+0x30>
        __asm volatile
 80093d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	623b      	str	r3, [r7, #32]
    }
 80093e4:	bf00      	nop
 80093e6:	e7fe      	b.n	80093e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d103      	bne.n	80093f6 <xQueueReceive+0x3e>
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <xQueueReceive+0x42>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <xQueueReceive+0x44>
 80093fa:	2300      	movs	r3, #0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10a      	bne.n	8009416 <xQueueReceive+0x5e>
        __asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	61fb      	str	r3, [r7, #28]
    }
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009416:	f001 f833 	bl	800a480 <xTaskGetSchedulerState>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <xQueueReceive+0x6e>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <xQueueReceive+0x72>
 8009426:	2301      	movs	r3, #1
 8009428:	e000      	b.n	800942c <xQueueReceive+0x74>
 800942a:	2300      	movs	r3, #0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <xQueueReceive+0x8e>
        __asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	61bb      	str	r3, [r7, #24]
    }
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009446:	f001 fd6f 	bl	800af28 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800944a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d02f      	beq.n	80094b6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945a:	f000 f927 	bl	80096ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	4618      	mov	r0, r3
 8009462:	f003 fa31 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 8009466:	4604      	mov	r4, r0
 8009468:	2000      	movs	r0, #0
 800946a:	f003 fa2d 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 800946e:	4602      	mov	r2, r0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2101      	movs	r1, #1
 8009474:	9100      	str	r1, [sp, #0]
 8009476:	4621      	mov	r1, r4
 8009478:	205c      	movs	r0, #92	; 0x5c
 800947a:	f002 fd33 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	1e5a      	subs	r2, r3, #1
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00f      	beq.n	80094ae <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800948e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009490:	3310      	adds	r3, #16
 8009492:	4618      	mov	r0, r3
 8009494:	f000 fe90 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800949e:	4b4d      	ldr	r3, [pc, #308]	; (80095d4 <xQueueReceive+0x21c>)
 80094a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80094ae:	f001 fd6b 	bl	800af88 <vPortExitCritical>
                return pdPASS;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e08a      	b.n	80095cc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d113      	bne.n	80094e4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80094bc:	f001 fd64 	bl	800af88 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	4618      	mov	r0, r3
 80094c4:	f003 fa00 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 80094c8:	4604      	mov	r4, r0
 80094ca:	2000      	movs	r0, #0
 80094cc:	f003 f9fc 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 80094d0:	4602      	mov	r2, r0
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2101      	movs	r1, #1
 80094d6:	9100      	str	r1, [sp, #0]
 80094d8:	4621      	mov	r1, r4
 80094da:	205c      	movs	r0, #92	; 0x5c
 80094dc:	f002 fd02 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80094e0:	2300      	movs	r3, #0
 80094e2:	e073      	b.n	80095cc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80094e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d106      	bne.n	80094f8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80094ea:	f107 0310 	add.w	r3, r7, #16
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fec8 	bl	800a284 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80094f4:	2301      	movs	r3, #1
 80094f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80094f8:	f001 fd46 	bl	800af88 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80094fc:	f000 fc26 	bl	8009d4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009500:	f001 fd12 	bl	800af28 <vPortEnterCritical>
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009510:	d103      	bne.n	800951a <xQueueReceive+0x162>
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009520:	b25b      	sxtb	r3, r3
 8009522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009526:	d103      	bne.n	8009530 <xQueueReceive+0x178>
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009530:	f001 fd2a 	bl	800af88 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009534:	1d3a      	adds	r2, r7, #4
 8009536:	f107 0310 	add.w	r3, r7, #16
 800953a:	4611      	mov	r1, r2
 800953c:	4618      	mov	r0, r3
 800953e:	f000 feb7 	bl	800a2b0 <xTaskCheckForTimeOut>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d124      	bne.n	8009592 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954a:	f000 f927 	bl	800979c <prvIsQueueEmpty>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d018      	beq.n	8009586 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009556:	3324      	adds	r3, #36	; 0x24
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fdd9 	bl	800a114 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009564:	f000 f8c8 	bl	80096f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009568:	f000 fbfe 	bl	8009d68 <xTaskResumeAll>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	f47f af69 	bne.w	8009446 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009574:	4b17      	ldr	r3, [pc, #92]	; (80095d4 <xQueueReceive+0x21c>)
 8009576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	e75f      	b.n	8009446 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009588:	f000 f8b6 	bl	80096f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800958c:	f000 fbec 	bl	8009d68 <xTaskResumeAll>
 8009590:	e759      	b.n	8009446 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009594:	f000 f8b0 	bl	80096f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009598:	f000 fbe6 	bl	8009d68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800959c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800959e:	f000 f8fd 	bl	800979c <prvIsQueueEmpty>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f43f af4e 	beq.w	8009446 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	4618      	mov	r0, r3
 80095ae:	f003 f98b 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 80095b2:	4604      	mov	r4, r0
 80095b4:	2000      	movs	r0, #0
 80095b6:	f003 f987 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 80095ba:	4602      	mov	r2, r0
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2101      	movs	r1, #1
 80095c0:	9100      	str	r1, [sp, #0]
 80095c2:	4621      	mov	r1, r4
 80095c4:	205c      	movs	r0, #92	; 0x5c
 80095c6:	f002 fc8d 	bl	800bee4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80095ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3734      	adds	r7, #52	; 0x34
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd90      	pop	{r4, r7, pc}
 80095d4:	e000ed04 	.word	0xe000ed04

080095d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10d      	bne.n	8009612 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d14d      	bne.n	800969a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 ff5a 	bl	800a4bc <xTaskPriorityDisinherit>
 8009608:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
 8009610:	e043      	b.n	800969a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d119      	bne.n	800964c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6858      	ldr	r0, [r3, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	461a      	mov	r2, r3
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	f003 fae0 	bl	800cbe8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	441a      	add	r2, r3
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	429a      	cmp	r2, r3
 8009640:	d32b      	bcc.n	800969a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	e026      	b.n	800969a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	68d8      	ldr	r0, [r3, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	461a      	mov	r2, r3
 8009656:	68b9      	ldr	r1, [r7, #8]
 8009658:	f003 fac6 	bl	800cbe8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68da      	ldr	r2, [r3, #12]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	425b      	negs	r3, r3
 8009666:	441a      	add	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68da      	ldr	r2, [r3, #12]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d207      	bcs.n	8009688 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009680:	425b      	negs	r3, r3
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b02      	cmp	r3, #2
 800968c:	d105      	bne.n	800969a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3b01      	subs	r3, #1
 8009698:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80096a2:	697b      	ldr	r3, [r7, #20]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d018      	beq.n	80096f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	441a      	add	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d303      	bcc.n	80096e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68d9      	ldr	r1, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	461a      	mov	r2, r3
 80096ea:	6838      	ldr	r0, [r7, #0]
 80096ec:	f003 fa7c 	bl	800cbe8 <memcpy>
    }
}
 80096f0:	bf00      	nop
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009700:	f001 fc12 	bl	800af28 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800970a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800970c:	e011      	b.n	8009732 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d012      	beq.n	800973c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	3324      	adds	r3, #36	; 0x24
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fd4c 	bl	800a1b8 <xTaskRemoveFromEventList>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8009726:	f000 fe29 	bl	800a37c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	3b01      	subs	r3, #1
 800972e:	b2db      	uxtb	r3, r3
 8009730:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	dce9      	bgt.n	800970e <prvUnlockQueue+0x16>
 800973a:	e000      	b.n	800973e <prvUnlockQueue+0x46>
                        break;
 800973c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	22ff      	movs	r2, #255	; 0xff
 8009742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8009746:	f001 fc1f 	bl	800af88 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800974a:	f001 fbed 	bl	800af28 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009754:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009756:	e011      	b.n	800977c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d012      	beq.n	8009786 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	3310      	adds	r3, #16
 8009764:	4618      	mov	r0, r3
 8009766:	f000 fd27 	bl	800a1b8 <xTaskRemoveFromEventList>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009770:	f000 fe04 	bl	800a37c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	3b01      	subs	r3, #1
 8009778:	b2db      	uxtb	r3, r3
 800977a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800977c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	dce9      	bgt.n	8009758 <prvUnlockQueue+0x60>
 8009784:	e000      	b.n	8009788 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009786:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	22ff      	movs	r2, #255	; 0xff
 800978c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009790:	f001 fbfa 	bl	800af88 <vPortExitCritical>
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80097a4:	f001 fbc0 	bl	800af28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80097b0:	2301      	movs	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	e001      	b.n	80097ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80097b6:	2300      	movs	r3, #0
 80097b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80097ba:	f001 fbe5 	bl	800af88 <vPortExitCritical>

    return xReturn;
 80097be:	68fb      	ldr	r3, [r7, #12]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80097d0:	f001 fbaa 	bl	800af28 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d102      	bne.n	80097e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	60fb      	str	r3, [r7, #12]
 80097e4:	e001      	b.n	80097ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80097ea:	f001 fbcd 	bl	800af88 <vPortExitCritical>

    return xReturn;
 80097ee:	68fb      	ldr	r3, [r7, #12]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	e01e      	b.n	8009846 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009808:	4a13      	ldr	r2, [pc, #76]	; (8009858 <vQueueAddToRegistry+0x60>)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d115      	bne.n	8009840 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009814:	4910      	ldr	r1, [pc, #64]	; (8009858 <vQueueAddToRegistry+0x60>)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800981e:	4a0e      	ldr	r2, [pc, #56]	; (8009858 <vQueueAddToRegistry+0x60>)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	4413      	add	r3, r2
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4618      	mov	r0, r3
 800982e:	f003 f84b 	bl	800c8c8 <SEGGER_SYSVIEW_ShrinkId>
 8009832:	4601      	mov	r1, r0
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	2071      	movs	r0, #113	; 0x71
 800983a:	f002 fa83 	bl	800bd44 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800983e:	e006      	b.n	800984e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b07      	cmp	r3, #7
 800984a:	d9dd      	bls.n	8009808 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	20013d10 	.word	0x20013d10

0800985c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800986c:	f001 fb5c 	bl	800af28 <vPortEnterCritical>
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009876:	b25b      	sxtb	r3, r3
 8009878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987c:	d103      	bne.n	8009886 <vQueueWaitForMessageRestricted+0x2a>
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800988c:	b25b      	sxtb	r3, r3
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009892:	d103      	bne.n	800989c <vQueueWaitForMessageRestricted+0x40>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800989c:	f001 fb74 	bl	800af88 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d106      	bne.n	80098b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	3324      	adds	r3, #36	; 0x24
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	68b9      	ldr	r1, [r7, #8]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fc53 	bl	800a15c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80098b6:	6978      	ldr	r0, [r7, #20]
 80098b8:	f7ff ff1e 	bl	80096f8 <prvUnlockQueue>
    }
 80098bc:	bf00      	nop
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <getReadyTasksLists>:
PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed task list currently being used. */
PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. */

//User defined code
List_t *getReadyTasksLists(){
 80098c4:	b480      	push	{r7}
 80098c6:	af00      	add	r7, sp, #0
	return pxReadyTasksLists;
 80098c8:	4b02      	ldr	r3, [pc, #8]	; (80098d4 <getReadyTasksLists+0x10>)
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	200000c0 	.word	0x200000c0

080098d8 <getDelayedTaskList>:

//User defined code
List_t * getDelayedTaskList(){
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0
	return (List_t *)pxDelayedTaskList;
 80098dc:	4b03      	ldr	r3, [pc, #12]	; (80098ec <getDelayedTaskList+0x14>)
 80098de:	681b      	ldr	r3, [r3, #0]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	20000214 	.word	0x20000214

080098f0 <getOverflowDelayedTaskList>:

//User defined code
List_t * getOverflowDelayedTaskList(){
 80098f0:	b480      	push	{r7}
 80098f2:	af00      	add	r7, sp, #0
	return (List_t *)pxOverflowDelayedTaskList;
 80098f4:	4b03      	ldr	r3, [pc, #12]	; (8009904 <getOverflowDelayedTaskList+0x14>)
 80098f6:	681b      	ldr	r3, [r3, #0]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop
 8009904:	20000218 	.word	0x20000218

08009908 <getTCB_Info>:

struct UserTCB *getTCB_Info(void *pvOwner){
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
	TCB_t * pxTCB = ( TCB_t * )pvOwner;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	60fb      	str	r3, [r7, #12]
	struct UserTCB *userTCB= (struct UserTCB *)malloc(sizeof(struct UserTCB));
 8009914:	2014      	movs	r0, #20
 8009916:	f003 f949 	bl	800cbac <malloc>
 800991a:	4603      	mov	r3, r0
 800991c:	60bb      	str	r3, [r7, #8]
	userTCB->pcTaskName = pxTCB->pcTaskName;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	601a      	str	r2, [r3, #0]
	userTCB->pxStack = pxTCB->pxStack;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	60da      	str	r2, [r3, #12]
	userTCB->pxTopOfStack = pxTCB->pxTopOfStack;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	611a      	str	r2, [r3, #16]
	userTCB->uxPriority = pxTCB->uxPriority;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	605a      	str	r2, [r3, #4]
	userTCB->uxBasePriority = pxTCB->uxBasePriority;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	609a      	str	r2, [r3, #8]
	return userTCB;
 8009948:	68bb      	ldr	r3, [r7, #8]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009952:	b580      	push	{r7, lr}
 8009954:	b08c      	sub	sp, #48	; 0x30
 8009956:	af04      	add	r7, sp, #16
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	603b      	str	r3, [r7, #0]
 800995e:	4613      	mov	r3, r2
 8009960:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4618      	mov	r0, r3
 8009968:	f001 fc08 	bl	800b17c <pvPortMalloc>
 800996c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00e      	beq.n	8009992 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009974:	2058      	movs	r0, #88	; 0x58
 8009976:	f001 fc01 	bl	800b17c <pvPortMalloc>
 800997a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	631a      	str	r2, [r3, #48]	; 0x30
 8009988:	e005      	b.n	8009996 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800998a:	6978      	ldr	r0, [r7, #20]
 800998c:	f001 fcd6 	bl	800b33c <vPortFree>
 8009990:	e001      	b.n	8009996 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d013      	beq.n	80099c4 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800999c:	88fa      	ldrh	r2, [r7, #6]
 800999e:	2300      	movs	r3, #0
 80099a0:	9303      	str	r3, [sp, #12]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	9302      	str	r3, [sp, #8]
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	9301      	str	r3, [sp, #4]
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f80e 	bl	80099d4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80099b8:	69f8      	ldr	r0, [r7, #28]
 80099ba:	f000 f8a1 	bl	8009b00 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80099be:	2301      	movs	r3, #1
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	e002      	b.n	80099ca <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80099c4:	f04f 33ff 	mov.w	r3, #4294967295
 80099c8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80099ca:	69bb      	ldr	r3, [r7, #24]
    }
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	461a      	mov	r2, r3
 80099ec:	21a5      	movs	r1, #165	; 0xa5
 80099ee:	f003 f909 	bl	800cc04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80099fc:	3b01      	subs	r3, #1
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	f023 0307 	bic.w	r3, r3, #7
 8009a0a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f003 0307 	and.w	r3, r3, #7
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00a      	beq.n	8009a2c <prvInitialiseNewTask+0x58>
        __asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	617b      	str	r3, [r7, #20]
    }
 8009a28:	bf00      	nop
 8009a2a:	e7fe      	b.n	8009a2a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d01f      	beq.n	8009a72 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a32:	2300      	movs	r3, #0
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	e012      	b.n	8009a5e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	7819      	ldrb	r1, [r3, #0]
 8009a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	4413      	add	r3, r2
 8009a46:	3334      	adds	r3, #52	; 0x34
 8009a48:	460a      	mov	r2, r1
 8009a4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	4413      	add	r3, r2
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d006      	beq.n	8009a66 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	2b09      	cmp	r3, #9
 8009a62:	d9e9      	bls.n	8009a38 <prvInitialiseNewTask+0x64>
 8009a64:	e000      	b.n	8009a68 <prvInitialiseNewTask+0x94>
            {
                break;
 8009a66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009a70:	e003      	b.n	8009a7a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	2b0e      	cmp	r3, #14
 8009a7e:	d901      	bls.n	8009a84 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a80:	230e      	movs	r3, #14
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a88:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a8e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	2200      	movs	r2, #0
 8009a94:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a98:	3304      	adds	r3, #4
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff f924 	bl	8008ce8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa2:	3318      	adds	r3, #24
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7ff f91f 	bl	8008ce8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aae:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	f1c3 020f 	rsb	r2, r3, #15
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009abe:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac2:	3350      	adds	r3, #80	; 0x50
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f003 f89b 	bl	800cc04 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	3354      	adds	r3, #84	; 0x54
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f003 f894 	bl	800cc04 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	68f9      	ldr	r1, [r7, #12]
 8009ae0:	69b8      	ldr	r0, [r7, #24]
 8009ae2:	f001 f8f5 	bl	800acd0 <pxPortInitialiseStack>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aea:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009af6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009af8:	bf00      	nop
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009b00:	b5b0      	push	{r4, r5, r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009b08:	f001 fa0e 	bl	800af28 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009b0c:	4b3b      	ldr	r3, [pc, #236]	; (8009bfc <prvAddNewTaskToReadyList+0xfc>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a3a      	ldr	r2, [pc, #232]	; (8009bfc <prvAddNewTaskToReadyList+0xfc>)
 8009b14:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009b16:	4b3a      	ldr	r3, [pc, #232]	; (8009c00 <prvAddNewTaskToReadyList+0x100>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009b1e:	4a38      	ldr	r2, [pc, #224]	; (8009c00 <prvAddNewTaskToReadyList+0x100>)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009b24:	4b35      	ldr	r3, [pc, #212]	; (8009bfc <prvAddNewTaskToReadyList+0xfc>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d110      	bne.n	8009b4e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009b2c:	f000 fc4a 	bl	800a3c4 <prvInitialiseTaskLists>
 8009b30:	e00d      	b.n	8009b4e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009b32:	4b34      	ldr	r3, [pc, #208]	; (8009c04 <prvAddNewTaskToReadyList+0x104>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d109      	bne.n	8009b4e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009b3a:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <prvAddNewTaskToReadyList+0x100>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d802      	bhi.n	8009b4e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009b48:	4a2d      	ldr	r2, [pc, #180]	; (8009c00 <prvAddNewTaskToReadyList+0x100>)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009b4e:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <prvAddNewTaskToReadyList+0x108>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	4a2c      	ldr	r2, [pc, #176]	; (8009c08 <prvAddNewTaskToReadyList+0x108>)
 8009b56:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b58:	4b2b      	ldr	r3, [pc, #172]	; (8009c08 <prvAddNewTaskToReadyList+0x108>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d016      	beq.n	8009b94 <prvAddNewTaskToReadyList+0x94>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f002 fd87 	bl	800c67c <SEGGER_SYSVIEW_OnTaskCreate>
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7e:	461d      	mov	r5, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	461c      	mov	r4, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	1ae3      	subs	r3, r4, r3
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f001 fcf2 	bl	800b578 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f002 fdf4 	bl	800c784 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	409a      	lsls	r2, r3
 8009ba4:	4b19      	ldr	r3, [pc, #100]	; (8009c0c <prvAddNewTaskToReadyList+0x10c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <prvAddNewTaskToReadyList+0x10c>)
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	4413      	add	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <prvAddNewTaskToReadyList+0x110>)
 8009bbc:	441a      	add	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f7ff f89c 	bl	8008d02 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009bca:	f001 f9dd 	bl	800af88 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009bce:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <prvAddNewTaskToReadyList+0x104>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00e      	beq.n	8009bf4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <prvAddNewTaskToReadyList+0x100>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d207      	bcs.n	8009bf4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <prvAddNewTaskToReadyList+0x114>)
 8009be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8009bfc:	20000244 	.word	0x20000244
 8009c00:	200000bc 	.word	0x200000bc
 8009c04:	20000250 	.word	0x20000250
 8009c08:	20000260 	.word	0x20000260
 8009c0c:	2000024c 	.word	0x2000024c
 8009c10:	200000c0 	.word	0x200000c0
 8009c14:	e000ed04 	.word	0xe000ed04

08009c18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d01b      	beq.n	8009c62 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009c2a:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <vTaskDelay+0x68>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <vTaskDelay+0x30>
        __asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	60bb      	str	r3, [r7, #8]
    }
 8009c44:	bf00      	nop
 8009c46:	e7fe      	b.n	8009c46 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009c48:	f000 f880 	bl	8009d4c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	2023      	movs	r0, #35	; 0x23
 8009c50:	f002 f83c 	bl	800bccc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fcb0 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009c5c:	f000 f884 	bl	8009d68 <xTaskResumeAll>
 8009c60:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d107      	bne.n	8009c78 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <vTaskDelay+0x6c>)
 8009c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009c78:	bf00      	nop
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	2000026c 	.word	0x2000026c
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009c8e:	4b27      	ldr	r3, [pc, #156]	; (8009d2c <vTaskStartScheduler+0xa4>)
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	2300      	movs	r3, #0
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	2282      	movs	r2, #130	; 0x82
 8009c9a:	4925      	ldr	r1, [pc, #148]	; (8009d30 <vTaskStartScheduler+0xa8>)
 8009c9c:	4825      	ldr	r0, [pc, #148]	; (8009d34 <vTaskStartScheduler+0xac>)
 8009c9e:	f7ff fe58 	bl	8009952 <xTaskCreate>
 8009ca2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d102      	bne.n	8009cb0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009caa:	f000 fcff 	bl	800a6ac <xTimerCreateTimerTask>
 8009cae:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d124      	bne.n	8009d00 <vTaskStartScheduler+0x78>
        __asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60bb      	str	r3, [r7, #8]
    }
 8009cc8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009cca:	4b1b      	ldr	r3, [pc, #108]	; (8009d38 <vTaskStartScheduler+0xb0>)
 8009ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009cd2:	4b1a      	ldr	r3, [pc, #104]	; (8009d3c <vTaskStartScheduler+0xb4>)
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cd8:	4b19      	ldr	r3, [pc, #100]	; (8009d40 <vTaskStartScheduler+0xb8>)
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009cde:	4b19      	ldr	r3, [pc, #100]	; (8009d44 <vTaskStartScheduler+0xbc>)
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <vTaskStartScheduler+0xa4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d102      	bne.n	8009cf0 <vTaskStartScheduler+0x68>
 8009cea:	f002 fcab 	bl	800c644 <SEGGER_SYSVIEW_OnIdle>
 8009cee:	e004      	b.n	8009cfa <vTaskStartScheduler+0x72>
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <vTaskStartScheduler+0xbc>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 fd03 	bl	800c700 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009cfa:	f001 f873 	bl	800ade4 <xPortStartScheduler>
 8009cfe:	e00e      	b.n	8009d1e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d06:	d10a      	bne.n	8009d1e <vTaskStartScheduler+0x96>
        __asm volatile
 8009d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0c:	f383 8811 	msr	BASEPRI, r3
 8009d10:	f3bf 8f6f 	isb	sy
 8009d14:	f3bf 8f4f 	dsb	sy
 8009d18:	607b      	str	r3, [r7, #4]
    }
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009d1e:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <vTaskStartScheduler+0xc0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
}
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000268 	.word	0x20000268
 8009d30:	0800d540 	.word	0x0800d540
 8009d34:	0800a395 	.word	0x0800a395
 8009d38:	20000264 	.word	0x20000264
 8009d3c:	20000250 	.word	0x20000250
 8009d40:	20000248 	.word	0x20000248
 8009d44:	200000bc 	.word	0x200000bc
 8009d48:	2000002c 	.word	0x2000002c

08009d4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009d50:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <vTaskSuspendAll+0x18>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a03      	ldr	r2, [pc, #12]	; (8009d64 <vTaskSuspendAll+0x18>)
 8009d58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009d5a:	bf00      	nop
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	2000026c 	.word	0x2000026c

08009d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009d72:	2300      	movs	r3, #0
 8009d74:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009d76:	4b43      	ldr	r3, [pc, #268]	; (8009e84 <xTaskResumeAll+0x11c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <xTaskResumeAll+0x2c>
        __asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
    }
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009d94:	f001 f8c8 	bl	800af28 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009d98:	4b3a      	ldr	r3, [pc, #232]	; (8009e84 <xTaskResumeAll+0x11c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	4a39      	ldr	r2, [pc, #228]	; (8009e84 <xTaskResumeAll+0x11c>)
 8009da0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da2:	4b38      	ldr	r3, [pc, #224]	; (8009e84 <xTaskResumeAll+0x11c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d165      	bne.n	8009e76 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009daa:	4b37      	ldr	r3, [pc, #220]	; (8009e88 <xTaskResumeAll+0x120>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d061      	beq.n	8009e76 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009db2:	e032      	b.n	8009e1a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db4:	4b35      	ldr	r3, [pc, #212]	; (8009e8c <xTaskResumeAll+0x124>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3318      	adds	r3, #24
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fffb 	bl	8008dbc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3304      	adds	r3, #4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fff6 	bl	8008dbc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f002 fcd6 	bl	800c784 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ddc:	2201      	movs	r2, #1
 8009dde:	409a      	lsls	r2, r3
 8009de0:	4b2b      	ldr	r3, [pc, #172]	; (8009e90 <xTaskResumeAll+0x128>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	4a2a      	ldr	r2, [pc, #168]	; (8009e90 <xTaskResumeAll+0x128>)
 8009de8:	6013      	str	r3, [r2, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dee:	4613      	mov	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4a27      	ldr	r2, [pc, #156]	; (8009e94 <xTaskResumeAll+0x12c>)
 8009df8:	441a      	add	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7fe ff7e 	bl	8008d02 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0a:	4b23      	ldr	r3, [pc, #140]	; (8009e98 <xTaskResumeAll+0x130>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d302      	bcc.n	8009e1a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8009e14:	4b21      	ldr	r3, [pc, #132]	; (8009e9c <xTaskResumeAll+0x134>)
 8009e16:	2201      	movs	r2, #1
 8009e18:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e1a:	4b1c      	ldr	r3, [pc, #112]	; (8009e8c <xTaskResumeAll+0x124>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1c8      	bne.n	8009db4 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d001      	beq.n	8009e2c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009e28:	f000 fb0e 	bl	800a448 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e2c:	4b1c      	ldr	r3, [pc, #112]	; (8009ea0 <xTaskResumeAll+0x138>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d010      	beq.n	8009e5a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e38:	f000 f846 	bl	8009ec8 <xTaskIncrementTick>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8009e42:	4b16      	ldr	r3, [pc, #88]	; (8009e9c <xTaskResumeAll+0x134>)
 8009e44:	2201      	movs	r2, #1
 8009e46:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1f1      	bne.n	8009e38 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8009e54:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <xTaskResumeAll+0x138>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e5a:	4b10      	ldr	r3, [pc, #64]	; (8009e9c <xTaskResumeAll+0x134>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8009e62:	2301      	movs	r3, #1
 8009e64:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e66:	4b0f      	ldr	r3, [pc, #60]	; (8009ea4 <xTaskResumeAll+0x13c>)
 8009e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e76:	f001 f887 	bl	800af88 <vPortExitCritical>

    return xAlreadyYielded;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	2000026c 	.word	0x2000026c
 8009e88:	20000244 	.word	0x20000244
 8009e8c:	2000021c 	.word	0x2000021c
 8009e90:	2000024c 	.word	0x2000024c
 8009e94:	200000c0 	.word	0x200000c0
 8009e98:	200000bc 	.word	0x200000bc
 8009e9c:	20000258 	.word	0x20000258
 8009ea0:	20000254 	.word	0x20000254
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009eae:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <xTaskGetTickCount+0x1c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009eb4:	687b      	ldr	r3, [r7, #4]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	370c      	adds	r7, #12
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	20000248 	.word	0x20000248

08009ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ed2:	4b50      	ldr	r3, [pc, #320]	; (800a014 <xTaskIncrementTick+0x14c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 8092 	bne.w	800a000 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009edc:	4b4e      	ldr	r3, [pc, #312]	; (800a018 <xTaskIncrementTick+0x150>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009ee4:	4a4c      	ldr	r2, [pc, #304]	; (800a018 <xTaskIncrementTick+0x150>)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d120      	bne.n	8009f32 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8009ef0:	4b4a      	ldr	r3, [pc, #296]	; (800a01c <xTaskIncrementTick+0x154>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <xTaskIncrementTick+0x48>
        __asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	603b      	str	r3, [r7, #0]
    }
 8009f0c:	bf00      	nop
 8009f0e:	e7fe      	b.n	8009f0e <xTaskIncrementTick+0x46>
 8009f10:	4b42      	ldr	r3, [pc, #264]	; (800a01c <xTaskIncrementTick+0x154>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	4b42      	ldr	r3, [pc, #264]	; (800a020 <xTaskIncrementTick+0x158>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a40      	ldr	r2, [pc, #256]	; (800a01c <xTaskIncrementTick+0x154>)
 8009f1c:	6013      	str	r3, [r2, #0]
 8009f1e:	4a40      	ldr	r2, [pc, #256]	; (800a020 <xTaskIncrementTick+0x158>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	4b3f      	ldr	r3, [pc, #252]	; (800a024 <xTaskIncrementTick+0x15c>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	4a3e      	ldr	r2, [pc, #248]	; (800a024 <xTaskIncrementTick+0x15c>)
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	f000 fa8b 	bl	800a448 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f32:	4b3d      	ldr	r3, [pc, #244]	; (800a028 <xTaskIncrementTick+0x160>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d34c      	bcc.n	8009fd6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f3c:	4b37      	ldr	r3, [pc, #220]	; (800a01c <xTaskIncrementTick+0x154>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d104      	bne.n	8009f50 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f46:	4b38      	ldr	r3, [pc, #224]	; (800a028 <xTaskIncrementTick+0x160>)
 8009f48:	f04f 32ff 	mov.w	r2, #4294967295
 8009f4c:	601a      	str	r2, [r3, #0]
                    break;
 8009f4e:	e042      	b.n	8009fd6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f50:	4b32      	ldr	r3, [pc, #200]	; (800a01c <xTaskIncrementTick+0x154>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d203      	bcs.n	8009f70 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f68:	4a2f      	ldr	r2, [pc, #188]	; (800a028 <xTaskIncrementTick+0x160>)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f6e:	e032      	b.n	8009fd6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe ff21 	bl	8008dbc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	3318      	adds	r3, #24
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fe ff18 	bl	8008dbc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f002 fbf8 	bl	800c784 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	409a      	lsls	r2, r3
 8009f9c:	4b23      	ldr	r3, [pc, #140]	; (800a02c <xTaskIncrementTick+0x164>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	4a22      	ldr	r2, [pc, #136]	; (800a02c <xTaskIncrementTick+0x164>)
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <xTaskIncrementTick+0x168>)
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fe fea0 	bl	8008d02 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4b1b      	ldr	r3, [pc, #108]	; (800a034 <xTaskIncrementTick+0x16c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d3b5      	bcc.n	8009f3c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fd4:	e7b2      	b.n	8009f3c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fd6:	4b17      	ldr	r3, [pc, #92]	; (800a034 <xTaskIncrementTick+0x16c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fdc:	4914      	ldr	r1, [pc, #80]	; (800a030 <xTaskIncrementTick+0x168>)
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	440b      	add	r3, r1
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d901      	bls.n	8009ff2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <xTaskIncrementTick+0x170>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d007      	beq.n	800a00a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e004      	b.n	800a00a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a000:	4b0e      	ldr	r3, [pc, #56]	; (800a03c <xTaskIncrementTick+0x174>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a0d      	ldr	r2, [pc, #52]	; (800a03c <xTaskIncrementTick+0x174>)
 800a008:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a00a:	697b      	ldr	r3, [r7, #20]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	2000026c 	.word	0x2000026c
 800a018:	20000248 	.word	0x20000248
 800a01c:	20000214 	.word	0x20000214
 800a020:	20000218 	.word	0x20000218
 800a024:	2000025c 	.word	0x2000025c
 800a028:	20000264 	.word	0x20000264
 800a02c:	2000024c 	.word	0x2000024c
 800a030:	200000c0 	.word	0x200000c0
 800a034:	200000bc 	.word	0x200000bc
 800a038:	20000258 	.word	0x20000258
 800a03c:	20000254 	.word	0x20000254

0800a040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a046:	4b2d      	ldr	r3, [pc, #180]	; (800a0fc <vTaskSwitchContext+0xbc>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a04e:	4b2c      	ldr	r3, [pc, #176]	; (800a100 <vTaskSwitchContext+0xc0>)
 800a050:	2201      	movs	r2, #1
 800a052:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a054:	e04d      	b.n	800a0f2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800a056:	4b2a      	ldr	r3, [pc, #168]	; (800a100 <vTaskSwitchContext+0xc0>)
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a05c:	4b29      	ldr	r3, [pc, #164]	; (800a104 <vTaskSwitchContext+0xc4>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	fab3 f383 	clz	r3, r3
 800a068:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a06a:	7afb      	ldrb	r3, [r7, #11]
 800a06c:	f1c3 031f 	rsb	r3, r3, #31
 800a070:	617b      	str	r3, [r7, #20]
 800a072:	4925      	ldr	r1, [pc, #148]	; (800a108 <vTaskSwitchContext+0xc8>)
 800a074:	697a      	ldr	r2, [r7, #20]
 800a076:	4613      	mov	r3, r2
 800a078:	009b      	lsls	r3, r3, #2
 800a07a:	4413      	add	r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <vTaskSwitchContext+0x5c>
        __asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	607b      	str	r3, [r7, #4]
    }
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <vTaskSwitchContext+0x5a>
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4a18      	ldr	r2, [pc, #96]	; (800a108 <vTaskSwitchContext+0xc8>)
 800a0a8:	4413      	add	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	605a      	str	r2, [r3, #4]
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d104      	bne.n	800a0cc <vTaskSwitchContext+0x8c>
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	605a      	str	r2, [r3, #4]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	4a0e      	ldr	r2, [pc, #56]	; (800a10c <vTaskSwitchContext+0xcc>)
 800a0d4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a0d6:	4b0d      	ldr	r3, [pc, #52]	; (800a10c <vTaskSwitchContext+0xcc>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <vTaskSwitchContext+0xd0>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d102      	bne.n	800a0e8 <vTaskSwitchContext+0xa8>
 800a0e2:	f002 faaf 	bl	800c644 <SEGGER_SYSVIEW_OnIdle>
}
 800a0e6:	e004      	b.n	800a0f2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800a0e8:	4b08      	ldr	r3, [pc, #32]	; (800a10c <vTaskSwitchContext+0xcc>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f002 fb07 	bl	800c700 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a0f2:	bf00      	nop
 800a0f4:	3718      	adds	r7, #24
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	2000026c 	.word	0x2000026c
 800a100:	20000258 	.word	0x20000258
 800a104:	2000024c 	.word	0x2000024c
 800a108:	200000c0 	.word	0x200000c0
 800a10c:	200000bc 	.word	0x200000bc
 800a110:	20000268 	.word	0x20000268

0800a114 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	60fb      	str	r3, [r7, #12]
    }
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a13a:	4b07      	ldr	r3, [pc, #28]	; (800a158 <vTaskPlaceOnEventList+0x44>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	3318      	adds	r3, #24
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7fe fe01 	bl	8008d4a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a148:	2101      	movs	r1, #1
 800a14a:	6838      	ldr	r0, [r7, #0]
 800a14c:	f000 fa36 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	200000bc 	.word	0x200000bc

0800a15c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	617b      	str	r3, [r7, #20]
    }
 800a180:	bf00      	nop
 800a182:	e7fe      	b.n	800a182 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a184:	4b0b      	ldr	r3, [pc, #44]	; (800a1b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3318      	adds	r3, #24
 800a18a:	4619      	mov	r1, r3
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7fe fdb8 	bl	8008d02 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800a198:	f04f 33ff 	mov.w	r3, #4294967295
 800a19c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a19e:	2024      	movs	r0, #36	; 0x24
 800a1a0:	f001 fd76 	bl	800bc90 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	68b8      	ldr	r0, [r7, #8]
 800a1a8:	f000 fa08 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
    }
 800a1ac:	bf00      	nop
 800a1ae:	3718      	adds	r7, #24
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	200000bc 	.word	0x200000bc

0800a1b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	60fb      	str	r3, [r7, #12]
    }
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	3318      	adds	r3, #24
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7fe fde7 	bl	8008dbc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1ee:	4b1f      	ldr	r3, [pc, #124]	; (800a26c <xTaskRemoveFromEventList+0xb4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d120      	bne.n	800a238 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fdde 	bl	8008dbc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4618      	mov	r0, r3
 800a204:	f002 fabe 	bl	800c784 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	2201      	movs	r2, #1
 800a20e:	409a      	lsls	r2, r3
 800a210:	4b17      	ldr	r3, [pc, #92]	; (800a270 <xTaskRemoveFromEventList+0xb8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4313      	orrs	r3, r2
 800a216:	4a16      	ldr	r2, [pc, #88]	; (800a270 <xTaskRemoveFromEventList+0xb8>)
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4a13      	ldr	r2, [pc, #76]	; (800a274 <xTaskRemoveFromEventList+0xbc>)
 800a228:	441a      	add	r2, r3
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3304      	adds	r3, #4
 800a22e:	4619      	mov	r1, r3
 800a230:	4610      	mov	r0, r2
 800a232:	f7fe fd66 	bl	8008d02 <vListInsertEnd>
 800a236:	e005      	b.n	800a244 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3318      	adds	r3, #24
 800a23c:	4619      	mov	r1, r3
 800a23e:	480e      	ldr	r0, [pc, #56]	; (800a278 <xTaskRemoveFromEventList+0xc0>)
 800a240:	f7fe fd5f 	bl	8008d02 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a248:	4b0c      	ldr	r3, [pc, #48]	; (800a27c <xTaskRemoveFromEventList+0xc4>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24e:	429a      	cmp	r2, r3
 800a250:	d905      	bls.n	800a25e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a252:	2301      	movs	r3, #1
 800a254:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a256:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <xTaskRemoveFromEventList+0xc8>)
 800a258:	2201      	movs	r2, #1
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	e001      	b.n	800a262 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800a25e:	2300      	movs	r3, #0
 800a260:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a262:	697b      	ldr	r3, [r7, #20]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3718      	adds	r7, #24
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	2000026c 	.word	0x2000026c
 800a270:	2000024c 	.word	0x2000024c
 800a274:	200000c0 	.word	0x200000c0
 800a278:	2000021c 	.word	0x2000021c
 800a27c:	200000bc 	.word	0x200000bc
 800a280:	20000258 	.word	0x20000258

0800a284 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <vTaskInternalSetTimeOutState+0x24>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <vTaskInternalSetTimeOutState+0x28>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
}
 800a29c:	bf00      	nop
 800a29e:	370c      	adds	r7, #12
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	2000025c 	.word	0x2000025c
 800a2ac:	20000248 	.word	0x20000248

0800a2b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10a      	bne.n	800a2d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
    }
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10a      	bne.n	800a2f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	60fb      	str	r3, [r7, #12]
    }
 800a2ee:	bf00      	nop
 800a2f0:	e7fe      	b.n	800a2f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800a2f2:	f000 fe19 	bl	800af28 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a2f6:	4b1f      	ldr	r3, [pc, #124]	; (800a374 <xTaskCheckForTimeOut+0xc4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a30e:	d102      	bne.n	800a316 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]
 800a314:	e026      	b.n	800a364 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4b17      	ldr	r3, [pc, #92]	; (800a378 <xTaskCheckForTimeOut+0xc8>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d00a      	beq.n	800a338 <xTaskCheckForTimeOut+0x88>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	69ba      	ldr	r2, [r7, #24]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d305      	bcc.n	800a338 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a32c:	2301      	movs	r3, #1
 800a32e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	e015      	b.n	800a364 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	697a      	ldr	r2, [r7, #20]
 800a33e:	429a      	cmp	r2, r3
 800a340:	d20b      	bcs.n	800a35a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	1ad2      	subs	r2, r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7ff ff98 	bl	800a284 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a354:	2300      	movs	r3, #0
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	e004      	b.n	800a364 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2200      	movs	r2, #0
 800a35e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a360:	2301      	movs	r3, #1
 800a362:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a364:	f000 fe10 	bl	800af88 <vPortExitCritical>

    return xReturn;
 800a368:	69fb      	ldr	r3, [r7, #28]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000248 	.word	0x20000248
 800a378:	2000025c 	.word	0x2000025c

0800a37c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a380:	4b03      	ldr	r3, [pc, #12]	; (800a390 <vTaskMissedYield+0x14>)
 800a382:	2201      	movs	r2, #1
 800a384:	601a      	str	r2, [r3, #0]
}
 800a386:	bf00      	nop
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20000258 	.word	0x20000258

0800a394 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a39c:	f000 f84c 	bl	800a438 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a3a0:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <prvIdleTask+0x28>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d9f9      	bls.n	800a39c <prvIdleTask+0x8>
                {
                    taskYIELD();
 800a3a8:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <prvIdleTask+0x2c>)
 800a3aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ae:	601a      	str	r2, [r3, #0]
 800a3b0:	f3bf 8f4f 	dsb	sy
 800a3b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a3b8:	e7f0      	b.n	800a39c <prvIdleTask+0x8>
 800a3ba:	bf00      	nop
 800a3bc:	200000c0 	.word	0x200000c0
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
 800a3ce:	e00c      	b.n	800a3ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4a10      	ldr	r2, [pc, #64]	; (800a41c <prvInitialiseTaskLists+0x58>)
 800a3dc:	4413      	add	r3, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fc62 	bl	8008ca8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	607b      	str	r3, [r7, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b0e      	cmp	r3, #14
 800a3ee:	d9ef      	bls.n	800a3d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a3f0:	480b      	ldr	r0, [pc, #44]	; (800a420 <prvInitialiseTaskLists+0x5c>)
 800a3f2:	f7fe fc59 	bl	8008ca8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a3f6:	480b      	ldr	r0, [pc, #44]	; (800a424 <prvInitialiseTaskLists+0x60>)
 800a3f8:	f7fe fc56 	bl	8008ca8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a3fc:	480a      	ldr	r0, [pc, #40]	; (800a428 <prvInitialiseTaskLists+0x64>)
 800a3fe:	f7fe fc53 	bl	8008ca8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a402:	480a      	ldr	r0, [pc, #40]	; (800a42c <prvInitialiseTaskLists+0x68>)
 800a404:	f7fe fc50 	bl	8008ca8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a408:	4b09      	ldr	r3, [pc, #36]	; (800a430 <prvInitialiseTaskLists+0x6c>)
 800a40a:	4a05      	ldr	r2, [pc, #20]	; (800a420 <prvInitialiseTaskLists+0x5c>)
 800a40c:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a40e:	4b09      	ldr	r3, [pc, #36]	; (800a434 <prvInitialiseTaskLists+0x70>)
 800a410:	4a04      	ldr	r2, [pc, #16]	; (800a424 <prvInitialiseTaskLists+0x60>)
 800a412:	601a      	str	r2, [r3, #0]
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	200000c0 	.word	0x200000c0
 800a420:	200001ec 	.word	0x200001ec
 800a424:	20000200 	.word	0x20000200
 800a428:	2000021c 	.word	0x2000021c
 800a42c:	20000230 	.word	0x20000230
 800a430:	20000214 	.word	0x20000214
 800a434:	20000218 	.word	0x20000218

0800a438 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a438:	b480      	push	{r7}
 800a43a:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800a43c:	bf00      	nop
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a44c:	4b0a      	ldr	r3, [pc, #40]	; (800a478 <prvResetNextTaskUnblockTime+0x30>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d104      	bne.n	800a460 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <prvResetNextTaskUnblockTime+0x34>)
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a45e:	e005      	b.n	800a46c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <prvResetNextTaskUnblockTime+0x30>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a04      	ldr	r2, [pc, #16]	; (800a47c <prvResetNextTaskUnblockTime+0x34>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	20000214 	.word	0x20000214
 800a47c:	20000264 	.word	0x20000264

0800a480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a486:	4b0b      	ldr	r3, [pc, #44]	; (800a4b4 <xTaskGetSchedulerState+0x34>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d102      	bne.n	800a494 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a48e:	2301      	movs	r3, #1
 800a490:	607b      	str	r3, [r7, #4]
 800a492:	e008      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <xTaskGetSchedulerState+0x38>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a49c:	2302      	movs	r3, #2
 800a49e:	607b      	str	r3, [r7, #4]
 800a4a0:	e001      	b.n	800a4a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a4a6:	687b      	ldr	r3, [r7, #4]
    }
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr
 800a4b4:	20000250 	.word	0x20000250
 800a4b8:	2000026c 	.word	0x2000026c

0800a4bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d068      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a4d2:	4b37      	ldr	r3, [pc, #220]	; (800a5b0 <xTaskPriorityDisinherit+0xf4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d00a      	beq.n	800a4f2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800a4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e0:	f383 8811 	msr	BASEPRI, r3
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	f3bf 8f4f 	dsb	sy
 800a4ec:	60fb      	str	r3, [r7, #12]
    }
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	60bb      	str	r3, [r7, #8]
    }
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a522:	429a      	cmp	r2, r3
 800a524:	d03e      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d13a      	bne.n	800a5a4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	3304      	adds	r3, #4
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe fc42 	bl	8008dbc <uxListRemove>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10a      	bne.n	800a554 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	2201      	movs	r2, #1
 800a544:	fa02 f303 	lsl.w	r3, r2, r3
 800a548:	43da      	mvns	r2, r3
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <xTaskPriorityDisinherit+0xf8>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4013      	ands	r3, r2
 800a550:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <xTaskPriorityDisinherit+0xf8>)
 800a552:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4619      	mov	r1, r3
 800a558:	204a      	movs	r0, #74	; 0x4a
 800a55a:	f001 fbb7 	bl	800bccc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	f1c3 020f 	rsb	r2, r3, #15
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	2201      	movs	r2, #1
 800a578:	409a      	lsls	r2, r3
 800a57a:	4b0e      	ldr	r3, [pc, #56]	; (800a5b4 <xTaskPriorityDisinherit+0xf8>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4313      	orrs	r3, r2
 800a580:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <xTaskPriorityDisinherit+0xf8>)
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <xTaskPriorityDisinherit+0xfc>)
 800a592:	441a      	add	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe fbb1 	bl	8008d02 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a5a4:	697b      	ldr	r3, [r7, #20]
    }
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	200000bc 	.word	0x200000bc
 800a5b4:	2000024c 	.word	0x2000024c
 800a5b8:	200000c0 	.word	0x200000c0

0800a5bc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a5c6:	4b32      	ldr	r3, [pc, #200]	; (800a690 <prvAddCurrentTaskToDelayedList+0xd4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5cc:	4b31      	ldr	r3, [pc, #196]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fbf2 	bl	8008dbc <uxListRemove>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10b      	bne.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a5de:	4b2d      	ldr	r3, [pc, #180]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ea:	43da      	mvns	r2, r3
 800a5ec:	4b2a      	ldr	r3, [pc, #168]	; (800a698 <prvAddCurrentTaskToDelayedList+0xdc>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4013      	ands	r3, r2
 800a5f2:	4a29      	ldr	r2, [pc, #164]	; (800a698 <prvAddCurrentTaskToDelayedList+0xdc>)
 800a5f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5fc:	d110      	bne.n	800a620 <prvAddCurrentTaskToDelayedList+0x64>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00d      	beq.n	800a620 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800a604:	4b23      	ldr	r3, [pc, #140]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	211b      	movs	r1, #27
 800a60a:	4618      	mov	r0, r3
 800a60c:	f002 f8fc 	bl	800c808 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a610:	4b20      	ldr	r3, [pc, #128]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4820      	ldr	r0, [pc, #128]	; (800a69c <prvAddCurrentTaskToDelayedList+0xe0>)
 800a61a:	f7fe fb72 	bl	8008d02 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a61e:	e032      	b.n	800a686 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a628:	4b1a      	ldr	r3, [pc, #104]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	429a      	cmp	r2, r3
 800a636:	d20f      	bcs.n	800a658 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800a638:	4b16      	ldr	r3, [pc, #88]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2104      	movs	r1, #4
 800a63e:	4618      	mov	r0, r3
 800a640:	f002 f8e2 	bl	800c808 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a644:	4b16      	ldr	r3, [pc, #88]	; (800a6a0 <prvAddCurrentTaskToDelayedList+0xe4>)
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	4b12      	ldr	r3, [pc, #72]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3304      	adds	r3, #4
 800a64e:	4619      	mov	r1, r3
 800a650:	4610      	mov	r0, r2
 800a652:	f7fe fb7a 	bl	8008d4a <vListInsert>
}
 800a656:	e016      	b.n	800a686 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800a658:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2104      	movs	r1, #4
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 f8d2 	bl	800c808 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a664:	4b0f      	ldr	r3, [pc, #60]	; (800a6a4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3304      	adds	r3, #4
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f7fe fb6a 	bl	8008d4a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800a676:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xec>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d202      	bcs.n	800a686 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800a680:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <prvAddCurrentTaskToDelayedList+0xec>)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	6013      	str	r3, [r2, #0]
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000248 	.word	0x20000248
 800a694:	200000bc 	.word	0x200000bc
 800a698:	2000024c 	.word	0x2000024c
 800a69c:	20000230 	.word	0x20000230
 800a6a0:	20000218 	.word	0x20000218
 800a6a4:	20000214 	.word	0x20000214
 800a6a8:	20000264 	.word	0x20000264

0800a6ac <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a6b6:	f000 fad5 	bl	800ac64 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a6ba:	4b11      	ldr	r3, [pc, #68]	; (800a700 <xTimerCreateTimerTask+0x54>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00b      	beq.n	800a6da <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800a6c2:	4b10      	ldr	r3, [pc, #64]	; (800a704 <xTimerCreateTimerTask+0x58>)
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	2302      	movs	r3, #2
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a6d0:	490d      	ldr	r1, [pc, #52]	; (800a708 <xTimerCreateTimerTask+0x5c>)
 800a6d2:	480e      	ldr	r0, [pc, #56]	; (800a70c <xTimerCreateTimerTask+0x60>)
 800a6d4:	f7ff f93d 	bl	8009952 <xTaskCreate>
 800a6d8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	603b      	str	r3, [r7, #0]
    }
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a6f6:	687b      	ldr	r3, [r7, #4]
    }
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	200002a0 	.word	0x200002a0
 800a704:	200002a4 	.word	0x200002a4
 800a708:	0800d548 	.word	0x0800d548
 800a70c:	0800a845 	.word	0x0800a845

0800a710 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800a710:	b580      	push	{r7, lr}
 800a712:	b08a      	sub	sp, #40	; 0x28
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800a71e:	2300      	movs	r3, #0
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xTimerGenericCommand+0x2e>
        __asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	623b      	str	r3, [r7, #32]
    }
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800a73e:	4b1a      	ldr	r3, [pc, #104]	; (800a7a8 <xTimerGenericCommand+0x98>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d02a      	beq.n	800a79c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b05      	cmp	r3, #5
 800a756:	dc18      	bgt.n	800a78a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a758:	f7ff fe92 	bl	800a480 <xTaskGetSchedulerState>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d109      	bne.n	800a776 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a762:	4b11      	ldr	r3, [pc, #68]	; (800a7a8 <xTimerGenericCommand+0x98>)
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f107 0114 	add.w	r1, r7, #20
 800a76a:	2300      	movs	r3, #0
 800a76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a76e:	f7fe fc3f 	bl	8008ff0 <xQueueGenericSend>
 800a772:	6278      	str	r0, [r7, #36]	; 0x24
 800a774:	e012      	b.n	800a79c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a776:	4b0c      	ldr	r3, [pc, #48]	; (800a7a8 <xTimerGenericCommand+0x98>)
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	f107 0114 	add.w	r1, r7, #20
 800a77e:	2300      	movs	r3, #0
 800a780:	2200      	movs	r2, #0
 800a782:	f7fe fc35 	bl	8008ff0 <xQueueGenericSend>
 800a786:	6278      	str	r0, [r7, #36]	; 0x24
 800a788:	e008      	b.n	800a79c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a78a:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <xTimerGenericCommand+0x98>)
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	f107 0114 	add.w	r1, r7, #20
 800a792:	2300      	movs	r3, #0
 800a794:	683a      	ldr	r2, [r7, #0]
 800a796:	f7fe fd51 	bl	800923c <xQueueGenericSendFromISR>
 800a79a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3728      	adds	r7, #40	; 0x28
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	200002a0 	.word	0x200002a0

0800a7ac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b6:	4b22      	ldr	r3, [pc, #136]	; (800a840 <prvProcessExpiredTimer+0x94>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7fe faf9 	bl	8008dbc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d022      	beq.n	800a81e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	699a      	ldr	r2, [r3, #24]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	18d1      	adds	r1, r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	6978      	ldr	r0, [r7, #20]
 800a7e6:	f000 f8d1 	bl	800a98c <prvInsertTimerInActiveList>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d01f      	beq.n	800a830 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6978      	ldr	r0, [r7, #20]
 800a7fc:	f7ff ff88 	bl	800a710 <xTimerGenericCommand>
 800a800:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d113      	bne.n	800a830 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	60fb      	str	r3, [r7, #12]
    }
 800a81a:	bf00      	nop
 800a81c:	e7fe      	b.n	800a81c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a824:	f023 0301 	bic.w	r3, r3, #1
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	4798      	blx	r3
    }
 800a838:	bf00      	nop
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	20000298 	.word	0x20000298

0800a844 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f857 	bl	800a904 <prvGetNextExpireTime>
 800a856:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4619      	mov	r1, r3
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 f803 	bl	800a868 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a862:	f000 f8d5 	bl	800aa10 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a866:	e7f1      	b.n	800a84c <prvTimerTask+0x8>

0800a868 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a872:	f7ff fa6b 	bl	8009d4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f866 	bl	800a94c <prvSampleTimeNow>
 800a880:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d130      	bne.n	800a8ea <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <prvProcessTimerOrBlockTask+0x3c>
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	429a      	cmp	r2, r3
 800a894:	d806      	bhi.n	800a8a4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a896:	f7ff fa67 	bl	8009d68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a89a:	68f9      	ldr	r1, [r7, #12]
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff ff85 	bl	800a7ac <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a8a2:	e024      	b.n	800a8ee <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d008      	beq.n	800a8bc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8aa:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <prvProcessTimerOrBlockTask+0x90>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <prvProcessTimerOrBlockTask+0x50>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e000      	b.n	800a8ba <prvProcessTimerOrBlockTask+0x52>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8bc:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <prvProcessTimerOrBlockTask+0x94>)
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	1ad3      	subs	r3, r2, r3
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f7fe ffc7 	bl	800985c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a8ce:	f7ff fa4b 	bl	8009d68 <xTaskResumeAll>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10a      	bne.n	800a8ee <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a8d8:	4b09      	ldr	r3, [pc, #36]	; (800a900 <prvProcessTimerOrBlockTask+0x98>)
 800a8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8de:	601a      	str	r2, [r3, #0]
 800a8e0:	f3bf 8f4f 	dsb	sy
 800a8e4:	f3bf 8f6f 	isb	sy
    }
 800a8e8:	e001      	b.n	800a8ee <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a8ea:	f7ff fa3d 	bl	8009d68 <xTaskResumeAll>
    }
 800a8ee:	bf00      	nop
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	2000029c 	.word	0x2000029c
 800a8fc:	200002a0 	.word	0x200002a0
 800a900:	e000ed04 	.word	0xe000ed04

0800a904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a90c:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <prvGetNextExpireTime+0x44>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <prvGetNextExpireTime+0x16>
 800a916:	2201      	movs	r2, #1
 800a918:	e000      	b.n	800a91c <prvGetNextExpireTime+0x18>
 800a91a:	2200      	movs	r2, #0
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d105      	bne.n	800a934 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a928:	4b07      	ldr	r3, [pc, #28]	; (800a948 <prvGetNextExpireTime+0x44>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
 800a932:	e001      	b.n	800a938 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a938:	68fb      	ldr	r3, [r7, #12]
    }
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	20000298 	.word	0x20000298

0800a94c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a954:	f7ff faa8 	bl	8009ea8 <xTaskGetTickCount>
 800a958:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a95a:	4b0b      	ldr	r3, [pc, #44]	; (800a988 <prvSampleTimeNow+0x3c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	429a      	cmp	r2, r3
 800a962:	d205      	bcs.n	800a970 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a964:	f000 f91a 	bl	800ab9c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e002      	b.n	800a976 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a976:	4a04      	ldr	r2, [pc, #16]	; (800a988 <prvSampleTimeNow+0x3c>)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a97c:	68fb      	ldr	r3, [r7, #12]
    }
 800a97e:	4618      	mov	r0, r3
 800a980:	3710      	adds	r7, #16
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	200002a8 	.word	0x200002a8

0800a98c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	68ba      	ldr	r2, [r7, #8]
 800a9a2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d812      	bhi.n	800a9d8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	1ad2      	subs	r2, r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d302      	bcc.n	800a9c6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	e01b      	b.n	800a9fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9c6:	4b10      	ldr	r3, [pc, #64]	; (800aa08 <prvInsertTimerInActiveList+0x7c>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	f7fe f9ba 	bl	8008d4a <vListInsert>
 800a9d6:	e012      	b.n	800a9fe <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d206      	bcs.n	800a9ee <prvInsertTimerInActiveList+0x62>
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d302      	bcc.n	800a9ee <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e007      	b.n	800a9fe <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9ee:	4b07      	ldr	r3, [pc, #28]	; (800aa0c <prvInsertTimerInActiveList+0x80>)
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7fe f9a6 	bl	8008d4a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a9fe:	697b      	ldr	r3, [r7, #20]
    }
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	2000029c 	.word	0x2000029c
 800aa0c:	20000298 	.word	0x20000298

0800aa10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b08c      	sub	sp, #48	; 0x30
 800aa14:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa16:	e0ae      	b.n	800ab76 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f2c0 80aa 	blt.w	800ab74 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe f9c3 	bl	8008dbc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa36:	1d3b      	adds	r3, r7, #4
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff ff87 	bl	800a94c <prvSampleTimeNow>
 800aa3e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b09      	cmp	r3, #9
 800aa44:	f200 8097 	bhi.w	800ab76 <prvProcessReceivedCommands+0x166>
 800aa48:	a201      	add	r2, pc, #4	; (adr r2, 800aa50 <prvProcessReceivedCommands+0x40>)
 800aa4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4e:	bf00      	nop
 800aa50:	0800aa79 	.word	0x0800aa79
 800aa54:	0800aa79 	.word	0x0800aa79
 800aa58:	0800aa79 	.word	0x0800aa79
 800aa5c:	0800aaed 	.word	0x0800aaed
 800aa60:	0800ab01 	.word	0x0800ab01
 800aa64:	0800ab4b 	.word	0x0800ab4b
 800aa68:	0800aa79 	.word	0x0800aa79
 800aa6c:	0800aa79 	.word	0x0800aa79
 800aa70:	0800aaed 	.word	0x0800aaed
 800aa74:	0800ab01 	.word	0x0800ab01
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	18d1      	adds	r1, r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a3a      	ldr	r2, [r7, #32]
 800aa96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa98:	f7ff ff78 	bl	800a98c <prvInsertTimerInActiveList>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d069      	beq.n	800ab76 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaa8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aab0:	f003 0304 	and.w	r3, r3, #4
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d05e      	beq.n	800ab76 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	441a      	add	r2, r3
 800aac0:	2300      	movs	r3, #0
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2300      	movs	r3, #0
 800aac6:	2100      	movs	r1, #0
 800aac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aaca:	f7ff fe21 	bl	800a710 <xTimerGenericCommand>
 800aace:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d14f      	bne.n	800ab76 <prvProcessReceivedCommands+0x166>
        __asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	61bb      	str	r3, [r7, #24]
    }
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaf2:	f023 0301 	bic.w	r3, r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800aafe:	e03a      	b.n	800ab76 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	617b      	str	r3, [r7, #20]
    }
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	699a      	ldr	r2, [r3, #24]
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	18d1      	adds	r1, r2, r3
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	6a3a      	ldr	r2, [r7, #32]
 800ab42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab44:	f7ff ff22 	bl	800a98c <prvInsertTimerInActiveList>
                        break;
 800ab48:	e015      	b.n	800ab76 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d103      	bne.n	800ab60 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800ab58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab5a:	f000 fbef 	bl	800b33c <vPortFree>
 800ab5e:	e00a      	b.n	800ab76 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ab72:	e000      	b.n	800ab76 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800ab74:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab76:	4b08      	ldr	r3, [pc, #32]	; (800ab98 <prvProcessReceivedCommands+0x188>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f107 0108 	add.w	r1, r7, #8
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7fe fc19 	bl	80093b8 <xQueueReceive>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f47f af45 	bne.w	800aa18 <prvProcessReceivedCommands+0x8>
        }
    }
 800ab8e:	bf00      	nop
 800ab90:	bf00      	nop
 800ab92:	3728      	adds	r7, #40	; 0x28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	200002a0 	.word	0x200002a0

0800ab9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b088      	sub	sp, #32
 800aba0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aba2:	e048      	b.n	800ac36 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aba4:	4b2d      	ldr	r3, [pc, #180]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68db      	ldr	r3, [r3, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abae:	4b2b      	ldr	r3, [pc, #172]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	3304      	adds	r3, #4
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fe f8fd 	bl	8008dbc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d02e      	beq.n	800ac36 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	4413      	add	r3, r2
 800abe0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d90e      	bls.n	800ac08 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abf6:	4b19      	ldr	r3, [pc, #100]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4619      	mov	r1, r3
 800ac00:	4610      	mov	r0, r2
 800ac02:	f7fe f8a2 	bl	8008d4a <vListInsert>
 800ac06:	e016      	b.n	800ac36 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	2100      	movs	r1, #0
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	f7ff fd7c 	bl	800a710 <xTimerGenericCommand>
 800ac18:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10a      	bne.n	800ac36 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800ac20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac24:	f383 8811 	msr	BASEPRI, r3
 800ac28:	f3bf 8f6f 	isb	sy
 800ac2c:	f3bf 8f4f 	dsb	sy
 800ac30:	603b      	str	r3, [r7, #0]
    }
 800ac32:	bf00      	nop
 800ac34:	e7fe      	b.n	800ac34 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac36:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1b1      	bne.n	800aba4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800ac40:	4b06      	ldr	r3, [pc, #24]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <prvSwitchTimerLists+0xc4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a04      	ldr	r2, [pc, #16]	; (800ac5c <prvSwitchTimerLists+0xc0>)
 800ac4c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ac4e:	4a04      	ldr	r2, [pc, #16]	; (800ac60 <prvSwitchTimerLists+0xc4>)
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	6013      	str	r3, [r2, #0]
    }
 800ac54:	bf00      	nop
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20000298 	.word	0x20000298
 800ac60:	2000029c 	.word	0x2000029c

0800ac64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ac68:	f000 f95e 	bl	800af28 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ac6c:	4b12      	ldr	r3, [pc, #72]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d11d      	bne.n	800acb0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800ac74:	4811      	ldr	r0, [pc, #68]	; (800acbc <prvCheckForValidListAndQueue+0x58>)
 800ac76:	f7fe f817 	bl	8008ca8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ac7a:	4811      	ldr	r0, [pc, #68]	; (800acc0 <prvCheckForValidListAndQueue+0x5c>)
 800ac7c:	f7fe f814 	bl	8008ca8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ac80:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800ac82:	4a0e      	ldr	r2, [pc, #56]	; (800acbc <prvCheckForValidListAndQueue+0x58>)
 800ac84:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ac86:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <prvCheckForValidListAndQueue+0x64>)
 800ac88:	4a0d      	ldr	r2, [pc, #52]	; (800acc0 <prvCheckForValidListAndQueue+0x5c>)
 800ac8a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	210c      	movs	r1, #12
 800ac90:	200a      	movs	r0, #10
 800ac92:	f7fe f925 	bl	8008ee0 <xQueueGenericCreate>
 800ac96:	4603      	mov	r3, r0
 800ac98:	4a07      	ldr	r2, [pc, #28]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac9a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800ac9c:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <prvCheckForValidListAndQueue+0x54>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4908      	ldr	r1, [pc, #32]	; (800accc <prvCheckForValidListAndQueue+0x68>)
 800acaa:	4618      	mov	r0, r3
 800acac:	f7fe fda4 	bl	80097f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800acb0:	f000 f96a 	bl	800af88 <vPortExitCritical>
    }
 800acb4:	bf00      	nop
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	200002a0 	.word	0x200002a0
 800acbc:	20000270 	.word	0x20000270
 800acc0:	20000284 	.word	0x20000284
 800acc4:	20000298 	.word	0x20000298
 800acc8:	2000029c 	.word	0x2000029c
 800accc:	0800d550 	.word	0x0800d550

0800acd0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3b04      	subs	r3, #4
 800ace0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ace8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3b04      	subs	r3, #4
 800acee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f023 0201 	bic.w	r2, r3, #1
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3b04      	subs	r3, #4
 800acfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800ad00:	4a0c      	ldr	r2, [pc, #48]	; (800ad34 <pxPortInitialiseStack+0x64>)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	3b14      	subs	r3, #20
 800ad0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	3b04      	subs	r3, #4
 800ad16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f06f 0202 	mvn.w	r2, #2
 800ad1e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3b20      	subs	r3, #32
 800ad24:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ad26:	68fb      	ldr	r3, [r7, #12]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	0800ad39 	.word	0x0800ad39

0800ad38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <prvTaskExitError+0x54>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4a:	d00a      	beq.n	800ad62 <prvTaskExitError+0x2a>
        __asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	60fb      	str	r3, [r7, #12]
    }
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <prvTaskExitError+0x28>
        __asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60bb      	str	r3, [r7, #8]
    }
 800ad74:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800ad76:	bf00      	nop
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0fc      	beq.n	800ad78 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800ad7e:	bf00      	nop
 800ad80:	bf00      	nop
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr
 800ad8c:	20000030 	.word	0x20000030

0800ad90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <pxCurrentTCBConst2>)
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	6808      	ldr	r0, [r1, #0]
 800ad96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	f380 8809 	msr	PSP, r0
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8811 	msr	BASEPRI, r0
 800adaa:	4770      	bx	lr
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst2>:
 800adb0:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800adb8:	4808      	ldr	r0, [pc, #32]	; (800addc <prvPortStartFirstTask+0x24>)
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	f380 8808 	msr	MSP, r0
 800adc2:	f04f 0000 	mov.w	r0, #0
 800adc6:	f380 8814 	msr	CONTROL, r0
 800adca:	b662      	cpsie	i
 800adcc:	b661      	cpsie	f
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	df00      	svc	0
 800add8:	bf00      	nop
 800adda:	0000      	.short	0x0000
 800addc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop

0800ade4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adea:	4b46      	ldr	r3, [pc, #280]	; (800af04 <xPortStartScheduler+0x120>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	4a46      	ldr	r2, [pc, #280]	; (800af08 <xPortStartScheduler+0x124>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d10a      	bne.n	800ae0a <xPortStartScheduler+0x26>
        __asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	613b      	str	r3, [r7, #16]
    }
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae0a:	4b3e      	ldr	r3, [pc, #248]	; (800af04 <xPortStartScheduler+0x120>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a3f      	ldr	r2, [pc, #252]	; (800af0c <xPortStartScheduler+0x128>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d10a      	bne.n	800ae2a <xPortStartScheduler+0x46>
        __asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	60fb      	str	r3, [r7, #12]
    }
 800ae26:	bf00      	nop
 800ae28:	e7fe      	b.n	800ae28 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae2a:	4b39      	ldr	r3, [pc, #228]	; (800af10 <xPortStartScheduler+0x12c>)
 800ae2c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	22ff      	movs	r2, #255	; 0xff
 800ae3a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	4b31      	ldr	r3, [pc, #196]	; (800af14 <xPortStartScheduler+0x130>)
 800ae50:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae52:	4b31      	ldr	r3, [pc, #196]	; (800af18 <xPortStartScheduler+0x134>)
 800ae54:	2207      	movs	r2, #7
 800ae56:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae58:	e009      	b.n	800ae6e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800ae5a:	4b2f      	ldr	r3, [pc, #188]	; (800af18 <xPortStartScheduler+0x134>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	4a2d      	ldr	r2, [pc, #180]	; (800af18 <xPortStartScheduler+0x134>)
 800ae62:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae76:	2b80      	cmp	r3, #128	; 0x80
 800ae78:	d0ef      	beq.n	800ae5a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae7a:	4b27      	ldr	r3, [pc, #156]	; (800af18 <xPortStartScheduler+0x134>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f1c3 0307 	rsb	r3, r3, #7
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d00a      	beq.n	800ae9c <xPortStartScheduler+0xb8>
        __asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	60bb      	str	r3, [r7, #8]
    }
 800ae98:	bf00      	nop
 800ae9a:	e7fe      	b.n	800ae9a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae9c:	4b1e      	ldr	r3, [pc, #120]	; (800af18 <xPortStartScheduler+0x134>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	4a1d      	ldr	r2, [pc, #116]	; (800af18 <xPortStartScheduler+0x134>)
 800aea4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aea6:	4b1c      	ldr	r3, [pc, #112]	; (800af18 <xPortStartScheduler+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeae:	4a1a      	ldr	r2, [pc, #104]	; (800af18 <xPortStartScheduler+0x134>)
 800aeb0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800aeba:	4b18      	ldr	r3, [pc, #96]	; (800af1c <xPortStartScheduler+0x138>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a17      	ldr	r2, [pc, #92]	; (800af1c <xPortStartScheduler+0x138>)
 800aec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aec4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800aec6:	4b15      	ldr	r3, [pc, #84]	; (800af1c <xPortStartScheduler+0x138>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4a14      	ldr	r2, [pc, #80]	; (800af1c <xPortStartScheduler+0x138>)
 800aecc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aed0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800aed2:	f000 f8e3 	bl	800b09c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800aed6:	4b12      	ldr	r3, [pc, #72]	; (800af20 <xPortStartScheduler+0x13c>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800aedc:	f000 f902 	bl	800b0e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aee0:	4b10      	ldr	r3, [pc, #64]	; (800af24 <xPortStartScheduler+0x140>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a0f      	ldr	r2, [pc, #60]	; (800af24 <xPortStartScheduler+0x140>)
 800aee6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aeea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800aeec:	f7ff ff64 	bl	800adb8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800aef0:	f7ff f8a6 	bl	800a040 <vTaskSwitchContext>
    prvTaskExitError();
 800aef4:	f7ff ff20 	bl	800ad38 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	e000ed00 	.word	0xe000ed00
 800af08:	410fc271 	.word	0x410fc271
 800af0c:	410fc270 	.word	0x410fc270
 800af10:	e000e400 	.word	0xe000e400
 800af14:	200002ac 	.word	0x200002ac
 800af18:	200002b0 	.word	0x200002b0
 800af1c:	e000ed20 	.word	0xe000ed20
 800af20:	20000030 	.word	0x20000030
 800af24:	e000ef34 	.word	0xe000ef34

0800af28 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
        __asm volatile
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	607b      	str	r3, [r7, #4]
    }
 800af40:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800af42:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <vPortEnterCritical+0x58>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <vPortEnterCritical+0x58>)
 800af4a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <vPortEnterCritical+0x58>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d10f      	bne.n	800af74 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af54:	4b0b      	ldr	r3, [pc, #44]	; (800af84 <vPortEnterCritical+0x5c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <vPortEnterCritical+0x4c>
        __asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	603b      	str	r3, [r7, #0]
    }
 800af70:	bf00      	nop
 800af72:	e7fe      	b.n	800af72 <vPortEnterCritical+0x4a>
    }
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	20000030 	.word	0x20000030
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800af8e:	4b12      	ldr	r3, [pc, #72]	; (800afd8 <vPortExitCritical+0x50>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <vPortExitCritical+0x24>
        __asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	607b      	str	r3, [r7, #4]
    }
 800afa8:	bf00      	nop
 800afaa:	e7fe      	b.n	800afaa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800afac:	4b0a      	ldr	r3, [pc, #40]	; (800afd8 <vPortExitCritical+0x50>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	4a09      	ldr	r2, [pc, #36]	; (800afd8 <vPortExitCritical+0x50>)
 800afb4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800afb6:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <vPortExitCritical+0x50>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d105      	bne.n	800afca <vPortExitCritical+0x42>
 800afbe:	2300      	movs	r3, #0
 800afc0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	f383 8811 	msr	BASEPRI, r3
    }
 800afc8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800afca:	bf00      	nop
 800afcc:	370c      	adds	r7, #12
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000030 	.word	0x20000030
 800afdc:	00000000 	.word	0x00000000

0800afe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800afe0:	f3ef 8009 	mrs	r0, PSP
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	4b15      	ldr	r3, [pc, #84]	; (800b040 <pxCurrentTCBConst>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	f01e 0f10 	tst.w	lr, #16
 800aff0:	bf08      	it	eq
 800aff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	6010      	str	r0, [r2, #0]
 800affc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b004:	f380 8811 	msr	BASEPRI, r0
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f7ff f816 	bl	800a040 <vTaskSwitchContext>
 800b014:	f04f 0000 	mov.w	r0, #0
 800b018:	f380 8811 	msr	BASEPRI, r0
 800b01c:	bc09      	pop	{r0, r3}
 800b01e:	6819      	ldr	r1, [r3, #0]
 800b020:	6808      	ldr	r0, [r1, #0]
 800b022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b026:	f01e 0f10 	tst.w	lr, #16
 800b02a:	bf08      	it	eq
 800b02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b030:	f380 8809 	msr	PSP, r0
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	f3af 8000 	nop.w

0800b040 <pxCurrentTCBConst>:
 800b040:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop

0800b048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
        __asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	607b      	str	r3, [r7, #4]
    }
 800b060:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b062:	f001 fa75 	bl	800c550 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b066:	f7fe ff2f 	bl	8009ec8 <xTaskIncrementTick>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d006      	beq.n	800b07e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b070:	f001 facc 	bl	800c60c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b074:	4b08      	ldr	r3, [pc, #32]	; (800b098 <SysTick_Handler+0x50>)
 800b076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	e001      	b.n	800b082 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b07e:	f001 faa9 	bl	800c5d4 <SEGGER_SYSVIEW_RecordExitISR>
 800b082:	2300      	movs	r3, #0
 800b084:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	f383 8811 	msr	BASEPRI, r3
    }
 800b08c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <vPortSetupTimerInterrupt+0x34>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <vPortSetupTimerInterrupt+0x38>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <vPortSetupTimerInterrupt+0x3c>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <vPortSetupTimerInterrupt+0x40>)
 800b0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b6:	099b      	lsrs	r3, r3, #6
 800b0b8:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <vPortSetupTimerInterrupt+0x44>)
 800b0ba:	3b01      	subs	r3, #1
 800b0bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0be:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <vPortSetupTimerInterrupt+0x34>)
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	601a      	str	r2, [r3, #0]
}
 800b0c4:	bf00      	nop
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	e000e010 	.word	0xe000e010
 800b0d4:	e000e018 	.word	0xe000e018
 800b0d8:	20000000 	.word	0x20000000
 800b0dc:	10624dd3 	.word	0x10624dd3
 800b0e0:	e000e014 	.word	0xe000e014

0800b0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0f4 <vPortEnableVFP+0x10>
 800b0e8:	6801      	ldr	r1, [r0, #0]
 800b0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ee:	6001      	str	r1, [r0, #0]
 800b0f0:	4770      	bx	lr
 800b0f2:	0000      	.short	0x0000
 800b0f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b0f8:	bf00      	nop
 800b0fa:	bf00      	nop

0800b0fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b102:	f3ef 8305 	mrs	r3, IPSR
 800b106:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b0f      	cmp	r3, #15
 800b10c:	d914      	bls.n	800b138 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b10e:	4a17      	ldr	r2, [pc, #92]	; (800b16c <vPortValidateInterruptPriority+0x70>)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4413      	add	r3, r2
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b118:	4b15      	ldr	r3, [pc, #84]	; (800b170 <vPortValidateInterruptPriority+0x74>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	7afa      	ldrb	r2, [r7, #11]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d20a      	bcs.n	800b138 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	f383 8811 	msr	BASEPRI, r3
 800b12a:	f3bf 8f6f 	isb	sy
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	607b      	str	r3, [r7, #4]
    }
 800b134:	bf00      	nop
 800b136:	e7fe      	b.n	800b136 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b138:	4b0e      	ldr	r3, [pc, #56]	; (800b174 <vPortValidateInterruptPriority+0x78>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b140:	4b0d      	ldr	r3, [pc, #52]	; (800b178 <vPortValidateInterruptPriority+0x7c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d90a      	bls.n	800b15e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	603b      	str	r3, [r7, #0]
    }
 800b15a:	bf00      	nop
 800b15c:	e7fe      	b.n	800b15c <vPortValidateInterruptPriority+0x60>
    }
 800b15e:	bf00      	nop
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	e000e3f0 	.word	0xe000e3f0
 800b170:	200002ac 	.word	0x200002ac
 800b174:	e000ed0c 	.word	0xe000ed0c
 800b178:	200002b0 	.word	0x200002b0

0800b17c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	; 0x28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800b188:	f7fe fde0 	bl	8009d4c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b18c:	4b65      	ldr	r3, [pc, #404]	; (800b324 <pvPortMalloc+0x1a8>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b194:	f000 f934 	bl	800b400 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b198:	4b63      	ldr	r3, [pc, #396]	; (800b328 <pvPortMalloc+0x1ac>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4013      	ands	r3, r2
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	f040 80a7 	bne.w	800b2f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d02d      	beq.n	800b208 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d227      	bcs.n	800b208 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4413      	add	r3, r2
 800b1be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d021      	beq.n	800b20e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f023 0307 	bic.w	r3, r3, #7
 800b1d0:	3308      	adds	r3, #8
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d214      	bcs.n	800b202 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	3308      	adds	r3, #8
 800b1e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d010      	beq.n	800b20e <pvPortMalloc+0x92>
        __asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	617b      	str	r3, [r7, #20]
    }
 800b1fe:	bf00      	nop
 800b200:	e7fe      	b.n	800b200 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b206:	e002      	b.n	800b20e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	607b      	str	r3, [r7, #4]
 800b20c:	e000      	b.n	800b210 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b20e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d06e      	beq.n	800b2f4 <pvPortMalloc+0x178>
 800b216:	4b45      	ldr	r3, [pc, #276]	; (800b32c <pvPortMalloc+0x1b0>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d869      	bhi.n	800b2f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b220:	4b43      	ldr	r3, [pc, #268]	; (800b330 <pvPortMalloc+0x1b4>)
 800b222:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b224:	4b42      	ldr	r3, [pc, #264]	; (800b330 <pvPortMalloc+0x1b4>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b22a:	e004      	b.n	800b236 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d903      	bls.n	800b248 <pvPortMalloc+0xcc>
 800b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1f1      	bne.n	800b22c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b248:	4b36      	ldr	r3, [pc, #216]	; (800b324 <pvPortMalloc+0x1a8>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24e:	429a      	cmp	r2, r3
 800b250:	d050      	beq.n	800b2f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2208      	movs	r2, #8
 800b258:	4413      	add	r3, r2
 800b25a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	1ad2      	subs	r2, r2, r3
 800b26c:	2308      	movs	r3, #8
 800b26e:	005b      	lsls	r3, r3, #1
 800b270:	429a      	cmp	r2, r3
 800b272:	d91f      	bls.n	800b2b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4413      	add	r3, r2
 800b27a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00a      	beq.n	800b29c <pvPortMalloc+0x120>
        __asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	613b      	str	r3, [r7, #16]
    }
 800b298:	bf00      	nop
 800b29a:	e7fe      	b.n	800b29a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	1ad2      	subs	r2, r2, r3
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2ae:	69b8      	ldr	r0, [r7, #24]
 800b2b0:	f000 f908 	bl	800b4c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2b4:	4b1d      	ldr	r3, [pc, #116]	; (800b32c <pvPortMalloc+0x1b0>)
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	4a1b      	ldr	r2, [pc, #108]	; (800b32c <pvPortMalloc+0x1b0>)
 800b2c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2c2:	4b1a      	ldr	r3, [pc, #104]	; (800b32c <pvPortMalloc+0x1b0>)
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	4b1b      	ldr	r3, [pc, #108]	; (800b334 <pvPortMalloc+0x1b8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d203      	bcs.n	800b2d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2ce:	4b17      	ldr	r3, [pc, #92]	; (800b32c <pvPortMalloc+0x1b0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a18      	ldr	r2, [pc, #96]	; (800b334 <pvPortMalloc+0x1b8>)
 800b2d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <pvPortMalloc+0x1ac>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	431a      	orrs	r2, r3
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b2ea:	4b13      	ldr	r3, [pc, #76]	; (800b338 <pvPortMalloc+0x1bc>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	4a11      	ldr	r2, [pc, #68]	; (800b338 <pvPortMalloc+0x1bc>)
 800b2f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b2f4:	f7fe fd38 	bl	8009d68 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	f003 0307 	and.w	r3, r3, #7
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00a      	beq.n	800b318 <pvPortMalloc+0x19c>
        __asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	60fb      	str	r3, [r7, #12]
    }
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <pvPortMalloc+0x19a>
    return pvReturn;
 800b318:	69fb      	ldr	r3, [r7, #28]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20012ebc 	.word	0x20012ebc
 800b328:	20012ed0 	.word	0x20012ed0
 800b32c:	20012ec0 	.word	0x20012ec0
 800b330:	20012eb4 	.word	0x20012eb4
 800b334:	20012ec4 	.word	0x20012ec4
 800b338:	20012ec8 	.word	0x20012ec8

0800b33c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d04d      	beq.n	800b3ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b34e:	2308      	movs	r3, #8
 800b350:	425b      	negs	r3, r3
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4413      	add	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <vPortFree+0xb8>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4013      	ands	r3, r2
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <vPortFree+0x44>
        __asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	60fb      	str	r3, [r7, #12]
    }
 800b37c:	bf00      	nop
 800b37e:	e7fe      	b.n	800b37e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00a      	beq.n	800b39e <vPortFree+0x62>
        __asm volatile
 800b388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38c:	f383 8811 	msr	BASEPRI, r3
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	f3bf 8f4f 	dsb	sy
 800b398:	60bb      	str	r3, [r7, #8]
    }
 800b39a:	bf00      	nop
 800b39c:	e7fe      	b.n	800b39c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	4b14      	ldr	r3, [pc, #80]	; (800b3f4 <vPortFree+0xb8>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d01e      	beq.n	800b3ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d11a      	bne.n	800b3ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	4b0e      	ldr	r3, [pc, #56]	; (800b3f4 <vPortFree+0xb8>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	43db      	mvns	r3, r3
 800b3be:	401a      	ands	r2, r3
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800b3c4:	f7fe fcc2 	bl	8009d4c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <vPortFree+0xbc>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	4a09      	ldr	r2, [pc, #36]	; (800b3f8 <vPortFree+0xbc>)
 800b3d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3d6:	6938      	ldr	r0, [r7, #16]
 800b3d8:	f000 f874 	bl	800b4c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b3dc:	4b07      	ldr	r3, [pc, #28]	; (800b3fc <vPortFree+0xc0>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	4a06      	ldr	r2, [pc, #24]	; (800b3fc <vPortFree+0xc0>)
 800b3e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b3e6:	f7fe fcbf 	bl	8009d68 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b3ea:	bf00      	nop
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20012ed0 	.word	0x20012ed0
 800b3f8:	20012ec0 	.word	0x20012ec0
 800b3fc:	20012ecc 	.word	0x20012ecc

0800b400 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b406:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800b40a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800b40c:	4b27      	ldr	r3, [pc, #156]	; (800b4ac <prvHeapInit+0xac>)
 800b40e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f003 0307 	and.w	r3, r3, #7
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00c      	beq.n	800b434 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3307      	adds	r3, #7
 800b41e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f023 0307 	bic.w	r3, r3, #7
 800b426:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	4a1f      	ldr	r2, [pc, #124]	; (800b4ac <prvHeapInit+0xac>)
 800b430:	4413      	add	r3, r2
 800b432:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b438:	4a1d      	ldr	r2, [pc, #116]	; (800b4b0 <prvHeapInit+0xb0>)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b43e:	4b1c      	ldr	r3, [pc, #112]	; (800b4b0 <prvHeapInit+0xb0>)
 800b440:	2200      	movs	r2, #0
 800b442:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	68ba      	ldr	r2, [r7, #8]
 800b448:	4413      	add	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b44c:	2208      	movs	r2, #8
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0307 	bic.w	r3, r3, #7
 800b45a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	4a15      	ldr	r2, [pc, #84]	; (800b4b4 <prvHeapInit+0xb4>)
 800b460:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b462:	4b14      	ldr	r3, [pc, #80]	; (800b4b4 <prvHeapInit+0xb4>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2200      	movs	r2, #0
 800b468:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <prvHeapInit+0xb4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	1ad2      	subs	r2, r2, r3
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b480:	4b0c      	ldr	r3, [pc, #48]	; (800b4b4 <prvHeapInit+0xb4>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <prvHeapInit+0xb8>)
 800b48e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	4a09      	ldr	r2, [pc, #36]	; (800b4bc <prvHeapInit+0xbc>)
 800b496:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b498:	4b09      	ldr	r3, [pc, #36]	; (800b4c0 <prvHeapInit+0xc0>)
 800b49a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b49e:	601a      	str	r2, [r3, #0]
}
 800b4a0:	bf00      	nop
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	200002b4 	.word	0x200002b4
 800b4b0:	20012eb4 	.word	0x20012eb4
 800b4b4:	20012ebc 	.word	0x20012ebc
 800b4b8:	20012ec4 	.word	0x20012ec4
 800b4bc:	20012ec0 	.word	0x20012ec0
 800b4c0:	20012ed0 	.word	0x20012ed0

0800b4c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4cc:	4b28      	ldr	r3, [pc, #160]	; (800b570 <prvInsertBlockIntoFreeList+0xac>)
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	e002      	b.n	800b4d8 <prvInsertBlockIntoFreeList+0x14>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	60fb      	str	r3, [r7, #12]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d8f7      	bhi.n	800b4d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d108      	bne.n	800b506 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	685a      	ldr	r2, [r3, #4]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	441a      	add	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	441a      	add	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d118      	bne.n	800b54c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	4b15      	ldr	r3, [pc, #84]	; (800b574 <prvInsertBlockIntoFreeList+0xb0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	429a      	cmp	r2, r3
 800b524:	d00d      	beq.n	800b542 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	441a      	add	r2, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	e008      	b.n	800b554 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b542:	4b0c      	ldr	r3, [pc, #48]	; (800b574 <prvInsertBlockIntoFreeList+0xb0>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	601a      	str	r2, [r3, #0]
 800b54a:	e003      	b.n	800b554 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d002      	beq.n	800b562 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b562:	bf00      	nop
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20012eb4 	.word	0x20012eb4
 800b574:	20012ebc 	.word	0x20012ebc

0800b578 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b586:	2205      	movs	r2, #5
 800b588:	492b      	ldr	r1, [pc, #172]	; (800b638 <SYSVIEW_AddTask+0xc0>)
 800b58a:	68b8      	ldr	r0, [r7, #8]
 800b58c:	f001 fb1e 	bl	800cbcc <memcmp>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d04b      	beq.n	800b62e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b596:	4b29      	ldr	r3, [pc, #164]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b07      	cmp	r3, #7
 800b59c:	d903      	bls.n	800b5a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b59e:	4828      	ldr	r0, [pc, #160]	; (800b640 <SYSVIEW_AddTask+0xc8>)
 800b5a0:	f001 fa7e 	bl	800caa0 <SEGGER_SYSVIEW_Warn>
    return;
 800b5a4:	e044      	b.n	800b630 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b5a6:	4b25      	ldr	r3, [pc, #148]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	4926      	ldr	r1, [pc, #152]	; (800b644 <SYSVIEW_AddTask+0xcc>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b5ba:	4b20      	ldr	r3, [pc, #128]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	4921      	ldr	r1, [pc, #132]	; (800b644 <SYSVIEW_AddTask+0xcc>)
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4413      	add	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b5d0:	4b1a      	ldr	r3, [pc, #104]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	491b      	ldr	r1, [pc, #108]	; (800b644 <SYSVIEW_AddTask+0xcc>)
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	440b      	add	r3, r1
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b5e6:	4b15      	ldr	r3, [pc, #84]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	4916      	ldr	r1, [pc, #88]	; (800b644 <SYSVIEW_AddTask+0xcc>)
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	330c      	adds	r3, #12
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	4910      	ldr	r1, [pc, #64]	; (800b644 <SYSVIEW_AddTask+0xcc>)
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	440b      	add	r3, r1
 800b60c:	3310      	adds	r3, #16
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b612:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3301      	adds	r3, #1
 800b618:	4a08      	ldr	r2, [pc, #32]	; (800b63c <SYSVIEW_AddTask+0xc4>)
 800b61a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	68b9      	ldr	r1, [r7, #8]
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f80e 	bl	800b648 <SYSVIEW_SendTaskInfo>
 800b62c:	e000      	b.n	800b630 <SYSVIEW_AddTask+0xb8>
    return;
 800b62e:	bf00      	nop

}
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	0800d558 	.word	0x0800d558
 800b63c:	20012f74 	.word	0x20012f74
 800b640:	0800d560 	.word	0x0800d560
 800b644:	20012ed4 	.word	0x20012ed4

0800b648 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b648:	b580      	push	{r7, lr}
 800b64a:	b08a      	sub	sp, #40	; 0x28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	2214      	movs	r2, #20
 800b65c:	2100      	movs	r1, #0
 800b65e:	4618      	mov	r0, r3
 800b660:	f001 fad0 	bl	800cc04 <memset>
  TaskInfo.TaskID     = TaskID;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b678:	f107 0314 	add.w	r3, r7, #20
 800b67c:	4618      	mov	r0, r3
 800b67e:	f000 fe3d 	bl	800c2fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b682:	bf00      	nop
 800b684:	3728      	adds	r7, #40	; 0x28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b692:	4b24      	ldr	r3, [pc, #144]	; (800b724 <_DoInit+0x98>)
 800b694:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2203      	movs	r2, #3
 800b69a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a20      	ldr	r2, [pc, #128]	; (800b728 <_DoInit+0x9c>)
 800b6a6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a20      	ldr	r2, [pc, #128]	; (800b72c <_DoInit+0xa0>)
 800b6ac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b6b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <_DoInit+0x9c>)
 800b6cc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a17      	ldr	r2, [pc, #92]	; (800b730 <_DoInit+0xa4>)
 800b6d2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2210      	movs	r2, #16
 800b6d8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	3307      	adds	r3, #7
 800b6f0:	4a10      	ldr	r2, [pc, #64]	; (800b734 <_DoInit+0xa8>)
 800b6f2:	6810      	ldr	r0, [r2, #0]
 800b6f4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b6f6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a0e      	ldr	r2, [pc, #56]	; (800b738 <_DoInit+0xac>)
 800b6fe:	6810      	ldr	r0, [r2, #0]
 800b700:	6018      	str	r0, [r3, #0]
 800b702:	8891      	ldrh	r1, [r2, #4]
 800b704:	7992      	ldrb	r2, [r2, #6]
 800b706:	8099      	strh	r1, [r3, #4]
 800b708:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b70a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2220      	movs	r2, #32
 800b712:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b714:	f3bf 8f5f 	dmb	sy
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr
 800b724:	20013d50 	.word	0x20013d50
 800b728:	0800d5b0 	.word	0x0800d5b0
 800b72c:	20012f78 	.word	0x20012f78
 800b730:	20013378 	.word	0x20013378
 800b734:	0800d5bc 	.word	0x0800d5bc
 800b738:	0800d5c0 	.word	0x0800d5c0

0800b73c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08c      	sub	sp, #48	; 0x30
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b748:	4b3e      	ldr	r3, [pc, #248]	; (800b844 <SEGGER_RTT_ReadNoLock+0x108>)
 800b74a:	623b      	str	r3, [r7, #32]
 800b74c:	6a3b      	ldr	r3, [r7, #32]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <SEGGER_RTT_ReadNoLock+0x1e>
 800b756:	f7ff ff99 	bl	800b68c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4613      	mov	r3, r2
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	4413      	add	r3, r2
 800b762:	00db      	lsls	r3, r3, #3
 800b764:	3360      	adds	r3, #96	; 0x60
 800b766:	4a37      	ldr	r2, [pc, #220]	; (800b844 <SEGGER_RTT_ReadNoLock+0x108>)
 800b768:	4413      	add	r3, r2
 800b76a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b77c:	2300      	movs	r3, #0
 800b77e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	429a      	cmp	r2, r3
 800b786:	d92b      	bls.n	800b7e0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4293      	cmp	r3, r2
 800b798:	bf28      	it	cs
 800b79a:	4613      	movcs	r3, r2
 800b79c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	4413      	add	r3, r2
 800b7a6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	6939      	ldr	r1, [r7, #16]
 800b7ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7ae:	f001 fa1b 	bl	800cbe8 <memcpy>
    NumBytesRead += NumBytesRem;
 800b7b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b7ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	4413      	add	r3, r2
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	1ad3      	subs	r3, r2, r3
 800b7c8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b7ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d101      	bne.n	800b7e0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b7e0:	69ba      	ldr	r2, [r7, #24]
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	bf28      	it	cs
 800b7f0:	4613      	movcs	r3, r2
 800b7f2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d019      	beq.n	800b82e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	4413      	add	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	6939      	ldr	r1, [r7, #16]
 800b808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b80a:	f001 f9ed 	bl	800cbe8 <memcpy>
    NumBytesRead += NumBytesRem;
 800b80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	4413      	add	r3, r2
 800b814:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	4413      	add	r3, r2
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	4413      	add	r3, r2
 800b82c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d002      	beq.n	800b83a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b838:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3730      	adds	r7, #48	; 0x30
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	20013d50 	.word	0x20013d50

0800b848 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b858:	e002      	b.n	800b860 <_EncodeStr+0x18>
    Len++;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	3301      	adds	r3, #1
 800b85e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	4413      	add	r3, r2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1f6      	bne.n	800b85a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d901      	bls.n	800b878 <_EncodeStr+0x30>
    Len = Limit;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	2bfe      	cmp	r3, #254	; 0xfe
 800b87c:	d806      	bhi.n	800b88c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1c5a      	adds	r2, r3, #1
 800b882:	60fa      	str	r2, [r7, #12]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	b2d2      	uxtb	r2, r2
 800b888:	701a      	strb	r2, [r3, #0]
 800b88a:	e011      	b.n	800b8b0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	60fa      	str	r2, [r7, #12]
 800b892:	22ff      	movs	r2, #255	; 0xff
 800b894:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	1c5a      	adds	r2, r3, #1
 800b89a:	60fa      	str	r2, [r7, #12]
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	0a19      	lsrs	r1, r3, #8
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	60fa      	str	r2, [r7, #12]
 800b8ac:	b2ca      	uxtb	r2, r1
 800b8ae:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b8b4:	e00a      	b.n	800b8cc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	1c53      	adds	r3, r2, #1
 800b8ba:	60bb      	str	r3, [r7, #8]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	1c59      	adds	r1, r3, #1
 800b8c0:	60f9      	str	r1, [r7, #12]
 800b8c2:	7812      	ldrb	r2, [r2, #0]
 800b8c4:	701a      	strb	r2, [r3, #0]
    n++;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d3f0      	bcc.n	800b8b6 <_EncodeStr+0x6e>
  }
  return pPayload;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	371c      	adds	r7, #28
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	3304      	adds	r3, #4
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	370c      	adds	r7, #12
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
	...

0800b8fc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <_HandleIncomingPacket+0xe0>)
 800b904:	7e1b      	ldrb	r3, [r3, #24]
 800b906:	4618      	mov	r0, r3
 800b908:	1cfb      	adds	r3, r7, #3
 800b90a:	2201      	movs	r2, #1
 800b90c:	4619      	mov	r1, r3
 800b90e:	f7ff ff15 	bl	800b73c <SEGGER_RTT_ReadNoLock>
 800b912:	4603      	mov	r3, r0
 800b914:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	dd54      	ble.n	800b9c6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	2b80      	cmp	r3, #128	; 0x80
 800b920:	d032      	beq.n	800b988 <_HandleIncomingPacket+0x8c>
 800b922:	2b80      	cmp	r3, #128	; 0x80
 800b924:	dc42      	bgt.n	800b9ac <_HandleIncomingPacket+0xb0>
 800b926:	2b07      	cmp	r3, #7
 800b928:	dc16      	bgt.n	800b958 <_HandleIncomingPacket+0x5c>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	dd3e      	ble.n	800b9ac <_HandleIncomingPacket+0xb0>
 800b92e:	3b01      	subs	r3, #1
 800b930:	2b06      	cmp	r3, #6
 800b932:	d83b      	bhi.n	800b9ac <_HandleIncomingPacket+0xb0>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <_HandleIncomingPacket+0x40>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b95f 	.word	0x0800b95f
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b96b 	.word	0x0800b96b
 800b948:	0800b971 	.word	0x0800b971
 800b94c:	0800b977 	.word	0x0800b977
 800b950:	0800b97d 	.word	0x0800b97d
 800b954:	0800b983 	.word	0x0800b983
 800b958:	2b7f      	cmp	r3, #127	; 0x7f
 800b95a:	d036      	beq.n	800b9ca <_HandleIncomingPacket+0xce>
 800b95c:	e026      	b.n	800b9ac <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b95e:	f000 fb53 	bl	800c008 <SEGGER_SYSVIEW_Start>
      break;
 800b962:	e037      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b964:	f000 fc0a 	bl	800c17c <SEGGER_SYSVIEW_Stop>
      break;
 800b968:	e034      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b96a:	f000 fdbf 	bl	800c4ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b96e:	e031      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b970:	f000 fda8 	bl	800c4c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b974:	e02e      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b976:	f000 fc27 	bl	800c1c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b97a:	e02b      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b97c:	f001 f852 	bl	800ca24 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b980:	e028      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b982:	f001 f831 	bl	800c9e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b986:	e025      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b988:	4b14      	ldr	r3, [pc, #80]	; (800b9dc <_HandleIncomingPacket+0xe0>)
 800b98a:	7e1b      	ldrb	r3, [r3, #24]
 800b98c:	4618      	mov	r0, r3
 800b98e:	1cfb      	adds	r3, r7, #3
 800b990:	2201      	movs	r2, #1
 800b992:	4619      	mov	r1, r3
 800b994:	f7ff fed2 	bl	800b73c <SEGGER_RTT_ReadNoLock>
 800b998:	4603      	mov	r3, r0
 800b99a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd15      	ble.n	800b9ce <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 ff9f 	bl	800c8e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b9aa:	e010      	b.n	800b9ce <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b9ac:	78fb      	ldrb	r3, [r7, #3]
 800b9ae:	b25b      	sxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da0e      	bge.n	800b9d2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b9b4:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <_HandleIncomingPacket+0xe0>)
 800b9b6:	7e1b      	ldrb	r3, [r3, #24]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	1cfb      	adds	r3, r7, #3
 800b9bc:	2201      	movs	r2, #1
 800b9be:	4619      	mov	r1, r3
 800b9c0:	f7ff febc 	bl	800b73c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b9c4:	e005      	b.n	800b9d2 <_HandleIncomingPacket+0xd6>
    }
  }
 800b9c6:	bf00      	nop
 800b9c8:	e004      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
      break;
 800b9ca:	bf00      	nop
 800b9cc:	e002      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
      break;
 800b9ce:	bf00      	nop
 800b9d0:	e000      	b.n	800b9d4 <_HandleIncomingPacket+0xd8>
      break;
 800b9d2:	bf00      	nop
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	20013388 	.word	0x20013388

0800b9e0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08c      	sub	sp, #48	; 0x30
 800b9e4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b9ea:	1d3b      	adds	r3, r7, #4
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f4:	4b31      	ldr	r3, [pc, #196]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b9fa:	e00b      	b.n	800ba14 <_TrySendOverflowPacket+0x34>
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	1c59      	adds	r1, r3, #1
 800ba04:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ba06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba0a:	b2d2      	uxtb	r2, r2
 800ba0c:	701a      	strb	r2, [r3, #0]
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	09db      	lsrs	r3, r3, #7
 800ba12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	2b7f      	cmp	r3, #127	; 0x7f
 800ba18:	d8f0      	bhi.n	800b9fc <_TrySendOverflowPacket+0x1c>
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	1c5a      	adds	r2, r3, #1
 800ba1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba22:	b2d2      	uxtb	r2, r2
 800ba24:	701a      	strb	r2, [r3, #0]
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ba2a:	4b25      	ldr	r3, [pc, #148]	; (800bac0 <_TrySendOverflowPacket+0xe0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ba30:	4b22      	ldr	r3, [pc, #136]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	623b      	str	r3, [r7, #32]
 800ba42:	e00b      	b.n	800ba5c <_TrySendOverflowPacket+0x7c>
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	b2da      	uxtb	r2, r3
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	1c59      	adds	r1, r3, #1
 800ba4c:	6279      	str	r1, [r7, #36]	; 0x24
 800ba4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba52:	b2d2      	uxtb	r2, r2
 800ba54:	701a      	strb	r2, [r3, #0]
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	09db      	lsrs	r3, r3, #7
 800ba5a:	623b      	str	r3, [r7, #32]
 800ba5c:	6a3b      	ldr	r3, [r7, #32]
 800ba5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ba60:	d8f0      	bhi.n	800ba44 <_TrySendOverflowPacket+0x64>
 800ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	627a      	str	r2, [r7, #36]	; 0x24
 800ba68:	6a3a      	ldr	r2, [r7, #32]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba70:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800ba72:	4b12      	ldr	r3, [pc, #72]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800ba74:	785b      	ldrb	r3, [r3, #1]
 800ba76:	4618      	mov	r0, r3
 800ba78:	1d3b      	adds	r3, r7, #4
 800ba7a:	69fa      	ldr	r2, [r7, #28]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	461a      	mov	r2, r3
 800ba80:	1d3b      	adds	r3, r7, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	f7f4 fba4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d009      	beq.n	800baa6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ba92:	4a0a      	ldr	r2, [pc, #40]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800ba98:	4b08      	ldr	r3, [pc, #32]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	4b06      	ldr	r3, [pc, #24]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800baa2:	701a      	strb	r2, [r3, #0]
 800baa4:	e004      	b.n	800bab0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800baa6:	4b05      	ldr	r3, [pc, #20]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	3301      	adds	r3, #1
 800baac:	4a03      	ldr	r2, [pc, #12]	; (800babc <_TrySendOverflowPacket+0xdc>)
 800baae:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800bab0:	693b      	ldr	r3, [r7, #16]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3730      	adds	r7, #48	; 0x30
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	20013388 	.word	0x20013388
 800bac0:	e0001004 	.word	0xe0001004

0800bac4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08a      	sub	sp, #40	; 0x28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800bad0:	4b6c      	ldr	r3, [pc, #432]	; (800bc84 <_SendPacket+0x1c0>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d010      	beq.n	800bafa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800bad8:	4b6a      	ldr	r3, [pc, #424]	; (800bc84 <_SendPacket+0x1c0>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80a3 	beq.w	800bc28 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800bae2:	4b68      	ldr	r3, [pc, #416]	; (800bc84 <_SendPacket+0x1c0>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d109      	bne.n	800bafe <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800baea:	f7ff ff79 	bl	800b9e0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800baee:	4b65      	ldr	r3, [pc, #404]	; (800bc84 <_SendPacket+0x1c0>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	f040 809a 	bne.w	800bc2c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800baf8:	e001      	b.n	800bafe <_SendPacket+0x3a>
    goto Send;
 800bafa:	bf00      	nop
 800bafc:	e000      	b.n	800bb00 <_SendPacket+0x3c>
Send:
 800bafe:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b1f      	cmp	r3, #31
 800bb04:	d809      	bhi.n	800bb1a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800bb06:	4b5f      	ldr	r3, [pc, #380]	; (800bc84 <_SendPacket+0x1c0>)
 800bb08:	69da      	ldr	r2, [r3, #28]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f040 808b 	bne.w	800bc30 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b17      	cmp	r3, #23
 800bb1e:	d807      	bhi.n	800bb30 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	e03d      	b.n	800bbac <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb3c:	d912      	bls.n	800bb64 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	09da      	lsrs	r2, r3, #7
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3b01      	subs	r3, #1
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	b2d2      	uxtb	r2, r2
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	3a01      	subs	r2, #1
 800bb56:	60fa      	str	r2, [r7, #12]
 800bb58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb5c:	b2da      	uxtb	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	701a      	strb	r2, [r3, #0]
 800bb62:	e006      	b.n	800bb72 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b7f      	cmp	r3, #127	; 0x7f
 800bb76:	d912      	bls.n	800bb9e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	09da      	lsrs	r2, r3, #7
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	60fb      	str	r3, [r7, #12]
 800bb82:	b2d2      	uxtb	r2, r2
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	3a01      	subs	r2, #1
 800bb90:	60fa      	str	r2, [r7, #12]
 800bb92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	701a      	strb	r2, [r3, #0]
 800bb9c:	e006      	b.n	800bbac <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	60fb      	str	r3, [r7, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	b2da      	uxtb	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bbac:	4b36      	ldr	r3, [pc, #216]	; (800bc88 <_SendPacket+0x1c4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bbb2:	4b34      	ldr	r3, [pc, #208]	; (800bc84 <_SendPacket+0x1c0>)
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	623b      	str	r3, [r7, #32]
 800bbc4:	e00b      	b.n	800bbde <_SendPacket+0x11a>
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	1c59      	adds	r1, r3, #1
 800bbce:	6279      	str	r1, [r7, #36]	; 0x24
 800bbd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbd4:	b2d2      	uxtb	r2, r2
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	09db      	lsrs	r3, r3, #7
 800bbdc:	623b      	str	r3, [r7, #32]
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	2b7f      	cmp	r3, #127	; 0x7f
 800bbe2:	d8f0      	bhi.n	800bbc6 <_SendPacket+0x102>
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	627a      	str	r2, [r7, #36]	; 0x24
 800bbea:	6a3a      	ldr	r2, [r7, #32]
 800bbec:	b2d2      	uxtb	r2, r2
 800bbee:	701a      	strb	r2, [r3, #0]
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800bbf4:	4b23      	ldr	r3, [pc, #140]	; (800bc84 <_SendPacket+0x1c0>)
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	461a      	mov	r2, r3
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	f7f4 fae4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d003      	beq.n	800bc1a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bc12:	4a1c      	ldr	r2, [pc, #112]	; (800bc84 <_SendPacket+0x1c0>)
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	60d3      	str	r3, [r2, #12]
 800bc18:	e00b      	b.n	800bc32 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800bc1a:	4b1a      	ldr	r3, [pc, #104]	; (800bc84 <_SendPacket+0x1c0>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	4b18      	ldr	r3, [pc, #96]	; (800bc84 <_SendPacket+0x1c0>)
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e004      	b.n	800bc32 <_SendPacket+0x16e>
    goto SendDone;
 800bc28:	bf00      	nop
 800bc2a:	e002      	b.n	800bc32 <_SendPacket+0x16e>
      goto SendDone;
 800bc2c:	bf00      	nop
 800bc2e:	e000      	b.n	800bc32 <_SendPacket+0x16e>
      goto SendDone;
 800bc30:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800bc32:	4b14      	ldr	r3, [pc, #80]	; (800bc84 <_SendPacket+0x1c0>)
 800bc34:	7e1b      	ldrb	r3, [r3, #24]
 800bc36:	4619      	mov	r1, r3
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <_SendPacket+0x1c8>)
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	440b      	add	r3, r1
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	4413      	add	r3, r2
 800bc44:	336c      	adds	r3, #108	; 0x6c
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <_SendPacket+0x1c0>)
 800bc4a:	7e1b      	ldrb	r3, [r3, #24]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	490f      	ldr	r1, [pc, #60]	; (800bc8c <_SendPacket+0x1c8>)
 800bc50:	4603      	mov	r3, r0
 800bc52:	005b      	lsls	r3, r3, #1
 800bc54:	4403      	add	r3, r0
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	440b      	add	r3, r1
 800bc5a:	3370      	adds	r3, #112	; 0x70
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d00b      	beq.n	800bc7a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800bc62:	4b08      	ldr	r3, [pc, #32]	; (800bc84 <_SendPacket+0x1c0>)
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d107      	bne.n	800bc7a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800bc6a:	4b06      	ldr	r3, [pc, #24]	; (800bc84 <_SendPacket+0x1c0>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800bc70:	f7ff fe44 	bl	800b8fc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800bc74:	4b03      	ldr	r3, [pc, #12]	; (800bc84 <_SendPacket+0x1c0>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800bc7a:	bf00      	nop
 800bc7c:	3728      	adds	r7, #40	; 0x28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	20013388 	.word	0x20013388
 800bc88:	e0001004 	.word	0xe0001004
 800bc8c:	20013d50 	.word	0x20013d50

0800bc90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b084      	sub	sp, #16
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bc98:	f3ef 8311 	mrs	r3, BASEPRI
 800bc9c:	f04f 0120 	mov.w	r1, #32
 800bca0:	f381 8811 	msr	BASEPRI, r1
 800bca4:	60fb      	str	r3, [r7, #12]
 800bca6:	4808      	ldr	r0, [pc, #32]	; (800bcc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800bca8:	f7ff fe1b 	bl	800b8e2 <_PreparePacket>
 800bcac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	68b8      	ldr	r0, [r7, #8]
 800bcb4:	f7ff ff06 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f383 8811 	msr	BASEPRI, r3
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	200133b8 	.word	0x200133b8

0800bccc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bcd6:	f3ef 8311 	mrs	r3, BASEPRI
 800bcda:	f04f 0120 	mov.w	r1, #32
 800bcde:	f381 8811 	msr	BASEPRI, r1
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	4816      	ldr	r0, [pc, #88]	; (800bd40 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800bce6:	f7ff fdfc 	bl	800b8e2 <_PreparePacket>
 800bcea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	61bb      	str	r3, [r7, #24]
 800bcf8:	e00b      	b.n	800bd12 <SEGGER_SYSVIEW_RecordU32+0x46>
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	1c59      	adds	r1, r3, #1
 800bd02:	61f9      	str	r1, [r7, #28]
 800bd04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd08:	b2d2      	uxtb	r2, r2
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	09db      	lsrs	r3, r3, #7
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	2b7f      	cmp	r3, #127	; 0x7f
 800bd16:	d8f0      	bhi.n	800bcfa <SEGGER_SYSVIEW_RecordU32+0x2e>
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	1c5a      	adds	r2, r3, #1
 800bd1c:	61fa      	str	r2, [r7, #28]
 800bd1e:	69ba      	ldr	r2, [r7, #24]
 800bd20:	b2d2      	uxtb	r2, r2
 800bd22:	701a      	strb	r2, [r3, #0]
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	68f9      	ldr	r1, [r7, #12]
 800bd2c:	6938      	ldr	r0, [r7, #16]
 800bd2e:	f7ff fec9 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f383 8811 	msr	BASEPRI, r3
}
 800bd38:	bf00      	nop
 800bd3a:	3720      	adds	r7, #32
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200133b8 	.word	0x200133b8

0800bd44 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b08c      	sub	sp, #48	; 0x30
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800bd50:	f3ef 8311 	mrs	r3, BASEPRI
 800bd54:	f04f 0120 	mov.w	r1, #32
 800bd58:	f381 8811 	msr	BASEPRI, r1
 800bd5c:	61fb      	str	r3, [r7, #28]
 800bd5e:	4825      	ldr	r0, [pc, #148]	; (800bdf4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800bd60:	f7ff fdbf 	bl	800b8e2 <_PreparePacket>
 800bd64:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd72:	e00b      	b.n	800bd8c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7a:	1c59      	adds	r1, r3, #1
 800bd7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bd7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd82:	b2d2      	uxtb	r2, r2
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	09db      	lsrs	r3, r3, #7
 800bd8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8e:	2b7f      	cmp	r3, #127	; 0x7f
 800bd90:	d8f0      	bhi.n	800bd74 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800bd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd9a:	b2d2      	uxtb	r2, r2
 800bd9c:	701a      	strb	r2, [r3, #0]
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	627b      	str	r3, [r7, #36]	; 0x24
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	623b      	str	r3, [r7, #32]
 800bdaa:	e00b      	b.n	800bdc4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800bdac:	6a3b      	ldr	r3, [r7, #32]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	1c59      	adds	r1, r3, #1
 800bdb4:	6279      	str	r1, [r7, #36]	; 0x24
 800bdb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	09db      	lsrs	r3, r3, #7
 800bdc2:	623b      	str	r3, [r7, #32]
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc8:	d8f0      	bhi.n	800bdac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	1c5a      	adds	r2, r3, #1
 800bdce:	627a      	str	r2, [r7, #36]	; 0x24
 800bdd0:	6a3a      	ldr	r2, [r7, #32]
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	6979      	ldr	r1, [r7, #20]
 800bdde:	69b8      	ldr	r0, [r7, #24]
 800bde0:	f7ff fe70 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800bde4:	69fb      	ldr	r3, [r7, #28]
 800bde6:	f383 8811 	msr	BASEPRI, r3
}
 800bdea:	bf00      	nop
 800bdec:	3730      	adds	r7, #48	; 0x30
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	200133b8 	.word	0x200133b8

0800bdf8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08e      	sub	sp, #56	; 0x38
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800be06:	f3ef 8311 	mrs	r3, BASEPRI
 800be0a:	f04f 0120 	mov.w	r1, #32
 800be0e:	f381 8811 	msr	BASEPRI, r1
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	4832      	ldr	r0, [pc, #200]	; (800bee0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800be16:	f7ff fd64 	bl	800b8e2 <_PreparePacket>
 800be1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	637b      	str	r3, [r7, #52]	; 0x34
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	633b      	str	r3, [r7, #48]	; 0x30
 800be28:	e00b      	b.n	800be42 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	1c59      	adds	r1, r3, #1
 800be32:	6379      	str	r1, [r7, #52]	; 0x34
 800be34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	701a      	strb	r2, [r3, #0]
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	09db      	lsrs	r3, r3, #7
 800be40:	633b      	str	r3, [r7, #48]	; 0x30
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	2b7f      	cmp	r3, #127	; 0x7f
 800be46:	d8f0      	bhi.n	800be2a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800be48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	637a      	str	r2, [r7, #52]	; 0x34
 800be4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be50:	b2d2      	uxtb	r2, r2
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800be60:	e00b      	b.n	800be7a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	b2da      	uxtb	r2, r3
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	1c59      	adds	r1, r3, #1
 800be6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800be6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	09db      	lsrs	r3, r3, #7
 800be78:	62bb      	str	r3, [r7, #40]	; 0x28
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	2b7f      	cmp	r3, #127	; 0x7f
 800be7e:	d8f0      	bhi.n	800be62 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be88:	b2d2      	uxtb	r2, r2
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	623b      	str	r3, [r7, #32]
 800be98:	e00b      	b.n	800beb2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	1c59      	adds	r1, r3, #1
 800bea2:	6279      	str	r1, [r7, #36]	; 0x24
 800bea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bea8:	b2d2      	uxtb	r2, r2
 800beaa:	701a      	strb	r2, [r3, #0]
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	09db      	lsrs	r3, r3, #7
 800beb0:	623b      	str	r3, [r7, #32]
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	2b7f      	cmp	r3, #127	; 0x7f
 800beb6:	d8f0      	bhi.n	800be9a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	1c5a      	adds	r2, r3, #1
 800bebc:	627a      	str	r2, [r7, #36]	; 0x24
 800bebe:	6a3a      	ldr	r2, [r7, #32]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	6979      	ldr	r1, [r7, #20]
 800becc:	69b8      	ldr	r0, [r7, #24]
 800bece:	f7ff fdf9 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	f383 8811 	msr	BASEPRI, r3
}
 800bed8:	bf00      	nop
 800beda:	3738      	adds	r7, #56	; 0x38
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	200133b8 	.word	0x200133b8

0800bee4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b090      	sub	sp, #64	; 0x40
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bef2:	f3ef 8311 	mrs	r3, BASEPRI
 800bef6:	f04f 0120 	mov.w	r1, #32
 800befa:	f381 8811 	msr	BASEPRI, r1
 800befe:	61fb      	str	r3, [r7, #28]
 800bf00:	4840      	ldr	r0, [pc, #256]	; (800c004 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800bf02:	f7ff fcee 	bl	800b8e2 <_PreparePacket>
 800bf06:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf14:	e00b      	b.n	800bf2e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1c:	1c59      	adds	r1, r3, #1
 800bf1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bf20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
 800bf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2a:	09db      	lsrs	r3, r3, #7
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	2b7f      	cmp	r3, #127	; 0x7f
 800bf32:	d8f0      	bhi.n	800bf16 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800bf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf36:	1c5a      	adds	r2, r3, #1
 800bf38:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bf3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf3c:	b2d2      	uxtb	r2, r2
 800bf3e:	701a      	strb	r2, [r3, #0]
 800bf40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	637b      	str	r3, [r7, #52]	; 0x34
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30
 800bf4c:	e00b      	b.n	800bf66 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf54:	1c59      	adds	r1, r3, #1
 800bf56:	6379      	str	r1, [r7, #52]	; 0x34
 800bf58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	09db      	lsrs	r3, r3, #7
 800bf64:	633b      	str	r3, [r7, #48]	; 0x30
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2b7f      	cmp	r3, #127	; 0x7f
 800bf6a:	d8f0      	bhi.n	800bf4e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800bf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	637a      	str	r2, [r7, #52]	; 0x34
 800bf72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf84:	e00b      	b.n	800bf9e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800bf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	1c59      	adds	r1, r3, #1
 800bf8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bf90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf94:	b2d2      	uxtb	r2, r2
 800bf96:	701a      	strb	r2, [r3, #0]
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	09db      	lsrs	r3, r3, #7
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	2b7f      	cmp	r3, #127	; 0x7f
 800bfa2:	d8f0      	bhi.n	800bf86 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800bfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa6:	1c5a      	adds	r2, r3, #1
 800bfa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bfaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	701a      	strb	r2, [r3, #0]
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfba:	623b      	str	r3, [r7, #32]
 800bfbc:	e00b      	b.n	800bfd6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	1c59      	adds	r1, r3, #1
 800bfc6:	6279      	str	r1, [r7, #36]	; 0x24
 800bfc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bfcc:	b2d2      	uxtb	r2, r2
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	09db      	lsrs	r3, r3, #7
 800bfd4:	623b      	str	r3, [r7, #32]
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	2b7f      	cmp	r3, #127	; 0x7f
 800bfda:	d8f0      	bhi.n	800bfbe <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	1c5a      	adds	r2, r3, #1
 800bfe0:	627a      	str	r2, [r7, #36]	; 0x24
 800bfe2:	6a3a      	ldr	r2, [r7, #32]
 800bfe4:	b2d2      	uxtb	r2, r2
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	6979      	ldr	r1, [r7, #20]
 800bff0:	69b8      	ldr	r0, [r7, #24]
 800bff2:	f7ff fd67 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f383 8811 	msr	BASEPRI, r3
}
 800bffc:	bf00      	nop
 800bffe:	3740      	adds	r7, #64	; 0x40
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	200133b8 	.word	0x200133b8

0800c008 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08c      	sub	sp, #48	; 0x30
 800c00c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c00e:	4b58      	ldr	r3, [pc, #352]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c010:	2201      	movs	r2, #1
 800c012:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c014:	f3ef 8311 	mrs	r3, BASEPRI
 800c018:	f04f 0120 	mov.w	r1, #32
 800c01c:	f381 8811 	msr	BASEPRI, r1
 800c020:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c022:	4b53      	ldr	r3, [pc, #332]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c024:	785b      	ldrb	r3, [r3, #1]
 800c026:	220a      	movs	r2, #10
 800c028:	4952      	ldr	r1, [pc, #328]	; (800c174 <SEGGER_SYSVIEW_Start+0x16c>)
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7f4 f8d0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c036:	200a      	movs	r0, #10
 800c038:	f7ff fe2a 	bl	800bc90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c03c:	f3ef 8311 	mrs	r3, BASEPRI
 800c040:	f04f 0120 	mov.w	r1, #32
 800c044:	f381 8811 	msr	BASEPRI, r1
 800c048:	60bb      	str	r3, [r7, #8]
 800c04a:	484b      	ldr	r0, [pc, #300]	; (800c178 <SEGGER_SYSVIEW_Start+0x170>)
 800c04c:	f7ff fc49 	bl	800b8e2 <_PreparePacket>
 800c050:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c05a:	4b45      	ldr	r3, [pc, #276]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c060:	e00b      	b.n	800c07a <SEGGER_SYSVIEW_Start+0x72>
 800c062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c064:	b2da      	uxtb	r2, r3
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	1c59      	adds	r1, r3, #1
 800c06a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c06c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c070:	b2d2      	uxtb	r2, r2
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c076:	09db      	lsrs	r3, r3, #7
 800c078:	62bb      	str	r3, [r7, #40]	; 0x28
 800c07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c07c:	2b7f      	cmp	r3, #127	; 0x7f
 800c07e:	d8f0      	bhi.n	800c062 <SEGGER_SYSVIEW_Start+0x5a>
 800c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	701a      	strb	r2, [r3, #0]
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
 800c094:	4b36      	ldr	r3, [pc, #216]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	623b      	str	r3, [r7, #32]
 800c09a:	e00b      	b.n	800c0b4 <SEGGER_SYSVIEW_Start+0xac>
 800c09c:	6a3b      	ldr	r3, [r7, #32]
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	1c59      	adds	r1, r3, #1
 800c0a4:	6279      	str	r1, [r7, #36]	; 0x24
 800c0a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0aa:	b2d2      	uxtb	r2, r2
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	09db      	lsrs	r3, r3, #7
 800c0b2:	623b      	str	r3, [r7, #32]
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	2b7f      	cmp	r3, #127	; 0x7f
 800c0b8:	d8f0      	bhi.n	800c09c <SEGGER_SYSVIEW_Start+0x94>
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	627a      	str	r2, [r7, #36]	; 0x24
 800c0c0:	6a3a      	ldr	r2, [r7, #32]
 800c0c2:	b2d2      	uxtb	r2, r2
 800c0c4:	701a      	strb	r2, [r3, #0]
 800c0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	61fb      	str	r3, [r7, #28]
 800c0ce:	4b28      	ldr	r3, [pc, #160]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	61bb      	str	r3, [r7, #24]
 800c0d4:	e00b      	b.n	800c0ee <SEGGER_SYSVIEW_Start+0xe6>
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	1c59      	adds	r1, r3, #1
 800c0de:	61f9      	str	r1, [r7, #28]
 800c0e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0e4:	b2d2      	uxtb	r2, r2
 800c0e6:	701a      	strb	r2, [r3, #0]
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	09db      	lsrs	r3, r3, #7
 800c0ec:	61bb      	str	r3, [r7, #24]
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	2b7f      	cmp	r3, #127	; 0x7f
 800c0f2:	d8f0      	bhi.n	800c0d6 <SEGGER_SYSVIEW_Start+0xce>
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	61fa      	str	r2, [r7, #28]
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	b2d2      	uxtb	r2, r2
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	617b      	str	r3, [r7, #20]
 800c108:	2300      	movs	r3, #0
 800c10a:	613b      	str	r3, [r7, #16]
 800c10c:	e00b      	b.n	800c126 <SEGGER_SYSVIEW_Start+0x11e>
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	b2da      	uxtb	r2, r3
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	1c59      	adds	r1, r3, #1
 800c116:	6179      	str	r1, [r7, #20]
 800c118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c11c:	b2d2      	uxtb	r2, r2
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	09db      	lsrs	r3, r3, #7
 800c124:	613b      	str	r3, [r7, #16]
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b7f      	cmp	r3, #127	; 0x7f
 800c12a:	d8f0      	bhi.n	800c10e <SEGGER_SYSVIEW_Start+0x106>
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	1c5a      	adds	r2, r3, #1
 800c130:	617a      	str	r2, [r7, #20]
 800c132:	693a      	ldr	r2, [r7, #16]
 800c134:	b2d2      	uxtb	r2, r2
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c13c:	2218      	movs	r2, #24
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f7ff fcbf 	bl	800bac4 <_SendPacket>
      RECORD_END();
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c14c:	4b08      	ldr	r3, [pc, #32]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c154:	4b06      	ldr	r3, [pc, #24]	; (800c170 <SEGGER_SYSVIEW_Start+0x168>)
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c15a:	f000 f9c7 	bl	800c4ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c15e:	f000 f9b1 	bl	800c4c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c162:	f000 fc5f 	bl	800ca24 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c166:	bf00      	nop
 800c168:	3730      	adds	r7, #48	; 0x30
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20013388 	.word	0x20013388
 800c174:	0800d5e0 	.word	0x0800d5e0
 800c178:	200133b8 	.word	0x200133b8

0800c17c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c182:	f3ef 8311 	mrs	r3, BASEPRI
 800c186:	f04f 0120 	mov.w	r1, #32
 800c18a:	f381 8811 	msr	BASEPRI, r1
 800c18e:	607b      	str	r3, [r7, #4]
 800c190:	480b      	ldr	r0, [pc, #44]	; (800c1c0 <SEGGER_SYSVIEW_Stop+0x44>)
 800c192:	f7ff fba6 	bl	800b8e2 <_PreparePacket>
 800c196:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800c198:	4b0a      	ldr	r3, [pc, #40]	; (800c1c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800c1a0:	220b      	movs	r2, #11
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6838      	ldr	r0, [r7, #0]
 800c1a6:	f7ff fc8d 	bl	800bac4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800c1aa:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f383 8811 	msr	BASEPRI, r3
}
 800c1b6:	bf00      	nop
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	200133b8 	.word	0x200133b8
 800c1c4:	20013388 	.word	0x20013388

0800c1c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b08c      	sub	sp, #48	; 0x30
 800c1cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c1ce:	f3ef 8311 	mrs	r3, BASEPRI
 800c1d2:	f04f 0120 	mov.w	r1, #32
 800c1d6:	f381 8811 	msr	BASEPRI, r1
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	4845      	ldr	r0, [pc, #276]	; (800c2f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800c1de:	f7ff fb80 	bl	800b8e2 <_PreparePacket>
 800c1e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1ec:	4b42      	ldr	r3, [pc, #264]	; (800c2f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1f2:	e00b      	b.n	800c20c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800c1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	1c59      	adds	r1, r3, #1
 800c1fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c1fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c202:	b2d2      	uxtb	r2, r2
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c208:	09db      	lsrs	r3, r3, #7
 800c20a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20e:	2b7f      	cmp	r3, #127	; 0x7f
 800c210:	d8f0      	bhi.n	800c1f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c21a:	b2d2      	uxtb	r2, r2
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	627b      	str	r3, [r7, #36]	; 0x24
 800c226:	4b34      	ldr	r3, [pc, #208]	; (800c2f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	623b      	str	r3, [r7, #32]
 800c22c:	e00b      	b.n	800c246 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	b2da      	uxtb	r2, r3
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	1c59      	adds	r1, r3, #1
 800c236:	6279      	str	r1, [r7, #36]	; 0x24
 800c238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c23c:	b2d2      	uxtb	r2, r2
 800c23e:	701a      	strb	r2, [r3, #0]
 800c240:	6a3b      	ldr	r3, [r7, #32]
 800c242:	09db      	lsrs	r3, r3, #7
 800c244:	623b      	str	r3, [r7, #32]
 800c246:	6a3b      	ldr	r3, [r7, #32]
 800c248:	2b7f      	cmp	r3, #127	; 0x7f
 800c24a:	d8f0      	bhi.n	800c22e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	1c5a      	adds	r2, r3, #1
 800c250:	627a      	str	r2, [r7, #36]	; 0x24
 800c252:	6a3a      	ldr	r2, [r7, #32]
 800c254:	b2d2      	uxtb	r2, r2
 800c256:	701a      	strb	r2, [r3, #0]
 800c258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	61fb      	str	r3, [r7, #28]
 800c260:	4b25      	ldr	r3, [pc, #148]	; (800c2f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	e00b      	b.n	800c280 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	1c59      	adds	r1, r3, #1
 800c270:	61f9      	str	r1, [r7, #28]
 800c272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	09db      	lsrs	r3, r3, #7
 800c27e:	61bb      	str	r3, [r7, #24]
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b7f      	cmp	r3, #127	; 0x7f
 800c284:	d8f0      	bhi.n	800c268 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	61fa      	str	r2, [r7, #28]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	b2d2      	uxtb	r2, r2
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	617b      	str	r3, [r7, #20]
 800c29a:	2300      	movs	r3, #0
 800c29c:	613b      	str	r3, [r7, #16]
 800c29e:	e00b      	b.n	800c2b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	b2da      	uxtb	r2, r3
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	1c59      	adds	r1, r3, #1
 800c2a8:	6179      	str	r1, [r7, #20]
 800c2aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c2ae:	b2d2      	uxtb	r2, r2
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	09db      	lsrs	r3, r3, #7
 800c2b6:	613b      	str	r3, [r7, #16]
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c2bc:	d8f0      	bhi.n	800c2a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	1c5a      	adds	r2, r3, #1
 800c2c2:	617a      	str	r2, [r7, #20]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	b2d2      	uxtb	r2, r2
 800c2c8:	701a      	strb	r2, [r3, #0]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c2ce:	2218      	movs	r2, #24
 800c2d0:	6879      	ldr	r1, [r7, #4]
 800c2d2:	68b8      	ldr	r0, [r7, #8]
 800c2d4:	f7ff fbf6 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c2de:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d002      	beq.n	800c2ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800c2e6:	4b04      	ldr	r3, [pc, #16]	; (800c2f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ea:	4798      	blx	r3
  }
}
 800c2ec:	bf00      	nop
 800c2ee:	3730      	adds	r7, #48	; 0x30
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	200133b8 	.word	0x200133b8
 800c2f8:	20013388 	.word	0x20013388

0800c2fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b092      	sub	sp, #72	; 0x48
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800c304:	f3ef 8311 	mrs	r3, BASEPRI
 800c308:	f04f 0120 	mov.w	r1, #32
 800c30c:	f381 8811 	msr	BASEPRI, r1
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	486a      	ldr	r0, [pc, #424]	; (800c4bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800c314:	f7ff fae5 	bl	800b8e2 <_PreparePacket>
 800c318:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	647b      	str	r3, [r7, #68]	; 0x44
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4b66      	ldr	r3, [pc, #408]	; (800c4c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	1ad3      	subs	r3, r2, r3
 800c32c:	643b      	str	r3, [r7, #64]	; 0x40
 800c32e:	e00b      	b.n	800c348 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800c330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c332:	b2da      	uxtb	r2, r3
 800c334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c336:	1c59      	adds	r1, r3, #1
 800c338:	6479      	str	r1, [r7, #68]	; 0x44
 800c33a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c344:	09db      	lsrs	r3, r3, #7
 800c346:	643b      	str	r3, [r7, #64]	; 0x40
 800c348:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c34a:	2b7f      	cmp	r3, #127	; 0x7f
 800c34c:	d8f0      	bhi.n	800c330 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800c34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c350:	1c5a      	adds	r2, r3, #1
 800c352:	647a      	str	r2, [r7, #68]	; 0x44
 800c354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	701a      	strb	r2, [r3, #0]
 800c35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	63bb      	str	r3, [r7, #56]	; 0x38
 800c368:	e00b      	b.n	800c382 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c370:	1c59      	adds	r1, r3, #1
 800c372:	63f9      	str	r1, [r7, #60]	; 0x3c
 800c374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c378:	b2d2      	uxtb	r2, r2
 800c37a:	701a      	strb	r2, [r3, #0]
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	09db      	lsrs	r3, r3, #7
 800c380:	63bb      	str	r3, [r7, #56]	; 0x38
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	2b7f      	cmp	r3, #127	; 0x7f
 800c386:	d8f0      	bhi.n	800c36a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800c388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c38e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c396:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	2220      	movs	r2, #32
 800c39e:	4619      	mov	r1, r3
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	f7ff fa51 	bl	800b848 <_EncodeStr>
 800c3a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800c3a8:	2209      	movs	r2, #9
 800c3aa:	68f9      	ldr	r1, [r7, #12]
 800c3ac:	6938      	ldr	r0, [r7, #16]
 800c3ae:	f7ff fb89 	bl	800bac4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	4b40      	ldr	r3, [pc, #256]	; (800c4c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	633b      	str	r3, [r7, #48]	; 0x30
 800c3c6:	e00b      	b.n	800c3e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ce:	1c59      	adds	r1, r3, #1
 800c3d0:	6379      	str	r1, [r7, #52]	; 0x34
 800c3d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	09db      	lsrs	r3, r3, #7
 800c3de:	633b      	str	r3, [r7, #48]	; 0x30
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	2b7f      	cmp	r3, #127	; 0x7f
 800c3e4:	d8f0      	bhi.n	800c3c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800c3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	637a      	str	r2, [r7, #52]	; 0x34
 800c3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ee:	b2d2      	uxtb	r2, r2
 800c3f0:	701a      	strb	r2, [r3, #0]
 800c3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c400:	e00b      	b.n	800c41a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	b2da      	uxtb	r2, r3
 800c406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c408:	1c59      	adds	r1, r3, #1
 800c40a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c40c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	701a      	strb	r2, [r3, #0]
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	09db      	lsrs	r3, r3, #7
 800c418:	62bb      	str	r3, [r7, #40]	; 0x28
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	2b7f      	cmp	r3, #127	; 0x7f
 800c41e:	d8f0      	bhi.n	800c402 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	1c5a      	adds	r2, r3, #1
 800c424:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	627b      	str	r3, [r7, #36]	; 0x24
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	623b      	str	r3, [r7, #32]
 800c43a:	e00b      	b.n	800c454 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800c43c:	6a3b      	ldr	r3, [r7, #32]
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	1c59      	adds	r1, r3, #1
 800c444:	6279      	str	r1, [r7, #36]	; 0x24
 800c446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	09db      	lsrs	r3, r3, #7
 800c452:	623b      	str	r3, [r7, #32]
 800c454:	6a3b      	ldr	r3, [r7, #32]
 800c456:	2b7f      	cmp	r3, #127	; 0x7f
 800c458:	d8f0      	bhi.n	800c43c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	627a      	str	r2, [r7, #36]	; 0x24
 800c460:	6a3a      	ldr	r2, [r7, #32]
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	61fb      	str	r3, [r7, #28]
 800c46e:	2300      	movs	r3, #0
 800c470:	61bb      	str	r3, [r7, #24]
 800c472:	e00b      	b.n	800c48c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	b2da      	uxtb	r2, r3
 800c478:	69fb      	ldr	r3, [r7, #28]
 800c47a:	1c59      	adds	r1, r3, #1
 800c47c:	61f9      	str	r1, [r7, #28]
 800c47e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c482:	b2d2      	uxtb	r2, r2
 800c484:	701a      	strb	r2, [r3, #0]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	09db      	lsrs	r3, r3, #7
 800c48a:	61bb      	str	r3, [r7, #24]
 800c48c:	69bb      	ldr	r3, [r7, #24]
 800c48e:	2b7f      	cmp	r3, #127	; 0x7f
 800c490:	d8f0      	bhi.n	800c474 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800c492:	69fb      	ldr	r3, [r7, #28]
 800c494:	1c5a      	adds	r2, r3, #1
 800c496:	61fa      	str	r2, [r7, #28]
 800c498:	69ba      	ldr	r2, [r7, #24]
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	701a      	strb	r2, [r3, #0]
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800c4a2:	2215      	movs	r2, #21
 800c4a4:	68f9      	ldr	r1, [r7, #12]
 800c4a6:	6938      	ldr	r0, [r7, #16]
 800c4a8:	f7ff fb0c 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f383 8811 	msr	BASEPRI, r3
}
 800c4b2:	bf00      	nop
 800c4b4:	3748      	adds	r7, #72	; 0x48
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	200133b8 	.word	0x200133b8
 800c4c0:	20013388 	.word	0x20013388

0800c4c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800c4c8:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c4ca:	6a1b      	ldr	r3, [r3, #32]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d008      	beq.n	800c4e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800c4d0:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800c4da:	4b03      	ldr	r3, [pc, #12]	; (800c4e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	4798      	blx	r3
  }
}
 800c4e2:	bf00      	nop
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	20013388 	.word	0x20013388

0800c4ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800c4ec:	b590      	push	{r4, r7, lr}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800c4f2:	4b15      	ldr	r3, [pc, #84]	; (800c548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d01a      	beq.n	800c530 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d015      	beq.n	800c530 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800c504:	4b10      	ldr	r3, [pc, #64]	; (800c548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4798      	blx	r3
 800c50c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c510:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800c512:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c516:	f04f 0200 	mov.w	r2, #0
 800c51a:	f04f 0300 	mov.w	r3, #0
 800c51e:	000a      	movs	r2, r1
 800c520:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800c522:	4613      	mov	r3, r2
 800c524:	461a      	mov	r2, r3
 800c526:	4621      	mov	r1, r4
 800c528:	200d      	movs	r0, #13
 800c52a:	f7ff fc0b 	bl	800bd44 <SEGGER_SYSVIEW_RecordU32x2>
 800c52e:	e006      	b.n	800c53e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800c530:	4b06      	ldr	r3, [pc, #24]	; (800c54c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4619      	mov	r1, r3
 800c536:	200c      	movs	r0, #12
 800c538:	f7ff fbc8 	bl	800bccc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800c53c:	bf00      	nop
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	bd90      	pop	{r4, r7, pc}
 800c546:	bf00      	nop
 800c548:	20013388 	.word	0x20013388
 800c54c:	e0001004 	.word	0xe0001004

0800c550 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c556:	f3ef 8311 	mrs	r3, BASEPRI
 800c55a:	f04f 0120 	mov.w	r1, #32
 800c55e:	f381 8811 	msr	BASEPRI, r1
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	4819      	ldr	r0, [pc, #100]	; (800c5cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800c566:	f7ff f9bc 	bl	800b8e2 <_PreparePacket>
 800c56a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800c570:	4b17      	ldr	r3, [pc, #92]	; (800c5d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c578:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	617b      	str	r3, [r7, #20]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	613b      	str	r3, [r7, #16]
 800c582:	e00b      	b.n	800c59c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	b2da      	uxtb	r2, r3
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	1c59      	adds	r1, r3, #1
 800c58c:	6179      	str	r1, [r7, #20]
 800c58e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c592:	b2d2      	uxtb	r2, r2
 800c594:	701a      	strb	r2, [r3, #0]
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	09db      	lsrs	r3, r3, #7
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b7f      	cmp	r3, #127	; 0x7f
 800c5a0:	d8f0      	bhi.n	800c584 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	1c5a      	adds	r2, r3, #1
 800c5a6:	617a      	str	r2, [r7, #20]
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	b2d2      	uxtb	r2, r2
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	6879      	ldr	r1, [r7, #4]
 800c5b6:	68b8      	ldr	r0, [r7, #8]
 800c5b8:	f7ff fa84 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f383 8811 	msr	BASEPRI, r3
}
 800c5c2:	bf00      	nop
 800c5c4:	3718      	adds	r7, #24
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	200133b8 	.word	0x200133b8
 800c5d0:	e000ed04 	.word	0xe000ed04

0800c5d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c5da:	f3ef 8311 	mrs	r3, BASEPRI
 800c5de:	f04f 0120 	mov.w	r1, #32
 800c5e2:	f381 8811 	msr	BASEPRI, r1
 800c5e6:	607b      	str	r3, [r7, #4]
 800c5e8:	4807      	ldr	r0, [pc, #28]	; (800c608 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800c5ea:	f7ff f97a 	bl	800b8e2 <_PreparePacket>
 800c5ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800c5f0:	2203      	movs	r2, #3
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6838      	ldr	r0, [r7, #0]
 800c5f6:	f7ff fa65 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f383 8811 	msr	BASEPRI, r3
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	200133b8 	.word	0x200133b8

0800c60c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c612:	f3ef 8311 	mrs	r3, BASEPRI
 800c616:	f04f 0120 	mov.w	r1, #32
 800c61a:	f381 8811 	msr	BASEPRI, r1
 800c61e:	607b      	str	r3, [r7, #4]
 800c620:	4807      	ldr	r0, [pc, #28]	; (800c640 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c622:	f7ff f95e 	bl	800b8e2 <_PreparePacket>
 800c626:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c628:	2212      	movs	r2, #18
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6838      	ldr	r0, [r7, #0]
 800c62e:	f7ff fa49 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f383 8811 	msr	BASEPRI, r3
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	200133b8 	.word	0x200133b8

0800c644 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c64a:	f3ef 8311 	mrs	r3, BASEPRI
 800c64e:	f04f 0120 	mov.w	r1, #32
 800c652:	f381 8811 	msr	BASEPRI, r1
 800c656:	607b      	str	r3, [r7, #4]
 800c658:	4807      	ldr	r0, [pc, #28]	; (800c678 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c65a:	f7ff f942 	bl	800b8e2 <_PreparePacket>
 800c65e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c660:	2211      	movs	r2, #17
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6838      	ldr	r0, [r7, #0]
 800c666:	f7ff fa2d 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f383 8811 	msr	BASEPRI, r3
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	200133b8 	.word	0x200133b8

0800c67c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b088      	sub	sp, #32
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c684:	f3ef 8311 	mrs	r3, BASEPRI
 800c688:	f04f 0120 	mov.w	r1, #32
 800c68c:	f381 8811 	msr	BASEPRI, r1
 800c690:	617b      	str	r3, [r7, #20]
 800c692:	4819      	ldr	r0, [pc, #100]	; (800c6f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c694:	f7ff f925 	bl	800b8e2 <_PreparePacket>
 800c698:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c69e:	4b17      	ldr	r3, [pc, #92]	; (800c6fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	61fb      	str	r3, [r7, #28]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	61bb      	str	r3, [r7, #24]
 800c6b0:	e00b      	b.n	800c6ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c6b2:	69bb      	ldr	r3, [r7, #24]
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	1c59      	adds	r1, r3, #1
 800c6ba:	61f9      	str	r1, [r7, #28]
 800c6bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	09db      	lsrs	r3, r3, #7
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ce:	d8f0      	bhi.n	800c6b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	61fa      	str	r2, [r7, #28]
 800c6d6:	69ba      	ldr	r2, [r7, #24]
 800c6d8:	b2d2      	uxtb	r2, r2
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	68f9      	ldr	r1, [r7, #12]
 800c6e4:	6938      	ldr	r0, [r7, #16]
 800c6e6:	f7ff f9ed 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	f383 8811 	msr	BASEPRI, r3
}
 800c6f0:	bf00      	nop
 800c6f2:	3720      	adds	r7, #32
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	200133b8 	.word	0x200133b8
 800c6fc:	20013388 	.word	0x20013388

0800c700 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c708:	f3ef 8311 	mrs	r3, BASEPRI
 800c70c:	f04f 0120 	mov.w	r1, #32
 800c710:	f381 8811 	msr	BASEPRI, r1
 800c714:	617b      	str	r3, [r7, #20]
 800c716:	4819      	ldr	r0, [pc, #100]	; (800c77c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c718:	f7ff f8e3 	bl	800b8e2 <_PreparePacket>
 800c71c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c722:	4b17      	ldr	r3, [pc, #92]	; (800c780 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	1ad3      	subs	r3, r2, r3
 800c72a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	61fb      	str	r3, [r7, #28]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	61bb      	str	r3, [r7, #24]
 800c734:	e00b      	b.n	800c74e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	1c59      	adds	r1, r3, #1
 800c73e:	61f9      	str	r1, [r7, #28]
 800c740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c744:	b2d2      	uxtb	r2, r2
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	09db      	lsrs	r3, r3, #7
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2b7f      	cmp	r3, #127	; 0x7f
 800c752:	d8f0      	bhi.n	800c736 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	61fa      	str	r2, [r7, #28]
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c764:	2204      	movs	r2, #4
 800c766:	68f9      	ldr	r1, [r7, #12]
 800c768:	6938      	ldr	r0, [r7, #16]
 800c76a:	f7ff f9ab 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f383 8811 	msr	BASEPRI, r3
}
 800c774:	bf00      	nop
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	200133b8 	.word	0x200133b8
 800c780:	20013388 	.word	0x20013388

0800c784 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c78c:	f3ef 8311 	mrs	r3, BASEPRI
 800c790:	f04f 0120 	mov.w	r1, #32
 800c794:	f381 8811 	msr	BASEPRI, r1
 800c798:	617b      	str	r3, [r7, #20]
 800c79a:	4819      	ldr	r0, [pc, #100]	; (800c800 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c79c:	f7ff f8a1 	bl	800b8e2 <_PreparePacket>
 800c7a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c7a6:	4b17      	ldr	r3, [pc, #92]	; (800c804 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	61fb      	str	r3, [r7, #28]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	61bb      	str	r3, [r7, #24]
 800c7b8:	e00b      	b.n	800c7d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	1c59      	adds	r1, r3, #1
 800c7c2:	61f9      	str	r1, [r7, #28]
 800c7c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c7c8:	b2d2      	uxtb	r2, r2
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	09db      	lsrs	r3, r3, #7
 800c7d0:	61bb      	str	r3, [r7, #24]
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	2b7f      	cmp	r3, #127	; 0x7f
 800c7d6:	d8f0      	bhi.n	800c7ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	1c5a      	adds	r2, r3, #1
 800c7dc:	61fa      	str	r2, [r7, #28]
 800c7de:	69ba      	ldr	r2, [r7, #24]
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c7e8:	2206      	movs	r2, #6
 800c7ea:	68f9      	ldr	r1, [r7, #12]
 800c7ec:	6938      	ldr	r0, [r7, #16]
 800c7ee:	f7ff f969 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	f383 8811 	msr	BASEPRI, r3
}
 800c7f8:	bf00      	nop
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	200133b8 	.word	0x200133b8
 800c804:	20013388 	.word	0x20013388

0800c808 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c812:	f3ef 8311 	mrs	r3, BASEPRI
 800c816:	f04f 0120 	mov.w	r1, #32
 800c81a:	f381 8811 	msr	BASEPRI, r1
 800c81e:	617b      	str	r3, [r7, #20]
 800c820:	4827      	ldr	r0, [pc, #156]	; (800c8c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c822:	f7ff f85e 	bl	800b8e2 <_PreparePacket>
 800c826:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c82c:	4b25      	ldr	r3, [pc, #148]	; (800c8c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c82e:	691b      	ldr	r3, [r3, #16]
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	1ad3      	subs	r3, r2, r3
 800c834:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	627b      	str	r3, [r7, #36]	; 0x24
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	623b      	str	r3, [r7, #32]
 800c83e:	e00b      	b.n	800c858 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	b2da      	uxtb	r2, r3
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	1c59      	adds	r1, r3, #1
 800c848:	6279      	str	r1, [r7, #36]	; 0x24
 800c84a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c84e:	b2d2      	uxtb	r2, r2
 800c850:	701a      	strb	r2, [r3, #0]
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	09db      	lsrs	r3, r3, #7
 800c856:	623b      	str	r3, [r7, #32]
 800c858:	6a3b      	ldr	r3, [r7, #32]
 800c85a:	2b7f      	cmp	r3, #127	; 0x7f
 800c85c:	d8f0      	bhi.n	800c840 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	627a      	str	r2, [r7, #36]	; 0x24
 800c864:	6a3a      	ldr	r2, [r7, #32]
 800c866:	b2d2      	uxtb	r2, r2
 800c868:	701a      	strb	r2, [r3, #0]
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	61fb      	str	r3, [r7, #28]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	61bb      	str	r3, [r7, #24]
 800c876:	e00b      	b.n	800c890 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	1c59      	adds	r1, r3, #1
 800c880:	61f9      	str	r1, [r7, #28]
 800c882:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c886:	b2d2      	uxtb	r2, r2
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	09db      	lsrs	r3, r3, #7
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	2b7f      	cmp	r3, #127	; 0x7f
 800c894:	d8f0      	bhi.n	800c878 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	61fa      	str	r2, [r7, #28]
 800c89c:	69ba      	ldr	r2, [r7, #24]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c8a6:	2207      	movs	r2, #7
 800c8a8:	68f9      	ldr	r1, [r7, #12]
 800c8aa:	6938      	ldr	r0, [r7, #16]
 800c8ac:	f7ff f90a 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f383 8811 	msr	BASEPRI, r3
}
 800c8b6:	bf00      	nop
 800c8b8:	3728      	adds	r7, #40	; 0x28
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	200133b8 	.word	0x200133b8
 800c8c4:	20013388 	.word	0x20013388

0800c8c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c8d0:	4b04      	ldr	r3, [pc, #16]	; (800c8e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	1ad3      	subs	r3, r2, r3
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	20013388 	.word	0x20013388

0800c8e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08c      	sub	sp, #48	; 0x30
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c8f2:	4b3b      	ldr	r3, [pc, #236]	; (800c9e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d06d      	beq.n	800c9d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c8fa:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c900:	2300      	movs	r3, #0
 800c902:	62bb      	str	r3, [r7, #40]	; 0x28
 800c904:	e008      	b.n	800c918 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d007      	beq.n	800c922 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c914:	3301      	adds	r3, #1
 800c916:	62bb      	str	r3, [r7, #40]	; 0x28
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d3f2      	bcc.n	800c906 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c920:	e000      	b.n	800c924 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c922:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	2b00      	cmp	r3, #0
 800c928:	d055      	beq.n	800c9d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c92a:	f3ef 8311 	mrs	r3, BASEPRI
 800c92e:	f04f 0120 	mov.w	r1, #32
 800c932:	f381 8811 	msr	BASEPRI, r1
 800c936:	617b      	str	r3, [r7, #20]
 800c938:	482a      	ldr	r0, [pc, #168]	; (800c9e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c93a:	f7fe ffd2 	bl	800b8e2 <_PreparePacket>
 800c93e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	627b      	str	r3, [r7, #36]	; 0x24
 800c948:	79fb      	ldrb	r3, [r7, #7]
 800c94a:	623b      	str	r3, [r7, #32]
 800c94c:	e00b      	b.n	800c966 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	b2da      	uxtb	r2, r3
 800c952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c954:	1c59      	adds	r1, r3, #1
 800c956:	6279      	str	r1, [r7, #36]	; 0x24
 800c958:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c95c:	b2d2      	uxtb	r2, r2
 800c95e:	701a      	strb	r2, [r3, #0]
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	09db      	lsrs	r3, r3, #7
 800c964:	623b      	str	r3, [r7, #32]
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	2b7f      	cmp	r3, #127	; 0x7f
 800c96a:	d8f0      	bhi.n	800c94e <SEGGER_SYSVIEW_SendModule+0x66>
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	1c5a      	adds	r2, r3, #1
 800c970:	627a      	str	r2, [r7, #36]	; 0x24
 800c972:	6a3a      	ldr	r2, [r7, #32]
 800c974:	b2d2      	uxtb	r2, r2
 800c976:	701a      	strb	r2, [r3, #0]
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	61bb      	str	r3, [r7, #24]
 800c986:	e00b      	b.n	800c9a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	1c59      	adds	r1, r3, #1
 800c990:	61f9      	str	r1, [r7, #28]
 800c992:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c996:	b2d2      	uxtb	r2, r2
 800c998:	701a      	strb	r2, [r3, #0]
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	09db      	lsrs	r3, r3, #7
 800c99e:	61bb      	str	r3, [r7, #24]
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c9a4:	d8f0      	bhi.n	800c988 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	61fa      	str	r2, [r7, #28]
 800c9ac:	69ba      	ldr	r2, [r7, #24]
 800c9ae:	b2d2      	uxtb	r2, r2
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2280      	movs	r2, #128	; 0x80
 800c9bc:	4619      	mov	r1, r3
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7fe ff42 	bl	800b848 <_EncodeStr>
 800c9c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c9c6:	2216      	movs	r2, #22
 800c9c8:	68f9      	ldr	r1, [r7, #12]
 800c9ca:	6938      	ldr	r0, [r7, #16]
 800c9cc:	f7ff f87a 	bl	800bac4 <_SendPacket>
      RECORD_END();
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c9d6:	bf00      	nop
 800c9d8:	3730      	adds	r7, #48	; 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	200133b0 	.word	0x200133b0
 800c9e4:	200133b8 	.word	0x200133b8

0800c9e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ca20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00f      	beq.n	800ca16 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c9f6:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1f2      	bne.n	800c9fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	200133b0 	.word	0x200133b0

0800ca24 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800ca2a:	f3ef 8311 	mrs	r3, BASEPRI
 800ca2e:	f04f 0120 	mov.w	r1, #32
 800ca32:	f381 8811 	msr	BASEPRI, r1
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	4817      	ldr	r0, [pc, #92]	; (800ca98 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800ca3a:	f7fe ff52 	bl	800b8e2 <_PreparePacket>
 800ca3e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	617b      	str	r3, [r7, #20]
 800ca48:	4b14      	ldr	r3, [pc, #80]	; (800ca9c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	e00b      	b.n	800ca68 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	1c59      	adds	r1, r3, #1
 800ca58:	6179      	str	r1, [r7, #20]
 800ca5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca5e:	b2d2      	uxtb	r2, r2
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	09db      	lsrs	r3, r3, #7
 800ca66:	613b      	str	r3, [r7, #16]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	2b7f      	cmp	r3, #127	; 0x7f
 800ca6c:	d8f0      	bhi.n	800ca50 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	617a      	str	r2, [r7, #20]
 800ca74:	693a      	ldr	r2, [r7, #16]
 800ca76:	b2d2      	uxtb	r2, r2
 800ca78:	701a      	strb	r2, [r3, #0]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800ca7e:	221b      	movs	r2, #27
 800ca80:	6879      	ldr	r1, [r7, #4]
 800ca82:	68b8      	ldr	r0, [r7, #8]
 800ca84:	f7ff f81e 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f383 8811 	msr	BASEPRI, r3
}
 800ca8e:	bf00      	nop
 800ca90:	3718      	adds	r7, #24
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	200133b8 	.word	0x200133b8
 800ca9c:	200133b4 	.word	0x200133b4

0800caa0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	; 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800caa8:	f3ef 8311 	mrs	r3, BASEPRI
 800caac:	f04f 0120 	mov.w	r1, #32
 800cab0:	f381 8811 	msr	BASEPRI, r1
 800cab4:	617b      	str	r3, [r7, #20]
 800cab6:	4827      	ldr	r0, [pc, #156]	; (800cb54 <SEGGER_SYSVIEW_Warn+0xb4>)
 800cab8:	f7fe ff13 	bl	800b8e2 <_PreparePacket>
 800cabc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cabe:	2280      	movs	r2, #128	; 0x80
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	6938      	ldr	r0, [r7, #16]
 800cac4:	f7fe fec0 	bl	800b848 <_EncodeStr>
 800cac8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
 800cace:	2301      	movs	r3, #1
 800cad0:	623b      	str	r3, [r7, #32]
 800cad2:	e00b      	b.n	800caec <SEGGER_SYSVIEW_Warn+0x4c>
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	1c59      	adds	r1, r3, #1
 800cadc:	6279      	str	r1, [r7, #36]	; 0x24
 800cade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cae2:	b2d2      	uxtb	r2, r2
 800cae4:	701a      	strb	r2, [r3, #0]
 800cae6:	6a3b      	ldr	r3, [r7, #32]
 800cae8:	09db      	lsrs	r3, r3, #7
 800caea:	623b      	str	r3, [r7, #32]
 800caec:	6a3b      	ldr	r3, [r7, #32]
 800caee:	2b7f      	cmp	r3, #127	; 0x7f
 800caf0:	d8f0      	bhi.n	800cad4 <SEGGER_SYSVIEW_Warn+0x34>
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1c5a      	adds	r2, r3, #1
 800caf6:	627a      	str	r2, [r7, #36]	; 0x24
 800caf8:	6a3a      	ldr	r2, [r7, #32]
 800cafa:	b2d2      	uxtb	r2, r2
 800cafc:	701a      	strb	r2, [r3, #0]
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	61fb      	str	r3, [r7, #28]
 800cb06:	2300      	movs	r3, #0
 800cb08:	61bb      	str	r3, [r7, #24]
 800cb0a:	e00b      	b.n	800cb24 <SEGGER_SYSVIEW_Warn+0x84>
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	1c59      	adds	r1, r3, #1
 800cb14:	61f9      	str	r1, [r7, #28]
 800cb16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	09db      	lsrs	r3, r3, #7
 800cb22:	61bb      	str	r3, [r7, #24]
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	2b7f      	cmp	r3, #127	; 0x7f
 800cb28:	d8f0      	bhi.n	800cb0c <SEGGER_SYSVIEW_Warn+0x6c>
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	1c5a      	adds	r2, r3, #1
 800cb2e:	61fa      	str	r2, [r7, #28]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	701a      	strb	r2, [r3, #0]
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800cb3a:	221a      	movs	r2, #26
 800cb3c:	68f9      	ldr	r1, [r7, #12]
 800cb3e:	6938      	ldr	r0, [r7, #16]
 800cb40:	f7fe ffc0 	bl	800bac4 <_SendPacket>
  RECORD_END();
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f383 8811 	msr	BASEPRI, r3
}
 800cb4a:	bf00      	nop
 800cb4c:	3728      	adds	r7, #40	; 0x28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200133b8 	.word	0x200133b8

0800cb58 <__errno>:
 800cb58:	4b01      	ldr	r3, [pc, #4]	; (800cb60 <__errno+0x8>)
 800cb5a:	6818      	ldr	r0, [r3, #0]
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20000034 	.word	0x20000034

0800cb64 <__libc_init_array>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	4d0d      	ldr	r5, [pc, #52]	; (800cb9c <__libc_init_array+0x38>)
 800cb68:	4c0d      	ldr	r4, [pc, #52]	; (800cba0 <__libc_init_array+0x3c>)
 800cb6a:	1b64      	subs	r4, r4, r5
 800cb6c:	10a4      	asrs	r4, r4, #2
 800cb6e:	2600      	movs	r6, #0
 800cb70:	42a6      	cmp	r6, r4
 800cb72:	d109      	bne.n	800cb88 <__libc_init_array+0x24>
 800cb74:	4d0b      	ldr	r5, [pc, #44]	; (800cba4 <__libc_init_array+0x40>)
 800cb76:	4c0c      	ldr	r4, [pc, #48]	; (800cba8 <__libc_init_array+0x44>)
 800cb78:	f000 fc6c 	bl	800d454 <_init>
 800cb7c:	1b64      	subs	r4, r4, r5
 800cb7e:	10a4      	asrs	r4, r4, #2
 800cb80:	2600      	movs	r6, #0
 800cb82:	42a6      	cmp	r6, r4
 800cb84:	d105      	bne.n	800cb92 <__libc_init_array+0x2e>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8c:	4798      	blx	r3
 800cb8e:	3601      	adds	r6, #1
 800cb90:	e7ee      	b.n	800cb70 <__libc_init_array+0xc>
 800cb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb96:	4798      	blx	r3
 800cb98:	3601      	adds	r6, #1
 800cb9a:	e7f2      	b.n	800cb82 <__libc_init_array+0x1e>
 800cb9c:	0800d628 	.word	0x0800d628
 800cba0:	0800d628 	.word	0x0800d628
 800cba4:	0800d628 	.word	0x0800d628
 800cba8:	0800d62c 	.word	0x0800d62c

0800cbac <malloc>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	; (800cbb8 <malloc+0xc>)
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f000 b87f 	b.w	800ccb4 <_malloc_r>
 800cbb6:	bf00      	nop
 800cbb8:	20000034 	.word	0x20000034

0800cbbc <free>:
 800cbbc:	4b02      	ldr	r3, [pc, #8]	; (800cbc8 <free+0xc>)
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	6818      	ldr	r0, [r3, #0]
 800cbc2:	f000 b827 	b.w	800cc14 <_free_r>
 800cbc6:	bf00      	nop
 800cbc8:	20000034 	.word	0x20000034

0800cbcc <memcmp>:
 800cbcc:	b530      	push	{r4, r5, lr}
 800cbce:	3901      	subs	r1, #1
 800cbd0:	2400      	movs	r4, #0
 800cbd2:	42a2      	cmp	r2, r4
 800cbd4:	d101      	bne.n	800cbda <memcmp+0xe>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e005      	b.n	800cbe6 <memcmp+0x1a>
 800cbda:	5d03      	ldrb	r3, [r0, r4]
 800cbdc:	3401      	adds	r4, #1
 800cbde:	5d0d      	ldrb	r5, [r1, r4]
 800cbe0:	42ab      	cmp	r3, r5
 800cbe2:	d0f6      	beq.n	800cbd2 <memcmp+0x6>
 800cbe4:	1b58      	subs	r0, r3, r5
 800cbe6:	bd30      	pop	{r4, r5, pc}

0800cbe8 <memcpy>:
 800cbe8:	440a      	add	r2, r1
 800cbea:	4291      	cmp	r1, r2
 800cbec:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbf0:	d100      	bne.n	800cbf4 <memcpy+0xc>
 800cbf2:	4770      	bx	lr
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbfe:	4291      	cmp	r1, r2
 800cc00:	d1f9      	bne.n	800cbf6 <memcpy+0xe>
 800cc02:	bd10      	pop	{r4, pc}

0800cc04 <memset>:
 800cc04:	4402      	add	r2, r0
 800cc06:	4603      	mov	r3, r0
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d100      	bne.n	800cc0e <memset+0xa>
 800cc0c:	4770      	bx	lr
 800cc0e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc12:	e7f9      	b.n	800cc08 <memset+0x4>

0800cc14 <_free_r>:
 800cc14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc16:	2900      	cmp	r1, #0
 800cc18:	d048      	beq.n	800ccac <_free_r+0x98>
 800cc1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1e:	9001      	str	r0, [sp, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f1a1 0404 	sub.w	r4, r1, #4
 800cc26:	bfb8      	it	lt
 800cc28:	18e4      	addlt	r4, r4, r3
 800cc2a:	f000 f8cd 	bl	800cdc8 <__malloc_lock>
 800cc2e:	4a20      	ldr	r2, [pc, #128]	; (800ccb0 <_free_r+0x9c>)
 800cc30:	9801      	ldr	r0, [sp, #4]
 800cc32:	6813      	ldr	r3, [r2, #0]
 800cc34:	4615      	mov	r5, r2
 800cc36:	b933      	cbnz	r3, 800cc46 <_free_r+0x32>
 800cc38:	6063      	str	r3, [r4, #4]
 800cc3a:	6014      	str	r4, [r2, #0]
 800cc3c:	b003      	add	sp, #12
 800cc3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc42:	f000 b8c7 	b.w	800cdd4 <__malloc_unlock>
 800cc46:	42a3      	cmp	r3, r4
 800cc48:	d90b      	bls.n	800cc62 <_free_r+0x4e>
 800cc4a:	6821      	ldr	r1, [r4, #0]
 800cc4c:	1862      	adds	r2, r4, r1
 800cc4e:	4293      	cmp	r3, r2
 800cc50:	bf04      	itt	eq
 800cc52:	681a      	ldreq	r2, [r3, #0]
 800cc54:	685b      	ldreq	r3, [r3, #4]
 800cc56:	6063      	str	r3, [r4, #4]
 800cc58:	bf04      	itt	eq
 800cc5a:	1852      	addeq	r2, r2, r1
 800cc5c:	6022      	streq	r2, [r4, #0]
 800cc5e:	602c      	str	r4, [r5, #0]
 800cc60:	e7ec      	b.n	800cc3c <_free_r+0x28>
 800cc62:	461a      	mov	r2, r3
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b10b      	cbz	r3, 800cc6c <_free_r+0x58>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d9fa      	bls.n	800cc62 <_free_r+0x4e>
 800cc6c:	6811      	ldr	r1, [r2, #0]
 800cc6e:	1855      	adds	r5, r2, r1
 800cc70:	42a5      	cmp	r5, r4
 800cc72:	d10b      	bne.n	800cc8c <_free_r+0x78>
 800cc74:	6824      	ldr	r4, [r4, #0]
 800cc76:	4421      	add	r1, r4
 800cc78:	1854      	adds	r4, r2, r1
 800cc7a:	42a3      	cmp	r3, r4
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	d1dd      	bne.n	800cc3c <_free_r+0x28>
 800cc80:	681c      	ldr	r4, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	6053      	str	r3, [r2, #4]
 800cc86:	4421      	add	r1, r4
 800cc88:	6011      	str	r1, [r2, #0]
 800cc8a:	e7d7      	b.n	800cc3c <_free_r+0x28>
 800cc8c:	d902      	bls.n	800cc94 <_free_r+0x80>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	6003      	str	r3, [r0, #0]
 800cc92:	e7d3      	b.n	800cc3c <_free_r+0x28>
 800cc94:	6825      	ldr	r5, [r4, #0]
 800cc96:	1961      	adds	r1, r4, r5
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	bf04      	itt	eq
 800cc9c:	6819      	ldreq	r1, [r3, #0]
 800cc9e:	685b      	ldreq	r3, [r3, #4]
 800cca0:	6063      	str	r3, [r4, #4]
 800cca2:	bf04      	itt	eq
 800cca4:	1949      	addeq	r1, r1, r5
 800cca6:	6021      	streq	r1, [r4, #0]
 800cca8:	6054      	str	r4, [r2, #4]
 800ccaa:	e7c7      	b.n	800cc3c <_free_r+0x28>
 800ccac:	b003      	add	sp, #12
 800ccae:	bd30      	pop	{r4, r5, pc}
 800ccb0:	2001349c 	.word	0x2001349c

0800ccb4 <_malloc_r>:
 800ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb6:	1ccd      	adds	r5, r1, #3
 800ccb8:	f025 0503 	bic.w	r5, r5, #3
 800ccbc:	3508      	adds	r5, #8
 800ccbe:	2d0c      	cmp	r5, #12
 800ccc0:	bf38      	it	cc
 800ccc2:	250c      	movcc	r5, #12
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	db01      	blt.n	800ccce <_malloc_r+0x1a>
 800ccca:	42a9      	cmp	r1, r5
 800cccc:	d903      	bls.n	800ccd6 <_malloc_r+0x22>
 800ccce:	230c      	movs	r3, #12
 800ccd0:	6033      	str	r3, [r6, #0]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd6:	f000 f877 	bl	800cdc8 <__malloc_lock>
 800ccda:	4921      	ldr	r1, [pc, #132]	; (800cd60 <_malloc_r+0xac>)
 800ccdc:	680a      	ldr	r2, [r1, #0]
 800ccde:	4614      	mov	r4, r2
 800cce0:	b99c      	cbnz	r4, 800cd0a <_malloc_r+0x56>
 800cce2:	4f20      	ldr	r7, [pc, #128]	; (800cd64 <_malloc_r+0xb0>)
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	b923      	cbnz	r3, 800ccf2 <_malloc_r+0x3e>
 800cce8:	4621      	mov	r1, r4
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 f83c 	bl	800cd68 <_sbrk_r>
 800ccf0:	6038      	str	r0, [r7, #0]
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f000 f837 	bl	800cd68 <_sbrk_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d123      	bne.n	800cd46 <_malloc_r+0x92>
 800ccfe:	230c      	movs	r3, #12
 800cd00:	6033      	str	r3, [r6, #0]
 800cd02:	4630      	mov	r0, r6
 800cd04:	f000 f866 	bl	800cdd4 <__malloc_unlock>
 800cd08:	e7e3      	b.n	800ccd2 <_malloc_r+0x1e>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	1b5b      	subs	r3, r3, r5
 800cd0e:	d417      	bmi.n	800cd40 <_malloc_r+0x8c>
 800cd10:	2b0b      	cmp	r3, #11
 800cd12:	d903      	bls.n	800cd1c <_malloc_r+0x68>
 800cd14:	6023      	str	r3, [r4, #0]
 800cd16:	441c      	add	r4, r3
 800cd18:	6025      	str	r5, [r4, #0]
 800cd1a:	e004      	b.n	800cd26 <_malloc_r+0x72>
 800cd1c:	6863      	ldr	r3, [r4, #4]
 800cd1e:	42a2      	cmp	r2, r4
 800cd20:	bf0c      	ite	eq
 800cd22:	600b      	streq	r3, [r1, #0]
 800cd24:	6053      	strne	r3, [r2, #4]
 800cd26:	4630      	mov	r0, r6
 800cd28:	f000 f854 	bl	800cdd4 <__malloc_unlock>
 800cd2c:	f104 000b 	add.w	r0, r4, #11
 800cd30:	1d23      	adds	r3, r4, #4
 800cd32:	f020 0007 	bic.w	r0, r0, #7
 800cd36:	1ac2      	subs	r2, r0, r3
 800cd38:	d0cc      	beq.n	800ccd4 <_malloc_r+0x20>
 800cd3a:	1a1b      	subs	r3, r3, r0
 800cd3c:	50a3      	str	r3, [r4, r2]
 800cd3e:	e7c9      	b.n	800ccd4 <_malloc_r+0x20>
 800cd40:	4622      	mov	r2, r4
 800cd42:	6864      	ldr	r4, [r4, #4]
 800cd44:	e7cc      	b.n	800cce0 <_malloc_r+0x2c>
 800cd46:	1cc4      	adds	r4, r0, #3
 800cd48:	f024 0403 	bic.w	r4, r4, #3
 800cd4c:	42a0      	cmp	r0, r4
 800cd4e:	d0e3      	beq.n	800cd18 <_malloc_r+0x64>
 800cd50:	1a21      	subs	r1, r4, r0
 800cd52:	4630      	mov	r0, r6
 800cd54:	f000 f808 	bl	800cd68 <_sbrk_r>
 800cd58:	3001      	adds	r0, #1
 800cd5a:	d1dd      	bne.n	800cd18 <_malloc_r+0x64>
 800cd5c:	e7cf      	b.n	800ccfe <_malloc_r+0x4a>
 800cd5e:	bf00      	nop
 800cd60:	2001349c 	.word	0x2001349c
 800cd64:	200134a0 	.word	0x200134a0

0800cd68 <_sbrk_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	4d06      	ldr	r5, [pc, #24]	; (800cd84 <_sbrk_r+0x1c>)
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	602b      	str	r3, [r5, #0]
 800cd74:	f7f4 fad4 	bl	8001320 <_sbrk>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_sbrk_r+0x1a>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_sbrk_r+0x1a>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	20013df8 	.word	0x20013df8

0800cd88 <siprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b500      	push	{lr}
 800cd8c:	b09c      	sub	sp, #112	; 0x70
 800cd8e:	ab1d      	add	r3, sp, #116	; 0x74
 800cd90:	9002      	str	r0, [sp, #8]
 800cd92:	9006      	str	r0, [sp, #24]
 800cd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd98:	4809      	ldr	r0, [pc, #36]	; (800cdc0 <siprintf+0x38>)
 800cd9a:	9107      	str	r1, [sp, #28]
 800cd9c:	9104      	str	r1, [sp, #16]
 800cd9e:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <siprintf+0x3c>)
 800cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	6800      	ldr	r0, [r0, #0]
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	a902      	add	r1, sp, #8
 800cdac:	f000 f874 	bl	800ce98 <_svfiprintf_r>
 800cdb0:	9b02      	ldr	r3, [sp, #8]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	b01c      	add	sp, #112	; 0x70
 800cdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	4770      	bx	lr
 800cdc0:	20000034 	.word	0x20000034
 800cdc4:	ffff0208 	.word	0xffff0208

0800cdc8 <__malloc_lock>:
 800cdc8:	4801      	ldr	r0, [pc, #4]	; (800cdd0 <__malloc_lock+0x8>)
 800cdca:	f000 baf9 	b.w	800d3c0 <__retarget_lock_acquire_recursive>
 800cdce:	bf00      	nop
 800cdd0:	20013e00 	.word	0x20013e00

0800cdd4 <__malloc_unlock>:
 800cdd4:	4801      	ldr	r0, [pc, #4]	; (800cddc <__malloc_unlock+0x8>)
 800cdd6:	f000 baf4 	b.w	800d3c2 <__retarget_lock_release_recursive>
 800cdda:	bf00      	nop
 800cddc:	20013e00 	.word	0x20013e00

0800cde0 <__ssputs_r>:
 800cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	688e      	ldr	r6, [r1, #8]
 800cde6:	429e      	cmp	r6, r3
 800cde8:	4682      	mov	sl, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	4690      	mov	r8, r2
 800cdee:	461f      	mov	r7, r3
 800cdf0:	d838      	bhi.n	800ce64 <__ssputs_r+0x84>
 800cdf2:	898a      	ldrh	r2, [r1, #12]
 800cdf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdf8:	d032      	beq.n	800ce60 <__ssputs_r+0x80>
 800cdfa:	6825      	ldr	r5, [r4, #0]
 800cdfc:	6909      	ldr	r1, [r1, #16]
 800cdfe:	eba5 0901 	sub.w	r9, r5, r1
 800ce02:	6965      	ldr	r5, [r4, #20]
 800ce04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	444b      	add	r3, r9
 800ce10:	106d      	asrs	r5, r5, #1
 800ce12:	429d      	cmp	r5, r3
 800ce14:	bf38      	it	cc
 800ce16:	461d      	movcc	r5, r3
 800ce18:	0553      	lsls	r3, r2, #21
 800ce1a:	d531      	bpl.n	800ce80 <__ssputs_r+0xa0>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	f7ff ff49 	bl	800ccb4 <_malloc_r>
 800ce22:	4606      	mov	r6, r0
 800ce24:	b950      	cbnz	r0, 800ce3c <__ssputs_r+0x5c>
 800ce26:	230c      	movs	r3, #12
 800ce28:	f8ca 3000 	str.w	r3, [sl]
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce32:	81a3      	strh	r3, [r4, #12]
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295
 800ce38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce3c:	6921      	ldr	r1, [r4, #16]
 800ce3e:	464a      	mov	r2, r9
 800ce40:	f7ff fed2 	bl	800cbe8 <memcpy>
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4e:	81a3      	strh	r3, [r4, #12]
 800ce50:	6126      	str	r6, [r4, #16]
 800ce52:	6165      	str	r5, [r4, #20]
 800ce54:	444e      	add	r6, r9
 800ce56:	eba5 0509 	sub.w	r5, r5, r9
 800ce5a:	6026      	str	r6, [r4, #0]
 800ce5c:	60a5      	str	r5, [r4, #8]
 800ce5e:	463e      	mov	r6, r7
 800ce60:	42be      	cmp	r6, r7
 800ce62:	d900      	bls.n	800ce66 <__ssputs_r+0x86>
 800ce64:	463e      	mov	r6, r7
 800ce66:	4632      	mov	r2, r6
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	4641      	mov	r1, r8
 800ce6c:	f000 faaa 	bl	800d3c4 <memmove>
 800ce70:	68a3      	ldr	r3, [r4, #8]
 800ce72:	6822      	ldr	r2, [r4, #0]
 800ce74:	1b9b      	subs	r3, r3, r6
 800ce76:	4432      	add	r2, r6
 800ce78:	60a3      	str	r3, [r4, #8]
 800ce7a:	6022      	str	r2, [r4, #0]
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e7db      	b.n	800ce38 <__ssputs_r+0x58>
 800ce80:	462a      	mov	r2, r5
 800ce82:	f000 fab9 	bl	800d3f8 <_realloc_r>
 800ce86:	4606      	mov	r6, r0
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d1e1      	bne.n	800ce50 <__ssputs_r+0x70>
 800ce8c:	6921      	ldr	r1, [r4, #16]
 800ce8e:	4650      	mov	r0, sl
 800ce90:	f7ff fec0 	bl	800cc14 <_free_r>
 800ce94:	e7c7      	b.n	800ce26 <__ssputs_r+0x46>
	...

0800ce98 <_svfiprintf_r>:
 800ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	4698      	mov	r8, r3
 800ce9e:	898b      	ldrh	r3, [r1, #12]
 800cea0:	061b      	lsls	r3, r3, #24
 800cea2:	b09d      	sub	sp, #116	; 0x74
 800cea4:	4607      	mov	r7, r0
 800cea6:	460d      	mov	r5, r1
 800cea8:	4614      	mov	r4, r2
 800ceaa:	d50e      	bpl.n	800ceca <_svfiprintf_r+0x32>
 800ceac:	690b      	ldr	r3, [r1, #16]
 800ceae:	b963      	cbnz	r3, 800ceca <_svfiprintf_r+0x32>
 800ceb0:	2140      	movs	r1, #64	; 0x40
 800ceb2:	f7ff feff 	bl	800ccb4 <_malloc_r>
 800ceb6:	6028      	str	r0, [r5, #0]
 800ceb8:	6128      	str	r0, [r5, #16]
 800ceba:	b920      	cbnz	r0, 800cec6 <_svfiprintf_r+0x2e>
 800cebc:	230c      	movs	r3, #12
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295
 800cec4:	e0d1      	b.n	800d06a <_svfiprintf_r+0x1d2>
 800cec6:	2340      	movs	r3, #64	; 0x40
 800cec8:	616b      	str	r3, [r5, #20]
 800ceca:	2300      	movs	r3, #0
 800cecc:	9309      	str	r3, [sp, #36]	; 0x24
 800cece:	2320      	movs	r3, #32
 800ced0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ced4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ced8:	2330      	movs	r3, #48	; 0x30
 800ceda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d084 <_svfiprintf_r+0x1ec>
 800cede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cee2:	f04f 0901 	mov.w	r9, #1
 800cee6:	4623      	mov	r3, r4
 800cee8:	469a      	mov	sl, r3
 800ceea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceee:	b10a      	cbz	r2, 800cef4 <_svfiprintf_r+0x5c>
 800cef0:	2a25      	cmp	r2, #37	; 0x25
 800cef2:	d1f9      	bne.n	800cee8 <_svfiprintf_r+0x50>
 800cef4:	ebba 0b04 	subs.w	fp, sl, r4
 800cef8:	d00b      	beq.n	800cf12 <_svfiprintf_r+0x7a>
 800cefa:	465b      	mov	r3, fp
 800cefc:	4622      	mov	r2, r4
 800cefe:	4629      	mov	r1, r5
 800cf00:	4638      	mov	r0, r7
 800cf02:	f7ff ff6d 	bl	800cde0 <__ssputs_r>
 800cf06:	3001      	adds	r0, #1
 800cf08:	f000 80aa 	beq.w	800d060 <_svfiprintf_r+0x1c8>
 800cf0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf0e:	445a      	add	r2, fp
 800cf10:	9209      	str	r2, [sp, #36]	; 0x24
 800cf12:	f89a 3000 	ldrb.w	r3, [sl]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 80a2 	beq.w	800d060 <_svfiprintf_r+0x1c8>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf26:	f10a 0a01 	add.w	sl, sl, #1
 800cf2a:	9304      	str	r3, [sp, #16]
 800cf2c:	9307      	str	r3, [sp, #28]
 800cf2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf32:	931a      	str	r3, [sp, #104]	; 0x68
 800cf34:	4654      	mov	r4, sl
 800cf36:	2205      	movs	r2, #5
 800cf38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf3c:	4851      	ldr	r0, [pc, #324]	; (800d084 <_svfiprintf_r+0x1ec>)
 800cf3e:	f7f3 f99f 	bl	8000280 <memchr>
 800cf42:	9a04      	ldr	r2, [sp, #16]
 800cf44:	b9d8      	cbnz	r0, 800cf7e <_svfiprintf_r+0xe6>
 800cf46:	06d0      	lsls	r0, r2, #27
 800cf48:	bf44      	itt	mi
 800cf4a:	2320      	movmi	r3, #32
 800cf4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf50:	0711      	lsls	r1, r2, #28
 800cf52:	bf44      	itt	mi
 800cf54:	232b      	movmi	r3, #43	; 0x2b
 800cf56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf60:	d015      	beq.n	800cf8e <_svfiprintf_r+0xf6>
 800cf62:	9a07      	ldr	r2, [sp, #28]
 800cf64:	4654      	mov	r4, sl
 800cf66:	2000      	movs	r0, #0
 800cf68:	f04f 0c0a 	mov.w	ip, #10
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf72:	3b30      	subs	r3, #48	; 0x30
 800cf74:	2b09      	cmp	r3, #9
 800cf76:	d94e      	bls.n	800d016 <_svfiprintf_r+0x17e>
 800cf78:	b1b0      	cbz	r0, 800cfa8 <_svfiprintf_r+0x110>
 800cf7a:	9207      	str	r2, [sp, #28]
 800cf7c:	e014      	b.n	800cfa8 <_svfiprintf_r+0x110>
 800cf7e:	eba0 0308 	sub.w	r3, r0, r8
 800cf82:	fa09 f303 	lsl.w	r3, r9, r3
 800cf86:	4313      	orrs	r3, r2
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	46a2      	mov	sl, r4
 800cf8c:	e7d2      	b.n	800cf34 <_svfiprintf_r+0x9c>
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	1d19      	adds	r1, r3, #4
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	9103      	str	r1, [sp, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	bfbb      	ittet	lt
 800cf9a:	425b      	neglt	r3, r3
 800cf9c:	f042 0202 	orrlt.w	r2, r2, #2
 800cfa0:	9307      	strge	r3, [sp, #28]
 800cfa2:	9307      	strlt	r3, [sp, #28]
 800cfa4:	bfb8      	it	lt
 800cfa6:	9204      	strlt	r2, [sp, #16]
 800cfa8:	7823      	ldrb	r3, [r4, #0]
 800cfaa:	2b2e      	cmp	r3, #46	; 0x2e
 800cfac:	d10c      	bne.n	800cfc8 <_svfiprintf_r+0x130>
 800cfae:	7863      	ldrb	r3, [r4, #1]
 800cfb0:	2b2a      	cmp	r3, #42	; 0x2a
 800cfb2:	d135      	bne.n	800d020 <_svfiprintf_r+0x188>
 800cfb4:	9b03      	ldr	r3, [sp, #12]
 800cfb6:	1d1a      	adds	r2, r3, #4
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	9203      	str	r2, [sp, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	bfb8      	it	lt
 800cfc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfc4:	3402      	adds	r4, #2
 800cfc6:	9305      	str	r3, [sp, #20]
 800cfc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d094 <_svfiprintf_r+0x1fc>
 800cfcc:	7821      	ldrb	r1, [r4, #0]
 800cfce:	2203      	movs	r2, #3
 800cfd0:	4650      	mov	r0, sl
 800cfd2:	f7f3 f955 	bl	8000280 <memchr>
 800cfd6:	b140      	cbz	r0, 800cfea <_svfiprintf_r+0x152>
 800cfd8:	2340      	movs	r3, #64	; 0x40
 800cfda:	eba0 000a 	sub.w	r0, r0, sl
 800cfde:	fa03 f000 	lsl.w	r0, r3, r0
 800cfe2:	9b04      	ldr	r3, [sp, #16]
 800cfe4:	4303      	orrs	r3, r0
 800cfe6:	3401      	adds	r4, #1
 800cfe8:	9304      	str	r3, [sp, #16]
 800cfea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfee:	4826      	ldr	r0, [pc, #152]	; (800d088 <_svfiprintf_r+0x1f0>)
 800cff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cff4:	2206      	movs	r2, #6
 800cff6:	f7f3 f943 	bl	8000280 <memchr>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d038      	beq.n	800d070 <_svfiprintf_r+0x1d8>
 800cffe:	4b23      	ldr	r3, [pc, #140]	; (800d08c <_svfiprintf_r+0x1f4>)
 800d000:	bb1b      	cbnz	r3, 800d04a <_svfiprintf_r+0x1b2>
 800d002:	9b03      	ldr	r3, [sp, #12]
 800d004:	3307      	adds	r3, #7
 800d006:	f023 0307 	bic.w	r3, r3, #7
 800d00a:	3308      	adds	r3, #8
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d010:	4433      	add	r3, r6
 800d012:	9309      	str	r3, [sp, #36]	; 0x24
 800d014:	e767      	b.n	800cee6 <_svfiprintf_r+0x4e>
 800d016:	fb0c 3202 	mla	r2, ip, r2, r3
 800d01a:	460c      	mov	r4, r1
 800d01c:	2001      	movs	r0, #1
 800d01e:	e7a5      	b.n	800cf6c <_svfiprintf_r+0xd4>
 800d020:	2300      	movs	r3, #0
 800d022:	3401      	adds	r4, #1
 800d024:	9305      	str	r3, [sp, #20]
 800d026:	4619      	mov	r1, r3
 800d028:	f04f 0c0a 	mov.w	ip, #10
 800d02c:	4620      	mov	r0, r4
 800d02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d032:	3a30      	subs	r2, #48	; 0x30
 800d034:	2a09      	cmp	r2, #9
 800d036:	d903      	bls.n	800d040 <_svfiprintf_r+0x1a8>
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d0c5      	beq.n	800cfc8 <_svfiprintf_r+0x130>
 800d03c:	9105      	str	r1, [sp, #20]
 800d03e:	e7c3      	b.n	800cfc8 <_svfiprintf_r+0x130>
 800d040:	fb0c 2101 	mla	r1, ip, r1, r2
 800d044:	4604      	mov	r4, r0
 800d046:	2301      	movs	r3, #1
 800d048:	e7f0      	b.n	800d02c <_svfiprintf_r+0x194>
 800d04a:	ab03      	add	r3, sp, #12
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	462a      	mov	r2, r5
 800d050:	4b0f      	ldr	r3, [pc, #60]	; (800d090 <_svfiprintf_r+0x1f8>)
 800d052:	a904      	add	r1, sp, #16
 800d054:	4638      	mov	r0, r7
 800d056:	f3af 8000 	nop.w
 800d05a:	1c42      	adds	r2, r0, #1
 800d05c:	4606      	mov	r6, r0
 800d05e:	d1d6      	bne.n	800d00e <_svfiprintf_r+0x176>
 800d060:	89ab      	ldrh	r3, [r5, #12]
 800d062:	065b      	lsls	r3, r3, #25
 800d064:	f53f af2c 	bmi.w	800cec0 <_svfiprintf_r+0x28>
 800d068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06a:	b01d      	add	sp, #116	; 0x74
 800d06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d070:	ab03      	add	r3, sp, #12
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	462a      	mov	r2, r5
 800d076:	4b06      	ldr	r3, [pc, #24]	; (800d090 <_svfiprintf_r+0x1f8>)
 800d078:	a904      	add	r1, sp, #16
 800d07a:	4638      	mov	r0, r7
 800d07c:	f000 f87a 	bl	800d174 <_printf_i>
 800d080:	e7eb      	b.n	800d05a <_svfiprintf_r+0x1c2>
 800d082:	bf00      	nop
 800d084:	0800d5ea 	.word	0x0800d5ea
 800d088:	0800d5f4 	.word	0x0800d5f4
 800d08c:	00000000 	.word	0x00000000
 800d090:	0800cde1 	.word	0x0800cde1
 800d094:	0800d5f0 	.word	0x0800d5f0

0800d098 <_printf_common>:
 800d098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d09c:	4616      	mov	r6, r2
 800d09e:	4699      	mov	r9, r3
 800d0a0:	688a      	ldr	r2, [r1, #8]
 800d0a2:	690b      	ldr	r3, [r1, #16]
 800d0a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	bfb8      	it	lt
 800d0ac:	4613      	movlt	r3, r2
 800d0ae:	6033      	str	r3, [r6, #0]
 800d0b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0b4:	4607      	mov	r7, r0
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	b10a      	cbz	r2, 800d0be <_printf_common+0x26>
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	6033      	str	r3, [r6, #0]
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	0699      	lsls	r1, r3, #26
 800d0c2:	bf42      	ittt	mi
 800d0c4:	6833      	ldrmi	r3, [r6, #0]
 800d0c6:	3302      	addmi	r3, #2
 800d0c8:	6033      	strmi	r3, [r6, #0]
 800d0ca:	6825      	ldr	r5, [r4, #0]
 800d0cc:	f015 0506 	ands.w	r5, r5, #6
 800d0d0:	d106      	bne.n	800d0e0 <_printf_common+0x48>
 800d0d2:	f104 0a19 	add.w	sl, r4, #25
 800d0d6:	68e3      	ldr	r3, [r4, #12]
 800d0d8:	6832      	ldr	r2, [r6, #0]
 800d0da:	1a9b      	subs	r3, r3, r2
 800d0dc:	42ab      	cmp	r3, r5
 800d0de:	dc26      	bgt.n	800d12e <_printf_common+0x96>
 800d0e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d0e4:	1e13      	subs	r3, r2, #0
 800d0e6:	6822      	ldr	r2, [r4, #0]
 800d0e8:	bf18      	it	ne
 800d0ea:	2301      	movne	r3, #1
 800d0ec:	0692      	lsls	r2, r2, #26
 800d0ee:	d42b      	bmi.n	800d148 <_printf_common+0xb0>
 800d0f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	47c0      	blx	r8
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d01e      	beq.n	800d13c <_printf_common+0xa4>
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	68e5      	ldr	r5, [r4, #12]
 800d102:	6832      	ldr	r2, [r6, #0]
 800d104:	f003 0306 	and.w	r3, r3, #6
 800d108:	2b04      	cmp	r3, #4
 800d10a:	bf08      	it	eq
 800d10c:	1aad      	subeq	r5, r5, r2
 800d10e:	68a3      	ldr	r3, [r4, #8]
 800d110:	6922      	ldr	r2, [r4, #16]
 800d112:	bf0c      	ite	eq
 800d114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d118:	2500      	movne	r5, #0
 800d11a:	4293      	cmp	r3, r2
 800d11c:	bfc4      	itt	gt
 800d11e:	1a9b      	subgt	r3, r3, r2
 800d120:	18ed      	addgt	r5, r5, r3
 800d122:	2600      	movs	r6, #0
 800d124:	341a      	adds	r4, #26
 800d126:	42b5      	cmp	r5, r6
 800d128:	d11a      	bne.n	800d160 <_printf_common+0xc8>
 800d12a:	2000      	movs	r0, #0
 800d12c:	e008      	b.n	800d140 <_printf_common+0xa8>
 800d12e:	2301      	movs	r3, #1
 800d130:	4652      	mov	r2, sl
 800d132:	4649      	mov	r1, r9
 800d134:	4638      	mov	r0, r7
 800d136:	47c0      	blx	r8
 800d138:	3001      	adds	r0, #1
 800d13a:	d103      	bne.n	800d144 <_printf_common+0xac>
 800d13c:	f04f 30ff 	mov.w	r0, #4294967295
 800d140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d144:	3501      	adds	r5, #1
 800d146:	e7c6      	b.n	800d0d6 <_printf_common+0x3e>
 800d148:	18e1      	adds	r1, r4, r3
 800d14a:	1c5a      	adds	r2, r3, #1
 800d14c:	2030      	movs	r0, #48	; 0x30
 800d14e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d152:	4422      	add	r2, r4
 800d154:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d158:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d15c:	3302      	adds	r3, #2
 800d15e:	e7c7      	b.n	800d0f0 <_printf_common+0x58>
 800d160:	2301      	movs	r3, #1
 800d162:	4622      	mov	r2, r4
 800d164:	4649      	mov	r1, r9
 800d166:	4638      	mov	r0, r7
 800d168:	47c0      	blx	r8
 800d16a:	3001      	adds	r0, #1
 800d16c:	d0e6      	beq.n	800d13c <_printf_common+0xa4>
 800d16e:	3601      	adds	r6, #1
 800d170:	e7d9      	b.n	800d126 <_printf_common+0x8e>
	...

0800d174 <_printf_i>:
 800d174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d178:	460c      	mov	r4, r1
 800d17a:	4691      	mov	r9, r2
 800d17c:	7e27      	ldrb	r7, [r4, #24]
 800d17e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d180:	2f78      	cmp	r7, #120	; 0x78
 800d182:	4680      	mov	r8, r0
 800d184:	469a      	mov	sl, r3
 800d186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d18a:	d807      	bhi.n	800d19c <_printf_i+0x28>
 800d18c:	2f62      	cmp	r7, #98	; 0x62
 800d18e:	d80a      	bhi.n	800d1a6 <_printf_i+0x32>
 800d190:	2f00      	cmp	r7, #0
 800d192:	f000 80d8 	beq.w	800d346 <_printf_i+0x1d2>
 800d196:	2f58      	cmp	r7, #88	; 0x58
 800d198:	f000 80a3 	beq.w	800d2e2 <_printf_i+0x16e>
 800d19c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1a4:	e03a      	b.n	800d21c <_printf_i+0xa8>
 800d1a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1aa:	2b15      	cmp	r3, #21
 800d1ac:	d8f6      	bhi.n	800d19c <_printf_i+0x28>
 800d1ae:	a001      	add	r0, pc, #4	; (adr r0, 800d1b4 <_printf_i+0x40>)
 800d1b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1b4:	0800d20d 	.word	0x0800d20d
 800d1b8:	0800d221 	.word	0x0800d221
 800d1bc:	0800d19d 	.word	0x0800d19d
 800d1c0:	0800d19d 	.word	0x0800d19d
 800d1c4:	0800d19d 	.word	0x0800d19d
 800d1c8:	0800d19d 	.word	0x0800d19d
 800d1cc:	0800d221 	.word	0x0800d221
 800d1d0:	0800d19d 	.word	0x0800d19d
 800d1d4:	0800d19d 	.word	0x0800d19d
 800d1d8:	0800d19d 	.word	0x0800d19d
 800d1dc:	0800d19d 	.word	0x0800d19d
 800d1e0:	0800d32d 	.word	0x0800d32d
 800d1e4:	0800d251 	.word	0x0800d251
 800d1e8:	0800d30f 	.word	0x0800d30f
 800d1ec:	0800d19d 	.word	0x0800d19d
 800d1f0:	0800d19d 	.word	0x0800d19d
 800d1f4:	0800d34f 	.word	0x0800d34f
 800d1f8:	0800d19d 	.word	0x0800d19d
 800d1fc:	0800d251 	.word	0x0800d251
 800d200:	0800d19d 	.word	0x0800d19d
 800d204:	0800d19d 	.word	0x0800d19d
 800d208:	0800d317 	.word	0x0800d317
 800d20c:	680b      	ldr	r3, [r1, #0]
 800d20e:	1d1a      	adds	r2, r3, #4
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	600a      	str	r2, [r1, #0]
 800d214:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d218:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d21c:	2301      	movs	r3, #1
 800d21e:	e0a3      	b.n	800d368 <_printf_i+0x1f4>
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	6808      	ldr	r0, [r1, #0]
 800d224:	062e      	lsls	r6, r5, #24
 800d226:	f100 0304 	add.w	r3, r0, #4
 800d22a:	d50a      	bpl.n	800d242 <_printf_i+0xce>
 800d22c:	6805      	ldr	r5, [r0, #0]
 800d22e:	600b      	str	r3, [r1, #0]
 800d230:	2d00      	cmp	r5, #0
 800d232:	da03      	bge.n	800d23c <_printf_i+0xc8>
 800d234:	232d      	movs	r3, #45	; 0x2d
 800d236:	426d      	negs	r5, r5
 800d238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d23c:	485e      	ldr	r0, [pc, #376]	; (800d3b8 <_printf_i+0x244>)
 800d23e:	230a      	movs	r3, #10
 800d240:	e019      	b.n	800d276 <_printf_i+0x102>
 800d242:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d246:	6805      	ldr	r5, [r0, #0]
 800d248:	600b      	str	r3, [r1, #0]
 800d24a:	bf18      	it	ne
 800d24c:	b22d      	sxthne	r5, r5
 800d24e:	e7ef      	b.n	800d230 <_printf_i+0xbc>
 800d250:	680b      	ldr	r3, [r1, #0]
 800d252:	6825      	ldr	r5, [r4, #0]
 800d254:	1d18      	adds	r0, r3, #4
 800d256:	6008      	str	r0, [r1, #0]
 800d258:	0628      	lsls	r0, r5, #24
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0xec>
 800d25c:	681d      	ldr	r5, [r3, #0]
 800d25e:	e002      	b.n	800d266 <_printf_i+0xf2>
 800d260:	0669      	lsls	r1, r5, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0xe8>
 800d264:	881d      	ldrh	r5, [r3, #0]
 800d266:	4854      	ldr	r0, [pc, #336]	; (800d3b8 <_printf_i+0x244>)
 800d268:	2f6f      	cmp	r7, #111	; 0x6f
 800d26a:	bf0c      	ite	eq
 800d26c:	2308      	moveq	r3, #8
 800d26e:	230a      	movne	r3, #10
 800d270:	2100      	movs	r1, #0
 800d272:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d276:	6866      	ldr	r6, [r4, #4]
 800d278:	60a6      	str	r6, [r4, #8]
 800d27a:	2e00      	cmp	r6, #0
 800d27c:	bfa2      	ittt	ge
 800d27e:	6821      	ldrge	r1, [r4, #0]
 800d280:	f021 0104 	bicge.w	r1, r1, #4
 800d284:	6021      	strge	r1, [r4, #0]
 800d286:	b90d      	cbnz	r5, 800d28c <_printf_i+0x118>
 800d288:	2e00      	cmp	r6, #0
 800d28a:	d04d      	beq.n	800d328 <_printf_i+0x1b4>
 800d28c:	4616      	mov	r6, r2
 800d28e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d292:	fb03 5711 	mls	r7, r3, r1, r5
 800d296:	5dc7      	ldrb	r7, [r0, r7]
 800d298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d29c:	462f      	mov	r7, r5
 800d29e:	42bb      	cmp	r3, r7
 800d2a0:	460d      	mov	r5, r1
 800d2a2:	d9f4      	bls.n	800d28e <_printf_i+0x11a>
 800d2a4:	2b08      	cmp	r3, #8
 800d2a6:	d10b      	bne.n	800d2c0 <_printf_i+0x14c>
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	07df      	lsls	r7, r3, #31
 800d2ac:	d508      	bpl.n	800d2c0 <_printf_i+0x14c>
 800d2ae:	6923      	ldr	r3, [r4, #16]
 800d2b0:	6861      	ldr	r1, [r4, #4]
 800d2b2:	4299      	cmp	r1, r3
 800d2b4:	bfde      	ittt	le
 800d2b6:	2330      	movle	r3, #48	; 0x30
 800d2b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2c0:	1b92      	subs	r2, r2, r6
 800d2c2:	6122      	str	r2, [r4, #16]
 800d2c4:	f8cd a000 	str.w	sl, [sp]
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	aa03      	add	r2, sp, #12
 800d2cc:	4621      	mov	r1, r4
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	f7ff fee2 	bl	800d098 <_printf_common>
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d14c      	bne.n	800d372 <_printf_i+0x1fe>
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2dc:	b004      	add	sp, #16
 800d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e2:	4835      	ldr	r0, [pc, #212]	; (800d3b8 <_printf_i+0x244>)
 800d2e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	680e      	ldr	r6, [r1, #0]
 800d2ec:	061f      	lsls	r7, r3, #24
 800d2ee:	f856 5b04 	ldr.w	r5, [r6], #4
 800d2f2:	600e      	str	r6, [r1, #0]
 800d2f4:	d514      	bpl.n	800d320 <_printf_i+0x1ac>
 800d2f6:	07d9      	lsls	r1, r3, #31
 800d2f8:	bf44      	itt	mi
 800d2fa:	f043 0320 	orrmi.w	r3, r3, #32
 800d2fe:	6023      	strmi	r3, [r4, #0]
 800d300:	b91d      	cbnz	r5, 800d30a <_printf_i+0x196>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	f023 0320 	bic.w	r3, r3, #32
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	2310      	movs	r3, #16
 800d30c:	e7b0      	b.n	800d270 <_printf_i+0xfc>
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	f043 0320 	orr.w	r3, r3, #32
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	2378      	movs	r3, #120	; 0x78
 800d318:	4828      	ldr	r0, [pc, #160]	; (800d3bc <_printf_i+0x248>)
 800d31a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d31e:	e7e3      	b.n	800d2e8 <_printf_i+0x174>
 800d320:	065e      	lsls	r6, r3, #25
 800d322:	bf48      	it	mi
 800d324:	b2ad      	uxthmi	r5, r5
 800d326:	e7e6      	b.n	800d2f6 <_printf_i+0x182>
 800d328:	4616      	mov	r6, r2
 800d32a:	e7bb      	b.n	800d2a4 <_printf_i+0x130>
 800d32c:	680b      	ldr	r3, [r1, #0]
 800d32e:	6826      	ldr	r6, [r4, #0]
 800d330:	6960      	ldr	r0, [r4, #20]
 800d332:	1d1d      	adds	r5, r3, #4
 800d334:	600d      	str	r5, [r1, #0]
 800d336:	0635      	lsls	r5, r6, #24
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	d501      	bpl.n	800d340 <_printf_i+0x1cc>
 800d33c:	6018      	str	r0, [r3, #0]
 800d33e:	e002      	b.n	800d346 <_printf_i+0x1d2>
 800d340:	0671      	lsls	r1, r6, #25
 800d342:	d5fb      	bpl.n	800d33c <_printf_i+0x1c8>
 800d344:	8018      	strh	r0, [r3, #0]
 800d346:	2300      	movs	r3, #0
 800d348:	6123      	str	r3, [r4, #16]
 800d34a:	4616      	mov	r6, r2
 800d34c:	e7ba      	b.n	800d2c4 <_printf_i+0x150>
 800d34e:	680b      	ldr	r3, [r1, #0]
 800d350:	1d1a      	adds	r2, r3, #4
 800d352:	600a      	str	r2, [r1, #0]
 800d354:	681e      	ldr	r6, [r3, #0]
 800d356:	6862      	ldr	r2, [r4, #4]
 800d358:	2100      	movs	r1, #0
 800d35a:	4630      	mov	r0, r6
 800d35c:	f7f2 ff90 	bl	8000280 <memchr>
 800d360:	b108      	cbz	r0, 800d366 <_printf_i+0x1f2>
 800d362:	1b80      	subs	r0, r0, r6
 800d364:	6060      	str	r0, [r4, #4]
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	2300      	movs	r3, #0
 800d36c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d370:	e7a8      	b.n	800d2c4 <_printf_i+0x150>
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	4632      	mov	r2, r6
 800d376:	4649      	mov	r1, r9
 800d378:	4640      	mov	r0, r8
 800d37a:	47d0      	blx	sl
 800d37c:	3001      	adds	r0, #1
 800d37e:	d0ab      	beq.n	800d2d8 <_printf_i+0x164>
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	079b      	lsls	r3, r3, #30
 800d384:	d413      	bmi.n	800d3ae <_printf_i+0x23a>
 800d386:	68e0      	ldr	r0, [r4, #12]
 800d388:	9b03      	ldr	r3, [sp, #12]
 800d38a:	4298      	cmp	r0, r3
 800d38c:	bfb8      	it	lt
 800d38e:	4618      	movlt	r0, r3
 800d390:	e7a4      	b.n	800d2dc <_printf_i+0x168>
 800d392:	2301      	movs	r3, #1
 800d394:	4632      	mov	r2, r6
 800d396:	4649      	mov	r1, r9
 800d398:	4640      	mov	r0, r8
 800d39a:	47d0      	blx	sl
 800d39c:	3001      	adds	r0, #1
 800d39e:	d09b      	beq.n	800d2d8 <_printf_i+0x164>
 800d3a0:	3501      	adds	r5, #1
 800d3a2:	68e3      	ldr	r3, [r4, #12]
 800d3a4:	9903      	ldr	r1, [sp, #12]
 800d3a6:	1a5b      	subs	r3, r3, r1
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	dcf2      	bgt.n	800d392 <_printf_i+0x21e>
 800d3ac:	e7eb      	b.n	800d386 <_printf_i+0x212>
 800d3ae:	2500      	movs	r5, #0
 800d3b0:	f104 0619 	add.w	r6, r4, #25
 800d3b4:	e7f5      	b.n	800d3a2 <_printf_i+0x22e>
 800d3b6:	bf00      	nop
 800d3b8:	0800d5fb 	.word	0x0800d5fb
 800d3bc:	0800d60c 	.word	0x0800d60c

0800d3c0 <__retarget_lock_acquire_recursive>:
 800d3c0:	4770      	bx	lr

0800d3c2 <__retarget_lock_release_recursive>:
 800d3c2:	4770      	bx	lr

0800d3c4 <memmove>:
 800d3c4:	4288      	cmp	r0, r1
 800d3c6:	b510      	push	{r4, lr}
 800d3c8:	eb01 0402 	add.w	r4, r1, r2
 800d3cc:	d902      	bls.n	800d3d4 <memmove+0x10>
 800d3ce:	4284      	cmp	r4, r0
 800d3d0:	4623      	mov	r3, r4
 800d3d2:	d807      	bhi.n	800d3e4 <memmove+0x20>
 800d3d4:	1e43      	subs	r3, r0, #1
 800d3d6:	42a1      	cmp	r1, r4
 800d3d8:	d008      	beq.n	800d3ec <memmove+0x28>
 800d3da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d3e2:	e7f8      	b.n	800d3d6 <memmove+0x12>
 800d3e4:	4402      	add	r2, r0
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	428a      	cmp	r2, r1
 800d3ea:	d100      	bne.n	800d3ee <memmove+0x2a>
 800d3ec:	bd10      	pop	{r4, pc}
 800d3ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3f6:	e7f7      	b.n	800d3e8 <memmove+0x24>

0800d3f8 <_realloc_r>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	4607      	mov	r7, r0
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	460e      	mov	r6, r1
 800d400:	b921      	cbnz	r1, 800d40c <_realloc_r+0x14>
 800d402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d406:	4611      	mov	r1, r2
 800d408:	f7ff bc54 	b.w	800ccb4 <_malloc_r>
 800d40c:	b922      	cbnz	r2, 800d418 <_realloc_r+0x20>
 800d40e:	f7ff fc01 	bl	800cc14 <_free_r>
 800d412:	4625      	mov	r5, r4
 800d414:	4628      	mov	r0, r5
 800d416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d418:	f000 f814 	bl	800d444 <_malloc_usable_size_r>
 800d41c:	42a0      	cmp	r0, r4
 800d41e:	d20f      	bcs.n	800d440 <_realloc_r+0x48>
 800d420:	4621      	mov	r1, r4
 800d422:	4638      	mov	r0, r7
 800d424:	f7ff fc46 	bl	800ccb4 <_malloc_r>
 800d428:	4605      	mov	r5, r0
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d0f2      	beq.n	800d414 <_realloc_r+0x1c>
 800d42e:	4631      	mov	r1, r6
 800d430:	4622      	mov	r2, r4
 800d432:	f7ff fbd9 	bl	800cbe8 <memcpy>
 800d436:	4631      	mov	r1, r6
 800d438:	4638      	mov	r0, r7
 800d43a:	f7ff fbeb 	bl	800cc14 <_free_r>
 800d43e:	e7e9      	b.n	800d414 <_realloc_r+0x1c>
 800d440:	4635      	mov	r5, r6
 800d442:	e7e7      	b.n	800d414 <_realloc_r+0x1c>

0800d444 <_malloc_usable_size_r>:
 800d444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d448:	1f18      	subs	r0, r3, #4
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	bfbc      	itt	lt
 800d44e:	580b      	ldrlt	r3, [r1, r0]
 800d450:	18c0      	addlt	r0, r0, r3
 800d452:	4770      	bx	lr

0800d454 <_init>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	bf00      	nop
 800d458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45a:	bc08      	pop	{r3}
 800d45c:	469e      	mov	lr, r3
 800d45e:	4770      	bx	lr

0800d460 <_fini>:
 800d460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d462:	bf00      	nop
 800d464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d466:	bc08      	pop	{r3}
 800d468:	469e      	mov	lr, r3
 800d46a:	4770      	bx	lr
