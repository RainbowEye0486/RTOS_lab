
002LEDTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f28  08007f28  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f28  08007f28  00017f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f30  08007f30  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f30  08007f30  00017f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f34  08007f34  00017f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000134d4  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013550  20013550  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f845  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc3  00000000  00000000  0003f8f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000435b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  00044c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ea6  00000000  00000000  000460f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001924c  00000000  00000000  0006af96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db83b  00000000  00000000  000841e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015fa1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000644c  00000000  00000000  0015fa70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dcc 	.word	0x08007dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007dcc 	.word	0x08007dcc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013498 	.word	0x20013498

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fcf5 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f855 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f8e7 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800056e:	f000 f8bb 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  xQueue = xQueueCreate(1, sizeof(int));
 8000572:	2200      	movs	r2, #0
 8000574:	2104      	movs	r1, #4
 8000576:	2001      	movs	r0, #1
 8000578:	f002 ff60 	bl	800343c <xQueueGenericCreate>
 800057c:	4603      	mov	r3, r0
 800057e:	4a1f      	ldr	r2, [pc, #124]	; (80005fc <main+0xa0>)
 8000580:	6013      	str	r3, [r2, #0]

  DWT_CTRL |= (1<<0);
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <main+0xa4>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <main+0xa4>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6013      	str	r3, [r2, #0]





  status = xTaskCreate(button_handler, "Task-button", 200, NULL, 2, &task1_handle);
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2302      	movs	r3, #2
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4919      	ldr	r1, [pc, #100]	; (8000604 <main+0xa8>)
 800059e:	481a      	ldr	r0, [pc, #104]	; (8000608 <main+0xac>)
 80005a0:	f003 fc3e 	bl	8003e20 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x66>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x64>
  status = xTaskCreate(led_handler, "Task-LED", 200, NULL, 2, &task2_handle);
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	; 0xc8
 80005ce:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0xb0>)
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <main+0xb4>)
 80005d2:	f003 fc25 	bl	8003e20 <xTaskCreate>
 80005d6:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00a      	beq.n	80005f4 <main+0x98>
        __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	60fb      	str	r3, [r7, #12]
    }
 80005f0:	bf00      	nop
 80005f2:	e7fe      	b.n	80005f2 <main+0x96>


  vTaskStartScheduler();
 80005f4:	f003 fdb0 	bl	8004158 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f8:	e7fe      	b.n	80005f8 <main+0x9c>
 80005fa:	bf00      	nop
 80005fc:	200133bc 	.word	0x200133bc
 8000600:	e0001000 	.word	0xe0001000
 8000604:	08007de4 	.word	0x08007de4
 8000608:	08000a95 	.word	0x08000a95
 800060c:	08007df0 	.word	0x08007df0
 8000610:	080009f5 	.word	0x080009f5

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f006 ff16 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fff7 	bl	800168c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 fa8e 	bl	8000bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa58 	bl	8001b7c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 fa77 	bl	8000bc4 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART2_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART2_UART_Init+0x4c>)
 8000720:	f001 ff08 	bl	8002534 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 fa4b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200133c8 	.word	0x200133c8
 8000738:	40004400 	.word	0x40004400

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4ba1      	ldr	r3, [pc, #644]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4aa0      	ldr	r2, [pc, #640]	; (80009dc <MX_GPIO_Init+0x2a0>)
 800075c:	f043 0310 	orr.w	r3, r3, #16
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b9e      	ldr	r3, [pc, #632]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b9a      	ldr	r3, [pc, #616]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a99      	ldr	r2, [pc, #612]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b97      	ldr	r3, [pc, #604]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b93      	ldr	r3, [pc, #588]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a92      	ldr	r2, [pc, #584]	; (80009dc <MX_GPIO_Init+0x2a0>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b90      	ldr	r3, [pc, #576]	; (80009dc <MX_GPIO_Init+0x2a0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a8b      	ldr	r2, [pc, #556]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b89      	ldr	r3, [pc, #548]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b85      	ldr	r3, [pc, #532]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a84      	ldr	r2, [pc, #528]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b82      	ldr	r3, [pc, #520]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b7e      	ldr	r3, [pc, #504]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a7d      	ldr	r2, [pc, #500]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b7b      	ldr	r3, [pc, #492]	; (80009dc <MX_GPIO_Init+0x2a0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2108      	movs	r1, #8
 80007fe:	4878      	ldr	r0, [pc, #480]	; (80009e0 <MX_GPIO_Init+0x2a4>)
 8000800:	f000 ff10 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2101      	movs	r1, #1
 8000808:	4876      	ldr	r0, [pc, #472]	; (80009e4 <MX_GPIO_Init+0x2a8>)
 800080a:	f000 ff0b 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080e:	2200      	movs	r2, #0
 8000810:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000814:	4874      	ldr	r0, [pc, #464]	; (80009e8 <MX_GPIO_Init+0x2ac>)
 8000816:	f000 ff05 	bl	8001624 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	486b      	ldr	r0, [pc, #428]	; (80009e0 <MX_GPIO_Init+0x2a4>)
 8000832:	f000 fd43 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000836:	2301      	movs	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4865      	ldr	r0, [pc, #404]	; (80009e4 <MX_GPIO_Init+0x2a8>)
 800084e:	f000 fd35 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000856:	2302      	movs	r3, #2
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000862:	2305      	movs	r3, #5
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	485d      	ldr	r0, [pc, #372]	; (80009e4 <MX_GPIO_Init+0x2a8>)
 800086e:	f000 fd25 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : blue_btn_Pin */
  GPIO_InitStruct.Pin = blue_btn_Pin;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blue_btn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4859      	ldr	r0, [pc, #356]	; (80009ec <MX_GPIO_Init+0x2b0>)
 8000886:	f000 fd19 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800088a:	2310      	movs	r3, #16
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800089a:	2306      	movs	r3, #6
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4851      	ldr	r0, [pc, #324]	; (80009ec <MX_GPIO_Init+0x2b0>)
 80008a6:	f000 fd09 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008aa:	23e0      	movs	r3, #224	; 0xe0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4849      	ldr	r0, [pc, #292]	; (80009ec <MX_GPIO_Init+0x2b0>)
 80008c6:	f000 fcf9 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008ca:	2304      	movs	r3, #4
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4844      	ldr	r0, [pc, #272]	; (80009f0 <MX_GPIO_Init+0x2b4>)
 80008de:	f000 fced 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	483c      	ldr	r0, [pc, #240]	; (80009f0 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fcdc 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000904:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000908:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4832      	ldr	r0, [pc, #200]	; (80009e8 <MX_GPIO_Init+0x2ac>)
 800091e:	f000 fccd 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000922:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000934:	2306      	movs	r3, #6
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4829      	ldr	r0, [pc, #164]	; (80009e4 <MX_GPIO_Init+0x2a8>)
 8000940:	f000 fcbc 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4824      	ldr	r0, [pc, #144]	; (80009ec <MX_GPIO_Init+0x2b0>)
 800095a:	f000 fcaf 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800095e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000970:	230a      	movs	r3, #10
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481c      	ldr	r0, [pc, #112]	; (80009ec <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fc9e 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4815      	ldr	r0, [pc, #84]	; (80009e8 <MX_GPIO_Init+0x2ac>)
 8000994:	f000 fc92 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000998:	f44f 7310 	mov.w	r3, #576	; 0x240
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099e:	2312      	movs	r3, #18
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009aa:	2304      	movs	r3, #4
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480e      	ldr	r0, [pc, #56]	; (80009f0 <MX_GPIO_Init+0x2b4>)
 80009b6:	f000 fc81 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_GPIO_Init+0x2a4>)
 80009d0:	f000 fc74 	bl	80012bc <HAL_GPIO_Init>

}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	; 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <led_handler>:

/* USER CODE BEGIN 4 */



void led_handler(void *parameters) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

	//char msg[100];
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	481f      	ldr	r0, [pc, #124]	; (8000a80 <led_handler+0x8c>)
 8000a04:	f000 fe0e 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <led_handler+0x8c>)
 8000a10:	f000 fe08 	bl	8001624 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a1a:	4819      	ldr	r0, [pc, #100]	; (8000a80 <led_handler+0x8c>)
 8000a1c:	f000 fe02 	bl	8001624 <HAL_GPIO_WritePin>

	tStart = xTaskGetTickCount();
 8000a20:	f003 fcaa 	bl	8004378 <xTaskGetTickCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <led_handler+0x90>)
 8000a28:	6013      	str	r3, [r2, #0]
	TickType_t wait_time = 2000;
 8000a2a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a2e:	60fb      	str	r3, [r7, #12]


	while(1) {
		tEnd = xTaskGetTickCount();
 8000a30:	f003 fca2 	bl	8004378 <xTaskGetTickCount>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <led_handler+0x94>)
 8000a38:	6013      	str	r3, [r2, #0]
		xQueueSend(xQueue, (void *)1, wait_time);
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <led_handler+0x98>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	2101      	movs	r1, #1
 8000a44:	f002 fd82 	bl	800354c <xQueueGenericSend>

		if (state == 1){
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <led_handler+0x9c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d10d      	bne.n	8000a6c <led_handler+0x78>
			wait_time = 2000;
 8000a50:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a54:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8000a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <led_handler+0x8c>)
 8000a5c:	f000 fdfb 	bl	8001656 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);
 8000a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <led_handler+0x8c>)
 8000a66:	f000 fdf6 	bl	8001656 <HAL_GPIO_TogglePin>
 8000a6a:	e7e1      	b.n	8000a30 <led_handler+0x3c>
			}
			*/
		}
		else {

			wait_time = 1000;
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	60fb      	str	r3, [r7, #12]

			HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_Pin);
 8000a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <led_handler+0x8c>)
 8000a78:	f000 fded 	bl	8001656 <HAL_GPIO_TogglePin>
		tEnd = xTaskGetTickCount();
 8000a7c:	e7d8      	b.n	8000a30 <led_handler+0x3c>
 8000a7e:	bf00      	nop
 8000a80:	40020c00 	.word	0x40020c00
 8000a84:	200133c0 	.word	0x200133c0
 8000a88:	200133c4 	.word	0x200133c4
 8000a8c:	200133bc 	.word	0x200133bc
 8000a90:	20000000 	.word	0x20000000

08000a94 <button_handler>:
			*/
		}
	}
}

void button_handler(void *parameters) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	//char msg[100];
	volatile int btn_state = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]


	while(1)
	{
		if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_SET && btn_state == 0){
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4838      	ldr	r0, [pc, #224]	; (8000b84 <button_handler+0xf0>)
 8000aa4:	f000 fda6 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d153      	bne.n	8000b56 <button_handler+0xc2>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d150      	bne.n	8000b56 <button_handler+0xc2>
			vTaskDelay(20 / portTICK_PERIOD_MS);
 8000ab4:	2014      	movs	r0, #20
 8000ab6:	f003 fb17 	bl	80040e8 <vTaskDelay>
			if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_SET){
 8000aba:	2101      	movs	r1, #1
 8000abc:	4831      	ldr	r0, [pc, #196]	; (8000b84 <button_handler+0xf0>)
 8000abe:	f000 fd99 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d15c      	bne.n	8000b82 <button_handler+0xee>
				state = !state;
 8000ac8:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <button_handler+0xf4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	bf0c      	ite	eq
 8000ad0:	2301      	moveq	r3, #1
 8000ad2:	2300      	movne	r3, #0
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <button_handler+0xf4>)
 8000ada:	601a      	str	r2, [r3, #0]
				btn_state = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
				tStart = tEnd;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <button_handler+0xf8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a2a      	ldr	r2, [pc, #168]	; (8000b90 <button_handler+0xfc>)
 8000ae6:	6013      	str	r3, [r2, #0]
				int *pvBuffer = NULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
				printf("[Button] : button pressed\n");
 8000aec:	4829      	ldr	r0, [pc, #164]	; (8000b94 <button_handler+0x100>)
 8000aee:	f006 fdd1 	bl	8007694 <puts>
				if (state) {
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <button_handler+0xf4>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d012      	beq.n	8000b20 <button_handler+0x8c>
					HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	4825      	ldr	r0, [pc, #148]	; (8000b98 <button_handler+0x104>)
 8000b02:	f000 fd8f 	bl	8001624 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4822      	ldr	r0, [pc, #136]	; (8000b98 <button_handler+0x104>)
 8000b0e:	f000 fd89 	bl	8001624 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b18:	481f      	ldr	r0, [pc, #124]	; (8000b98 <button_handler+0x104>)
 8000b1a:	f000 fd83 	bl	8001624 <HAL_GPIO_WritePin>
 8000b1e:	e011      	b.n	8000b44 <button_handler+0xb0>
				}
				else {
					HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	481c      	ldr	r0, [pc, #112]	; (8000b98 <button_handler+0x104>)
 8000b28:	f000 fd7c 	bl	8001624 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b32:	4819      	ldr	r0, [pc, #100]	; (8000b98 <button_handler+0x104>)
 8000b34:	f000 fd76 	bl	8001624 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3e:	4816      	ldr	r0, [pc, #88]	; (8000b98 <button_handler+0x104>)
 8000b40:	f000 fd70 	bl	8001624 <HAL_GPIO_WritePin>
				}
				xQueueReceive(xQueue, &pvBuffer, 0);
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <button_handler+0x108>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f107 0108 	add.w	r1, r7, #8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 fee0 	bl	8003914 <xQueueReceive>
			if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_SET){
 8000b54:	e015      	b.n	8000b82 <button_handler+0xee>
			}

		}
		else if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_RESET && btn_state == 1) {
 8000b56:	2101      	movs	r1, #1
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <button_handler+0xf0>)
 8000b5a:	f000 fd4b 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d19d      	bne.n	8000aa0 <button_handler+0xc>
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d19a      	bne.n	8000aa0 <button_handler+0xc>
			vTaskDelay(20 / portTICK_PERIOD_MS);
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f003 fabc 	bl	80040e8 <vTaskDelay>
			if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_SET){
 8000b70:	2101      	movs	r1, #1
 8000b72:	4804      	ldr	r0, [pc, #16]	; (8000b84 <button_handler+0xf0>)
 8000b74:	f000 fd3e 	bl	80015f4 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d190      	bne.n	8000aa0 <button_handler+0xc>
				btn_state = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
		if (HAL_GPIO_ReadPin(blue_btn_GPIO_Port, blue_btn_Pin) == GPIO_PIN_SET && btn_state == 0){
 8000b82:	e78d      	b.n	8000aa0 <button_handler+0xc>
 8000b84:	40020000 	.word	0x40020000
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	200133c4 	.word	0x200133c4
 8000b90:	200133c0 	.word	0x200133c0
 8000b94:	08007dfc 	.word	0x08007dfc
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	200133bc 	.word	0x200133bc

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb2:	f000 f9ef 	bl	8000f94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c0e:	f004 fbf3 	bl	80053f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <HAL_UART_MspInit+0x94>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d133      	bne.n	8000caa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0x98>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <HAL_UART_MspInit+0x9c>)
 8000c96:	f000 fb11 	bl	80012bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2026      	movs	r0, #38	; 0x26
 8000ca0:	f000 fa50 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ca4:	2026      	movs	r0, #38	; 0x26
 8000ca6:	f000 fa69 	bl	800117c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2036      	movs	r0, #54	; 0x36
 8000cd6:	f000 fa35 	bl	8001144 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cda:	2036      	movs	r0, #54	; 0x36
 8000cdc:	f000 fa4e 	bl	800117c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <HAL_InitTick+0xa4>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <HAL_InitTick+0xa4>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_InitTick+0xa4>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cfc:	f107 0210 	add.w	r2, r7, #16
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 f934 	bl	8001f74 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d0c:	f001 f90a 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8000d10:	4603      	mov	r3, r0
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <HAL_InitTick+0xa8>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9b      	lsrs	r3, r3, #18
 8000d20:	3b01      	subs	r3, #1
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_InitTick+0xac>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <HAL_InitTick+0xb0>)
 8000d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_InitTick+0xac>)
 8000d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_InitTick+0xac>)
 8000d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_InitTick+0xac>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_InitTick+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <HAL_InitTick+0xac>)
 8000d46:	f001 f947 	bl	8001fd8 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d104      	bne.n	8000d5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_InitTick+0xac>)
 8000d52:	f001 f99b 	bl	800208c <HAL_TIM_Base_Start_IT>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3730      	adds	r7, #48	; 0x30
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	431bde83 	.word	0x431bde83
 8000d6c:	2001340c 	.word	0x2001340c
 8000d70:	40001000 	.word	0x40001000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <USART2_IRQHandler+0x10>)
 8000da6:	f001 fc13 	bl	80025d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200133c8 	.word	0x200133c8

08000db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <TIM6_DAC_IRQHandler+0x10>)
 8000dba:	f001 f9d7 	bl	800216c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2001340c 	.word	0x2001340c

08000dc8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
	}

return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f006 fa94 	bl	80073c8 <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	20000098 	.word	0x20000098
 8000ed4:	20013550 	.word	0x20013550

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f006 fa53 	bl	80073d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fb15 	bl	800055c <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000f40:	08007f38 	.word	0x08007f38
  ldr r2, =_sbss
 8000f44:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000f48:	20013550 	.word	0x20013550

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f8d8 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f7ff fe9e 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff fe24 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20013454 	.word	0x20013454

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20013454 	.word	0x20013454

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff61 	bl	800101c <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb1 	bl	80010c8 <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff80 	bl	8001074 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff54 	bl	8001038 <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a6:	f7ff ff09 	bl	8000fbc <HAL_GetTick>
 80011aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d008      	beq.n	80011ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e052      	b.n	8001270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0216 	bic.w	r2, r2, #22
 80011d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <HAL_DMA_Abort+0x62>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0208 	bic.w	r2, r2, #8
 8001208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800121a:	e013      	b.n	8001244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121c:	f7ff fece 	bl	8000fbc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b05      	cmp	r3, #5
 8001228:	d90c      	bls.n	8001244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e015      	b.n	8001270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e4      	bne.n	800121c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001256:	223f      	movs	r2, #63	; 0x3f
 8001258:	409a      	lsls	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d004      	beq.n	8001296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00c      	b.n	80012b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2205      	movs	r2, #5
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	; 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e16b      	b.n	80015b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 815a 	bne.w	80015aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b4 	beq.w	80015aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b5d      	ldr	r3, [pc, #372]	; (80015c8 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a5b      	ldr	r2, [pc, #364]	; (80015cc <HAL_GPIO_Init+0x310>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	; (80015d0 <HAL_GPIO_Init+0x314>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02b      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a51      	ldr	r2, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x318>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x222>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a50      	ldr	r2, [pc, #320]	; (80015d8 <HAL_GPIO_Init+0x31c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x21e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x320>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x324>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x328>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x32c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x330>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x20a>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00e      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014c6:	2308      	movs	r3, #8
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	; (80015cc <HAL_GPIO_Init+0x310>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001502:	4b3b      	ldr	r3, [pc, #236]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	; (80015f0 <HAL_GPIO_Init+0x334>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_Init+0x334>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <HAL_GPIO_Init+0x334>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f ae90 	bls.w	80012d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	; 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40021400 	.word	0x40021400
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40021c00 	.word	0x40021c00
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691a      	ldr	r2, [r3, #16]
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	4013      	ands	r3, r2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43d9      	mvns	r1, r3
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	400b      	ands	r3, r1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e264      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d075      	beq.n	8001796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016aa:	4ba3      	ldr	r3, [pc, #652]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	d00c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016b6:	4ba0      	ldr	r3, [pc, #640]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d112      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c2:	4b9d      	ldr	r3, [pc, #628]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016ce:	d10b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	4b99      	ldr	r3, [pc, #612]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d05b      	beq.n	8001794 <HAL_RCC_OscConfig+0x108>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d157      	bne.n	8001794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e23f      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f0:	d106      	bne.n	8001700 <HAL_RCC_OscConfig+0x74>
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a90      	ldr	r2, [pc, #576]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e01d      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001708:	d10c      	bne.n	8001724 <HAL_RCC_OscConfig+0x98>
 800170a:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a8a      	ldr	r2, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a87      	ldr	r2, [pc, #540]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e00b      	b.n	800173c <HAL_RCC_OscConfig+0xb0>
 8001724:	4b84      	ldr	r3, [pc, #528]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a83      	ldr	r2, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a80      	ldr	r2, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d013      	beq.n	800176c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc3a 	bl	8000fbc <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fc36 	bl	8000fbc <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e204      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0xc0>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fc26 	bl	8000fbc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fc22 	bl	8000fbc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1f0      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0xe8>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d063      	beq.n	800186a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a2:	4b65      	ldr	r3, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00b      	beq.n	80017c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b62      	ldr	r3, [pc, #392]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d11c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d116      	bne.n	80017f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e1c4      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017de:	4b56      	ldr	r3, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4952      	ldr	r1, [pc, #328]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f2:	e03a      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017fc:	4b4f      	ldr	r3, [pc, #316]	; (800193c <HAL_RCC_OscConfig+0x2b0>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff fbdb 	bl	8000fbc <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fbd7 	bl	8000fbc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1a5      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	4b46      	ldr	r3, [pc, #280]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	4940      	ldr	r1, [pc, #256]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_OscConfig+0x2b0>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff fbba 	bl	8000fbc <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800184c:	f7ff fbb6 	bl	8000fbc <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e184      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d030      	beq.n	80018d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <HAL_RCC_OscConfig+0x2b4>)
 8001880:	2201      	movs	r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff fb9a 	bl	8000fbc <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188c:	f7ff fb96 	bl	8000fbc <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e164      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80018a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0x200>
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_OscConfig+0x2b4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b2:	f7ff fb83 	bl	8000fbc <HAL_GetTick>
 80018b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ba:	f7ff fb7f 	bl	8000fbc <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e14d      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a0 	beq.w	8001a26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a0e      	ldr	r2, [pc, #56]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_RCC_OscConfig+0x2ac>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_RCC_OscConfig+0x2b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d121      	bne.n	8001966 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_RCC_OscConfig+0x2b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_RCC_OscConfig+0x2b8>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff fb45 	bl	8000fbc <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e011      	b.n	800195a <HAL_RCC_OscConfig+0x2ce>
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	42470000 	.word	0x42470000
 8001940:	42470e80 	.word	0x42470e80
 8001944:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001948:	f7ff fb38 	bl	8000fbc <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e106      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195a:	4b85      	ldr	r3, [pc, #532]	; (8001b70 <HAL_RCC_OscConfig+0x4e4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x2f0>
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	4a80      	ldr	r2, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6713      	str	r3, [r2, #112]	; 0x70
 800197a:	e01c      	b.n	80019b6 <HAL_RCC_OscConfig+0x32a>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x312>
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	4a7a      	ldr	r2, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6713      	str	r3, [r2, #112]	; 0x70
 8001990:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a77      	ldr	r2, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0x32a>
 800199e:	4b75      	ldr	r3, [pc, #468]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a2:	4a74      	ldr	r2, [pc, #464]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	; 0x70
 80019aa:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	4a71      	ldr	r2, [pc, #452]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d015      	beq.n	80019ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff fafd 	bl	8000fbc <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff faf9 	bl	8000fbc <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0c5      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ee      	beq.n	80019c6 <HAL_RCC_OscConfig+0x33a>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fae7 	bl	8000fbc <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fae3 	bl	8000fbc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0af      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 809b 	beq.w	8001b66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d05c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d141      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4ec>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fab7 	bl	8000fbc <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff fab3 	bl	8000fbc <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e081      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69da      	ldr	r2, [r3, #28]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	019b      	lsls	r3, r3, #6
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	061b      	lsls	r3, r3, #24
 8001a94:	4937      	ldr	r1, [pc, #220]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x4ec>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa8c 	bl	8000fbc <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa88 	bl	8000fbc <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e056      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x41c>
 8001ac6:	e04e      	b.n	8001b66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x4ec>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fa75 	bl	8000fbc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fa71 	bl	8000fbc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e03f      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x44a>
 8001af4:	e037      	b.n	8001b66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e032      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_RCC_OscConfig+0x4e8>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d028      	beq.n	8001b62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d121      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d11a      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d111      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40007000 	.word	0x40007000
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470060 	.word	0x42470060

08001b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0cc      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d90c      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d044      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d119      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b3f      	ldr	r3, [pc, #252]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e06f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b3b      	ldr	r3, [pc, #236]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e067      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5a:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f023 0203 	bic.w	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4934      	ldr	r1, [pc, #208]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f9a6 	bl	8000fbc <HAL_GetTick>
 8001c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	e00a      	b.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c74:	f7ff f9a2 	bl	8000fbc <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e04f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b2b      	ldr	r3, [pc, #172]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 020c 	and.w	r2, r3, #12
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1eb      	bne.n	8001c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d20c      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b22      	ldr	r3, [pc, #136]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cee:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1c8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ffcc 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	08007ea0 	.word	0x08007ea0
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	2300      	movs	r3, #0
 8001d5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d60:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d00d      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x40>
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	f200 80bd 	bhi.w	8001eec <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0x34>
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d7a:	e0b7      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7c:	4b61      	ldr	r3, [pc, #388]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d7e:	60bb      	str	r3, [r7, #8]
       break;
 8001d80:	e0b7      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d84:	60bb      	str	r3, [r7, #8]
      break;
 8001d86:	e0b4      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d88:	4b5d      	ldr	r3, [pc, #372]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d04d      	beq.n	8001e3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	099b      	lsrs	r3, r3, #6
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	ea02 0800 	and.w	r8, r2, r0
 8001db6:	ea03 0901 	and.w	r9, r3, r1
 8001dba:	4640      	mov	r0, r8
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	014b      	lsls	r3, r1, #5
 8001dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dcc:	0142      	lsls	r2, r0, #5
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	ebb0 0008 	subs.w	r0, r0, r8
 8001dd6:	eb61 0109 	sbc.w	r1, r1, r9
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	018b      	lsls	r3, r1, #6
 8001de4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001de8:	0182      	lsls	r2, r0, #6
 8001dea:	1a12      	subs	r2, r2, r0
 8001dec:	eb63 0301 	sbc.w	r3, r3, r1
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	00d9      	lsls	r1, r3, #3
 8001dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dfe:	00d0      	lsls	r0, r2, #3
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	eb12 0208 	adds.w	r2, r2, r8
 8001e08:	eb43 0309 	adc.w	r3, r3, r9
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0259      	lsls	r1, r3, #9
 8001e16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e1a:	0250      	lsls	r0, r2, #9
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	f7fe fa1a 	bl	8000264 <__aeabi_uldivmod>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4613      	mov	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e04a      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	099b      	lsrs	r3, r3, #6
 8001e40:	461a      	mov	r2, r3
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	ea02 0400 	and.w	r4, r2, r0
 8001e52:	ea03 0501 	and.w	r5, r3, r1
 8001e56:	4620      	mov	r0, r4
 8001e58:	4629      	mov	r1, r5
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	014b      	lsls	r3, r1, #5
 8001e64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e68:	0142      	lsls	r2, r0, #5
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	1b00      	subs	r0, r0, r4
 8001e70:	eb61 0105 	sbc.w	r1, r1, r5
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	018b      	lsls	r3, r1, #6
 8001e7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e82:	0182      	lsls	r2, r0, #6
 8001e84:	1a12      	subs	r2, r2, r0
 8001e86:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8a:	f04f 0000 	mov.w	r0, #0
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	00d9      	lsls	r1, r3, #3
 8001e94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e98:	00d0      	lsls	r0, r2, #3
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	1912      	adds	r2, r2, r4
 8001ea0:	eb45 0303 	adc.w	r3, r5, r3
 8001ea4:	f04f 0000 	mov.w	r0, #0
 8001ea8:	f04f 0100 	mov.w	r1, #0
 8001eac:	0299      	lsls	r1, r3, #10
 8001eae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001eb2:	0290      	lsls	r0, r2, #10
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	f7fe f9ce 	bl	8000264 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	3301      	adds	r3, #1
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	60bb      	str	r3, [r7, #8]
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001eee:	60bb      	str	r3, [r7, #8]
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f28:	f7ff fff0 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08007eb0 	.word	0x08007eb0

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f50:	f7ff ffdc 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	0b5b      	lsrs	r3, r3, #13
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	4903      	ldr	r1, [pc, #12]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f62:	5ccb      	ldrb	r3, [r1, r3]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	08007eb0 	.word	0x08007eb0

08001f74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	220f      	movs	r2, #15
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_RCC_GetClockConfig+0x60>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0207 	and.w	r2, r3, #7
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f839 	bl	8002076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 f9d8 	bl	80023cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e04e      	b.n	8002142 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a23      	ldr	r2, [pc, #140]	; (8002150 <HAL_TIM_Base_Start_IT+0xc4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d022      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ce:	d01d      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a1f      	ldr	r2, [pc, #124]	; (8002154 <HAL_TIM_Base_Start_IT+0xc8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d018      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_TIM_Base_Start_IT+0xcc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <HAL_TIM_Base_Start_IT+0xd0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <HAL_TIM_Base_Start_IT+0xd4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a19      	ldr	r2, [pc, #100]	; (8002164 <HAL_TIM_Base_Start_IT+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <HAL_TIM_Base_Start_IT+0x80>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_TIM_Base_Start_IT+0xdc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d111      	bne.n	8002130 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d010      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212e:	e007      	b.n	8002140 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40010000 	.word	0x40010000
 8002154:	40000400 	.word	0x40000400
 8002158:	40000800 	.word	0x40000800
 800215c:	40000c00 	.word	0x40000c00
 8002160:	40010400 	.word	0x40010400
 8002164:	40014000 	.word	0x40014000
 8002168:	40001800 	.word	0x40001800

0800216c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0202 	mvn.w	r2, #2
 8002198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8ee 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8e0 	bl	800237c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f8f1 	bl	80023a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0204 	mvn.w	r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f8c4 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8b6 	bl	800237c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f8c7 	bl	80023a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f89a 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f88c 	bl	800237c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f89d 	bl	80023a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0210 	mvn.w	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2208      	movs	r2, #8
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f870 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f862 	bl	800237c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f873 	bl	80023a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc58 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f902 	bl	8002520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f838 	bl	80023b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b20      	cmp	r3, #32
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0220 	mvn.w	r2, #32
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f8cc 	bl	800250c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a40      	ldr	r2, [pc, #256]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d00f      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <TIM_Base_SetConfig+0x118>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3c      	ldr	r2, [pc, #240]	; (80024e8 <TIM_Base_SetConfig+0x11c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	; (80024ec <TIM_Base_SetConfig+0x120>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0x40>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d108      	bne.n	800241e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800242c:	d027      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <TIM_Base_SetConfig+0x118>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d023      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a2b      	ldr	r2, [pc, #172]	; (80024e8 <TIM_Base_SetConfig+0x11c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01f      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <TIM_Base_SetConfig+0x120>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d017      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <TIM_Base_SetConfig+0x128>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <TIM_Base_SetConfig+0x12c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00f      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <TIM_Base_SetConfig+0x130>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00b      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a25      	ldr	r2, [pc, #148]	; (8002500 <TIM_Base_SetConfig+0x134>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a24      	ldr	r2, [pc, #144]	; (8002504 <TIM_Base_SetConfig+0x138>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d003      	beq.n	800247e <TIM_Base_SetConfig+0xb2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <TIM_Base_SetConfig+0x13c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d108      	bne.n	8002490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <TIM_Base_SetConfig+0x114>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <TIM_Base_SetConfig+0xf8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <TIM_Base_SetConfig+0x124>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d103      	bne.n	80024cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	615a      	str	r2, [r3, #20]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	40010400 	.word	0x40010400
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	40001800 	.word	0x40001800
 8002504:	40001c00 	.word	0x40001c00
 8002508:	40002000 	.word	0x40002000

0800250c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e03f      	b.n	80025c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fb60 	bl	8000c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fc7b 	bl	8002e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800258c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800259c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0ba      	sub	sp, #232	; 0xe8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800260e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10f      	bne.n	8002636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d009      	beq.n	8002636 <HAL_UART_IRQHandler+0x66>
 8002622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fb65 	bl	8002cfe <UART_Receive_IT>
      return;
 8002634:	e256      	b.n	8002ae4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80de 	beq.w	80027fc <HAL_UART_IRQHandler+0x22c>
 8002640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800264c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002650:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80d1 	beq.w	80027fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_UART_IRQHandler+0xae>
 8002666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_UART_IRQHandler+0xd2>
 800268a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0202 	orr.w	r2, r3, #2
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <HAL_UART_IRQHandler+0xf6>
 80026ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f043 0204 	orr.w	r2, r3, #4
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d011      	beq.n	80026f6 <HAL_UART_IRQHandler+0x126>
 80026d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d105      	bne.n	80026ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f043 0208 	orr.w	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 81ed 	beq.w	8002ada <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_UART_IRQHandler+0x14e>
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 faf0 	bl	8002cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_UART_IRQHandler+0x17a>
 8002742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002746:	2b00      	cmp	r3, #0
 8002748:	d04f      	beq.n	80027ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9f8 	bl	8002b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d141      	bne.n	80027e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	3314      	adds	r3, #20
 8002764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002774:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800277c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3314      	adds	r3, #20
 8002786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800278a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800278e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1d9      	bne.n	800275e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d013      	beq.n	80027da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	4a7d      	ldr	r2, [pc, #500]	; (80029ac <HAL_UART_IRQHandler+0x3dc>)
 80027b8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fd5a 	bl	8001278 <HAL_DMA_Abort_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027d4:	4610      	mov	r0, r2
 80027d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d8:	e00e      	b.n	80027f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f99a 	bl	8002b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e0:	e00a      	b.n	80027f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f996 	bl	8002b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e8:	e006      	b.n	80027f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f992 	bl	8002b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027f6:	e170      	b.n	8002ada <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	bf00      	nop
    return;
 80027fa:	e16e      	b.n	8002ada <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2b01      	cmp	r3, #1
 8002802:	f040 814a 	bne.w	8002a9a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8143 	beq.w	8002a9a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 813c 	beq.w	8002a9a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	f040 80b4 	bne.w	80029b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8140 	beq.w	8002ade <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002866:	429a      	cmp	r2, r3
 8002868:	f080 8139 	bcs.w	8002ade <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	f000 8088 	beq.w	8002992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800289c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1d9      	bne.n	8002882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3314      	adds	r3, #20
 80028ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e1      	bne.n	80028ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800291a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800292e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800293c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002974:	65ba      	str	r2, [r7, #88]	; 0x58
 8002976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800297a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fc03 	bl	8001198 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800299a:	b29b      	uxth	r3, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4619      	mov	r1, r3
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f8c0 	bl	8002b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029a8:	e099      	b.n	8002ade <HAL_UART_IRQHandler+0x50e>
 80029aa:	bf00      	nop
 80029ac:	08002c07 	.word	0x08002c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 808b 	beq.w	8002ae2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8086 	beq.w	8002ae2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	330c      	adds	r3, #12
 80029dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	e853 3f00 	ldrex	r3, [r3]
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029fa:	647a      	str	r2, [r7, #68]	; 0x44
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e3      	bne.n	80029d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3314      	adds	r3, #20
 8002a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3314      	adds	r3, #20
 8002a2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a32:	633a      	str	r2, [r7, #48]	; 0x30
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3a:	e841 2300 	strex	r3, r2, [r1]
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1e3      	bne.n	8002a0e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	330c      	adds	r3, #12
 8002a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	e853 3f00 	ldrex	r3, [r3]
 8002a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0310 	bic.w	r3, r3, #16
 8002a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a78:	61fa      	str	r2, [r7, #28]
 8002a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	69b9      	ldr	r1, [r7, #24]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	617b      	str	r3, [r7, #20]
   return(result);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e3      	bne.n	8002a54 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f848 	bl	8002b28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a98:	e023      	b.n	8002ae2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <HAL_UART_IRQHandler+0x4ea>
 8002aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8bb 	bl	8002c2e <UART_Transmit_IT>
    return;
 8002ab8:	e014      	b.n	8002ae4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x514>
 8002ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8fb 	bl	8002cce <UART_EndTransmit_IT>
    return;
 8002ad8:	e004      	b.n	8002ae4 <HAL_UART_IRQHandler+0x514>
    return;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_IRQHandler+0x514>
      return;
 8002ae2:	bf00      	nop
  }
}
 8002ae4:	37e8      	adds	r7, #232	; 0xe8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop

08002aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b095      	sub	sp, #84	; 0x54
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b68:	643a      	str	r2, [r7, #64]	; 0x40
 8002b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b70:	e841 2300 	strex	r3, r2, [r1]
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e5      	bne.n	8002b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3314      	adds	r3, #20
 8002b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d119      	bne.n	8002bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	f023 0310 	bic.w	r3, r3, #16
 8002bce:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	330c      	adds	r3, #12
 8002bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bd8:	61ba      	str	r2, [r7, #24]
 8002bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bdc:	6979      	ldr	r1, [r7, #20]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	e841 2300 	strex	r3, r2, [r1]
 8002be4:	613b      	str	r3, [r7, #16]
   return(result);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d1e5      	bne.n	8002bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bfa:	bf00      	nop
 8002bfc:	3754      	adds	r7, #84	; 0x54
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ff77 	bl	8002b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b21      	cmp	r3, #33	; 0x21
 8002c40:	d13e      	bne.n	8002cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4a:	d114      	bne.n	8002c76 <UART_Transmit_IT+0x48>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	1c9a      	adds	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	621a      	str	r2, [r3, #32]
 8002c74:	e008      	b.n	8002c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	1c59      	adds	r1, r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6211      	str	r1, [r2, #32]
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4619      	mov	r1, r3
 8002c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10f      	bne.n	8002cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fefc 	bl	8002aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b08c      	sub	sp, #48	; 0x30
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b22      	cmp	r3, #34	; 0x22
 8002d10:	f040 80ab 	bne.w	8002e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1c:	d117      	bne.n	8002d4e <UART_Receive_IT+0x50>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d113      	bne.n	8002d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	1c9a      	adds	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d4c:	e026      	b.n	8002d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d60:	d007      	beq.n	8002d72 <UART_Receive_IT+0x74>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10a      	bne.n	8002d80 <UART_Receive_IT+0x82>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e008      	b.n	8002d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4619      	mov	r1, r3
 8002daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d15a      	bne.n	8002e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0220 	bic.w	r2, r2, #32
 8002dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0201 	bic.w	r2, r2, #1
 8002dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d135      	bne.n	8002e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	613b      	str	r3, [r7, #16]
   return(result);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	f023 0310 	bic.w	r3, r3, #16
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	623a      	str	r2, [r7, #32]
 8002e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	69f9      	ldr	r1, [r7, #28]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	e841 2300 	strex	r3, r2, [r1]
 8002e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1e5      	bne.n	8002df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d10a      	bne.n	8002e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff fe67 	bl	8002b28 <HAL_UARTEx_RxEventCallback>
 8002e5a:	e002      	b.n	8002e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe4f 	bl	8002b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e002      	b.n	8002e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3730      	adds	r7, #48	; 0x30
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e78:	b09f      	sub	sp, #124	; 0x7c
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	ea40 0301 	orr.w	r3, r0, r1
 8002e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb8:	f021 010c 	bic.w	r1, r1, #12
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	6999      	ldr	r1, [r3, #24]
 8002ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	ea40 0301 	orr.w	r3, r0, r1
 8002edc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4bc5      	ldr	r3, [pc, #788]	; (80031f8 <UART_SetConfig+0x384>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d004      	beq.n	8002ef2 <UART_SetConfig+0x7e>
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4bc3      	ldr	r3, [pc, #780]	; (80031fc <UART_SetConfig+0x388>)
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d103      	bne.n	8002efa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef2:	f7ff f82b 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 8002ef6:	6778      	str	r0, [r7, #116]	; 0x74
 8002ef8:	e002      	b.n	8002f00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002efa:	f7ff f813 	bl	8001f24 <HAL_RCC_GetPCLK1Freq>
 8002efe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	f040 80b6 	bne.w	8003078 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f0e:	461c      	mov	r4, r3
 8002f10:	f04f 0500 	mov.w	r5, #0
 8002f14:	4622      	mov	r2, r4
 8002f16:	462b      	mov	r3, r5
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	6439      	str	r1, [r7, #64]	; 0x40
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f24:	1912      	adds	r2, r2, r4
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	00d9      	lsls	r1, r3, #3
 8002f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f38:	00d0      	lsls	r0, r2, #3
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	1911      	adds	r1, r2, r4
 8002f40:	6639      	str	r1, [r7, #96]	; 0x60
 8002f42:	416b      	adcs	r3, r5
 8002f44:	667b      	str	r3, [r7, #100]	; 0x64
 8002f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	1891      	adds	r1, r2, r2
 8002f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f54:	415b      	adcs	r3, r3
 8002f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f60:	f7fd f980 	bl	8000264 <__aeabi_uldivmod>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4ba5      	ldr	r3, [pc, #660]	; (8003200 <UART_SetConfig+0x38c>)
 8002f6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	011e      	lsls	r6, r3, #4
 8002f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f74:	461c      	mov	r4, r3
 8002f76:	f04f 0500 	mov.w	r5, #0
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	462b      	mov	r3, r5
 8002f7e:	1891      	adds	r1, r2, r2
 8002f80:	6339      	str	r1, [r7, #48]	; 0x30
 8002f82:	415b      	adcs	r3, r3
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
 8002f86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f8a:	1912      	adds	r2, r2, r4
 8002f8c:	eb45 0303 	adc.w	r3, r5, r3
 8002f90:	f04f 0000 	mov.w	r0, #0
 8002f94:	f04f 0100 	mov.w	r1, #0
 8002f98:	00d9      	lsls	r1, r3, #3
 8002f9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f9e:	00d0      	lsls	r0, r2, #3
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	1911      	adds	r1, r2, r4
 8002fa6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fa8:	416b      	adcs	r3, r5
 8002faa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	1891      	adds	r1, r2, r2
 8002fb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fba:	415b      	adcs	r3, r3
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002fc6:	f7fd f94d 	bl	8000264 <__aeabi_uldivmod>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4b8c      	ldr	r3, [pc, #560]	; (8003200 <UART_SetConfig+0x38c>)
 8002fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	2164      	movs	r1, #100	; 0x64
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	3332      	adds	r3, #50	; 0x32
 8002fe2:	4a87      	ldr	r2, [pc, #540]	; (8003200 <UART_SetConfig+0x38c>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ff0:	441e      	add	r6, r3
 8002ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f04f 0100 	mov.w	r1, #0
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1894      	adds	r4, r2, r2
 8003000:	623c      	str	r4, [r7, #32]
 8003002:	415b      	adcs	r3, r3
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800300a:	1812      	adds	r2, r2, r0
 800300c:	eb41 0303 	adc.w	r3, r1, r3
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	f04f 0500 	mov.w	r5, #0
 8003018:	00dd      	lsls	r5, r3, #3
 800301a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800301e:	00d4      	lsls	r4, r2, #3
 8003020:	4622      	mov	r2, r4
 8003022:	462b      	mov	r3, r5
 8003024:	1814      	adds	r4, r2, r0
 8003026:	653c      	str	r4, [r7, #80]	; 0x50
 8003028:	414b      	adcs	r3, r1
 800302a:	657b      	str	r3, [r7, #84]	; 0x54
 800302c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	461a      	mov	r2, r3
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	1891      	adds	r1, r2, r2
 8003038:	61b9      	str	r1, [r7, #24]
 800303a:	415b      	adcs	r3, r3
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003042:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003046:	f7fd f90d 	bl	8000264 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4b6c      	ldr	r3, [pc, #432]	; (8003200 <UART_SetConfig+0x38c>)
 8003050:	fba3 1302 	umull	r1, r3, r3, r2
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	2164      	movs	r1, #100	; 0x64
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	4a67      	ldr	r2, [pc, #412]	; (8003200 <UART_SetConfig+0x38c>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	f003 0207 	and.w	r2, r3, #7
 800306e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4432      	add	r2, r6
 8003074:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003076:	e0b9      	b.n	80031ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307a:	461c      	mov	r4, r3
 800307c:	f04f 0500 	mov.w	r5, #0
 8003080:	4622      	mov	r2, r4
 8003082:	462b      	mov	r3, r5
 8003084:	1891      	adds	r1, r2, r2
 8003086:	6139      	str	r1, [r7, #16]
 8003088:	415b      	adcs	r3, r3
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003090:	1912      	adds	r2, r2, r4
 8003092:	eb45 0303 	adc.w	r3, r5, r3
 8003096:	f04f 0000 	mov.w	r0, #0
 800309a:	f04f 0100 	mov.w	r1, #0
 800309e:	00d9      	lsls	r1, r3, #3
 80030a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a4:	00d0      	lsls	r0, r2, #3
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	eb12 0804 	adds.w	r8, r2, r4
 80030ae:	eb43 0905 	adc.w	r9, r3, r5
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	008b      	lsls	r3, r1, #2
 80030c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030ca:	0082      	lsls	r2, r0, #2
 80030cc:	4640      	mov	r0, r8
 80030ce:	4649      	mov	r1, r9
 80030d0:	f7fd f8c8 	bl	8000264 <__aeabi_uldivmod>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4b49      	ldr	r3, [pc, #292]	; (8003200 <UART_SetConfig+0x38c>)
 80030da:	fba3 2302 	umull	r2, r3, r3, r2
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	011e      	lsls	r6, r3, #4
 80030e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e4:	4618      	mov	r0, r3
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	1894      	adds	r4, r2, r2
 80030f0:	60bc      	str	r4, [r7, #8]
 80030f2:	415b      	adcs	r3, r3
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030fa:	1812      	adds	r2, r2, r0
 80030fc:	eb41 0303 	adc.w	r3, r1, r3
 8003100:	f04f 0400 	mov.w	r4, #0
 8003104:	f04f 0500 	mov.w	r5, #0
 8003108:	00dd      	lsls	r5, r3, #3
 800310a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800310e:	00d4      	lsls	r4, r2, #3
 8003110:	4622      	mov	r2, r4
 8003112:	462b      	mov	r3, r5
 8003114:	1814      	adds	r4, r2, r0
 8003116:	64bc      	str	r4, [r7, #72]	; 0x48
 8003118:	414b      	adcs	r3, r1
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	008b      	lsls	r3, r1, #2
 8003130:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003134:	0082      	lsls	r2, r0, #2
 8003136:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800313a:	f7fd f893 	bl	8000264 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <UART_SetConfig+0x38c>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	; 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	3332      	adds	r3, #50	; 0x32
 8003156:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <UART_SetConfig+0x38c>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003162:	441e      	add	r6, r3
 8003164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003166:	4618      	mov	r0, r3
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	1894      	adds	r4, r2, r2
 8003172:	603c      	str	r4, [r7, #0]
 8003174:	415b      	adcs	r3, r3
 8003176:	607b      	str	r3, [r7, #4]
 8003178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800317c:	1812      	adds	r2, r2, r0
 800317e:	eb41 0303 	adc.w	r3, r1, r3
 8003182:	f04f 0400 	mov.w	r4, #0
 8003186:	f04f 0500 	mov.w	r5, #0
 800318a:	00dd      	lsls	r5, r3, #3
 800318c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003190:	00d4      	lsls	r4, r2, #3
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	eb12 0a00 	adds.w	sl, r2, r0
 800319a:	eb43 0b01 	adc.w	fp, r3, r1
 800319e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	008b      	lsls	r3, r1, #2
 80031b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031b6:	0082      	lsls	r2, r0, #2
 80031b8:	4650      	mov	r0, sl
 80031ba:	4659      	mov	r1, fp
 80031bc:	f7fd f852 	bl	8000264 <__aeabi_uldivmod>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <UART_SetConfig+0x38c>)
 80031c6:	fba3 1302 	umull	r1, r3, r3, r2
 80031ca:	095b      	lsrs	r3, r3, #5
 80031cc:	2164      	movs	r1, #100	; 0x64
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	3332      	adds	r3, #50	; 0x32
 80031d8:	4a09      	ldr	r2, [pc, #36]	; (8003200 <UART_SetConfig+0x38c>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4432      	add	r2, r6
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	377c      	adds	r7, #124	; 0x7c
 80031f0:	46bd      	mov	sp, r7
 80031f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031f6:	bf00      	nop
 80031f8:	40011000 	.word	0x40011000
 80031fc:	40011400 	.word	0x40011400
 8003200:	51eb851f 	.word	0x51eb851f

08003204 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 0208 	add.w	r2, r3, #8
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f103 0208 	add.w	r2, r3, #8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f103 0208 	add.w	r2, r3, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800325e:	b480      	push	{r7}
 8003260:	b085      	sub	sp, #20
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80032a6:	b480      	push	{r7}
 80032a8:	b085      	sub	sp, #20
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e00c      	b.n	80032e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3308      	adds	r3, #8
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	e002      	b.n	80032d4 <vListInsert+0x2e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d2f6      	bcs.n	80032ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6892      	ldr	r2, [r2, #8]
 800332e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6852      	ldr	r2, [r2, #4]
 8003338:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	429a      	cmp	r2, r3
 8003342:	d103      	bne.n	800334c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1e5a      	subs	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <xQueueGenericReset+0x2a>
        __asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60bb      	str	r3, [r7, #8]
    }
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003396:	f002 f8ad 	bl	80054f4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	68f9      	ldr	r1, [r7, #12]
 80033a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033a6:	fb01 f303 	mul.w	r3, r1, r3
 80033aa:	441a      	add	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	3b01      	subs	r3, #1
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22ff      	movs	r2, #255	; 0xff
 80033da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d114      	bne.n	8003416 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01a      	beq.n	800342a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3310      	adds	r3, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f001 f945 	bl	8004688 <xTaskRemoveFromEventList>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <xQueueGenericReset+0xcc>)
 8003406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	e009      	b.n	800342a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3310      	adds	r3, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fef2 	bl	8003204 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3324      	adds	r3, #36	; 0x24
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff feed 	bl	8003204 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800342a:	f002 f893 	bl	8005554 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	; 0x30
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <xQueueGenericCreate+0x2a>
        __asm volatile
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61bb      	str	r3, [r7, #24]
    }
 8003462:	bf00      	nop
 8003464:	e7fe      	b.n	8003464 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <xQueueGenericCreate+0x48>
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d101      	bne.n	8003488 <xQueueGenericCreate+0x4c>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueGenericCreate+0x4e>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <xQueueGenericCreate+0x68>
        __asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	617b      	str	r3, [r7, #20]
    }
 80034a0:	bf00      	nop
 80034a2:	e7fe      	b.n	80034a2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80034aa:	d90a      	bls.n	80034c2 <xQueueGenericCreate+0x86>
        __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	613b      	str	r3, [r7, #16]
    }
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	3350      	adds	r3, #80	; 0x50
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 f940 	bl	800574c <pvPortMalloc>
 80034cc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3350      	adds	r3, #80	; 0x50
 80034dc:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034de:	79fa      	ldrb	r2, [r7, #7]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4613      	mov	r3, r2
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f805 	bl	80034fa <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80034f0:	6a3b      	ldr	r3, [r7, #32]
    }
 80034f2:	4618      	mov	r0, r3
 80034f4:	3728      	adds	r7, #40	; 0x28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d103      	bne.n	8003516 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e002      	b.n	800351c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003528:	2101      	movs	r1, #1
 800352a:	69b8      	ldr	r0, [r7, #24]
 800352c:	f7ff ff1e 	bl	800336c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	2073      	movs	r0, #115	; 0x73
 8003540:	f003 f880 	bl	8006644 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b090      	sub	sp, #64	; 0x40
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10a      	bne.n	800357e <xQueueGenericSend+0x32>
        __asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <xQueueGenericSend+0x40>
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <xQueueGenericSend+0x44>
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <xQueueGenericSend+0x46>
 8003590:	2300      	movs	r3, #0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <xQueueGenericSend+0x60>
        __asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d103      	bne.n	80035ba <xQueueGenericSend+0x6e>
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <xQueueGenericSend+0x72>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <xQueueGenericSend+0x74>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xQueueGenericSend+0x8e>
        __asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	623b      	str	r3, [r7, #32]
    }
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035da:	f001 f9b9 	bl	8004950 <xTaskGetSchedulerState>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d102      	bne.n	80035ea <xQueueGenericSend+0x9e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <xQueueGenericSend+0xa2>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <xQueueGenericSend+0xa4>
 80035ee:	2300      	movs	r3, #0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <xQueueGenericSend+0xbe>
        __asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	61fb      	str	r3, [r7, #28]
    }
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800360a:	f001 ff73 	bl	80054f4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <xQueueGenericSend+0xd4>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d136      	bne.n	800368e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	4618      	mov	r0, r3
 8003624:	f003 fd76 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	4601      	mov	r1, r0
 8003634:	205a      	movs	r0, #90	; 0x5a
 8003636:	f003 f87b 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003640:	f000 fa78 	bl	8003b34 <prvCopyDataToQueue>
 8003644:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	3324      	adds	r3, #36	; 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f001 f818 	bl	8004688 <xTaskRemoveFromEventList>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d013      	beq.n	8003686 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800365e:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <xQueueGenericSend+0x248>)
 8003660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	e00a      	b.n	8003686 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <xQueueGenericSend+0x248>)
 8003678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003686:	f001 ff65 	bl	8005554 <vPortExitCritical>
                return pdPASS;
 800368a:	2301      	movs	r3, #1
 800368c:	e07d      	b.n	800378a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d110      	bne.n	80036b6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003694:	f001 ff5e 	bl	8005554 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fd3a 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	460b      	mov	r3, r1
 80036aa:	4601      	mov	r1, r0
 80036ac:	205a      	movs	r0, #90	; 0x5a
 80036ae:	f003 f83f 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e069      	b.n	800378a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 f847 	bl	8004754 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80036c6:	2301      	movs	r3, #1
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80036ca:	f001 ff43 	bl	8005554 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80036ce:	f000 fda5 	bl	800421c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80036d2:	f001 ff0f 	bl	80054f4 <vPortEnterCritical>
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d103      	bne.n	80036ec <xQueueGenericSend+0x1a0>
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f2:	b25b      	sxtb	r3, r3
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d103      	bne.n	8003702 <xQueueGenericSend+0x1b6>
 80036fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003702:	f001 ff27 	bl	8005554 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003706:	1d3a      	adds	r2, r7, #4
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4611      	mov	r1, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f001 f836 	bl	8004780 <xTaskCheckForTimeOut>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d124      	bne.n	8003764 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800371a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371c:	f000 fb02 	bl	8003d24 <prvIsQueueFull>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	3310      	adds	r3, #16
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ff58 	bl	80045e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003736:	f000 fa8d 	bl	8003c54 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800373a:	f000 fd7d 	bl	8004238 <xTaskResumeAll>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	f47f af62 	bne.w	800360a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <xQueueGenericSend+0x248>)
 8003748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	e758      	b.n	800360a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800375a:	f000 fa7b 	bl	8003c54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800375e:	f000 fd6b 	bl	8004238 <xTaskResumeAll>
 8003762:	e752      	b.n	800360a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003766:	f000 fa75 	bl	8003c54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800376a:	f000 fd65 	bl	8004238 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	4618      	mov	r0, r3
 8003772:	f003 fccf 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	460b      	mov	r3, r1
 8003780:	4601      	mov	r1, r0
 8003782:	205a      	movs	r0, #90	; 0x5a
 8003784:	f002 ffd4 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003788:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800378a:	4618      	mov	r0, r3
 800378c:	3738      	adds	r7, #56	; 0x38
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b090      	sub	sp, #64	; 0x40
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d103      	bne.n	80037d4 <xQueueGenericSendFromISR+0x3c>
 80037cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <xQueueGenericSendFromISR+0x40>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <xQueueGenericSendFromISR+0x42>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80037f0:	bf00      	nop
 80037f2:	e7fe      	b.n	80037f2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <xQueueGenericSendFromISR+0x6a>
 80037fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <xQueueGenericSendFromISR+0x6e>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericSendFromISR+0x70>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
    }
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003822:	f001 ff53 	bl	80056cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003826:	f3ef 8211 	mrs	r2, BASEPRI
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	61fa      	str	r2, [r7, #28]
 800383c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800383e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003840:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <xQueueGenericSendFromISR+0xbc>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b02      	cmp	r3, #2
 8003852:	d148      	bne.n	80038e6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800385a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	4618      	mov	r0, r3
 8003868:	f003 fc54 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 800386c:	4601      	mov	r1, r0
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	461a      	mov	r2, r3
 8003872:	2060      	movs	r0, #96	; 0x60
 8003874:	f002 fe8c 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800387e:	f000 f959 	bl	8003b34 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003882:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d112      	bne.n	80038b2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d025      	beq.n	80038e0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fef5 	bl	8004688 <xTaskRemoveFromEventList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01d      	beq.n	80038e0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d01a      	beq.n	80038e0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e016      	b.n	80038e0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80038b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80038b6:	2b7f      	cmp	r3, #127	; 0x7f
 80038b8:	d10a      	bne.n	80038d0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	617b      	str	r3, [r7, #20]
    }
 80038cc:	bf00      	nop
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038d4:	3301      	adds	r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	b25a      	sxtb	r2, r3
 80038da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80038e0:	2301      	movs	r3, #1
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80038e4:	e00b      	b.n	80038fe <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 fc13 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 80038ee:	4601      	mov	r1, r0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	461a      	mov	r2, r3
 80038f4:	2060      	movs	r0, #96	; 0x60
 80038f6:	f002 fe4b 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003900:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003908:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800390c:	4618      	mov	r0, r3
 800390e:	3740      	adds	r7, #64	; 0x40
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003914:	b590      	push	{r4, r7, lr}
 8003916:	b08f      	sub	sp, #60	; 0x3c
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <xQueueReceive+0x30>
        __asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	623b      	str	r3, [r7, #32]
    }
 8003940:	bf00      	nop
 8003942:	e7fe      	b.n	8003942 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d103      	bne.n	8003952 <xQueueReceive+0x3e>
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <xQueueReceive+0x42>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <xQueueReceive+0x44>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <xQueueReceive+0x5e>
        __asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	61fb      	str	r3, [r7, #28]
    }
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003972:	f000 ffed 	bl	8004950 <xTaskGetSchedulerState>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <xQueueReceive+0x6e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <xQueueReceive+0x72>
 8003982:	2301      	movs	r3, #1
 8003984:	e000      	b.n	8003988 <xQueueReceive+0x74>
 8003986:	2300      	movs	r3, #0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueReceive+0x8e>
        __asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	61bb      	str	r3, [r7, #24]
    }
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80039a2:	f001 fda7 	bl	80054f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d02f      	beq.n	8003a12 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b6:	f000 f927 	bl	8003c08 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fba9 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 80039c2:	4604      	mov	r4, r0
 80039c4:	2000      	movs	r0, #0
 80039c6:	f003 fba5 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 80039ca:	4602      	mov	r2, r0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2101      	movs	r1, #1
 80039d0:	9100      	str	r1, [sp, #0]
 80039d2:	4621      	mov	r1, r4
 80039d4:	205c      	movs	r0, #92	; 0x5c
 80039d6:	f002 feab 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00f      	beq.n	8003a0a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	3310      	adds	r3, #16
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fe4a 	bl	8004688 <xTaskRemoveFromEventList>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80039fa:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <xQueueReceive+0x21c>)
 80039fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003a0a:	f001 fda3 	bl	8005554 <vPortExitCritical>
                return pdPASS;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e08a      	b.n	8003b28 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003a18:	f001 fd9c 	bl	8005554 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fb78 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003a24:	4604      	mov	r4, r0
 8003a26:	2000      	movs	r0, #0
 8003a28:	f003 fb74 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2101      	movs	r1, #1
 8003a32:	9100      	str	r1, [sp, #0]
 8003a34:	4621      	mov	r1, r4
 8003a36:	205c      	movs	r0, #92	; 0x5c
 8003a38:	f002 fe7a 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e073      	b.n	8003b28 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fe82 	bl	8004754 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003a54:	f001 fd7e 	bl	8005554 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003a58:	f000 fbe0 	bl	800421c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003a5c:	f001 fd4a 	bl	80054f4 <vPortEnterCritical>
 8003a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a66:	b25b      	sxtb	r3, r3
 8003a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a6c:	d103      	bne.n	8003a76 <xQueueReceive+0x162>
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d103      	bne.n	8003a8c <xQueueReceive+0x178>
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	f001 fd62 	bl	8005554 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a90:	1d3a      	adds	r2, r7, #4
 8003a92:	f107 0310 	add.w	r3, r7, #16
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fe71 	bl	8004780 <xTaskCheckForTimeOut>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d124      	bne.n	8003aee <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aa6:	f000 f927 	bl	8003cf8 <prvIsQueueEmpty>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d018      	beq.n	8003ae2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	3324      	adds	r3, #36	; 0x24
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fd93 	bl	80045e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac0:	f000 f8c8 	bl	8003c54 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ac4:	f000 fbb8 	bl	8004238 <xTaskResumeAll>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f af69 	bne.w	80039a2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003ad0:	4b17      	ldr	r3, [pc, #92]	; (8003b30 <xQueueReceive+0x21c>)
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	e75f      	b.n	80039a2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae4:	f000 f8b6 	bl	8003c54 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ae8:	f000 fba6 	bl	8004238 <xTaskResumeAll>
 8003aec:	e759      	b.n	80039a2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003af0:	f000 f8b0 	bl	8003c54 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003af4:	f000 fba0 	bl	8004238 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afa:	f000 f8fd 	bl	8003cf8 <prvIsQueueEmpty>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f43f af4e 	beq.w	80039a2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 fb03 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	2000      	movs	r0, #0
 8003b12:	f003 faff 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003b16:	4602      	mov	r2, r0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	9100      	str	r1, [sp, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	205c      	movs	r0, #92	; 0x5c
 8003b22:	f002 fe05 	bl	8006730 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003b26:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3734      	adds	r7, #52	; 0x34
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d14d      	bne.n	8003bf6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 ff14 	bl	800498c <xTaskPriorityDisinherit>
 8003b64:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	e043      	b.n	8003bf6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d119      	bne.n	8003ba8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6858      	ldr	r0, [r3, #4]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68b9      	ldr	r1, [r7, #8]
 8003b80:	f003 fc5a 	bl	8007438 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	441a      	add	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d32b      	bcc.n	8003bf6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	e026      	b.n	8003bf6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68d8      	ldr	r0, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	f003 fc40 	bl	8007438 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	425b      	negs	r3, r3
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d207      	bcs.n	8003be4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	425b      	negs	r3, r3
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d105      	bne.n	8003bf6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003bfe:	697b      	ldr	r3, [r7, #20]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68da      	ldr	r2, [r3, #12]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d303      	bcc.n	8003c3c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68d9      	ldr	r1, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	461a      	mov	r2, r3
 8003c46:	6838      	ldr	r0, [r7, #0]
 8003c48:	f003 fbf6 	bl	8007438 <memcpy>
    }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003c5c:	f001 fc4a 	bl	80054f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c66:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c68:	e011      	b.n	8003c8e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d012      	beq.n	8003c98 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3324      	adds	r3, #36	; 0x24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fd06 	bl	8004688 <xTaskRemoveFromEventList>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003c82:	f000 fde3 	bl	800484c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dce9      	bgt.n	8003c6a <prvUnlockQueue+0x16>
 8003c96:	e000      	b.n	8003c9a <prvUnlockQueue+0x46>
                        break;
 8003c98:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003ca2:	f001 fc57 	bl	8005554 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003ca6:	f001 fc25 	bl	80054f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cb2:	e011      	b.n	8003cd8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d012      	beq.n	8003ce2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3310      	adds	r3, #16
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fce1 	bl	8004688 <xTaskRemoveFromEventList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003ccc:	f000 fdbe 	bl	800484c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003cd0:	7bbb      	ldrb	r3, [r7, #14]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	dce9      	bgt.n	8003cb4 <prvUnlockQueue+0x60>
 8003ce0:	e000      	b.n	8003ce4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003ce2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003cec:	f001 fc32 	bl	8005554 <vPortExitCritical>
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d00:	f001 fbf8 	bl	80054f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e001      	b.n	8003d16 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d16:	f001 fc1d 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003d2c:	f001 fbe2 	bl	80054f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d102      	bne.n	8003d42 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	e001      	b.n	8003d46 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003d46:	f001 fc05 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e01e      	b.n	8003da2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d64:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <vQueueAddToRegistry+0x60>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d115      	bne.n	8003d9c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d70:	4910      	ldr	r1, [pc, #64]	; (8003db4 <vQueueAddToRegistry+0x60>)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <vQueueAddToRegistry+0x60>)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f003 f9c3 	bl	8007114 <SEGGER_SYSVIEW_ShrinkId>
 8003d8e:	4601      	mov	r1, r0
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	2071      	movs	r0, #113	; 0x71
 8003d96:	f002 fbfb 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003d9a:	e006      	b.n	8003daa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b07      	cmp	r3, #7
 8003da6:	d9dd      	bls.n	8003d64 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20013458 	.word	0x20013458

08003db8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003dc8:	f001 fb94 	bl	80054f4 <vPortEnterCritical>
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dd2:	b25b      	sxtb	r3, r3
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d103      	bne.n	8003de2 <vQueueWaitForMessageRestricted+0x2a>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de8:	b25b      	sxtb	r3, r3
 8003dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dee:	d103      	bne.n	8003df8 <vQueueWaitForMessageRestricted+0x40>
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003df8:	f001 fbac 	bl	8005554 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d106      	bne.n	8003e12 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3324      	adds	r3, #36	; 0x24
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fc0d 	bl	800462c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff1e 	bl	8003c54 <prvUnlockQueue>
    }
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08c      	sub	sp, #48	; 0x30
 8003e24:	af04      	add	r7, sp, #16
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fc89 	bl	800574c <pvPortMalloc>
 8003e3a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e42:	2058      	movs	r0, #88	; 0x58
 8003e44:	f001 fc82 	bl	800574c <pvPortMalloc>
 8003e48:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
 8003e56:	e005      	b.n	8003e64 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003e58:	6978      	ldr	r0, [r7, #20]
 8003e5a:	f001 fd57 	bl	800590c <vPortFree>
 8003e5e:	e001      	b.n	8003e64 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d013      	beq.n	8003e92 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9303      	str	r3, [sp, #12]
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	9302      	str	r3, [sp, #8]
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f80e 	bl	8003ea2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003e86:	69f8      	ldr	r0, [r7, #28]
 8003e88:	f000 f8a2 	bl	8003fd0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e002      	b.n	8003e98 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003e98:	69bb      	ldr	r3, [r7, #24]
    }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	461a      	mov	r2, r3
 8003eba:	21a5      	movs	r1, #165	; 0xa5
 8003ebc:	f003 faca 	bl	8007454 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f023 0307 	bic.w	r3, r3, #7
 8003ed8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <prvInitialiseNewTask+0x58>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	617b      	str	r3, [r7, #20]
    }
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01f      	beq.n	8003f40 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
 8003f04:	e012      	b.n	8003f2c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	7819      	ldrb	r1, [r3, #0]
 8003f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	4413      	add	r3, r2
 8003f14:	3334      	adds	r3, #52	; 0x34
 8003f16:	460a      	mov	r2, r1
 8003f18:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b09      	cmp	r3, #9
 8003f30:	d9e9      	bls.n	8003f06 <prvInitialiseNewTask+0x64>
 8003f32:	e000      	b.n	8003f36 <prvInitialiseNewTask+0x94>
            {
                break;
 8003f34:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003f3e:	e003      	b.n	8003f48 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d901      	bls.n	8003f52 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f56:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	2200      	movs	r2, #0
 8003f62:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	3304      	adds	r3, #4
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff f96b 	bl	8003244 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	3318      	adds	r3, #24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f966 	bl	8003244 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	f1c3 0205 	rsb	r2, r3, #5
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	3350      	adds	r3, #80	; 0x50
 8003f92:	2204      	movs	r2, #4
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f003 fa5c 	bl	8007454 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9e:	3354      	adds	r3, #84	; 0x54
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f003 fa55 	bl	8007454 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	68f9      	ldr	r1, [r7, #12]
 8003fae:	69b8      	ldr	r0, [r7, #24]
 8003fb0:	f001 f8f6 	bl	80051a0 <pxPortInitialiseStack>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003fc6:	bf00      	nop
 8003fc8:	3720      	adds	r7, #32
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003fd0:	b5b0      	push	{r4, r5, r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003fd8:	f001 fa8c 	bl	80054f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <prvAddNewTaskToReadyList+0xfc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a3a      	ldr	r2, [pc, #232]	; (80040cc <prvAddNewTaskToReadyList+0xfc>)
 8003fe4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003fe6:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <prvAddNewTaskToReadyList+0x100>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d109      	bne.n	8004002 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003fee:	4a38      	ldr	r2, [pc, #224]	; (80040d0 <prvAddNewTaskToReadyList+0x100>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ff4:	4b35      	ldr	r3, [pc, #212]	; (80040cc <prvAddNewTaskToReadyList+0xfc>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d110      	bne.n	800401e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003ffc:	f000 fc4a 	bl	8004894 <prvInitialiseTaskLists>
 8004000:	e00d      	b.n	800401e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <prvAddNewTaskToReadyList+0x104>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <prvAddNewTaskToReadyList+0x100>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	429a      	cmp	r2, r3
 8004016:	d802      	bhi.n	800401e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004018:	4a2d      	ldr	r2, [pc, #180]	; (80040d0 <prvAddNewTaskToReadyList+0x100>)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <prvAddNewTaskToReadyList+0x108>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <prvAddNewTaskToReadyList+0x108>)
 8004026:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <prvAddNewTaskToReadyList+0x108>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <prvAddNewTaskToReadyList+0x94>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 ff45 	bl	8006ec8 <SEGGER_SYSVIEW_OnTaskCreate>
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	461d      	mov	r5, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461c      	mov	r4, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	1ae3      	subs	r3, r4, r3
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	462b      	mov	r3, r5
 8004060:	f001 fd72 	bl	8005b48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4618      	mov	r0, r3
 8004068:	f002 ffb2 	bl	8006fd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <prvAddNewTaskToReadyList+0x10c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	4a18      	ldr	r2, [pc, #96]	; (80040dc <prvAddNewTaskToReadyList+0x10c>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a15      	ldr	r2, [pc, #84]	; (80040e0 <prvAddNewTaskToReadyList+0x110>)
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7ff f8e2 	bl	800325e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800409a:	f001 fa5b 	bl	8005554 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800409e:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <prvAddNewTaskToReadyList+0x104>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00e      	beq.n	80040c4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <prvAddNewTaskToReadyList+0x100>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d207      	bcs.n	80040c4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80040b4:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <prvAddNewTaskToReadyList+0x114>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bdb0      	pop	{r4, r5, r7, pc}
 80040cc:	2000015c 	.word	0x2000015c
 80040d0:	2000009c 	.word	0x2000009c
 80040d4:	20000168 	.word	0x20000168
 80040d8:	20000178 	.word	0x20000178
 80040dc:	20000164 	.word	0x20000164
 80040e0:	200000a0 	.word	0x200000a0
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01b      	beq.n	8004132 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <vTaskDelay+0x68>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <vTaskDelay+0x30>
        __asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60bb      	str	r3, [r7, #8]
    }
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8004118:	f000 f880 	bl	800421c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	2023      	movs	r0, #35	; 0x23
 8004120:	f002 f9fa 	bl	8006518 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004124:	2100      	movs	r1, #0
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fcb0 	bl	8004a8c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800412c:	f000 f884 	bl	8004238 <xTaskResumeAll>
 8004130:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d107      	bne.n	8004148 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8004138:	4b06      	ldr	r3, [pc, #24]	; (8004154 <vTaskDelay+0x6c>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000184 	.word	0x20000184
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <vTaskStartScheduler+0xa4>)
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	2300      	movs	r3, #0
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	2282      	movs	r2, #130	; 0x82
 800416a:	4925      	ldr	r1, [pc, #148]	; (8004200 <vTaskStartScheduler+0xa8>)
 800416c:	4825      	ldr	r0, [pc, #148]	; (8004204 <vTaskStartScheduler+0xac>)
 800416e:	f7ff fe57 	bl	8003e20 <xTaskCreate>
 8004172:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800417a:	f000 fcff 	bl	8004b7c <xTimerCreateTimerTask>
 800417e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d124      	bne.n	80041d0 <vTaskStartScheduler+0x78>
        __asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
    }
 8004198:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800419a:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <vTaskStartScheduler+0xb0>)
 800419c:	f04f 32ff 	mov.w	r2, #4294967295
 80041a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <vTaskStartScheduler+0xb4>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80041a8:	4b19      	ldr	r3, [pc, #100]	; (8004210 <vTaskStartScheduler+0xb8>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80041ae:	4b19      	ldr	r3, [pc, #100]	; (8004214 <vTaskStartScheduler+0xbc>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <vTaskStartScheduler+0xa4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d102      	bne.n	80041c0 <vTaskStartScheduler+0x68>
 80041ba:	f002 fe69 	bl	8006e90 <SEGGER_SYSVIEW_OnIdle>
 80041be:	e004      	b.n	80041ca <vTaskStartScheduler+0x72>
 80041c0:	4b14      	ldr	r3, [pc, #80]	; (8004214 <vTaskStartScheduler+0xbc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f002 fec1 	bl	8006f4c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80041ca:	f001 f873 	bl	80052b4 <xPortStartScheduler>
 80041ce:	e00e      	b.n	80041ee <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d10a      	bne.n	80041ee <vTaskStartScheduler+0x96>
        __asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	607b      	str	r3, [r7, #4]
    }
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <vTaskStartScheduler+0xc0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000180 	.word	0x20000180
 8004200:	08007e18 	.word	0x08007e18
 8004204:	08004865 	.word	0x08004865
 8004208:	2000017c 	.word	0x2000017c
 800420c:	20000168 	.word	0x20000168
 8004210:	20000160 	.word	0x20000160
 8004214:	2000009c 	.word	0x2000009c
 8004218:	20000010 	.word	0x20000010

0800421c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <vTaskSuspendAll+0x18>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a03      	ldr	r2, [pc, #12]	; (8004234 <vTaskSuspendAll+0x18>)
 8004228:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	20000184 	.word	0x20000184

08004238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004242:	2300      	movs	r3, #0
 8004244:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004246:	4b43      	ldr	r3, [pc, #268]	; (8004354 <xTaskResumeAll+0x11c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <xTaskResumeAll+0x2c>
        __asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	603b      	str	r3, [r7, #0]
    }
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004264:	f001 f946 	bl	80054f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <xTaskResumeAll+0x11c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3b01      	subs	r3, #1
 800426e:	4a39      	ldr	r2, [pc, #228]	; (8004354 <xTaskResumeAll+0x11c>)
 8004270:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004272:	4b38      	ldr	r3, [pc, #224]	; (8004354 <xTaskResumeAll+0x11c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d165      	bne.n	8004346 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800427a:	4b37      	ldr	r3, [pc, #220]	; (8004358 <xTaskResumeAll+0x120>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d061      	beq.n	8004346 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004282:	e032      	b.n	80042ea <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <xTaskResumeAll+0x124>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3318      	adds	r3, #24
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff f841 	bl	8003318 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff f83c 	bl	8003318 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 fe94 	bl	8006fd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <xTaskResumeAll+0x128>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	4a2a      	ldr	r2, [pc, #168]	; (8004360 <xTaskResumeAll+0x128>)
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4a27      	ldr	r2, [pc, #156]	; (8004364 <xTaskResumeAll+0x12c>)
 80042c8:	441a      	add	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7fe ffc4 	bl	800325e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <xTaskResumeAll+0x130>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d302      	bcc.n	80042ea <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80042e4:	4b21      	ldr	r3, [pc, #132]	; (800436c <xTaskResumeAll+0x134>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042ea:	4b1c      	ldr	r3, [pc, #112]	; (800435c <xTaskResumeAll+0x124>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1c8      	bne.n	8004284 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80042f8:	f000 fb0e 	bl	8004918 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <xTaskResumeAll+0x138>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004308:	f000 f846 	bl	8004398 <xTaskIncrementTick>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8004312:	4b16      	ldr	r3, [pc, #88]	; (800436c <xTaskResumeAll+0x134>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f1      	bne.n	8004308 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <xTaskResumeAll+0x138>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <xTaskResumeAll+0x134>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <xTaskResumeAll+0x13c>)
 8004338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004346:	f001 f905 	bl	8005554 <vPortExitCritical>

    return xAlreadyYielded;
 800434a:	68bb      	ldr	r3, [r7, #8]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000184 	.word	0x20000184
 8004358:	2000015c 	.word	0x2000015c
 800435c:	20000134 	.word	0x20000134
 8004360:	20000164 	.word	0x20000164
 8004364:	200000a0 	.word	0x200000a0
 8004368:	2000009c 	.word	0x2000009c
 800436c:	20000170 	.word	0x20000170
 8004370:	2000016c 	.word	0x2000016c
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <xTaskGetTickCount+0x1c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004384:	687b      	ldr	r3, [r7, #4]
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	20000160 	.word	0x20000160

08004398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800439e:	2300      	movs	r3, #0
 80043a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a2:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <xTaskIncrementTick+0x14c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 8092 	bne.w	80044d0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043ac:	4b4e      	ldr	r3, [pc, #312]	; (80044e8 <xTaskIncrementTick+0x150>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3301      	adds	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80043b4:	4a4c      	ldr	r2, [pc, #304]	; (80044e8 <xTaskIncrementTick+0x150>)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d120      	bne.n	8004402 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80043c0:	4b4a      	ldr	r3, [pc, #296]	; (80044ec <xTaskIncrementTick+0x154>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <xTaskIncrementTick+0x48>
        __asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	603b      	str	r3, [r7, #0]
    }
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <xTaskIncrementTick+0x46>
 80043e0:	4b42      	ldr	r3, [pc, #264]	; (80044ec <xTaskIncrementTick+0x154>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <xTaskIncrementTick+0x158>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <xTaskIncrementTick+0x154>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4a40      	ldr	r2, [pc, #256]	; (80044f0 <xTaskIncrementTick+0x158>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b3f      	ldr	r3, [pc, #252]	; (80044f4 <xTaskIncrementTick+0x15c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3301      	adds	r3, #1
 80043fa:	4a3e      	ldr	r2, [pc, #248]	; (80044f4 <xTaskIncrementTick+0x15c>)
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	f000 fa8b 	bl	8004918 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <xTaskIncrementTick+0x160>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d34c      	bcc.n	80044a6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440c:	4b37      	ldr	r3, [pc, #220]	; (80044ec <xTaskIncrementTick+0x154>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004416:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <xTaskIncrementTick+0x160>)
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	601a      	str	r2, [r3, #0]
                    break;
 800441e:	e042      	b.n	80044a6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004420:	4b32      	ldr	r3, [pc, #200]	; (80044ec <xTaskIncrementTick+0x154>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d203      	bcs.n	8004440 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004438:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <xTaskIncrementTick+0x160>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800443e:	e032      	b.n	80044a6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe ff67 	bl	8003318 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3318      	adds	r3, #24
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe ff5e 	bl	8003318 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f002 fdb6 	bl	8006fd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	409a      	lsls	r2, r3
 800446c:	4b23      	ldr	r3, [pc, #140]	; (80044fc <xTaskIncrementTick+0x164>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	4a22      	ldr	r2, [pc, #136]	; (80044fc <xTaskIncrementTick+0x164>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a1f      	ldr	r2, [pc, #124]	; (8004500 <xTaskIncrementTick+0x168>)
 8004484:	441a      	add	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe fee6 	bl	800325e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4b1b      	ldr	r3, [pc, #108]	; (8004504 <xTaskIncrementTick+0x16c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d3b5      	bcc.n	800440c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044a4:	e7b2      	b.n	800440c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044a6:	4b17      	ldr	r3, [pc, #92]	; (8004504 <xTaskIncrementTick+0x16c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4914      	ldr	r1, [pc, #80]	; (8004500 <xTaskIncrementTick+0x168>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d901      	bls.n	80044c2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80044be:	2301      	movs	r3, #1
 80044c0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <xTaskIncrementTick+0x170>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e004      	b.n	80044da <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <xTaskIncrementTick+0x174>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	4a0d      	ldr	r2, [pc, #52]	; (800450c <xTaskIncrementTick+0x174>)
 80044d8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80044da:	697b      	ldr	r3, [r7, #20]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000184 	.word	0x20000184
 80044e8:	20000160 	.word	0x20000160
 80044ec:	2000012c 	.word	0x2000012c
 80044f0:	20000130 	.word	0x20000130
 80044f4:	20000174 	.word	0x20000174
 80044f8:	2000017c 	.word	0x2000017c
 80044fc:	20000164 	.word	0x20000164
 8004500:	200000a0 	.word	0x200000a0
 8004504:	2000009c 	.word	0x2000009c
 8004508:	20000170 	.word	0x20000170
 800450c:	2000016c 	.word	0x2000016c

08004510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004516:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <vTaskSwitchContext+0xbc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800451e:	4b2c      	ldr	r3, [pc, #176]	; (80045d0 <vTaskSwitchContext+0xc0>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004524:	e04d      	b.n	80045c2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <vTaskSwitchContext+0xc0>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <vTaskSwitchContext+0xc4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800453a:	7afb      	ldrb	r3, [r7, #11]
 800453c:	f1c3 031f 	rsb	r3, r3, #31
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	4925      	ldr	r1, [pc, #148]	; (80045d8 <vTaskSwitchContext+0xc8>)
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	607b      	str	r3, [r7, #4]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <vTaskSwitchContext+0x5a>
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <vTaskSwitchContext+0xc8>)
 8004578:	4413      	add	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	3308      	adds	r3, #8
 800458e:	429a      	cmp	r2, r3
 8004590:	d104      	bne.n	800459c <vTaskSwitchContext+0x8c>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	4a0e      	ldr	r2, [pc, #56]	; (80045dc <vTaskSwitchContext+0xcc>)
 80045a4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <vTaskSwitchContext+0xcc>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <vTaskSwitchContext+0xd0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d102      	bne.n	80045b8 <vTaskSwitchContext+0xa8>
 80045b2:	f002 fc6d 	bl	8006e90 <SEGGER_SYSVIEW_OnIdle>
}
 80045b6:	e004      	b.n	80045c2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80045b8:	4b08      	ldr	r3, [pc, #32]	; (80045dc <vTaskSwitchContext+0xcc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f002 fcc5 	bl	8006f4c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80045c2:	bf00      	nop
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000184 	.word	0x20000184
 80045d0:	20000170 	.word	0x20000170
 80045d4:	20000164 	.word	0x20000164
 80045d8:	200000a0 	.word	0x200000a0
 80045dc:	2000009c 	.word	0x2000009c
 80045e0:	20000180 	.word	0x20000180

080045e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
    }
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800460a:	4b07      	ldr	r3, [pc, #28]	; (8004628 <vTaskPlaceOnEventList+0x44>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3318      	adds	r3, #24
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fe fe47 	bl	80032a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004618:	2101      	movs	r1, #1
 800461a:	6838      	ldr	r0, [r7, #0]
 800461c:	f000 fa36 	bl	8004a8c <prvAddCurrentTaskToDelayedList>
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	2000009c 	.word	0x2000009c

0800462c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	617b      	str	r3, [r7, #20]
    }
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <vTaskPlaceOnEventListRestricted+0x58>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3318      	adds	r3, #24
 800465a:	4619      	mov	r1, r3
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f7fe fdfe 	bl	800325e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
 800466c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800466e:	2024      	movs	r0, #36	; 0x24
 8004670:	f001 ff34 	bl	80064dc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	f000 fa08 	bl	8004a8c <prvAddCurrentTaskToDelayedList>
    }
 800467c:	bf00      	nop
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	2000009c 	.word	0x2000009c

08004688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
    }
 80046b0:	bf00      	nop
 80046b2:	e7fe      	b.n	80046b2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3318      	adds	r3, #24
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fe fe2d 	bl	8003318 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046be:	4b1f      	ldr	r3, [pc, #124]	; (800473c <xTaskRemoveFromEventList+0xb4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d120      	bne.n	8004708 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe24 	bl	8003318 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f002 fc7c 	bl	8006fd0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <xTaskRemoveFromEventList+0xb8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	4a16      	ldr	r2, [pc, #88]	; (8004740 <xTaskRemoveFromEventList+0xb8>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <xTaskRemoveFromEventList+0xbc>)
 80046f8:	441a      	add	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f7fe fdac 	bl	800325e <vListInsertEnd>
 8004706:	e005      	b.n	8004714 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	3318      	adds	r3, #24
 800470c:	4619      	mov	r1, r3
 800470e:	480e      	ldr	r0, [pc, #56]	; (8004748 <xTaskRemoveFromEventList+0xc0>)
 8004710:	f7fe fda5 	bl	800325e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <xTaskRemoveFromEventList+0xc4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	429a      	cmp	r2, r3
 8004720:	d905      	bls.n	800472e <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004722:	2301      	movs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <xTaskRemoveFromEventList+0xc8>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e001      	b.n	8004732 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000184 	.word	0x20000184
 8004740:	20000164 	.word	0x20000164
 8004744:	200000a0 	.word	0x200000a0
 8004748:	20000134 	.word	0x20000134
 800474c:	2000009c 	.word	0x2000009c
 8004750:	20000170 	.word	0x20000170

08004754 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <vTaskInternalSetTimeOutState+0x24>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004764:	4b05      	ldr	r3, [pc, #20]	; (800477c <vTaskInternalSetTimeOutState+0x28>)
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	605a      	str	r2, [r3, #4]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	20000174 	.word	0x20000174
 800477c:	20000160 	.word	0x20000160

08004780 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
    }
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
    }
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80047c2:	f000 fe97 	bl	80054f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80047c6:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <xTaskCheckForTimeOut+0xc4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047de:	d102      	bne.n	80047e6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e026      	b.n	8004834 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4b17      	ldr	r3, [pc, #92]	; (8004848 <xTaskCheckForTimeOut+0xc8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d00a      	beq.n	8004808 <xTaskCheckForTimeOut+0x88>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d305      	bcc.n	8004808 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	e015      	b.n	8004834 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	429a      	cmp	r2, r3
 8004810:	d20b      	bcs.n	800482a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad2      	subs	r2, r2, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ff98 	bl	8004754 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e004      	b.n	8004834 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004834:	f000 fe8e 	bl	8005554 <vPortExitCritical>

    return xReturn;
 8004838:	69fb      	ldr	r3, [r7, #28]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000160 	.word	0x20000160
 8004848:	20000174 	.word	0x20000174

0800484c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <vTaskMissedYield+0x14>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000170 	.word	0x20000170

08004864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800486c:	f000 f84c 	bl	8004908 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvIdleTask+0x28>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d9f9      	bls.n	800486c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <prvIdleTask+0x2c>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004888:	e7f0      	b.n	800486c <prvIdleTask+0x8>
 800488a:	bf00      	nop
 800488c:	200000a0 	.word	0x200000a0
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a10      	ldr	r2, [pc, #64]	; (80048ec <prvInitialiseTaskLists+0x58>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fca8 	bl	8003204 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80048c0:	480b      	ldr	r0, [pc, #44]	; (80048f0 <prvInitialiseTaskLists+0x5c>)
 80048c2:	f7fe fc9f 	bl	8003204 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80048c6:	480b      	ldr	r0, [pc, #44]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048c8:	f7fe fc9c 	bl	8003204 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80048cc:	480a      	ldr	r0, [pc, #40]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048ce:	f7fe fc99 	bl	8003204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80048d2:	480a      	ldr	r0, [pc, #40]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048d4:	f7fe fc96 	bl	8003204 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80048d8:	4b09      	ldr	r3, [pc, #36]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048da:	4a05      	ldr	r2, [pc, #20]	; (80048f0 <prvInitialiseTaskLists+0x5c>)
 80048dc:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048e0:	4a04      	ldr	r2, [pc, #16]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	200000a0 	.word	0x200000a0
 80048f0:	20000104 	.word	0x20000104
 80048f4:	20000118 	.word	0x20000118
 80048f8:	20000134 	.word	0x20000134
 80048fc:	20000148 	.word	0x20000148
 8004900:	2000012c 	.word	0x2000012c
 8004904:	20000130 	.word	0x20000130

08004908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
	...

08004918 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <prvResetNextTaskUnblockTime+0x30>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d104      	bne.n	8004930 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <prvResetNextTaskUnblockTime+0x34>)
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800492e:	e005      	b.n	800493c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <prvResetNextTaskUnblockTime+0x30>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a04      	ldr	r2, [pc, #16]	; (800494c <prvResetNextTaskUnblockTime+0x34>)
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000012c 	.word	0x2000012c
 800494c:	2000017c 	.word	0x2000017c

08004950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <xTaskGetSchedulerState+0x34>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d102      	bne.n	8004964 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800495e:	2301      	movs	r3, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	e008      	b.n	8004976 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004964:	4b08      	ldr	r3, [pc, #32]	; (8004988 <xTaskGetSchedulerState+0x38>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800496c:	2302      	movs	r3, #2
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	e001      	b.n	8004976 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004972:	2300      	movs	r3, #0
 8004974:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004976:	687b      	ldr	r3, [r7, #4]
    }
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000168 	.word	0x20000168
 8004988:	20000184 	.word	0x20000184

0800498c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d068      	beq.n	8004a74 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <xTaskPriorityDisinherit+0xf4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d00a      	beq.n	80049c2 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
    }
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	60bb      	str	r3, [r7, #8]
    }
 80049dc:	bf00      	nop
 80049de:	e7fe      	b.n	80049de <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e4:	1e5a      	subs	r2, r3, #1
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d03e      	beq.n	8004a74 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13a      	bne.n	8004a74 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe fc88 	bl	8003318 <uxListRemove>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	2201      	movs	r2, #1
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	43da      	mvns	r2, r3
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <xTaskPriorityDisinherit+0xf8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <xTaskPriorityDisinherit+0xf8>)
 8004a22:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4619      	mov	r1, r3
 8004a28:	204a      	movs	r0, #74	; 0x4a
 8004a2a:	f001 fd75 	bl	8006518 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f1c3 0205 	rsb	r2, r3, #5
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	2201      	movs	r2, #1
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <xTaskPriorityDisinherit+0xf8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <xTaskPriorityDisinherit+0xf8>)
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <xTaskPriorityDisinherit+0xfc>)
 8004a62:	441a      	add	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	f7fe fbf7 	bl	800325e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004a74:	697b      	ldr	r3, [r7, #20]
    }
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	2000009c 	.word	0x2000009c
 8004a84:	20000164 	.word	0x20000164
 8004a88:	200000a0 	.word	0x200000a0

08004a8c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a96:	4b32      	ldr	r3, [pc, #200]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a9c:	4b31      	ldr	r3, [pc, #196]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3304      	adds	r3, #4
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe fc38 	bl	8003318 <uxListRemove>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004aae:	4b2d      	ldr	r3, [pc, #180]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	43da      	mvns	r2, r3
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	4a29      	ldr	r2, [pc, #164]	; (8004b68 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004ac4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d110      	bne.n	8004af0 <prvAddCurrentTaskToDelayedList+0x64>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00d      	beq.n	8004af0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004ad4:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	211b      	movs	r1, #27
 8004ada:	4618      	mov	r0, r3
 8004adc:	f002 faba 	bl	8007054 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae0:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4820      	ldr	r0, [pc, #128]	; (8004b6c <prvAddCurrentTaskToDelayedList+0xe0>)
 8004aea:	f7fe fbb8 	bl	800325e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004aee:	e032      	b.n	8004b56 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d20f      	bcs.n	8004b28 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f002 faa0 	bl	8007054 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe fbc0 	bl	80032a6 <vListInsert>
}
 8004b26:	e016      	b.n	8004b56 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8004b28:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2104      	movs	r1, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f002 fa90 	bl	8007054 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b34:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7fe fbb0 	bl	80032a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xec>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d202      	bcs.n	8004b56 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8004b50:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <prvAddCurrentTaskToDelayedList+0xec>)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6013      	str	r3, [r2, #0]
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000160 	.word	0x20000160
 8004b64:	2000009c 	.word	0x2000009c
 8004b68:	20000164 	.word	0x20000164
 8004b6c:	20000148 	.word	0x20000148
 8004b70:	20000130 	.word	0x20000130
 8004b74:	2000012c 	.word	0x2000012c
 8004b78:	2000017c 	.word	0x2000017c

08004b7c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b86:	f000 fad5 	bl	8005134 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <xTimerCreateTimerTask+0x54>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <xTimerCreateTimerTask+0x58>)
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2302      	movs	r3, #2
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ba0:	490d      	ldr	r1, [pc, #52]	; (8004bd8 <xTimerCreateTimerTask+0x5c>)
 8004ba2:	480e      	ldr	r0, [pc, #56]	; (8004bdc <xTimerCreateTimerTask+0x60>)
 8004ba4:	f7ff f93c 	bl	8003e20 <xTaskCreate>
 8004ba8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	603b      	str	r3, [r7, #0]
    }
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004bc6:	687b      	ldr	r3, [r7, #4]
    }
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	200001b8 	.word	0x200001b8
 8004bd4:	200001bc 	.word	0x200001bc
 8004bd8:	08007e20 	.word	0x08007e20
 8004bdc:	08004d15 	.word	0x08004d15

08004be0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	623b      	str	r3, [r7, #32]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <xTimerGenericCommand+0x98>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02a      	beq.n	8004c6c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b05      	cmp	r3, #5
 8004c26:	dc18      	bgt.n	8004c5a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c28:	f7ff fe92 	bl	8004950 <xTaskGetSchedulerState>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d109      	bne.n	8004c46 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c32:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <xTimerGenericCommand+0x98>)
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	f107 0114 	add.w	r1, r7, #20
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3e:	f7fe fc85 	bl	800354c <xQueueGenericSend>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24
 8004c44:	e012      	b.n	8004c6c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c46:	4b0c      	ldr	r3, [pc, #48]	; (8004c78 <xTimerGenericCommand+0x98>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f107 0114 	add.w	r1, r7, #20
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2200      	movs	r2, #0
 8004c52:	f7fe fc7b 	bl	800354c <xQueueGenericSend>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
 8004c58:	e008      	b.n	8004c6c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <xTimerGenericCommand+0x98>)
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	f107 0114 	add.w	r1, r7, #20
 8004c62:	2300      	movs	r3, #0
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	f7fe fd97 	bl	8003798 <xQueueGenericSendFromISR>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3728      	adds	r7, #40	; 0x28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	200001b8 	.word	0x200001b8

08004c7c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <prvProcessExpiredTimer+0x94>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fb3f 	bl	8003318 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d022      	beq.n	8004cee <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	699a      	ldr	r2, [r3, #24]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	18d1      	adds	r1, r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	6978      	ldr	r0, [r7, #20]
 8004cb6:	f000 f8d1 	bl	8004e5c <prvInsertTimerInActiveList>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01f      	beq.n	8004d00 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	2100      	movs	r1, #0
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f7ff ff88 	bl	8004be0 <xTimerGenericCommand>
 8004cd0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d113      	bne.n	8004d00 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	60fb      	str	r3, [r7, #12]
    }
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	6978      	ldr	r0, [r7, #20]
 8004d06:	4798      	blx	r3
    }
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200001b0 	.word	0x200001b0

08004d14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d1c:	f107 0308 	add.w	r3, r7, #8
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 f857 	bl	8004dd4 <prvGetNextExpireTime>
 8004d26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f803 	bl	8004d38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004d32:	f000 f8d5 	bl	8004ee0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d36:	e7f1      	b.n	8004d1c <prvTimerTask+0x8>

08004d38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004d42:	f7ff fa6b 	bl	800421c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f866 	bl	8004e1c <prvSampleTimeNow>
 8004d50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d130      	bne.n	8004dba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <prvProcessTimerOrBlockTask+0x3c>
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d806      	bhi.n	8004d74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004d66:	f7ff fa67 	bl	8004238 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff ff85 	bl	8004c7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004d72:	e024      	b.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d008      	beq.n	8004d8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d7a:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <prvProcessTimerOrBlockTask+0x90>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <prvProcessTimerOrBlockTask+0x50>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <prvProcessTimerOrBlockTask+0x52>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <prvProcessTimerOrBlockTask+0x94>)
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	f7ff f80d 	bl	8003db8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004d9e:	f7ff fa4b 	bl	8004238 <xTaskResumeAll>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10a      	bne.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004da8:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <prvProcessTimerOrBlockTask+0x98>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
    }
 8004db8:	e001      	b.n	8004dbe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004dba:	f7ff fa3d 	bl	8004238 <xTaskResumeAll>
    }
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200001b4 	.word	0x200001b4
 8004dcc:	200001b8 	.word	0x200001b8
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <prvGetNextExpireTime+0x44>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <prvGetNextExpireTime+0x16>
 8004de6:	2201      	movs	r2, #1
 8004de8:	e000      	b.n	8004dec <prvGetNextExpireTime+0x18>
 8004dea:	2200      	movs	r2, #0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <prvGetNextExpireTime+0x44>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	e001      	b.n	8004e08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004e08:	68fb      	ldr	r3, [r7, #12]
    }
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	200001b0 	.word	0x200001b0

08004e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004e24:	f7ff faa8 	bl	8004378 <xTaskGetTickCount>
 8004e28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <prvSampleTimeNow+0x3c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d205      	bcs.n	8004e40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004e34:	f000 f91a 	bl	800506c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	e002      	b.n	8004e46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004e46:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <prvSampleTimeNow+0x3c>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
    }
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	200001c0 	.word	0x200001c0

08004e5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d812      	bhi.n	8004ea8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e01b      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <prvInsertTimerInActiveList+0x7c>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fe fa00 	bl	80032a6 <vListInsert>
 8004ea6:	e012      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d206      	bcs.n	8004ebe <prvInsertTimerInActiveList+0x62>
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d302      	bcc.n	8004ebe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	e007      	b.n	8004ece <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <prvInsertTimerInActiveList+0x80>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fe f9ec 	bl	80032a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ece:	697b      	ldr	r3, [r7, #20]
    }
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	200001b4 	.word	0x200001b4
 8004edc:	200001b0 	.word	0x200001b0

08004ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b08c      	sub	sp, #48	; 0x30
 8004ee4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee6:	e0ae      	b.n	8005046 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f2c0 80aa 	blt.w	8005044 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	3304      	adds	r3, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fa09 	bl	8003318 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff87 	bl	8004e1c <prvSampleTimeNow>
 8004f0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b09      	cmp	r3, #9
 8004f14:	f200 8097 	bhi.w	8005046 <prvProcessReceivedCommands+0x166>
 8004f18:	a201      	add	r2, pc, #4	; (adr r2, 8004f20 <prvProcessReceivedCommands+0x40>)
 8004f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1e:	bf00      	nop
 8004f20:	08004f49 	.word	0x08004f49
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f49 	.word	0x08004f49
 8004f2c:	08004fbd 	.word	0x08004fbd
 8004f30:	08004fd1 	.word	0x08004fd1
 8004f34:	0800501b 	.word	0x0800501b
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f49 	.word	0x08004f49
 8004f40:	08004fbd 	.word	0x08004fbd
 8004f44:	08004fd1 	.word	0x08004fd1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4e:	f043 0301 	orr.w	r3, r3, #1
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	18d1      	adds	r1, r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a3a      	ldr	r2, [r7, #32]
 8004f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f68:	f7ff ff78 	bl	8004e5c <prvInsertTimerInActiveList>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d069      	beq.n	8005046 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d05e      	beq.n	8005046 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	441a      	add	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	2300      	movs	r3, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9a:	f7ff fe21 	bl	8004be0 <xTimerGenericCommand>
 8004f9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d14f      	bne.n	8005046 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	61bb      	str	r3, [r7, #24]
    }
 8004fb8:	bf00      	nop
 8004fba:	e7fe      	b.n	8004fba <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004fce:	e03a      	b.n	8005046 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	617b      	str	r3, [r7, #20]
    }
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	18d1      	adds	r1, r2, r3
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005014:	f7ff ff22 	bl	8004e5c <prvInsertTimerInActiveList>
                        break;
 8005018:	e015      	b.n	8005046 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502a:	f000 fc6f 	bl	800590c <vPortFree>
 800502e:	e00a      	b.n	8005046 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005036:	f023 0301 	bic.w	r3, r3, #1
 800503a:	b2da      	uxtb	r2, r3
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005042:	e000      	b.n	8005046 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005044:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005046:	4b08      	ldr	r3, [pc, #32]	; (8005068 <prvProcessReceivedCommands+0x188>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f107 0108 	add.w	r1, r7, #8
 800504e:	2200      	movs	r2, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fc5f 	bl	8003914 <xQueueReceive>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f47f af45 	bne.w	8004ee8 <prvProcessReceivedCommands+0x8>
        }
    }
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	200001b8 	.word	0x200001b8

0800506c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005072:	e048      	b.n	8005106 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005074:	4b2d      	ldr	r3, [pc, #180]	; (800512c <prvSwitchTimerLists+0xc0>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507e:	4b2b      	ldr	r3, [pc, #172]	; (800512c <prvSwitchTimerLists+0xc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3304      	adds	r3, #4
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe f943 	bl	8003318 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02e      	beq.n	8005106 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d90e      	bls.n	80050d8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <prvSwitchTimerLists+0xc0>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4619      	mov	r1, r3
 80050d0:	4610      	mov	r0, r2
 80050d2:	f7fe f8e8 	bl	80032a6 <vListInsert>
 80050d6:	e016      	b.n	8005106 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050d8:	2300      	movs	r3, #0
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	2300      	movs	r3, #0
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	2100      	movs	r1, #0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fd7c 	bl	8004be0 <xTimerGenericCommand>
 80050e8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <prvSwitchTimerLists+0x9a>
        __asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	603b      	str	r3, [r7, #0]
    }
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <prvSwitchTimerLists+0xc0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1b1      	bne.n	8005074 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <prvSwitchTimerLists+0xc0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <prvSwitchTimerLists+0xc4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a04      	ldr	r2, [pc, #16]	; (800512c <prvSwitchTimerLists+0xc0>)
 800511c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800511e:	4a04      	ldr	r2, [pc, #16]	; (8005130 <prvSwitchTimerLists+0xc4>)
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	6013      	str	r3, [r2, #0]
    }
 8005124:	bf00      	nop
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	200001b0 	.word	0x200001b0
 8005130:	200001b4 	.word	0x200001b4

08005134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005138:	f000 f9dc 	bl	80054f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <prvCheckForValidListAndQueue+0x54>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005144:	4811      	ldr	r0, [pc, #68]	; (800518c <prvCheckForValidListAndQueue+0x58>)
 8005146:	f7fe f85d 	bl	8003204 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800514a:	4811      	ldr	r0, [pc, #68]	; (8005190 <prvCheckForValidListAndQueue+0x5c>)
 800514c:	f7fe f85a 	bl	8003204 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <prvCheckForValidListAndQueue+0x60>)
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <prvCheckForValidListAndQueue+0x58>)
 8005154:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005156:	4b10      	ldr	r3, [pc, #64]	; (8005198 <prvCheckForValidListAndQueue+0x64>)
 8005158:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <prvCheckForValidListAndQueue+0x5c>)
 800515a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800515c:	2200      	movs	r2, #0
 800515e:	210c      	movs	r1, #12
 8005160:	200a      	movs	r0, #10
 8005162:	f7fe f96b 	bl	800343c <xQueueGenericCreate>
 8005166:	4603      	mov	r3, r0
 8005168:	4a07      	ldr	r2, [pc, #28]	; (8005188 <prvCheckForValidListAndQueue+0x54>)
 800516a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <prvCheckForValidListAndQueue+0x54>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <prvCheckForValidListAndQueue+0x54>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4908      	ldr	r1, [pc, #32]	; (800519c <prvCheckForValidListAndQueue+0x68>)
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe fdea 	bl	8003d54 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005180:	f000 f9e8 	bl	8005554 <vPortExitCritical>
    }
 8005184:	bf00      	nop
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200001b8 	.word	0x200001b8
 800518c:	20000188 	.word	0x20000188
 8005190:	2000019c 	.word	0x2000019c
 8005194:	200001b0 	.word	0x200001b0
 8005198:	200001b4 	.word	0x200001b4
 800519c:	08007e28 	.word	0x08007e28

080051a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3b04      	subs	r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3b04      	subs	r3, #4
 80051be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b04      	subs	r3, #4
 80051ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80051d0:	4a0c      	ldr	r2, [pc, #48]	; (8005204 <pxPortInitialiseStack+0x64>)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3b14      	subs	r3, #20
 80051da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3b04      	subs	r3, #4
 80051e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f06f 0202 	mvn.w	r2, #2
 80051ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3b20      	subs	r3, #32
 80051f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	08005209 	.word	0x08005209

08005208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005212:	4b12      	ldr	r3, [pc, #72]	; (800525c <prvTaskExitError+0x54>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521a:	d00a      	beq.n	8005232 <prvTaskExitError+0x2a>
        __asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	60fb      	str	r3, [r7, #12]
    }
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <prvTaskExitError+0x28>
        __asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
    }
 8005244:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005246:	bf00      	nop
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0fc      	beq.n	8005248 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	20000014 	.word	0x20000014

08005260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005260:	4b07      	ldr	r3, [pc, #28]	; (8005280 <pxCurrentTCBConst2>)
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	6808      	ldr	r0, [r1, #0]
 8005266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	f380 8809 	msr	PSP, r0
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f380 8811 	msr	BASEPRI, r0
 800527a:	4770      	bx	lr
 800527c:	f3af 8000 	nop.w

08005280 <pxCurrentTCBConst2>:
 8005280:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop

08005288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005288:	4808      	ldr	r0, [pc, #32]	; (80052ac <prvPortStartFirstTask+0x24>)
 800528a:	6800      	ldr	r0, [r0, #0]
 800528c:	6800      	ldr	r0, [r0, #0]
 800528e:	f380 8808 	msr	MSP, r0
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f380 8814 	msr	CONTROL, r0
 800529a:	b662      	cpsie	i
 800529c:	b661      	cpsie	f
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	df00      	svc	0
 80052a8:	bf00      	nop
 80052aa:	0000      	.short	0x0000
 80052ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop

080052b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80052ba:	4b46      	ldr	r3, [pc, #280]	; (80053d4 <xPortStartScheduler+0x120>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a46      	ldr	r2, [pc, #280]	; (80053d8 <xPortStartScheduler+0x124>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d10a      	bne.n	80052da <xPortStartScheduler+0x26>
        __asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
    }
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <xPortStartScheduler+0x120>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3f      	ldr	r2, [pc, #252]	; (80053dc <xPortStartScheduler+0x128>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10a      	bne.n	80052fa <xPortStartScheduler+0x46>
        __asm volatile
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	60fb      	str	r3, [r7, #12]
    }
 80052f6:	bf00      	nop
 80052f8:	e7fe      	b.n	80052f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052fa:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <xPortStartScheduler+0x12c>)
 80052fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	22ff      	movs	r2, #255	; 0xff
 800530a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	b2db      	uxtb	r3, r3
 8005312:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800531c:	b2da      	uxtb	r2, r3
 800531e:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <xPortStartScheduler+0x130>)
 8005320:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <xPortStartScheduler+0x134>)
 8005324:	2207      	movs	r2, #7
 8005326:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005328:	e009      	b.n	800533e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <xPortStartScheduler+0x134>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <xPortStartScheduler+0x134>)
 8005332:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	b2db      	uxtb	r3, r3
 800533c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b80      	cmp	r3, #128	; 0x80
 8005348:	d0ef      	beq.n	800532a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800534a:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <xPortStartScheduler+0x134>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1c3 0307 	rsb	r3, r3, #7
 8005352:	2b04      	cmp	r3, #4
 8005354:	d00a      	beq.n	800536c <xPortStartScheduler+0xb8>
        __asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	60bb      	str	r3, [r7, #8]
    }
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <xPortStartScheduler+0x134>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <xPortStartScheduler+0x134>)
 8005374:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005376:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <xPortStartScheduler+0x134>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800537e:	4a1a      	ldr	r2, [pc, #104]	; (80053e8 <xPortStartScheduler+0x134>)
 8005380:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800538a:	4b18      	ldr	r3, [pc, #96]	; (80053ec <xPortStartScheduler+0x138>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a17      	ldr	r2, [pc, #92]	; (80053ec <xPortStartScheduler+0x138>)
 8005390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005394:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <xPortStartScheduler+0x138>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <xPortStartScheduler+0x138>)
 800539c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80053a2:	f000 f963 	bl	800566c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <xPortStartScheduler+0x13c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80053ac:	f000 f982 	bl	80056b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b0:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0f      	ldr	r2, [pc, #60]	; (80053f4 <xPortStartScheduler+0x140>)
 80053b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80053bc:	f7ff ff64 	bl	8005288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80053c0:	f7ff f8a6 	bl	8004510 <vTaskSwitchContext>
    prvTaskExitError();
 80053c4:	f7ff ff20 	bl	8005208 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000ed00 	.word	0xe000ed00
 80053d8:	410fc271 	.word	0x410fc271
 80053dc:	410fc270 	.word	0x410fc270
 80053e0:	e000e400 	.word	0xe000e400
 80053e4:	200001c4 	.word	0x200001c4
 80053e8:	200001c8 	.word	0x200001c8
 80053ec:	e000ed20 	.word	0xe000ed20
 80053f0:	20000014 	.word	0x20000014
 80053f4:	e000ef34 	.word	0xe000ef34

080053f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <vInitPrioGroupValue+0xe4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <vInitPrioGroupValue+0xe8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d10a      	bne.n	800541e <vInitPrioGroupValue+0x26>
        __asm volatile
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	613b      	str	r3, [r7, #16]
    }
 800541a:	bf00      	nop
 800541c:	e7fe      	b.n	800541c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800541e:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <vInitPrioGroupValue+0xe4>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a30      	ldr	r2, [pc, #192]	; (80054e4 <vInitPrioGroupValue+0xec>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10a      	bne.n	800543e <vInitPrioGroupValue+0x46>
        __asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
    }
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <vInitPrioGroupValue+0xf0>)
 8005440:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b22      	ldr	r3, [pc, #136]	; (80054ec <vInitPrioGroupValue+0xf4>)
 8005464:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005468:	2207      	movs	r2, #7
 800546a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800546c:	e009      	b.n	8005482 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005476:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d0ef      	beq.n	800546e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800548e:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1c3 0307 	rsb	r3, r3, #7
 8005496:	2b04      	cmp	r3, #4
 8005498:	d00a      	beq.n	80054b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60bb      	str	r3, [r7, #8]
    }
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	021b      	lsls	r3, r3, #8
 80054b6:	4a0e      	ldr	r2, [pc, #56]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054c2:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <vInitPrioGroupValue+0xf8>)
 80054c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000ed00 	.word	0xe000ed00
 80054e0:	410fc271 	.word	0x410fc271
 80054e4:	410fc270 	.word	0x410fc270
 80054e8:	e000e400 	.word	0xe000e400
 80054ec:	200001c4 	.word	0x200001c4
 80054f0:	200001c8 	.word	0x200001c8

080054f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
        __asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	607b      	str	r3, [r7, #4]
    }
 800550c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <vPortEnterCritical+0x58>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <vPortEnterCritical+0x58>)
 8005516:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <vPortEnterCritical+0x58>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d10f      	bne.n	8005540 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <vPortEnterCritical+0x5c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <vPortEnterCritical+0x4c>
        __asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
    }
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <vPortEnterCritical+0x4a>
    }
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	20000014 	.word	0x20000014
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <vPortExitCritical+0x50>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10a      	bne.n	8005578 <vPortExitCritical+0x24>
        __asm volatile
 8005562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005566:	f383 8811 	msr	BASEPRI, r3
 800556a:	f3bf 8f6f 	isb	sy
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	607b      	str	r3, [r7, #4]
    }
 8005574:	bf00      	nop
 8005576:	e7fe      	b.n	8005576 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005578:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <vPortExitCritical+0x50>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <vPortExitCritical+0x50>)
 8005580:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005582:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <vPortExitCritical+0x50>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d105      	bne.n	8005596 <vPortExitCritical+0x42>
 800558a:	2300      	movs	r3, #0
 800558c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f383 8811 	msr	BASEPRI, r3
    }
 8005594:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000014 	.word	0x20000014
	...

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f7fe ff96 	bl	8004510 <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
        __asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
    }
 8005630:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8005632:	f001 fbb3 	bl	8006d9c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005636:	f7fe feaf 	bl	8004398 <xTaskIncrementTick>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8005640:	f001 fc0a 	bl	8006e58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <SysTick_Handler+0x50>)
 8005646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564a:	601a      	str	r2, [r3, #0]
 800564c:	e001      	b.n	8005652 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800564e:	f001 fbe7 	bl	8006e20 <SEGGER_SYSVIEW_RecordExitISR>
 8005652:	2300      	movs	r3, #0
 8005654:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	f383 8811 	msr	BASEPRI, r3
    }
 800565c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800565e:	bf00      	nop
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005676:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <vPortSetupTimerInterrupt+0x38>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <vPortSetupTimerInterrupt+0x3c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <vPortSetupTimerInterrupt+0x40>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	4a09      	ldr	r2, [pc, #36]	; (80056b0 <vPortSetupTimerInterrupt+0x44>)
 800568a:	3b01      	subs	r3, #1
 800568c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568e:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <vPortSetupTimerInterrupt+0x34>)
 8005690:	2207      	movs	r2, #7
 8005692:	601a      	str	r2, [r3, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	e000e010 	.word	0xe000e010
 80056a4:	e000e018 	.word	0xe000e018
 80056a8:	20000004 	.word	0x20000004
 80056ac:	10624dd3 	.word	0x10624dd3
 80056b0:	e000e014 	.word	0xe000e014

080056b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80056b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80056c4 <vPortEnableVFP+0x10>
 80056b8:	6801      	ldr	r1, [r0, #0]
 80056ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80056be:	6001      	str	r1, [r0, #0]
 80056c0:	4770      	bx	lr
 80056c2:	0000      	.short	0x0000
 80056c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop

080056cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80056d2:	f3ef 8305 	mrs	r3, IPSR
 80056d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d914      	bls.n	8005708 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <vPortValidateInterruptPriority+0x70>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <vPortValidateInterruptPriority+0x74>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	7afa      	ldrb	r2, [r7, #11]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d20a      	bcs.n	8005708 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	607b      	str	r3, [r7, #4]
    }
 8005704:	bf00      	nop
 8005706:	e7fe      	b.n	8005706 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <vPortValidateInterruptPriority+0x78>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005710:	4b0d      	ldr	r3, [pc, #52]	; (8005748 <vPortValidateInterruptPriority+0x7c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	429a      	cmp	r2, r3
 8005716:	d90a      	bls.n	800572e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	603b      	str	r3, [r7, #0]
    }
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <vPortValidateInterruptPriority+0x60>
    }
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	e000e3f0 	.word	0xe000e3f0
 8005740:	200001c4 	.word	0x200001c4
 8005744:	e000ed0c 	.word	0xe000ed0c
 8005748:	200001c8 	.word	0x200001c8

0800574c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005758:	f7fe fd60 	bl	800421c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800575c:	4b65      	ldr	r3, [pc, #404]	; (80058f4 <pvPortMalloc+0x1a8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005764:	f000 f934 	bl	80059d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005768:	4b63      	ldr	r3, [pc, #396]	; (80058f8 <pvPortMalloc+0x1ac>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 80a7 	bne.w	80058c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02d      	beq.n	80057d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800577c:	2208      	movs	r2, #8
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d227      	bcs.n	80057d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005788:	2208      	movs	r2, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4413      	add	r3, r2
 800578e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f003 0307 	and.w	r3, r3, #7
 8005796:	2b00      	cmp	r3, #0
 8005798:	d021      	beq.n	80057de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f023 0307 	bic.w	r3, r3, #7
 80057a0:	3308      	adds	r3, #8
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d214      	bcs.n	80057d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	3308      	adds	r3, #8
 80057b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <pvPortMalloc+0x92>
        __asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	617b      	str	r3, [r7, #20]
    }
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057d6:	e002      	b.n	80057de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	607b      	str	r3, [r7, #4]
 80057dc:	e000      	b.n	80057e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d06e      	beq.n	80058c4 <pvPortMalloc+0x178>
 80057e6:	4b45      	ldr	r3, [pc, #276]	; (80058fc <pvPortMalloc+0x1b0>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d869      	bhi.n	80058c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80057f0:	4b43      	ldr	r3, [pc, #268]	; (8005900 <pvPortMalloc+0x1b4>)
 80057f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80057f4:	4b42      	ldr	r3, [pc, #264]	; (8005900 <pvPortMalloc+0x1b4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057fa:	e004      	b.n	8005806 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d903      	bls.n	8005818 <pvPortMalloc+0xcc>
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f1      	bne.n	80057fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005818:	4b36      	ldr	r3, [pc, #216]	; (80058f4 <pvPortMalloc+0x1a8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	429a      	cmp	r2, r3
 8005820:	d050      	beq.n	80058c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2208      	movs	r2, #8
 8005828:	4413      	add	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	2308      	movs	r3, #8
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	429a      	cmp	r2, r3
 8005842:	d91f      	bls.n	8005884 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <pvPortMalloc+0x120>
        __asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	613b      	str	r3, [r7, #16]
    }
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	1ad2      	subs	r2, r2, r3
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800587e:	69b8      	ldr	r0, [r7, #24]
 8005880:	f000 f908 	bl	8005a94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <pvPortMalloc+0x1b0>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <pvPortMalloc+0x1b0>)
 8005890:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005892:	4b1a      	ldr	r3, [pc, #104]	; (80058fc <pvPortMalloc+0x1b0>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <pvPortMalloc+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d203      	bcs.n	80058a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800589e:	4b17      	ldr	r3, [pc, #92]	; (80058fc <pvPortMalloc+0x1b0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <pvPortMalloc+0x1b8>)
 80058a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <pvPortMalloc+0x1ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <pvPortMalloc+0x1bc>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	4a11      	ldr	r2, [pc, #68]	; (8005908 <pvPortMalloc+0x1bc>)
 80058c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80058c4:	f7fe fcb8 	bl	8004238 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <pvPortMalloc+0x19c>
        __asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	60fb      	str	r3, [r7, #12]
    }
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80058e8:	69fb      	ldr	r3, [r7, #28]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3728      	adds	r7, #40	; 0x28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20012dd4 	.word	0x20012dd4
 80058f8:	20012de8 	.word	0x20012de8
 80058fc:	20012dd8 	.word	0x20012dd8
 8005900:	20012dcc 	.word	0x20012dcc
 8005904:	20012ddc 	.word	0x20012ddc
 8005908:	20012de0 	.word	0x20012de0

0800590c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d04d      	beq.n	80059ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800591e:	2308      	movs	r3, #8
 8005920:	425b      	negs	r3, r3
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4b24      	ldr	r3, [pc, #144]	; (80059c4 <vPortFree+0xb8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <vPortFree+0x44>
        __asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	60fb      	str	r3, [r7, #12]
    }
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <vPortFree+0x62>
        __asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	60bb      	str	r3, [r7, #8]
    }
 800596a:	bf00      	nop
 800596c:	e7fe      	b.n	800596c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <vPortFree+0xb8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01e      	beq.n	80059ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d11a      	bne.n	80059ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <vPortFree+0xb8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005994:	f7fe fc42 	bl	800421c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <vPortFree+0xbc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4413      	add	r3, r2
 80059a2:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <vPortFree+0xbc>)
 80059a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059a6:	6938      	ldr	r0, [r7, #16]
 80059a8:	f000 f874 	bl	8005a94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <vPortFree+0xc0>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	4a06      	ldr	r2, [pc, #24]	; (80059cc <vPortFree+0xc0>)
 80059b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80059b6:	f7fe fc3f 	bl	8004238 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20012de8 	.word	0x20012de8
 80059c8:	20012dd8 	.word	0x20012dd8
 80059cc:	20012de4 	.word	0x20012de4

080059d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80059da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80059dc:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <prvHeapInit+0xac>)
 80059de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3307      	adds	r3, #7
 80059ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0307 	bic.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <prvHeapInit+0xac>)
 8005a00:	4413      	add	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a08:	4a1d      	ldr	r2, [pc, #116]	; (8005a80 <prvHeapInit+0xb0>)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <prvHeapInit+0xb0>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4413      	add	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0307 	bic.w	r3, r3, #7
 8005a2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	; (8005a84 <prvHeapInit+0xb4>)
 8005a30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005a32:	4b14      	ldr	r3, [pc, #80]	; (8005a84 <prvHeapInit+0xb4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2200      	movs	r2, #0
 8005a38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <prvHeapInit+0xb4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	1ad2      	subs	r2, r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a50:	4b0c      	ldr	r3, [pc, #48]	; (8005a84 <prvHeapInit+0xb4>)
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <prvHeapInit+0xb8>)
 8005a5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <prvHeapInit+0xbc>)
 8005a66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a68:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <prvHeapInit+0xc0>)
 8005a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a6e:	601a      	str	r2, [r3, #0]
}
 8005a70:	bf00      	nop
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	200001cc 	.word	0x200001cc
 8005a80:	20012dcc 	.word	0x20012dcc
 8005a84:	20012dd4 	.word	0x20012dd4
 8005a88:	20012ddc 	.word	0x20012ddc
 8005a8c:	20012dd8 	.word	0x20012dd8
 8005a90:	20012de8 	.word	0x20012de8

08005a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a9c:	4b28      	ldr	r3, [pc, #160]	; (8005b40 <prvInsertBlockIntoFreeList+0xac>)
 8005a9e:	60fb      	str	r3, [r7, #12]
 8005aa0:	e002      	b.n	8005aa8 <prvInsertBlockIntoFreeList+0x14>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d8f7      	bhi.n	8005aa2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	4413      	add	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d108      	bne.n	8005ad6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	441a      	add	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	441a      	add	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d118      	bne.n	8005b1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <prvInsertBlockIntoFreeList+0xb0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d00d      	beq.n	8005b12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	e008      	b.n	8005b24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <prvInsertBlockIntoFreeList+0xb0>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	e003      	b.n	8005b24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d002      	beq.n	8005b32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20012dcc 	.word	0x20012dcc
 8005b44:	20012dd4 	.word	0x20012dd4

08005b48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005b56:	2205      	movs	r2, #5
 8005b58:	492b      	ldr	r1, [pc, #172]	; (8005c08 <SYSVIEW_AddTask+0xc0>)
 8005b5a:	68b8      	ldr	r0, [r7, #8]
 8005b5c:	f001 fc5e 	bl	800741c <memcmp>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d04b      	beq.n	8005bfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	d903      	bls.n	8005b76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005b6e:	4828      	ldr	r0, [pc, #160]	; (8005c10 <SYSVIEW_AddTask+0xc8>)
 8005b70:	f001 fbbc 	bl	80072ec <SEGGER_SYSVIEW_Warn>
    return;
 8005b74:	e044      	b.n	8005c00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005b76:	4b25      	ldr	r3, [pc, #148]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4926      	ldr	r1, [pc, #152]	; (8005c14 <SYSVIEW_AddTask+0xcc>)
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4921      	ldr	r1, [pc, #132]	; (8005c14 <SYSVIEW_AddTask+0xcc>)
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005ba0:	4b1a      	ldr	r3, [pc, #104]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	491b      	ldr	r1, [pc, #108]	; (8005c14 <SYSVIEW_AddTask+0xcc>)
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3308      	adds	r3, #8
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4916      	ldr	r1, [pc, #88]	; (8005c14 <SYSVIEW_AddTask+0xcc>)
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	440b      	add	r3, r1
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4910      	ldr	r1, [pc, #64]	; (8005c14 <SYSVIEW_AddTask+0xcc>)
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	440b      	add	r3, r1
 8005bdc:	3310      	adds	r3, #16
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <SYSVIEW_AddTask+0xc4>)
 8005bea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f000 f80e 	bl	8005c18 <SYSVIEW_SendTaskInfo>
 8005bfc:	e000      	b.n	8005c00 <SYSVIEW_AddTask+0xb8>
    return;
 8005bfe:	bf00      	nop

}
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	08007e30 	.word	0x08007e30
 8005c0c:	20012e8c 	.word	0x20012e8c
 8005c10:	08007e38 	.word	0x08007e38
 8005c14:	20012dec 	.word	0x20012dec

08005c18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005c26:	f107 0314 	add.w	r3, r7, #20
 8005c2a:	2214      	movs	r2, #20
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fc10 	bl	8007454 <memset>
  TaskInfo.TaskID     = TaskID;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 ff7b 	bl	8006b48 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005c52:	bf00      	nop
 8005c54:	3728      	adds	r7, #40	; 0x28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <_DoInit+0x98>)
 8005c64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2203      	movs	r2, #3
 8005c6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2203      	movs	r2, #3
 8005c70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <_DoInit+0x9c>)
 8005c76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a20      	ldr	r2, [pc, #128]	; (8005cfc <_DoInit+0xa0>)
 8005c7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <_DoInit+0x9c>)
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <_DoInit+0xa4>)
 8005ca2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2210      	movs	r2, #16
 8005ca8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <_DoInit+0xa8>)
 8005cc2:	6810      	ldr	r0, [r2, #0]
 8005cc4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005cc6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0e      	ldr	r2, [pc, #56]	; (8005d08 <_DoInit+0xac>)
 8005cce:	6810      	ldr	r0, [r2, #0]
 8005cd0:	6018      	str	r0, [r3, #0]
 8005cd2:	8891      	ldrh	r1, [r2, #4]
 8005cd4:	7992      	ldrb	r2, [r2, #6]
 8005cd6:	8099      	strh	r1, [r3, #4]
 8005cd8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005cda:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005ce4:	f3bf 8f5f 	dmb	sy
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	20013498 	.word	0x20013498
 8005cf8:	08007e88 	.word	0x08007e88
 8005cfc:	20012e90 	.word	0x20012e90
 8005d00:	20013290 	.word	0x20013290
 8005d04:	08007e94 	.word	0x08007e94
 8005d08:	08007e98 	.word	0x08007e98

08005d0c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	; 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d905      	bls.n	8005d3c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
 8005d3a:	e007      	b.n	8005d4c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	1acb      	subs	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bf28      	it	cs
 8005d5a:	4613      	movcs	r3, r2
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4293      	cmp	r3, r2
 8005d64:	bf28      	it	cs
 8005d66:	4613      	movcs	r3, r2
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f001 fb5d 	bl	8007438 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005d7e:	6a3a      	ldr	r2, [r7, #32]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	4413      	add	r3, r2
 8005d84:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	4413      	add	r3, r2
 8005d8c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	69fa      	ldr	r2, [r7, #28]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d101      	bne.n	8005dac <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1b2      	bne.n	8005d22 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3728      	adds	r7, #40	; 0x28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b088      	sub	sp, #32
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d911      	bls.n	8005e0e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	6938      	ldr	r0, [r7, #16]
 8005dfa:	f001 fb1d 	bl	8007438 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005dfe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005e0c:	e01f      	b.n	8005e4e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	68b9      	ldr	r1, [r7, #8]
 8005e20:	6938      	ldr	r0, [r7, #16]
 8005e22:	f001 fb09 	bl	8007438 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	4413      	add	r3, r2
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6938      	ldr	r0, [r7, #16]
 8005e40:	f001 fafa 	bl	8007438 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005e44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	60da      	str	r2, [r3, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005e56:	b480      	push	{r7}
 8005e58:	b087      	sub	sp, #28
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d808      	bhi.n	8005e84 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e004      	b.n	8005e8e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005e8e:	697b      	ldr	r3, [r7, #20]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08c      	sub	sp, #48	; 0x30
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005ea8:	4b3e      	ldr	r3, [pc, #248]	; (8005fa4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <SEGGER_RTT_ReadNoLock+0x1e>
 8005eb6:	f7ff fed1 	bl	8005c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	3360      	adds	r3, #96	; 0x60
 8005ec6:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d92b      	bls.n	8005f40 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	bf28      	it	cs
 8005efa:	4613      	movcs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	4413      	add	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f0e:	f001 fa93 	bl	8007438 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4413      	add	r3, r2
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d101      	bne.n	8005f40 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	bf28      	it	cs
 8005f50:	4613      	movcs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d019      	beq.n	8005f8e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	4413      	add	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f6a:	f001 fa65 	bl	8007438 <memcpy>
    NumBytesRead += NumBytesRem;
 8005f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4413      	add	r3, r2
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f98:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3730      	adds	r7, #48	; 0x30
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20013498 	.word	0x20013498

08005fa8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4413      	add	r3, r2
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005fc6:	4413      	add	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d029      	beq.n	8006026 <SEGGER_RTT_WriteNoLock+0x7e>
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d82e      	bhi.n	8006034 <SEGGER_RTT_WriteNoLock+0x8c>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <SEGGER_RTT_WriteNoLock+0x38>
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d013      	beq.n	8006006 <SEGGER_RTT_WriteNoLock+0x5e>
 8005fde:	e029      	b.n	8006034 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f7ff ff38 	bl	8005e56 <_GetAvailWriteSpace>
 8005fe6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d202      	bcs.n	8005ff6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005ff4:	e021      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	69b9      	ldr	r1, [r7, #24]
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff fee1 	bl	8005dc6 <_WriteNoCheck>
    break;
 8006004:	e019      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8006006:	6978      	ldr	r0, [r7, #20]
 8006008:	f7ff ff25 	bl	8005e56 <_GetAvailWriteSpace>
 800600c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4293      	cmp	r3, r2
 8006014:	bf28      	it	cs
 8006016:	4613      	movcs	r3, r2
 8006018:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7ff fed1 	bl	8005dc6 <_WriteNoCheck>
    break;
 8006024:	e009      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	69b9      	ldr	r1, [r7, #24]
 800602a:	6978      	ldr	r0, [r7, #20]
 800602c:	f7ff fe6e 	bl	8005d0c <_WriteBlocking>
 8006030:	61f8      	str	r0, [r7, #28]
    break;
 8006032:	e002      	b.n	800603a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
    break;
 8006038:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800603a:	69fb      	ldr	r3, [r7, #28]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20013498 	.word	0x20013498

08006048 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b088      	sub	sp, #32
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <SEGGER_RTT_Write+0x48>)
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <SEGGER_RTT_Write+0x1e>
 8006062:	f7ff fdfb 	bl	8005c5c <_DoInit>
  SEGGER_RTT_LOCK();
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff95 	bl	8005fa8 <SEGGER_RTT_WriteNoLock>
 800607e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8006086:	697b      	ldr	r3, [r7, #20]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20013498 	.word	0x20013498

08006094 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80060a4:	e002      	b.n	80060ac <_EncodeStr+0x18>
    Len++;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f6      	bne.n	80060a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d901      	bls.n	80060c4 <_EncodeStr+0x30>
    Len = Limit;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2bfe      	cmp	r3, #254	; 0xfe
 80060c8:	d806      	bhi.n	80060d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	60fa      	str	r2, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	e011      	b.n	80060fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	60fa      	str	r2, [r7, #12]
 80060de:	22ff      	movs	r2, #255	; 0xff
 80060e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	60fa      	str	r2, [r7, #12]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	0a19      	lsrs	r1, r3, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	60fa      	str	r2, [r7, #12]
 80060f8:	b2ca      	uxtb	r2, r1
 80060fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006100:	e00a      	b.n	8006118 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	1c53      	adds	r3, r2, #1
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	1c59      	adds	r1, r3, #1
 800610c:	60f9      	str	r1, [r7, #12]
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	701a      	strb	r2, [r3, #0]
    n++;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	3301      	adds	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	429a      	cmp	r2, r3
 800611e:	d3f0      	bcc.n	8006102 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	371c      	adds	r7, #28
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800614e:	4b36      	ldr	r3, [pc, #216]	; (8006228 <_HandleIncomingPacket+0xe0>)
 8006150:	7e1b      	ldrb	r3, [r3, #24]
 8006152:	4618      	mov	r0, r3
 8006154:	1cfb      	adds	r3, r7, #3
 8006156:	2201      	movs	r2, #1
 8006158:	4619      	mov	r1, r3
 800615a:	f7ff fe9f 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
 800615e:	4603      	mov	r3, r0
 8006160:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd54      	ble.n	8006212 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d032      	beq.n	80061d4 <_HandleIncomingPacket+0x8c>
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	dc42      	bgt.n	80061f8 <_HandleIncomingPacket+0xb0>
 8006172:	2b07      	cmp	r3, #7
 8006174:	dc16      	bgt.n	80061a4 <_HandleIncomingPacket+0x5c>
 8006176:	2b00      	cmp	r3, #0
 8006178:	dd3e      	ble.n	80061f8 <_HandleIncomingPacket+0xb0>
 800617a:	3b01      	subs	r3, #1
 800617c:	2b06      	cmp	r3, #6
 800617e:	d83b      	bhi.n	80061f8 <_HandleIncomingPacket+0xb0>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <_HandleIncomingPacket+0x40>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ab 	.word	0x080061ab
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b7 	.word	0x080061b7
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c3 	.word	0x080061c3
 800619c:	080061c9 	.word	0x080061c9
 80061a0:	080061cf 	.word	0x080061cf
 80061a4:	2b7f      	cmp	r3, #127	; 0x7f
 80061a6:	d036      	beq.n	8006216 <_HandleIncomingPacket+0xce>
 80061a8:	e026      	b.n	80061f8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80061aa:	f000 fb53 	bl	8006854 <SEGGER_SYSVIEW_Start>
      break;
 80061ae:	e037      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80061b0:	f000 fc0a 	bl	80069c8 <SEGGER_SYSVIEW_Stop>
      break;
 80061b4:	e034      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80061b6:	f000 fdbf 	bl	8006d38 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80061ba:	e031      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80061bc:	f000 fda8 	bl	8006d10 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80061c0:	e02e      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80061c2:	f000 fc27 	bl	8006a14 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80061c6:	e02b      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80061c8:	f001 f852 	bl	8007270 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80061cc:	e028      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80061ce:	f001 f831 	bl	8007234 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80061d2:	e025      	b.n	8006220 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80061d4:	4b14      	ldr	r3, [pc, #80]	; (8006228 <_HandleIncomingPacket+0xe0>)
 80061d6:	7e1b      	ldrb	r3, [r3, #24]
 80061d8:	4618      	mov	r0, r3
 80061da:	1cfb      	adds	r3, r7, #3
 80061dc:	2201      	movs	r2, #1
 80061de:	4619      	mov	r1, r3
 80061e0:	f7ff fe5c 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
 80061e4:	4603      	mov	r3, r0
 80061e6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dd15      	ble.n	800621a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 ff9f 	bl	8007134 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80061f6:	e010      	b.n	800621a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	b25b      	sxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da0e      	bge.n	800621e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006200:	4b09      	ldr	r3, [pc, #36]	; (8006228 <_HandleIncomingPacket+0xe0>)
 8006202:	7e1b      	ldrb	r3, [r3, #24]
 8006204:	4618      	mov	r0, r3
 8006206:	1cfb      	adds	r3, r7, #3
 8006208:	2201      	movs	r2, #1
 800620a:	4619      	mov	r1, r3
 800620c:	f7ff fe46 	bl	8005e9c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006210:	e005      	b.n	800621e <_HandleIncomingPacket+0xd6>
    }
  }
 8006212:	bf00      	nop
 8006214:	e004      	b.n	8006220 <_HandleIncomingPacket+0xd8>
      break;
 8006216:	bf00      	nop
 8006218:	e002      	b.n	8006220 <_HandleIncomingPacket+0xd8>
      break;
 800621a:	bf00      	nop
 800621c:	e000      	b.n	8006220 <_HandleIncomingPacket+0xd8>
      break;
 800621e:	bf00      	nop
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	200132a0 	.word	0x200132a0

0800622c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	; 0x30
 8006230:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006232:	2301      	movs	r3, #1
 8006234:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006240:	4b31      	ldr	r3, [pc, #196]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	62bb      	str	r3, [r7, #40]	; 0x28
 8006246:	e00b      	b.n	8006260 <_TrySendOverflowPacket+0x34>
 8006248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624a:	b2da      	uxtb	r2, r3
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	2b7f      	cmp	r3, #127	; 0x7f
 8006264:	d8f0      	bhi.n	8006248 <_TrySendOverflowPacket+0x1c>
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800626c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006276:	4b25      	ldr	r3, [pc, #148]	; (800630c <_TrySendOverflowPacket+0xe0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800627c:	4b22      	ldr	r3, [pc, #136]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	623b      	str	r3, [r7, #32]
 800628e:	e00b      	b.n	80062a8 <_TrySendOverflowPacket+0x7c>
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	1c59      	adds	r1, r3, #1
 8006298:	6279      	str	r1, [r7, #36]	; 0x24
 800629a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	09db      	lsrs	r3, r3, #7
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b7f      	cmp	r3, #127	; 0x7f
 80062ac:	d8f0      	bhi.n	8006290 <_TrySendOverflowPacket+0x64>
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	627a      	str	r2, [r7, #36]	; 0x24
 80062b4:	6a3a      	ldr	r2, [r7, #32]
 80062b6:	b2d2      	uxtb	r2, r2
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80062be:	4b12      	ldr	r3, [pc, #72]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	4618      	mov	r0, r3
 80062c4:	1d3b      	adds	r3, r7, #4
 80062c6:	69fa      	ldr	r2, [r7, #28]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	461a      	mov	r2, r3
 80062cc:	1d3b      	adds	r3, r7, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	f7f9 ff7e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80062d4:	4603      	mov	r3, r0
 80062d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062ee:	701a      	strb	r2, [r3, #0]
 80062f0:	e004      	b.n	80062fc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80062f2:	4b05      	ldr	r3, [pc, #20]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	3301      	adds	r3, #1
 80062f8:	4a03      	ldr	r2, [pc, #12]	; (8006308 <_TrySendOverflowPacket+0xdc>)
 80062fa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80062fc:	693b      	ldr	r3, [r7, #16]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3730      	adds	r7, #48	; 0x30
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200132a0 	.word	0x200132a0
 800630c:	e0001004 	.word	0xe0001004

08006310 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08a      	sub	sp, #40	; 0x28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800631c:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <_SendPacket+0x1c0>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d010      	beq.n	8006346 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006324:	4b6a      	ldr	r3, [pc, #424]	; (80064d0 <_SendPacket+0x1c0>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80a3 	beq.w	8006474 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800632e:	4b68      	ldr	r3, [pc, #416]	; (80064d0 <_SendPacket+0x1c0>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d109      	bne.n	800634a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006336:	f7ff ff79 	bl	800622c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800633a:	4b65      	ldr	r3, [pc, #404]	; (80064d0 <_SendPacket+0x1c0>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b01      	cmp	r3, #1
 8006340:	f040 809a 	bne.w	8006478 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006344:	e001      	b.n	800634a <_SendPacket+0x3a>
    goto Send;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <_SendPacket+0x3c>
Send:
 800634a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b1f      	cmp	r3, #31
 8006350:	d809      	bhi.n	8006366 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006352:	4b5f      	ldr	r3, [pc, #380]	; (80064d0 <_SendPacket+0x1c0>)
 8006354:	69da      	ldr	r2, [r3, #28]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b00      	cmp	r3, #0
 8006362:	f040 808b 	bne.w	800647c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b17      	cmp	r3, #23
 800636a:	d807      	bhi.n	800637c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3b01      	subs	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e03d      	b.n	80063f8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	2b7f      	cmp	r3, #127	; 0x7f
 8006388:	d912      	bls.n	80063b0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	09da      	lsrs	r2, r3, #7
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b01      	subs	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	3a01      	subs	r2, #1
 80063a2:	60fa      	str	r2, [r7, #12]
 80063a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	e006      	b.n	80063be <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d912      	bls.n	80063ea <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	09da      	lsrs	r2, r3, #7
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	3a01      	subs	r2, #1
 80063dc:	60fa      	str	r2, [r7, #12]
 80063de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	e006      	b.n	80063f8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80063f8:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <_SendPacket+0x1c4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80063fe:	4b34      	ldr	r3, [pc, #208]	; (80064d0 <_SendPacket+0x1c0>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	e00b      	b.n	800642a <_SendPacket+0x11a>
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	6279      	str	r1, [r7, #36]	; 0x24
 800641c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	623b      	str	r3, [r7, #32]
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b7f      	cmp	r3, #127	; 0x7f
 800642e:	d8f0      	bhi.n	8006412 <_SendPacket+0x102>
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	627a      	str	r2, [r7, #36]	; 0x24
 8006436:	6a3a      	ldr	r2, [r7, #32]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006440:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <_SendPacket+0x1c0>)
 8006442:	785b      	ldrb	r3, [r3, #1]
 8006444:	4618      	mov	r0, r3
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	461a      	mov	r2, r3
 800644e:	68f9      	ldr	r1, [r7, #12]
 8006450:	f7f9 febe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006454:	4603      	mov	r3, r0
 8006456:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800645e:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <_SendPacket+0x1c0>)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	60d3      	str	r3, [r2, #12]
 8006464:	e00b      	b.n	800647e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <_SendPacket+0x1c0>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	3301      	adds	r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <_SendPacket+0x1c0>)
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	e004      	b.n	800647e <_SendPacket+0x16e>
    goto SendDone;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <_SendPacket+0x16e>
      goto SendDone;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <_SendPacket+0x16e>
      goto SendDone;
 800647c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800647e:	4b14      	ldr	r3, [pc, #80]	; (80064d0 <_SendPacket+0x1c0>)
 8006480:	7e1b      	ldrb	r3, [r3, #24]
 8006482:	4619      	mov	r1, r3
 8006484:	4a14      	ldr	r2, [pc, #80]	; (80064d8 <_SendPacket+0x1c8>)
 8006486:	460b      	mov	r3, r1
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	440b      	add	r3, r1
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	336c      	adds	r3, #108	; 0x6c
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <_SendPacket+0x1c0>)
 8006496:	7e1b      	ldrb	r3, [r3, #24]
 8006498:	4618      	mov	r0, r3
 800649a:	490f      	ldr	r1, [pc, #60]	; (80064d8 <_SendPacket+0x1c8>)
 800649c:	4603      	mov	r3, r0
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4403      	add	r3, r0
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	440b      	add	r3, r1
 80064a6:	3370      	adds	r3, #112	; 0x70
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d00b      	beq.n	80064c6 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <_SendPacket+0x1c0>)
 80064b0:	789b      	ldrb	r3, [r3, #2]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <_SendPacket+0x1c0>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80064bc:	f7ff fe44 	bl	8006148 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <_SendPacket+0x1c0>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80064c6:	bf00      	nop
 80064c8:	3728      	adds	r7, #40	; 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200132a0 	.word	0x200132a0
 80064d4:	e0001004 	.word	0xe0001004
 80064d8:	20013498 	.word	0x20013498

080064dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064e4:	f3ef 8311 	mrs	r3, BASEPRI
 80064e8:	f04f 0120 	mov.w	r1, #32
 80064ec:	f381 8811 	msr	BASEPRI, r1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	4808      	ldr	r0, [pc, #32]	; (8006514 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80064f4:	f7ff fe1b 	bl	800612e <_PreparePacket>
 80064f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68b8      	ldr	r0, [r7, #8]
 8006500:	f7ff ff06 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f383 8811 	msr	BASEPRI, r3
}
 800650a:	bf00      	nop
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	200132d0 	.word	0x200132d0

08006518 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006522:	f3ef 8311 	mrs	r3, BASEPRI
 8006526:	f04f 0120 	mov.w	r1, #32
 800652a:	f381 8811 	msr	BASEPRI, r1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	4816      	ldr	r0, [pc, #88]	; (800658c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006532:	f7ff fdfc 	bl	800612e <_PreparePacket>
 8006536:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e00b      	b.n	800655e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	61f9      	str	r1, [r7, #28]
 8006550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	09db      	lsrs	r3, r3, #7
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b7f      	cmp	r3, #127	; 0x7f
 8006562:	d8f0      	bhi.n	8006546 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	61fa      	str	r2, [r7, #28]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	68f9      	ldr	r1, [r7, #12]
 8006578:	6938      	ldr	r0, [r7, #16]
 800657a:	f7ff fec9 	bl	8006310 <_SendPacket>
  RECORD_END();
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f383 8811 	msr	BASEPRI, r3
}
 8006584:	bf00      	nop
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200132d0 	.word	0x200132d0

08006590 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b08c      	sub	sp, #48	; 0x30
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800659c:	f3ef 8311 	mrs	r3, BASEPRI
 80065a0:	f04f 0120 	mov.w	r1, #32
 80065a4:	f381 8811 	msr	BASEPRI, r1
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	4825      	ldr	r0, [pc, #148]	; (8006640 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80065ac:	f7ff fdbf 	bl	800612e <_PreparePacket>
 80065b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	623b      	str	r3, [r7, #32]
 80065f6:	e00b      	b.n	8006610 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	6279      	str	r1, [r7, #36]	; 0x24
 8006602:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	09db      	lsrs	r3, r3, #7
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	2b7f      	cmp	r3, #127	; 0x7f
 8006614:	d8f0      	bhi.n	80065f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	627a      	str	r2, [r7, #36]	; 0x24
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	69b8      	ldr	r0, [r7, #24]
 800662c:	f7ff fe70 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f383 8811 	msr	BASEPRI, r3
}
 8006636:	bf00      	nop
 8006638:	3730      	adds	r7, #48	; 0x30
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200132d0 	.word	0x200132d0

08006644 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b08e      	sub	sp, #56	; 0x38
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006652:	f3ef 8311 	mrs	r3, BASEPRI
 8006656:	f04f 0120 	mov.w	r1, #32
 800665a:	f381 8811 	msr	BASEPRI, r1
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	4832      	ldr	r0, [pc, #200]	; (800672c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006662:	f7ff fd64 	bl	800612e <_PreparePacket>
 8006666:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	633b      	str	r3, [r7, #48]	; 0x30
 8006674:	e00b      	b.n	800668e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	b2da      	uxtb	r2, r3
 800667a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	6379      	str	r1, [r7, #52]	; 0x34
 8006680:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	701a      	strb	r2, [r3, #0]
 8006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668a:	09db      	lsrs	r3, r3, #7
 800668c:	633b      	str	r3, [r7, #48]	; 0x30
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b7f      	cmp	r3, #127	; 0x7f
 8006692:	d8f0      	bhi.n	8006676 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	637a      	str	r2, [r7, #52]	; 0x34
 800669a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ac:	e00b      	b.n	80066c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	1c59      	adds	r1, r3, #1
 80066b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	09db      	lsrs	r3, r3, #7
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	2b7f      	cmp	r3, #127	; 0x7f
 80066ca:	d8f0      	bhi.n	80066ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	1c5a      	adds	r2, r3, #1
 80066d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	e00b      	b.n	80066fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	1c59      	adds	r1, r3, #1
 80066ee:	6279      	str	r1, [r7, #36]	; 0x24
 80066f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	623b      	str	r3, [r7, #32]
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b7f      	cmp	r3, #127	; 0x7f
 8006702:	d8f0      	bhi.n	80066e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	627a      	str	r2, [r7, #36]	; 0x24
 800670a:	6a3a      	ldr	r2, [r7, #32]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6979      	ldr	r1, [r7, #20]
 8006718:	69b8      	ldr	r0, [r7, #24]
 800671a:	f7ff fdf9 	bl	8006310 <_SendPacket>
  RECORD_END();
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f383 8811 	msr	BASEPRI, r3
}
 8006724:	bf00      	nop
 8006726:	3738      	adds	r7, #56	; 0x38
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200132d0 	.word	0x200132d0

08006730 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b090      	sub	sp, #64	; 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800673e:	f3ef 8311 	mrs	r3, BASEPRI
 8006742:	f04f 0120 	mov.w	r1, #32
 8006746:	f381 8811 	msr	BASEPRI, r1
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	4840      	ldr	r0, [pc, #256]	; (8006850 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800674e:	f7ff fcee 	bl	800612e <_PreparePacket>
 8006752:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006760:	e00b      	b.n	800677a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	b2da      	uxtb	r2, r3
 8006766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800676c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	09db      	lsrs	r3, r3, #7
 8006778:	63bb      	str	r3, [r7, #56]	; 0x38
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	2b7f      	cmp	r3, #127	; 0x7f
 800677e:	d8f0      	bhi.n	8006762 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	1c5a      	adds	r2, r3, #1
 8006784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	633b      	str	r3, [r7, #48]	; 0x30
 8006798:	e00b      	b.n	80067b2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	b2da      	uxtb	r2, r3
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	6379      	str	r1, [r7, #52]	; 0x34
 80067a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	09db      	lsrs	r3, r3, #7
 80067b0:	633b      	str	r3, [r7, #48]	; 0x30
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	2b7f      	cmp	r3, #127	; 0x7f
 80067b6:	d8f0      	bhi.n	800679a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80067b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	637a      	str	r2, [r7, #52]	; 0x34
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80067d0:	e00b      	b.n	80067ea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80067dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	2b7f      	cmp	r3, #127	; 0x7f
 80067ee:	d8f0      	bhi.n	80067d2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	e00b      	b.n	8006822 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	6279      	str	r1, [r7, #36]	; 0x24
 8006814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	2b7f      	cmp	r3, #127	; 0x7f
 8006826:	d8f0      	bhi.n	800680a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	627a      	str	r2, [r7, #36]	; 0x24
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	6979      	ldr	r1, [r7, #20]
 800683c:	69b8      	ldr	r0, [r7, #24]
 800683e:	f7ff fd67 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	f383 8811 	msr	BASEPRI, r3
}
 8006848:	bf00      	nop
 800684a:	3740      	adds	r7, #64	; 0x40
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	200132d0 	.word	0x200132d0

08006854 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006854:	b580      	push	{r7, lr}
 8006856:	b08c      	sub	sp, #48	; 0x30
 8006858:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800685a:	4b58      	ldr	r3, [pc, #352]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 800685c:	2201      	movs	r2, #1
 800685e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006860:	f3ef 8311 	mrs	r3, BASEPRI
 8006864:	f04f 0120 	mov.w	r1, #32
 8006868:	f381 8811 	msr	BASEPRI, r1
 800686c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800686e:	4b53      	ldr	r3, [pc, #332]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	220a      	movs	r2, #10
 8006874:	4952      	ldr	r1, [pc, #328]	; (80069c0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006876:	4618      	mov	r0, r3
 8006878:	f7f9 fcaa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006882:	200a      	movs	r0, #10
 8006884:	f7ff fe2a 	bl	80064dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006888:	f3ef 8311 	mrs	r3, BASEPRI
 800688c:	f04f 0120 	mov.w	r1, #32
 8006890:	f381 8811 	msr	BASEPRI, r1
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	484b      	ldr	r0, [pc, #300]	; (80069c4 <SEGGER_SYSVIEW_Start+0x170>)
 8006898:	f7ff fc49 	bl	800612e <_PreparePacket>
 800689c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a6:	4b45      	ldr	r3, [pc, #276]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ac:	e00b      	b.n	80068c6 <SEGGER_SYSVIEW_Start+0x72>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	1c59      	adds	r1, r3, #1
 80068b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	09db      	lsrs	r3, r3, #7
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ca:	d8f0      	bhi.n	80068ae <SEGGER_SYSVIEW_Start+0x5a>
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
 80068d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
 80068e0:	4b36      	ldr	r3, [pc, #216]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e00b      	b.n	8006900 <SEGGER_SYSVIEW_Start+0xac>
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	1c59      	adds	r1, r3, #1
 80068f0:	6279      	str	r1, [r7, #36]	; 0x24
 80068f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	09db      	lsrs	r3, r3, #7
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b7f      	cmp	r3, #127	; 0x7f
 8006904:	d8f0      	bhi.n	80068e8 <SEGGER_SYSVIEW_Start+0x94>
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	627a      	str	r2, [r7, #36]	; 0x24
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	61fb      	str	r3, [r7, #28]
 800691a:	4b28      	ldr	r3, [pc, #160]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e00b      	b.n	800693a <SEGGER_SYSVIEW_Start+0xe6>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	b2da      	uxtb	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	1c59      	adds	r1, r3, #1
 800692a:	61f9      	str	r1, [r7, #28]
 800692c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	09db      	lsrs	r3, r3, #7
 8006938:	61bb      	str	r3, [r7, #24]
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	2b7f      	cmp	r3, #127	; 0x7f
 800693e:	d8f0      	bhi.n	8006922 <SEGGER_SYSVIEW_Start+0xce>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	61fa      	str	r2, [r7, #28]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e00b      	b.n	8006972 <SEGGER_SYSVIEW_Start+0x11e>
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	6179      	str	r1, [r7, #20]
 8006964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	09db      	lsrs	r3, r3, #7
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b7f      	cmp	r3, #127	; 0x7f
 8006976:	d8f0      	bhi.n	800695a <SEGGER_SYSVIEW_Start+0x106>
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	617a      	str	r2, [r7, #20]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006988:	2218      	movs	r2, #24
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fcbf 	bl	8006310 <_SendPacket>
      RECORD_END();
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006998:	4b08      	ldr	r3, [pc, #32]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <SEGGER_SYSVIEW_Start+0x168>)
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80069a6:	f000 f9c7 	bl	8006d38 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80069aa:	f000 f9b1 	bl	8006d10 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80069ae:	f000 fc5f 	bl	8007270 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80069b2:	bf00      	nop
 80069b4:	3730      	adds	r7, #48	; 0x30
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	200132a0 	.word	0x200132a0
 80069c0:	08007eb8 	.word	0x08007eb8
 80069c4:	200132d0 	.word	0x200132d0

080069c8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ce:	f3ef 8311 	mrs	r3, BASEPRI
 80069d2:	f04f 0120 	mov.w	r1, #32
 80069d6:	f381 8811 	msr	BASEPRI, r1
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	480b      	ldr	r0, [pc, #44]	; (8006a0c <SEGGER_SYSVIEW_Stop+0x44>)
 80069de:	f7ff fba6 	bl	800612e <_PreparePacket>
 80069e2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <SEGGER_SYSVIEW_Stop+0x48>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80069ec:	220b      	movs	r2, #11
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f7ff fc8d 	bl	8006310 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80069f6:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <SEGGER_SYSVIEW_Stop+0x48>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200132d0 	.word	0x200132d0
 8006a10:	200132a0 	.word	0x200132a0

08006a14 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08c      	sub	sp, #48	; 0x30
 8006a18:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1e:	f04f 0120 	mov.w	r1, #32
 8006a22:	f381 8811 	msr	BASEPRI, r1
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	4845      	ldr	r0, [pc, #276]	; (8006b40 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006a2a:	f7ff fb80 	bl	800612e <_PreparePacket>
 8006a2e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3e:	e00b      	b.n	8006a58 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	1c59      	adds	r1, r3, #1
 8006a48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	09db      	lsrs	r3, r3, #7
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a5c:	d8f0      	bhi.n	8006a40 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	4b34      	ldr	r3, [pc, #208]	; (8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	623b      	str	r3, [r7, #32]
 8006a78:	e00b      	b.n	8006a92 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	1c59      	adds	r1, r3, #1
 8006a82:	6279      	str	r1, [r7, #36]	; 0x24
 8006a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	09db      	lsrs	r3, r3, #7
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	2b7f      	cmp	r3, #127	; 0x7f
 8006a96:	d8f0      	bhi.n	8006a7a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	4b25      	ldr	r3, [pc, #148]	; (8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	e00b      	b.n	8006acc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	1c59      	adds	r1, r3, #1
 8006abc:	61f9      	str	r1, [r7, #28]
 8006abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	09db      	lsrs	r3, r3, #7
 8006aca:	61bb      	str	r3, [r7, #24]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	d8f0      	bhi.n	8006ab4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	61fa      	str	r2, [r7, #28]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
 8006aea:	e00b      	b.n	8006b04 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	1c59      	adds	r1, r3, #1
 8006af4:	6179      	str	r1, [r7, #20]
 8006af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	09db      	lsrs	r3, r3, #7
 8006b02:	613b      	str	r3, [r7, #16]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	2b7f      	cmp	r3, #127	; 0x7f
 8006b08:	d8f0      	bhi.n	8006aec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	617a      	str	r2, [r7, #20]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b1a:	2218      	movs	r2, #24
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7ff fbf6 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b2a:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006b32:	4b04      	ldr	r3, [pc, #16]	; (8006b44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	4798      	blx	r3
  }
}
 8006b38:	bf00      	nop
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200132d0 	.word	0x200132d0
 8006b44:	200132a0 	.word	0x200132a0

08006b48 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b092      	sub	sp, #72	; 0x48
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006b50:	f3ef 8311 	mrs	r3, BASEPRI
 8006b54:	f04f 0120 	mov.w	r1, #32
 8006b58:	f381 8811 	msr	BASEPRI, r1
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	486a      	ldr	r0, [pc, #424]	; (8006d08 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006b60:	f7ff fae5 	bl	800612e <_PreparePacket>
 8006b64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b66      	ldr	r3, [pc, #408]	; (8006d0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7a:	e00b      	b.n	8006b94 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	6479      	str	r1, [r7, #68]	; 0x44
 8006b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b90:	09db      	lsrs	r3, r3, #7
 8006b92:	643b      	str	r3, [r7, #64]	; 0x40
 8006b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b96:	2b7f      	cmp	r3, #127	; 0x7f
 8006b98:	d8f0      	bhi.n	8006b7c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	647a      	str	r2, [r7, #68]	; 0x44
 8006ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	701a      	strb	r2, [r3, #0]
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ba8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bb4:	e00b      	b.n	8006bce <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bbc:	1c59      	adds	r1, r3, #1
 8006bbe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	09db      	lsrs	r3, r3, #7
 8006bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd2:	d8f0      	bhi.n	8006bb6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006bda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006be2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	4619      	mov	r1, r3
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fa51 	bl	8006094 <_EncodeStr>
 8006bf2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006bf4:	2209      	movs	r2, #9
 8006bf6:	68f9      	ldr	r1, [r7, #12]
 8006bf8:	6938      	ldr	r0, [r7, #16]
 8006bfa:	f7ff fb89 	bl	8006310 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b40      	ldr	r3, [pc, #256]	; (8006d0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	6379      	str	r1, [r7, #52]	; 0x34
 8006c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	637a      	str	r2, [r7, #52]	; 0x34
 8006c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	e00b      	b.n	8006ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	6279      	str	r1, [r7, #36]	; 0x24
 8006c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca4:	d8f0      	bhi.n	8006c88 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	627a      	str	r2, [r7, #36]	; 0x24
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
 8006cbe:	e00b      	b.n	8006cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	61f9      	str	r1, [r7, #28]
 8006cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	09db      	lsrs	r3, r3, #7
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b7f      	cmp	r3, #127	; 0x7f
 8006cdc:	d8f0      	bhi.n	8006cc0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	61fa      	str	r2, [r7, #28]
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006cee:	2215      	movs	r2, #21
 8006cf0:	68f9      	ldr	r1, [r7, #12]
 8006cf2:	6938      	ldr	r0, [r7, #16]
 8006cf4:	f7ff fb0c 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
}
 8006cfe:	bf00      	nop
 8006d00:	3748      	adds	r7, #72	; 0x48
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	200132d0 	.word	0x200132d0
 8006d0c:	200132a0 	.word	0x200132a0

08006d10 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006d14:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006d26:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4798      	blx	r3
  }
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	200132a0 	.word	0x200132a0

08006d38 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006d3e:	4b15      	ldr	r3, [pc, #84]	; (8006d94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01a      	beq.n	8006d7c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d015      	beq.n	8006d7c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006d50:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4798      	blx	r3
 8006d58:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d5c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d62:	f04f 0200 	mov.w	r2, #0
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	000a      	movs	r2, r1
 8006d6c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006d6e:	4613      	mov	r3, r2
 8006d70:	461a      	mov	r2, r3
 8006d72:	4621      	mov	r1, r4
 8006d74:	200d      	movs	r0, #13
 8006d76:	f7ff fc0b 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x2>
 8006d7a:	e006      	b.n	8006d8a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4619      	mov	r1, r3
 8006d82:	200c      	movs	r0, #12
 8006d84:	f7ff fbc8 	bl	8006518 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd90      	pop	{r4, r7, pc}
 8006d92:	bf00      	nop
 8006d94:	200132a0 	.word	0x200132a0
 8006d98:	e0001004 	.word	0xe0001004

08006d9c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006da2:	f3ef 8311 	mrs	r3, BASEPRI
 8006da6:	f04f 0120 	mov.w	r1, #32
 8006daa:	f381 8811 	msr	BASEPRI, r1
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	4819      	ldr	r0, [pc, #100]	; (8006e18 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006db2:	f7ff f9bc 	bl	800612e <_PreparePacket>
 8006db6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006dbc:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	617b      	str	r3, [r7, #20]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e00b      	b.n	8006de8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	6179      	str	r1, [r7, #20]
 8006dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	09db      	lsrs	r3, r3, #7
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b7f      	cmp	r3, #127	; 0x7f
 8006dec:	d8f0      	bhi.n	8006dd0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	617a      	str	r2, [r7, #20]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006dfe:	2202      	movs	r2, #2
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f7ff fa84 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f383 8811 	msr	BASEPRI, r3
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200132d0 	.word	0x200132d0
 8006e1c:	e000ed04 	.word	0xe000ed04

08006e20 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e26:	f3ef 8311 	mrs	r3, BASEPRI
 8006e2a:	f04f 0120 	mov.w	r1, #32
 8006e2e:	f381 8811 	msr	BASEPRI, r1
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	4807      	ldr	r0, [pc, #28]	; (8006e54 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006e36:	f7ff f97a 	bl	800612e <_PreparePacket>
 8006e3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6838      	ldr	r0, [r7, #0]
 8006e42:	f7ff fa65 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f383 8811 	msr	BASEPRI, r3
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200132d0 	.word	0x200132d0

08006e58 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e62:	f04f 0120 	mov.w	r1, #32
 8006e66:	f381 8811 	msr	BASEPRI, r1
 8006e6a:	607b      	str	r3, [r7, #4]
 8006e6c:	4807      	ldr	r0, [pc, #28]	; (8006e8c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006e6e:	f7ff f95e 	bl	800612e <_PreparePacket>
 8006e72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006e74:	2212      	movs	r2, #18
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6838      	ldr	r0, [r7, #0]
 8006e7a:	f7ff fa49 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f383 8811 	msr	BASEPRI, r3
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200132d0 	.word	0x200132d0

08006e90 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e96:	f3ef 8311 	mrs	r3, BASEPRI
 8006e9a:	f04f 0120 	mov.w	r1, #32
 8006e9e:	f381 8811 	msr	BASEPRI, r1
 8006ea2:	607b      	str	r3, [r7, #4]
 8006ea4:	4807      	ldr	r0, [pc, #28]	; (8006ec4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006ea6:	f7ff f942 	bl	800612e <_PreparePacket>
 8006eaa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006eac:	2211      	movs	r2, #17
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6838      	ldr	r0, [r7, #0]
 8006eb2:	f7ff fa2d 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f383 8811 	msr	BASEPRI, r3
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	200132d0 	.word	0x200132d0

08006ec8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ed0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed4:	f04f 0120 	mov.w	r1, #32
 8006ed8:	f381 8811 	msr	BASEPRI, r1
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	4819      	ldr	r0, [pc, #100]	; (8006f44 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006ee0:	f7ff f925 	bl	800612e <_PreparePacket>
 8006ee4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006eea:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	61bb      	str	r3, [r7, #24]
 8006efc:	e00b      	b.n	8006f16 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	1c59      	adds	r1, r3, #1
 8006f06:	61f9      	str	r1, [r7, #28]
 8006f08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	09db      	lsrs	r3, r3, #7
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b7f      	cmp	r3, #127	; 0x7f
 8006f1a:	d8f0      	bhi.n	8006efe <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	61fa      	str	r2, [r7, #28]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	6938      	ldr	r0, [r7, #16]
 8006f32:	f7ff f9ed 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f383 8811 	msr	BASEPRI, r3
}
 8006f3c:	bf00      	nop
 8006f3e:	3720      	adds	r7, #32
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200132d0 	.word	0x200132d0
 8006f48:	200132a0 	.word	0x200132a0

08006f4c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f54:	f3ef 8311 	mrs	r3, BASEPRI
 8006f58:	f04f 0120 	mov.w	r1, #32
 8006f5c:	f381 8811 	msr	BASEPRI, r1
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	4819      	ldr	r0, [pc, #100]	; (8006fc8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006f64:	f7ff f8e3 	bl	800612e <_PreparePacket>
 8006f68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f6e:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	e00b      	b.n	8006f9a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	1c59      	adds	r1, r3, #1
 8006f8a:	61f9      	str	r1, [r7, #28]
 8006f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	09db      	lsrs	r3, r3, #7
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f9e:	d8f0      	bhi.n	8006f82 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	61fa      	str	r2, [r7, #28]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	6938      	ldr	r0, [r7, #16]
 8006fb6:	f7ff f9ab 	bl	8006310 <_SendPacket>
  RECORD_END();
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f383 8811 	msr	BASEPRI, r3
}
 8006fc0:	bf00      	nop
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	200132d0 	.word	0x200132d0
 8006fcc:	200132a0 	.word	0x200132a0

08006fd0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fdc:	f04f 0120 	mov.w	r1, #32
 8006fe0:	f381 8811 	msr	BASEPRI, r1
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	4819      	ldr	r0, [pc, #100]	; (800704c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006fe8:	f7ff f8a1 	bl	800612e <_PreparePacket>
 8006fec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	61fb      	str	r3, [r7, #28]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	e00b      	b.n	800701e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	b2da      	uxtb	r2, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	1c59      	adds	r1, r3, #1
 800700e:	61f9      	str	r1, [r7, #28]
 8007010:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007014:	b2d2      	uxtb	r2, r2
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	09db      	lsrs	r3, r3, #7
 800701c:	61bb      	str	r3, [r7, #24]
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	2b7f      	cmp	r3, #127	; 0x7f
 8007022:	d8f0      	bhi.n	8007006 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	1c5a      	adds	r2, r3, #1
 8007028:	61fa      	str	r2, [r7, #28]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007034:	2206      	movs	r2, #6
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	6938      	ldr	r0, [r7, #16]
 800703a:	f7ff f969 	bl	8006310 <_SendPacket>
  RECORD_END();
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f383 8811 	msr	BASEPRI, r3
}
 8007044:	bf00      	nop
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200132d0 	.word	0x200132d0
 8007050:	200132a0 	.word	0x200132a0

08007054 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800705e:	f3ef 8311 	mrs	r3, BASEPRI
 8007062:	f04f 0120 	mov.w	r1, #32
 8007066:	f381 8811 	msr	BASEPRI, r1
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	4827      	ldr	r0, [pc, #156]	; (800710c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800706e:	f7ff f85e 	bl	800612e <_PreparePacket>
 8007072:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007078:	4b25      	ldr	r3, [pc, #148]	; (8007110 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	e00b      	b.n	80070a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	1c59      	adds	r1, r3, #1
 8007094:	6279      	str	r1, [r7, #36]	; 0x24
 8007096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	623b      	str	r3, [r7, #32]
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	2b7f      	cmp	r3, #127	; 0x7f
 80070a8:	d8f0      	bhi.n	800708c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	627a      	str	r2, [r7, #36]	; 0x24
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	61fb      	str	r3, [r7, #28]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	61bb      	str	r3, [r7, #24]
 80070c2:	e00b      	b.n	80070dc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	61f9      	str	r1, [r7, #28]
 80070ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	09db      	lsrs	r3, r3, #7
 80070da:	61bb      	str	r3, [r7, #24]
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	2b7f      	cmp	r3, #127	; 0x7f
 80070e0:	d8f0      	bhi.n	80070c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	61fa      	str	r2, [r7, #28]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80070f2:	2207      	movs	r2, #7
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f7ff f90a 	bl	8006310 <_SendPacket>
  RECORD_END();
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f383 8811 	msr	BASEPRI, r3
}
 8007102:	bf00      	nop
 8007104:	3728      	adds	r7, #40	; 0x28
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200132d0 	.word	0x200132d0
 8007110:	200132a0 	.word	0x200132a0

08007114 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	1ad3      	subs	r3, r2, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	200132a0 	.word	0x200132a0

08007134 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b08c      	sub	sp, #48	; 0x30
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800713e:	4b3b      	ldr	r3, [pc, #236]	; (800722c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d06d      	beq.n	8007222 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800714c:	2300      	movs	r3, #0
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007150:	e008      	b.n	8007164 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	3301      	adds	r3, #1
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	429a      	cmp	r2, r3
 800716a:	d3f2      	bcc.n	8007152 <SEGGER_SYSVIEW_SendModule+0x1e>
 800716c:	e000      	b.n	8007170 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800716e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d055      	beq.n	8007222 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007176:	f3ef 8311 	mrs	r3, BASEPRI
 800717a:	f04f 0120 	mov.w	r1, #32
 800717e:	f381 8811 	msr	BASEPRI, r1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	482a      	ldr	r0, [pc, #168]	; (8007230 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007186:	f7fe ffd2 	bl	800612e <_PreparePacket>
 800718a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	623b      	str	r3, [r7, #32]
 8007198:	e00b      	b.n	80071b2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800719a:	6a3b      	ldr	r3, [r7, #32]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	1c59      	adds	r1, r3, #1
 80071a2:	6279      	str	r1, [r7, #36]	; 0x24
 80071a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071a8:	b2d2      	uxtb	r2, r2
 80071aa:	701a      	strb	r2, [r3, #0]
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	09db      	lsrs	r3, r3, #7
 80071b0:	623b      	str	r3, [r7, #32]
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b7f      	cmp	r3, #127	; 0x7f
 80071b6:	d8f0      	bhi.n	800719a <SEGGER_SYSVIEW_SendModule+0x66>
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	627a      	str	r2, [r7, #36]	; 0x24
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	e00b      	b.n	80071ec <SEGGER_SYSVIEW_SendModule+0xb8>
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	1c59      	adds	r1, r3, #1
 80071dc:	61f9      	str	r1, [r7, #28]
 80071de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	09db      	lsrs	r3, r3, #7
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b7f      	cmp	r3, #127	; 0x7f
 80071f0:	d8f0      	bhi.n	80071d4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	61fa      	str	r2, [r7, #28]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	b2d2      	uxtb	r2, r2
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2280      	movs	r2, #128	; 0x80
 8007208:	4619      	mov	r1, r3
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7fe ff42 	bl	8006094 <_EncodeStr>
 8007210:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007212:	2216      	movs	r2, #22
 8007214:	68f9      	ldr	r1, [r7, #12]
 8007216:	6938      	ldr	r0, [r7, #16]
 8007218:	f7ff f87a 	bl	8006310 <_SendPacket>
      RECORD_END();
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007222:	bf00      	nop
 8007224:	3730      	adds	r7, #48	; 0x30
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	200132c8 	.word	0x200132c8
 8007230:	200132d0 	.word	0x200132d0

08007234 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00f      	beq.n	8007262 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d002      	beq.n	8007256 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f2      	bne.n	8007248 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007262:	bf00      	nop
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	200132c8 	.word	0x200132c8

08007270 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007276:	f3ef 8311 	mrs	r3, BASEPRI
 800727a:	f04f 0120 	mov.w	r1, #32
 800727e:	f381 8811 	msr	BASEPRI, r1
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	4817      	ldr	r0, [pc, #92]	; (80072e4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007286:	f7fe ff52 	bl	800612e <_PreparePacket>
 800728a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	e00b      	b.n	80072b4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	1c59      	adds	r1, r3, #1
 80072a4:	6179      	str	r1, [r7, #20]
 80072a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072aa:	b2d2      	uxtb	r2, r2
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	09db      	lsrs	r3, r3, #7
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b7f      	cmp	r3, #127	; 0x7f
 80072b8:	d8f0      	bhi.n	800729c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	617a      	str	r2, [r7, #20]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80072ca:	221b      	movs	r2, #27
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	68b8      	ldr	r0, [r7, #8]
 80072d0:	f7ff f81e 	bl	8006310 <_SendPacket>
  RECORD_END();
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f383 8811 	msr	BASEPRI, r3
}
 80072da:	bf00      	nop
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200132d0 	.word	0x200132d0
 80072e8:	200132cc 	.word	0x200132cc

080072ec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80072f4:	f3ef 8311 	mrs	r3, BASEPRI
 80072f8:	f04f 0120 	mov.w	r1, #32
 80072fc:	f381 8811 	msr	BASEPRI, r1
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	4827      	ldr	r0, [pc, #156]	; (80073a0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007304:	f7fe ff13 	bl	800612e <_PreparePacket>
 8007308:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800730a:	2280      	movs	r2, #128	; 0x80
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	6938      	ldr	r0, [r7, #16]
 8007310:	f7fe fec0 	bl	8006094 <_EncodeStr>
 8007314:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	627b      	str	r3, [r7, #36]	; 0x24
 800731a:	2301      	movs	r3, #1
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	e00b      	b.n	8007338 <SEGGER_SYSVIEW_Warn+0x4c>
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	b2da      	uxtb	r2, r3
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	1c59      	adds	r1, r3, #1
 8007328:	6279      	str	r1, [r7, #36]	; 0x24
 800732a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	09db      	lsrs	r3, r3, #7
 8007336:	623b      	str	r3, [r7, #32]
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2b7f      	cmp	r3, #127	; 0x7f
 800733c:	d8f0      	bhi.n	8007320 <SEGGER_SYSVIEW_Warn+0x34>
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	627a      	str	r2, [r7, #36]	; 0x24
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	b2d2      	uxtb	r2, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	2300      	movs	r3, #0
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	e00b      	b.n	8007370 <SEGGER_SYSVIEW_Warn+0x84>
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	b2da      	uxtb	r2, r3
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	1c59      	adds	r1, r3, #1
 8007360:	61f9      	str	r1, [r7, #28]
 8007362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	701a      	strb	r2, [r3, #0]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	09db      	lsrs	r3, r3, #7
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b7f      	cmp	r3, #127	; 0x7f
 8007374:	d8f0      	bhi.n	8007358 <SEGGER_SYSVIEW_Warn+0x6c>
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	61fa      	str	r2, [r7, #28]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007386:	221a      	movs	r2, #26
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f7fe ffc0 	bl	8006310 <_SendPacket>
  RECORD_END();
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f383 8811 	msr	BASEPRI, r3
}
 8007396:	bf00      	nop
 8007398:	3728      	adds	r7, #40	; 0x28
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	200132d0 	.word	0x200132d0

080073a4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	2000      	movs	r0, #0
 80073b8:	f7fe fe46 	bl	8006048 <SEGGER_RTT_Write>
  return len;
 80073bc:	683b      	ldr	r3, [r7, #0]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <__errno>:
 80073c8:	4b01      	ldr	r3, [pc, #4]	; (80073d0 <__errno+0x8>)
 80073ca:	6818      	ldr	r0, [r3, #0]
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	20000018 	.word	0x20000018

080073d4 <__libc_init_array>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4d0d      	ldr	r5, [pc, #52]	; (800740c <__libc_init_array+0x38>)
 80073d8:	4c0d      	ldr	r4, [pc, #52]	; (8007410 <__libc_init_array+0x3c>)
 80073da:	1b64      	subs	r4, r4, r5
 80073dc:	10a4      	asrs	r4, r4, #2
 80073de:	2600      	movs	r6, #0
 80073e0:	42a6      	cmp	r6, r4
 80073e2:	d109      	bne.n	80073f8 <__libc_init_array+0x24>
 80073e4:	4d0b      	ldr	r5, [pc, #44]	; (8007414 <__libc_init_array+0x40>)
 80073e6:	4c0c      	ldr	r4, [pc, #48]	; (8007418 <__libc_init_array+0x44>)
 80073e8:	f000 fcf0 	bl	8007dcc <_init>
 80073ec:	1b64      	subs	r4, r4, r5
 80073ee:	10a4      	asrs	r4, r4, #2
 80073f0:	2600      	movs	r6, #0
 80073f2:	42a6      	cmp	r6, r4
 80073f4:	d105      	bne.n	8007402 <__libc_init_array+0x2e>
 80073f6:	bd70      	pop	{r4, r5, r6, pc}
 80073f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073fc:	4798      	blx	r3
 80073fe:	3601      	adds	r6, #1
 8007400:	e7ee      	b.n	80073e0 <__libc_init_array+0xc>
 8007402:	f855 3b04 	ldr.w	r3, [r5], #4
 8007406:	4798      	blx	r3
 8007408:	3601      	adds	r6, #1
 800740a:	e7f2      	b.n	80073f2 <__libc_init_array+0x1e>
 800740c:	08007f30 	.word	0x08007f30
 8007410:	08007f30 	.word	0x08007f30
 8007414:	08007f30 	.word	0x08007f30
 8007418:	08007f34 	.word	0x08007f34

0800741c <memcmp>:
 800741c:	b530      	push	{r4, r5, lr}
 800741e:	3901      	subs	r1, #1
 8007420:	2400      	movs	r4, #0
 8007422:	42a2      	cmp	r2, r4
 8007424:	d101      	bne.n	800742a <memcmp+0xe>
 8007426:	2000      	movs	r0, #0
 8007428:	e005      	b.n	8007436 <memcmp+0x1a>
 800742a:	5d03      	ldrb	r3, [r0, r4]
 800742c:	3401      	adds	r4, #1
 800742e:	5d0d      	ldrb	r5, [r1, r4]
 8007430:	42ab      	cmp	r3, r5
 8007432:	d0f6      	beq.n	8007422 <memcmp+0x6>
 8007434:	1b58      	subs	r0, r3, r5
 8007436:	bd30      	pop	{r4, r5, pc}

08007438 <memcpy>:
 8007438:	440a      	add	r2, r1
 800743a:	4291      	cmp	r1, r2
 800743c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007440:	d100      	bne.n	8007444 <memcpy+0xc>
 8007442:	4770      	bx	lr
 8007444:	b510      	push	{r4, lr}
 8007446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800744a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800744e:	4291      	cmp	r1, r2
 8007450:	d1f9      	bne.n	8007446 <memcpy+0xe>
 8007452:	bd10      	pop	{r4, pc}

08007454 <memset>:
 8007454:	4402      	add	r2, r0
 8007456:	4603      	mov	r3, r0
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	f803 1b01 	strb.w	r1, [r3], #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <_free_r>:
 8007464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007466:	2900      	cmp	r1, #0
 8007468:	d048      	beq.n	80074fc <_free_r+0x98>
 800746a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800746e:	9001      	str	r0, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f1a1 0404 	sub.w	r4, r1, #4
 8007476:	bfb8      	it	lt
 8007478:	18e4      	addlt	r4, r4, r3
 800747a:	f000 fc01 	bl	8007c80 <__malloc_lock>
 800747e:	4a20      	ldr	r2, [pc, #128]	; (8007500 <_free_r+0x9c>)
 8007480:	9801      	ldr	r0, [sp, #4]
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	4615      	mov	r5, r2
 8007486:	b933      	cbnz	r3, 8007496 <_free_r+0x32>
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	6014      	str	r4, [r2, #0]
 800748c:	b003      	add	sp, #12
 800748e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007492:	f000 bbfb 	b.w	8007c8c <__malloc_unlock>
 8007496:	42a3      	cmp	r3, r4
 8007498:	d90b      	bls.n	80074b2 <_free_r+0x4e>
 800749a:	6821      	ldr	r1, [r4, #0]
 800749c:	1862      	adds	r2, r4, r1
 800749e:	4293      	cmp	r3, r2
 80074a0:	bf04      	itt	eq
 80074a2:	681a      	ldreq	r2, [r3, #0]
 80074a4:	685b      	ldreq	r3, [r3, #4]
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	bf04      	itt	eq
 80074aa:	1852      	addeq	r2, r2, r1
 80074ac:	6022      	streq	r2, [r4, #0]
 80074ae:	602c      	str	r4, [r5, #0]
 80074b0:	e7ec      	b.n	800748c <_free_r+0x28>
 80074b2:	461a      	mov	r2, r3
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b10b      	cbz	r3, 80074bc <_free_r+0x58>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d9fa      	bls.n	80074b2 <_free_r+0x4e>
 80074bc:	6811      	ldr	r1, [r2, #0]
 80074be:	1855      	adds	r5, r2, r1
 80074c0:	42a5      	cmp	r5, r4
 80074c2:	d10b      	bne.n	80074dc <_free_r+0x78>
 80074c4:	6824      	ldr	r4, [r4, #0]
 80074c6:	4421      	add	r1, r4
 80074c8:	1854      	adds	r4, r2, r1
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	d1dd      	bne.n	800748c <_free_r+0x28>
 80074d0:	681c      	ldr	r4, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6053      	str	r3, [r2, #4]
 80074d6:	4421      	add	r1, r4
 80074d8:	6011      	str	r1, [r2, #0]
 80074da:	e7d7      	b.n	800748c <_free_r+0x28>
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x80>
 80074de:	230c      	movs	r3, #12
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	e7d3      	b.n	800748c <_free_r+0x28>
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	1961      	adds	r1, r4, r5
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf04      	itt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	bf04      	itt	eq
 80074f4:	1949      	addeq	r1, r1, r5
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	6054      	str	r4, [r2, #4]
 80074fa:	e7c7      	b.n	800748c <_free_r+0x28>
 80074fc:	b003      	add	sp, #12
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	200133b4 	.word	0x200133b4

08007504 <_malloc_r>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	1ccd      	adds	r5, r1, #3
 8007508:	f025 0503 	bic.w	r5, r5, #3
 800750c:	3508      	adds	r5, #8
 800750e:	2d0c      	cmp	r5, #12
 8007510:	bf38      	it	cc
 8007512:	250c      	movcc	r5, #12
 8007514:	2d00      	cmp	r5, #0
 8007516:	4606      	mov	r6, r0
 8007518:	db01      	blt.n	800751e <_malloc_r+0x1a>
 800751a:	42a9      	cmp	r1, r5
 800751c:	d903      	bls.n	8007526 <_malloc_r+0x22>
 800751e:	230c      	movs	r3, #12
 8007520:	6033      	str	r3, [r6, #0]
 8007522:	2000      	movs	r0, #0
 8007524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007526:	f000 fbab 	bl	8007c80 <__malloc_lock>
 800752a:	4921      	ldr	r1, [pc, #132]	; (80075b0 <_malloc_r+0xac>)
 800752c:	680a      	ldr	r2, [r1, #0]
 800752e:	4614      	mov	r4, r2
 8007530:	b99c      	cbnz	r4, 800755a <_malloc_r+0x56>
 8007532:	4f20      	ldr	r7, [pc, #128]	; (80075b4 <_malloc_r+0xb0>)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	b923      	cbnz	r3, 8007542 <_malloc_r+0x3e>
 8007538:	4621      	mov	r1, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f000 f8b2 	bl	80076a4 <_sbrk_r>
 8007540:	6038      	str	r0, [r7, #0]
 8007542:	4629      	mov	r1, r5
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f8ad 	bl	80076a4 <_sbrk_r>
 800754a:	1c43      	adds	r3, r0, #1
 800754c:	d123      	bne.n	8007596 <_malloc_r+0x92>
 800754e:	230c      	movs	r3, #12
 8007550:	6033      	str	r3, [r6, #0]
 8007552:	4630      	mov	r0, r6
 8007554:	f000 fb9a 	bl	8007c8c <__malloc_unlock>
 8007558:	e7e3      	b.n	8007522 <_malloc_r+0x1e>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	1b5b      	subs	r3, r3, r5
 800755e:	d417      	bmi.n	8007590 <_malloc_r+0x8c>
 8007560:	2b0b      	cmp	r3, #11
 8007562:	d903      	bls.n	800756c <_malloc_r+0x68>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	441c      	add	r4, r3
 8007568:	6025      	str	r5, [r4, #0]
 800756a:	e004      	b.n	8007576 <_malloc_r+0x72>
 800756c:	6863      	ldr	r3, [r4, #4]
 800756e:	42a2      	cmp	r2, r4
 8007570:	bf0c      	ite	eq
 8007572:	600b      	streq	r3, [r1, #0]
 8007574:	6053      	strne	r3, [r2, #4]
 8007576:	4630      	mov	r0, r6
 8007578:	f000 fb88 	bl	8007c8c <__malloc_unlock>
 800757c:	f104 000b 	add.w	r0, r4, #11
 8007580:	1d23      	adds	r3, r4, #4
 8007582:	f020 0007 	bic.w	r0, r0, #7
 8007586:	1ac2      	subs	r2, r0, r3
 8007588:	d0cc      	beq.n	8007524 <_malloc_r+0x20>
 800758a:	1a1b      	subs	r3, r3, r0
 800758c:	50a3      	str	r3, [r4, r2]
 800758e:	e7c9      	b.n	8007524 <_malloc_r+0x20>
 8007590:	4622      	mov	r2, r4
 8007592:	6864      	ldr	r4, [r4, #4]
 8007594:	e7cc      	b.n	8007530 <_malloc_r+0x2c>
 8007596:	1cc4      	adds	r4, r0, #3
 8007598:	f024 0403 	bic.w	r4, r4, #3
 800759c:	42a0      	cmp	r0, r4
 800759e:	d0e3      	beq.n	8007568 <_malloc_r+0x64>
 80075a0:	1a21      	subs	r1, r4, r0
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 f87e 	bl	80076a4 <_sbrk_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d1dd      	bne.n	8007568 <_malloc_r+0x64>
 80075ac:	e7cf      	b.n	800754e <_malloc_r+0x4a>
 80075ae:	bf00      	nop
 80075b0:	200133b4 	.word	0x200133b4
 80075b4:	200133b8 	.word	0x200133b8

080075b8 <_puts_r>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	460e      	mov	r6, r1
 80075bc:	4605      	mov	r5, r0
 80075be:	b118      	cbz	r0, 80075c8 <_puts_r+0x10>
 80075c0:	6983      	ldr	r3, [r0, #24]
 80075c2:	b90b      	cbnz	r3, 80075c8 <_puts_r+0x10>
 80075c4:	f000 fa58 	bl	8007a78 <__sinit>
 80075c8:	69ab      	ldr	r3, [r5, #24]
 80075ca:	68ac      	ldr	r4, [r5, #8]
 80075cc:	b913      	cbnz	r3, 80075d4 <_puts_r+0x1c>
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 fa52 	bl	8007a78 <__sinit>
 80075d4:	4b2c      	ldr	r3, [pc, #176]	; (8007688 <_puts_r+0xd0>)
 80075d6:	429c      	cmp	r4, r3
 80075d8:	d120      	bne.n	800761c <_puts_r+0x64>
 80075da:	686c      	ldr	r4, [r5, #4]
 80075dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075de:	07db      	lsls	r3, r3, #31
 80075e0:	d405      	bmi.n	80075ee <_puts_r+0x36>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	0598      	lsls	r0, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_puts_r+0x36>
 80075e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ea:	f000 fae3 	bl	8007bb4 <__retarget_lock_acquire_recursive>
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	d51d      	bpl.n	8007630 <_puts_r+0x78>
 80075f4:	6923      	ldr	r3, [r4, #16]
 80075f6:	b1db      	cbz	r3, 8007630 <_puts_r+0x78>
 80075f8:	3e01      	subs	r6, #1
 80075fa:	68a3      	ldr	r3, [r4, #8]
 80075fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007600:	3b01      	subs	r3, #1
 8007602:	60a3      	str	r3, [r4, #8]
 8007604:	bb39      	cbnz	r1, 8007656 <_puts_r+0x9e>
 8007606:	2b00      	cmp	r3, #0
 8007608:	da38      	bge.n	800767c <_puts_r+0xc4>
 800760a:	4622      	mov	r2, r4
 800760c:	210a      	movs	r1, #10
 800760e:	4628      	mov	r0, r5
 8007610:	f000 f858 	bl	80076c4 <__swbuf_r>
 8007614:	3001      	adds	r0, #1
 8007616:	d011      	beq.n	800763c <_puts_r+0x84>
 8007618:	250a      	movs	r5, #10
 800761a:	e011      	b.n	8007640 <_puts_r+0x88>
 800761c:	4b1b      	ldr	r3, [pc, #108]	; (800768c <_puts_r+0xd4>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <_puts_r+0x6e>
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	e7da      	b.n	80075dc <_puts_r+0x24>
 8007626:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <_puts_r+0xd8>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68ec      	ldreq	r4, [r5, #12]
 800762e:	e7d5      	b.n	80075dc <_puts_r+0x24>
 8007630:	4621      	mov	r1, r4
 8007632:	4628      	mov	r0, r5
 8007634:	f000 f898 	bl	8007768 <__swsetup_r>
 8007638:	2800      	cmp	r0, #0
 800763a:	d0dd      	beq.n	80075f8 <_puts_r+0x40>
 800763c:	f04f 35ff 	mov.w	r5, #4294967295
 8007640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007642:	07da      	lsls	r2, r3, #31
 8007644:	d405      	bmi.n	8007652 <_puts_r+0x9a>
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	059b      	lsls	r3, r3, #22
 800764a:	d402      	bmi.n	8007652 <_puts_r+0x9a>
 800764c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800764e:	f000 fab2 	bl	8007bb6 <__retarget_lock_release_recursive>
 8007652:	4628      	mov	r0, r5
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	2b00      	cmp	r3, #0
 8007658:	da04      	bge.n	8007664 <_puts_r+0xac>
 800765a:	69a2      	ldr	r2, [r4, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	dc06      	bgt.n	800766e <_puts_r+0xb6>
 8007660:	290a      	cmp	r1, #10
 8007662:	d004      	beq.n	800766e <_puts_r+0xb6>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	6022      	str	r2, [r4, #0]
 800766a:	7019      	strb	r1, [r3, #0]
 800766c:	e7c5      	b.n	80075fa <_puts_r+0x42>
 800766e:	4622      	mov	r2, r4
 8007670:	4628      	mov	r0, r5
 8007672:	f000 f827 	bl	80076c4 <__swbuf_r>
 8007676:	3001      	adds	r0, #1
 8007678:	d1bf      	bne.n	80075fa <_puts_r+0x42>
 800767a:	e7df      	b.n	800763c <_puts_r+0x84>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	250a      	movs	r5, #10
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	6022      	str	r2, [r4, #0]
 8007684:	701d      	strb	r5, [r3, #0]
 8007686:	e7db      	b.n	8007640 <_puts_r+0x88>
 8007688:	08007ee8 	.word	0x08007ee8
 800768c:	08007f08 	.word	0x08007f08
 8007690:	08007ec8 	.word	0x08007ec8

08007694 <puts>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <puts+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f7ff bf8d 	b.w	80075b8 <_puts_r>
 800769e:	bf00      	nop
 80076a0:	20000018 	.word	0x20000018

080076a4 <_sbrk_r>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	4d06      	ldr	r5, [pc, #24]	; (80076c0 <_sbrk_r+0x1c>)
 80076a8:	2300      	movs	r3, #0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4608      	mov	r0, r1
 80076ae:	602b      	str	r3, [r5, #0]
 80076b0:	f7f9 fbdc 	bl	8000e6c <_sbrk>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_sbrk_r+0x1a>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_sbrk_r+0x1a>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	2001354c 	.word	0x2001354c

080076c4 <__swbuf_r>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	460e      	mov	r6, r1
 80076c8:	4614      	mov	r4, r2
 80076ca:	4605      	mov	r5, r0
 80076cc:	b118      	cbz	r0, 80076d6 <__swbuf_r+0x12>
 80076ce:	6983      	ldr	r3, [r0, #24]
 80076d0:	b90b      	cbnz	r3, 80076d6 <__swbuf_r+0x12>
 80076d2:	f000 f9d1 	bl	8007a78 <__sinit>
 80076d6:	4b21      	ldr	r3, [pc, #132]	; (800775c <__swbuf_r+0x98>)
 80076d8:	429c      	cmp	r4, r3
 80076da:	d12b      	bne.n	8007734 <__swbuf_r+0x70>
 80076dc:	686c      	ldr	r4, [r5, #4]
 80076de:	69a3      	ldr	r3, [r4, #24]
 80076e0:	60a3      	str	r3, [r4, #8]
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	071a      	lsls	r2, r3, #28
 80076e6:	d52f      	bpl.n	8007748 <__swbuf_r+0x84>
 80076e8:	6923      	ldr	r3, [r4, #16]
 80076ea:	b36b      	cbz	r3, 8007748 <__swbuf_r+0x84>
 80076ec:	6923      	ldr	r3, [r4, #16]
 80076ee:	6820      	ldr	r0, [r4, #0]
 80076f0:	1ac0      	subs	r0, r0, r3
 80076f2:	6963      	ldr	r3, [r4, #20]
 80076f4:	b2f6      	uxtb	r6, r6
 80076f6:	4283      	cmp	r3, r0
 80076f8:	4637      	mov	r7, r6
 80076fa:	dc04      	bgt.n	8007706 <__swbuf_r+0x42>
 80076fc:	4621      	mov	r1, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f926 	bl	8007950 <_fflush_r>
 8007704:	bb30      	cbnz	r0, 8007754 <__swbuf_r+0x90>
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	3b01      	subs	r3, #1
 800770a:	60a3      	str	r3, [r4, #8]
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	701e      	strb	r6, [r3, #0]
 8007714:	6963      	ldr	r3, [r4, #20]
 8007716:	3001      	adds	r0, #1
 8007718:	4283      	cmp	r3, r0
 800771a:	d004      	beq.n	8007726 <__swbuf_r+0x62>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	d506      	bpl.n	8007730 <__swbuf_r+0x6c>
 8007722:	2e0a      	cmp	r6, #10
 8007724:	d104      	bne.n	8007730 <__swbuf_r+0x6c>
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	f000 f911 	bl	8007950 <_fflush_r>
 800772e:	b988      	cbnz	r0, 8007754 <__swbuf_r+0x90>
 8007730:	4638      	mov	r0, r7
 8007732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007734:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <__swbuf_r+0x9c>)
 8007736:	429c      	cmp	r4, r3
 8007738:	d101      	bne.n	800773e <__swbuf_r+0x7a>
 800773a:	68ac      	ldr	r4, [r5, #8]
 800773c:	e7cf      	b.n	80076de <__swbuf_r+0x1a>
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <__swbuf_r+0xa0>)
 8007740:	429c      	cmp	r4, r3
 8007742:	bf08      	it	eq
 8007744:	68ec      	ldreq	r4, [r5, #12]
 8007746:	e7ca      	b.n	80076de <__swbuf_r+0x1a>
 8007748:	4621      	mov	r1, r4
 800774a:	4628      	mov	r0, r5
 800774c:	f000 f80c 	bl	8007768 <__swsetup_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	d0cb      	beq.n	80076ec <__swbuf_r+0x28>
 8007754:	f04f 37ff 	mov.w	r7, #4294967295
 8007758:	e7ea      	b.n	8007730 <__swbuf_r+0x6c>
 800775a:	bf00      	nop
 800775c:	08007ee8 	.word	0x08007ee8
 8007760:	08007f08 	.word	0x08007f08
 8007764:	08007ec8 	.word	0x08007ec8

08007768 <__swsetup_r>:
 8007768:	4b32      	ldr	r3, [pc, #200]	; (8007834 <__swsetup_r+0xcc>)
 800776a:	b570      	push	{r4, r5, r6, lr}
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	4606      	mov	r6, r0
 8007770:	460c      	mov	r4, r1
 8007772:	b125      	cbz	r5, 800777e <__swsetup_r+0x16>
 8007774:	69ab      	ldr	r3, [r5, #24]
 8007776:	b913      	cbnz	r3, 800777e <__swsetup_r+0x16>
 8007778:	4628      	mov	r0, r5
 800777a:	f000 f97d 	bl	8007a78 <__sinit>
 800777e:	4b2e      	ldr	r3, [pc, #184]	; (8007838 <__swsetup_r+0xd0>)
 8007780:	429c      	cmp	r4, r3
 8007782:	d10f      	bne.n	80077a4 <__swsetup_r+0x3c>
 8007784:	686c      	ldr	r4, [r5, #4]
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800778c:	0719      	lsls	r1, r3, #28
 800778e:	d42c      	bmi.n	80077ea <__swsetup_r+0x82>
 8007790:	06dd      	lsls	r5, r3, #27
 8007792:	d411      	bmi.n	80077b8 <__swsetup_r+0x50>
 8007794:	2309      	movs	r3, #9
 8007796:	6033      	str	r3, [r6, #0]
 8007798:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	e03e      	b.n	8007822 <__swsetup_r+0xba>
 80077a4:	4b25      	ldr	r3, [pc, #148]	; (800783c <__swsetup_r+0xd4>)
 80077a6:	429c      	cmp	r4, r3
 80077a8:	d101      	bne.n	80077ae <__swsetup_r+0x46>
 80077aa:	68ac      	ldr	r4, [r5, #8]
 80077ac:	e7eb      	b.n	8007786 <__swsetup_r+0x1e>
 80077ae:	4b24      	ldr	r3, [pc, #144]	; (8007840 <__swsetup_r+0xd8>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	bf08      	it	eq
 80077b4:	68ec      	ldreq	r4, [r5, #12]
 80077b6:	e7e6      	b.n	8007786 <__swsetup_r+0x1e>
 80077b8:	0758      	lsls	r0, r3, #29
 80077ba:	d512      	bpl.n	80077e2 <__swsetup_r+0x7a>
 80077bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077be:	b141      	cbz	r1, 80077d2 <__swsetup_r+0x6a>
 80077c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <__swsetup_r+0x66>
 80077c8:	4630      	mov	r0, r6
 80077ca:	f7ff fe4b 	bl	8007464 <_free_r>
 80077ce:	2300      	movs	r3, #0
 80077d0:	6363      	str	r3, [r4, #52]	; 0x34
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	2300      	movs	r3, #0
 80077dc:	6063      	str	r3, [r4, #4]
 80077de:	6923      	ldr	r3, [r4, #16]
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	f043 0308 	orr.w	r3, r3, #8
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	6923      	ldr	r3, [r4, #16]
 80077ec:	b94b      	cbnz	r3, 8007802 <__swsetup_r+0x9a>
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f8:	d003      	beq.n	8007802 <__swsetup_r+0x9a>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f9ff 	bl	8007c00 <__smakebuf_r>
 8007802:	89a0      	ldrh	r0, [r4, #12]
 8007804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007808:	f010 0301 	ands.w	r3, r0, #1
 800780c:	d00a      	beq.n	8007824 <__swsetup_r+0xbc>
 800780e:	2300      	movs	r3, #0
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	6963      	ldr	r3, [r4, #20]
 8007814:	425b      	negs	r3, r3
 8007816:	61a3      	str	r3, [r4, #24]
 8007818:	6923      	ldr	r3, [r4, #16]
 800781a:	b943      	cbnz	r3, 800782e <__swsetup_r+0xc6>
 800781c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007820:	d1ba      	bne.n	8007798 <__swsetup_r+0x30>
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	0781      	lsls	r1, r0, #30
 8007826:	bf58      	it	pl
 8007828:	6963      	ldrpl	r3, [r4, #20]
 800782a:	60a3      	str	r3, [r4, #8]
 800782c:	e7f4      	b.n	8007818 <__swsetup_r+0xb0>
 800782e:	2000      	movs	r0, #0
 8007830:	e7f7      	b.n	8007822 <__swsetup_r+0xba>
 8007832:	bf00      	nop
 8007834:	20000018 	.word	0x20000018
 8007838:	08007ee8 	.word	0x08007ee8
 800783c:	08007f08 	.word	0x08007f08
 8007840:	08007ec8 	.word	0x08007ec8

08007844 <__sflush_r>:
 8007844:	898a      	ldrh	r2, [r1, #12]
 8007846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800784a:	4605      	mov	r5, r0
 800784c:	0710      	lsls	r0, r2, #28
 800784e:	460c      	mov	r4, r1
 8007850:	d458      	bmi.n	8007904 <__sflush_r+0xc0>
 8007852:	684b      	ldr	r3, [r1, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dc05      	bgt.n	8007864 <__sflush_r+0x20>
 8007858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	dc02      	bgt.n	8007864 <__sflush_r+0x20>
 800785e:	2000      	movs	r0, #0
 8007860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007866:	2e00      	cmp	r6, #0
 8007868:	d0f9      	beq.n	800785e <__sflush_r+0x1a>
 800786a:	2300      	movs	r3, #0
 800786c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007870:	682f      	ldr	r7, [r5, #0]
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	d032      	beq.n	80078dc <__sflush_r+0x98>
 8007876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	075a      	lsls	r2, r3, #29
 800787c:	d505      	bpl.n	800788a <__sflush_r+0x46>
 800787e:	6863      	ldr	r3, [r4, #4]
 8007880:	1ac0      	subs	r0, r0, r3
 8007882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007884:	b10b      	cbz	r3, 800788a <__sflush_r+0x46>
 8007886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	2300      	movs	r3, #0
 800788c:	4602      	mov	r2, r0
 800788e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007890:	6a21      	ldr	r1, [r4, #32]
 8007892:	4628      	mov	r0, r5
 8007894:	47b0      	blx	r6
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	89a3      	ldrh	r3, [r4, #12]
 800789a:	d106      	bne.n	80078aa <__sflush_r+0x66>
 800789c:	6829      	ldr	r1, [r5, #0]
 800789e:	291d      	cmp	r1, #29
 80078a0:	d82c      	bhi.n	80078fc <__sflush_r+0xb8>
 80078a2:	4a2a      	ldr	r2, [pc, #168]	; (800794c <__sflush_r+0x108>)
 80078a4:	40ca      	lsrs	r2, r1
 80078a6:	07d6      	lsls	r6, r2, #31
 80078a8:	d528      	bpl.n	80078fc <__sflush_r+0xb8>
 80078aa:	2200      	movs	r2, #0
 80078ac:	6062      	str	r2, [r4, #4]
 80078ae:	04d9      	lsls	r1, r3, #19
 80078b0:	6922      	ldr	r2, [r4, #16]
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	d504      	bpl.n	80078c0 <__sflush_r+0x7c>
 80078b6:	1c42      	adds	r2, r0, #1
 80078b8:	d101      	bne.n	80078be <__sflush_r+0x7a>
 80078ba:	682b      	ldr	r3, [r5, #0]
 80078bc:	b903      	cbnz	r3, 80078c0 <__sflush_r+0x7c>
 80078be:	6560      	str	r0, [r4, #84]	; 0x54
 80078c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078c2:	602f      	str	r7, [r5, #0]
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d0ca      	beq.n	800785e <__sflush_r+0x1a>
 80078c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078cc:	4299      	cmp	r1, r3
 80078ce:	d002      	beq.n	80078d6 <__sflush_r+0x92>
 80078d0:	4628      	mov	r0, r5
 80078d2:	f7ff fdc7 	bl	8007464 <_free_r>
 80078d6:	2000      	movs	r0, #0
 80078d8:	6360      	str	r0, [r4, #52]	; 0x34
 80078da:	e7c1      	b.n	8007860 <__sflush_r+0x1c>
 80078dc:	6a21      	ldr	r1, [r4, #32]
 80078de:	2301      	movs	r3, #1
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b0      	blx	r6
 80078e4:	1c41      	adds	r1, r0, #1
 80078e6:	d1c7      	bne.n	8007878 <__sflush_r+0x34>
 80078e8:	682b      	ldr	r3, [r5, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d0c4      	beq.n	8007878 <__sflush_r+0x34>
 80078ee:	2b1d      	cmp	r3, #29
 80078f0:	d001      	beq.n	80078f6 <__sflush_r+0xb2>
 80078f2:	2b16      	cmp	r3, #22
 80078f4:	d101      	bne.n	80078fa <__sflush_r+0xb6>
 80078f6:	602f      	str	r7, [r5, #0]
 80078f8:	e7b1      	b.n	800785e <__sflush_r+0x1a>
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007900:	81a3      	strh	r3, [r4, #12]
 8007902:	e7ad      	b.n	8007860 <__sflush_r+0x1c>
 8007904:	690f      	ldr	r7, [r1, #16]
 8007906:	2f00      	cmp	r7, #0
 8007908:	d0a9      	beq.n	800785e <__sflush_r+0x1a>
 800790a:	0793      	lsls	r3, r2, #30
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	bf08      	it	eq
 8007910:	694b      	ldreq	r3, [r1, #20]
 8007912:	600f      	str	r7, [r1, #0]
 8007914:	bf18      	it	ne
 8007916:	2300      	movne	r3, #0
 8007918:	eba6 0807 	sub.w	r8, r6, r7
 800791c:	608b      	str	r3, [r1, #8]
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	dd9c      	ble.n	800785e <__sflush_r+0x1a>
 8007924:	6a21      	ldr	r1, [r4, #32]
 8007926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007928:	4643      	mov	r3, r8
 800792a:	463a      	mov	r2, r7
 800792c:	4628      	mov	r0, r5
 800792e:	47b0      	blx	r6
 8007930:	2800      	cmp	r0, #0
 8007932:	dc06      	bgt.n	8007942 <__sflush_r+0xfe>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	e78e      	b.n	8007860 <__sflush_r+0x1c>
 8007942:	4407      	add	r7, r0
 8007944:	eba8 0800 	sub.w	r8, r8, r0
 8007948:	e7e9      	b.n	800791e <__sflush_r+0xda>
 800794a:	bf00      	nop
 800794c:	20400001 	.word	0x20400001

08007950 <_fflush_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b913      	cbnz	r3, 8007960 <_fflush_r+0x10>
 800795a:	2500      	movs	r5, #0
 800795c:	4628      	mov	r0, r5
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	b118      	cbz	r0, 800796a <_fflush_r+0x1a>
 8007962:	6983      	ldr	r3, [r0, #24]
 8007964:	b90b      	cbnz	r3, 800796a <_fflush_r+0x1a>
 8007966:	f000 f887 	bl	8007a78 <__sinit>
 800796a:	4b14      	ldr	r3, [pc, #80]	; (80079bc <_fflush_r+0x6c>)
 800796c:	429c      	cmp	r4, r3
 800796e:	d11b      	bne.n	80079a8 <_fflush_r+0x58>
 8007970:	686c      	ldr	r4, [r5, #4]
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0ef      	beq.n	800795a <_fflush_r+0xa>
 800797a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800797c:	07d0      	lsls	r0, r2, #31
 800797e:	d404      	bmi.n	800798a <_fflush_r+0x3a>
 8007980:	0599      	lsls	r1, r3, #22
 8007982:	d402      	bmi.n	800798a <_fflush_r+0x3a>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f000 f915 	bl	8007bb4 <__retarget_lock_acquire_recursive>
 800798a:	4628      	mov	r0, r5
 800798c:	4621      	mov	r1, r4
 800798e:	f7ff ff59 	bl	8007844 <__sflush_r>
 8007992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007994:	07da      	lsls	r2, r3, #31
 8007996:	4605      	mov	r5, r0
 8007998:	d4e0      	bmi.n	800795c <_fflush_r+0xc>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	059b      	lsls	r3, r3, #22
 800799e:	d4dd      	bmi.n	800795c <_fflush_r+0xc>
 80079a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079a2:	f000 f908 	bl	8007bb6 <__retarget_lock_release_recursive>
 80079a6:	e7d9      	b.n	800795c <_fflush_r+0xc>
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <_fflush_r+0x70>)
 80079aa:	429c      	cmp	r4, r3
 80079ac:	d101      	bne.n	80079b2 <_fflush_r+0x62>
 80079ae:	68ac      	ldr	r4, [r5, #8]
 80079b0:	e7df      	b.n	8007972 <_fflush_r+0x22>
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <_fflush_r+0x74>)
 80079b4:	429c      	cmp	r4, r3
 80079b6:	bf08      	it	eq
 80079b8:	68ec      	ldreq	r4, [r5, #12]
 80079ba:	e7da      	b.n	8007972 <_fflush_r+0x22>
 80079bc:	08007ee8 	.word	0x08007ee8
 80079c0:	08007f08 	.word	0x08007f08
 80079c4:	08007ec8 	.word	0x08007ec8

080079c8 <std>:
 80079c8:	2300      	movs	r3, #0
 80079ca:	b510      	push	{r4, lr}
 80079cc:	4604      	mov	r4, r0
 80079ce:	e9c0 3300 	strd	r3, r3, [r0]
 80079d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079d6:	6083      	str	r3, [r0, #8]
 80079d8:	8181      	strh	r1, [r0, #12]
 80079da:	6643      	str	r3, [r0, #100]	; 0x64
 80079dc:	81c2      	strh	r2, [r0, #14]
 80079de:	6183      	str	r3, [r0, #24]
 80079e0:	4619      	mov	r1, r3
 80079e2:	2208      	movs	r2, #8
 80079e4:	305c      	adds	r0, #92	; 0x5c
 80079e6:	f7ff fd35 	bl	8007454 <memset>
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <std+0x38>)
 80079ec:	6263      	str	r3, [r4, #36]	; 0x24
 80079ee:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <std+0x3c>)
 80079f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80079f2:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <std+0x40>)
 80079f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <std+0x44>)
 80079f8:	6224      	str	r4, [r4, #32]
 80079fa:	6323      	str	r3, [r4, #48]	; 0x30
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	08007c99 	.word	0x08007c99
 8007a04:	08007cbb 	.word	0x08007cbb
 8007a08:	08007cf3 	.word	0x08007cf3
 8007a0c:	08007d17 	.word	0x08007d17

08007a10 <_cleanup_r>:
 8007a10:	4901      	ldr	r1, [pc, #4]	; (8007a18 <_cleanup_r+0x8>)
 8007a12:	f000 b8af 	b.w	8007b74 <_fwalk_reent>
 8007a16:	bf00      	nop
 8007a18:	08007951 	.word	0x08007951

08007a1c <__sfmoreglue>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	1e4a      	subs	r2, r1, #1
 8007a20:	2568      	movs	r5, #104	; 0x68
 8007a22:	4355      	muls	r5, r2
 8007a24:	460e      	mov	r6, r1
 8007a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a2a:	f7ff fd6b 	bl	8007504 <_malloc_r>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	b140      	cbz	r0, 8007a44 <__sfmoreglue+0x28>
 8007a32:	2100      	movs	r1, #0
 8007a34:	e9c0 1600 	strd	r1, r6, [r0]
 8007a38:	300c      	adds	r0, #12
 8007a3a:	60a0      	str	r0, [r4, #8]
 8007a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a40:	f7ff fd08 	bl	8007454 <memset>
 8007a44:	4620      	mov	r0, r4
 8007a46:	bd70      	pop	{r4, r5, r6, pc}

08007a48 <__sfp_lock_acquire>:
 8007a48:	4801      	ldr	r0, [pc, #4]	; (8007a50 <__sfp_lock_acquire+0x8>)
 8007a4a:	f000 b8b3 	b.w	8007bb4 <__retarget_lock_acquire_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20013548 	.word	0x20013548

08007a54 <__sfp_lock_release>:
 8007a54:	4801      	ldr	r0, [pc, #4]	; (8007a5c <__sfp_lock_release+0x8>)
 8007a56:	f000 b8ae 	b.w	8007bb6 <__retarget_lock_release_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	20013548 	.word	0x20013548

08007a60 <__sinit_lock_acquire>:
 8007a60:	4801      	ldr	r0, [pc, #4]	; (8007a68 <__sinit_lock_acquire+0x8>)
 8007a62:	f000 b8a7 	b.w	8007bb4 <__retarget_lock_acquire_recursive>
 8007a66:	bf00      	nop
 8007a68:	20013543 	.word	0x20013543

08007a6c <__sinit_lock_release>:
 8007a6c:	4801      	ldr	r0, [pc, #4]	; (8007a74 <__sinit_lock_release+0x8>)
 8007a6e:	f000 b8a2 	b.w	8007bb6 <__retarget_lock_release_recursive>
 8007a72:	bf00      	nop
 8007a74:	20013543 	.word	0x20013543

08007a78 <__sinit>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	f7ff fff0 	bl	8007a60 <__sinit_lock_acquire>
 8007a80:	69a3      	ldr	r3, [r4, #24]
 8007a82:	b11b      	cbz	r3, 8007a8c <__sinit+0x14>
 8007a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a88:	f7ff bff0 	b.w	8007a6c <__sinit_lock_release>
 8007a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a90:	6523      	str	r3, [r4, #80]	; 0x50
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <__sinit+0x68>)
 8007a94:	4a13      	ldr	r2, [pc, #76]	; (8007ae4 <__sinit+0x6c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	bf04      	itt	eq
 8007a9e:	2301      	moveq	r3, #1
 8007aa0:	61a3      	streq	r3, [r4, #24]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	f000 f820 	bl	8007ae8 <__sfp>
 8007aa8:	6060      	str	r0, [r4, #4]
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 f81c 	bl	8007ae8 <__sfp>
 8007ab0:	60a0      	str	r0, [r4, #8]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f000 f818 	bl	8007ae8 <__sfp>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	60e0      	str	r0, [r4, #12]
 8007abc:	2104      	movs	r1, #4
 8007abe:	6860      	ldr	r0, [r4, #4]
 8007ac0:	f7ff ff82 	bl	80079c8 <std>
 8007ac4:	68a0      	ldr	r0, [r4, #8]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	2109      	movs	r1, #9
 8007aca:	f7ff ff7d 	bl	80079c8 <std>
 8007ace:	68e0      	ldr	r0, [r4, #12]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	2112      	movs	r1, #18
 8007ad4:	f7ff ff78 	bl	80079c8 <std>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	61a3      	str	r3, [r4, #24]
 8007adc:	e7d2      	b.n	8007a84 <__sinit+0xc>
 8007ade:	bf00      	nop
 8007ae0:	08007ec4 	.word	0x08007ec4
 8007ae4:	08007a11 	.word	0x08007a11

08007ae8 <__sfp>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	4607      	mov	r7, r0
 8007aec:	f7ff ffac 	bl	8007a48 <__sfp_lock_acquire>
 8007af0:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <__sfp+0x84>)
 8007af2:	681e      	ldr	r6, [r3, #0]
 8007af4:	69b3      	ldr	r3, [r6, #24]
 8007af6:	b913      	cbnz	r3, 8007afe <__sfp+0x16>
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7ff ffbd 	bl	8007a78 <__sinit>
 8007afe:	3648      	adds	r6, #72	; 0x48
 8007b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	d503      	bpl.n	8007b10 <__sfp+0x28>
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	b30b      	cbz	r3, 8007b50 <__sfp+0x68>
 8007b0c:	6836      	ldr	r6, [r6, #0]
 8007b0e:	e7f7      	b.n	8007b00 <__sfp+0x18>
 8007b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b14:	b9d5      	cbnz	r5, 8007b4c <__sfp+0x64>
 8007b16:	4b16      	ldr	r3, [pc, #88]	; (8007b70 <__sfp+0x88>)
 8007b18:	60e3      	str	r3, [r4, #12]
 8007b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b20:	f000 f847 	bl	8007bb2 <__retarget_lock_init_recursive>
 8007b24:	f7ff ff96 	bl	8007a54 <__sfp_lock_release>
 8007b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b30:	6025      	str	r5, [r4, #0]
 8007b32:	61a5      	str	r5, [r4, #24]
 8007b34:	2208      	movs	r2, #8
 8007b36:	4629      	mov	r1, r5
 8007b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b3c:	f7ff fc8a 	bl	8007454 <memset>
 8007b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b48:	4620      	mov	r0, r4
 8007b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b4c:	3468      	adds	r4, #104	; 0x68
 8007b4e:	e7d9      	b.n	8007b04 <__sfp+0x1c>
 8007b50:	2104      	movs	r1, #4
 8007b52:	4638      	mov	r0, r7
 8007b54:	f7ff ff62 	bl	8007a1c <__sfmoreglue>
 8007b58:	4604      	mov	r4, r0
 8007b5a:	6030      	str	r0, [r6, #0]
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d1d5      	bne.n	8007b0c <__sfp+0x24>
 8007b60:	f7ff ff78 	bl	8007a54 <__sfp_lock_release>
 8007b64:	230c      	movs	r3, #12
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	e7ee      	b.n	8007b48 <__sfp+0x60>
 8007b6a:	bf00      	nop
 8007b6c:	08007ec4 	.word	0x08007ec4
 8007b70:	ffff0001 	.word	0xffff0001

08007b74 <_fwalk_reent>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	4606      	mov	r6, r0
 8007b7a:	4688      	mov	r8, r1
 8007b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b80:	2700      	movs	r7, #0
 8007b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b86:	f1b9 0901 	subs.w	r9, r9, #1
 8007b8a:	d505      	bpl.n	8007b98 <_fwalk_reent+0x24>
 8007b8c:	6824      	ldr	r4, [r4, #0]
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	d1f7      	bne.n	8007b82 <_fwalk_reent+0xe>
 8007b92:	4638      	mov	r0, r7
 8007b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b98:	89ab      	ldrh	r3, [r5, #12]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d907      	bls.n	8007bae <_fwalk_reent+0x3a>
 8007b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	d003      	beq.n	8007bae <_fwalk_reent+0x3a>
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4630      	mov	r0, r6
 8007baa:	47c0      	blx	r8
 8007bac:	4307      	orrs	r7, r0
 8007bae:	3568      	adds	r5, #104	; 0x68
 8007bb0:	e7e9      	b.n	8007b86 <_fwalk_reent+0x12>

08007bb2 <__retarget_lock_init_recursive>:
 8007bb2:	4770      	bx	lr

08007bb4 <__retarget_lock_acquire_recursive>:
 8007bb4:	4770      	bx	lr

08007bb6 <__retarget_lock_release_recursive>:
 8007bb6:	4770      	bx	lr

08007bb8 <__swhatbuf_r>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	460e      	mov	r6, r1
 8007bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	b096      	sub	sp, #88	; 0x58
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	da07      	bge.n	8007bda <__swhatbuf_r+0x22>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	89b3      	ldrh	r3, [r6, #12]
 8007bd0:	061a      	lsls	r2, r3, #24
 8007bd2:	d410      	bmi.n	8007bf6 <__swhatbuf_r+0x3e>
 8007bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd8:	e00e      	b.n	8007bf8 <__swhatbuf_r+0x40>
 8007bda:	466a      	mov	r2, sp
 8007bdc:	f000 f8b0 	bl	8007d40 <_fstat_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	dbf2      	blt.n	8007bca <__swhatbuf_r+0x12>
 8007be4:	9a01      	ldr	r2, [sp, #4]
 8007be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bee:	425a      	negs	r2, r3
 8007bf0:	415a      	adcs	r2, r3
 8007bf2:	602a      	str	r2, [r5, #0]
 8007bf4:	e7ee      	b.n	8007bd4 <__swhatbuf_r+0x1c>
 8007bf6:	2340      	movs	r3, #64	; 0x40
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	b016      	add	sp, #88	; 0x58
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}

08007c00 <__smakebuf_r>:
 8007c00:	898b      	ldrh	r3, [r1, #12]
 8007c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c04:	079d      	lsls	r5, r3, #30
 8007c06:	4606      	mov	r6, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	d507      	bpl.n	8007c1c <__smakebuf_r+0x1c>
 8007c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	6123      	str	r3, [r4, #16]
 8007c14:	2301      	movs	r3, #1
 8007c16:	6163      	str	r3, [r4, #20]
 8007c18:	b002      	add	sp, #8
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	ab01      	add	r3, sp, #4
 8007c1e:	466a      	mov	r2, sp
 8007c20:	f7ff ffca 	bl	8007bb8 <__swhatbuf_r>
 8007c24:	9900      	ldr	r1, [sp, #0]
 8007c26:	4605      	mov	r5, r0
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff fc6b 	bl	8007504 <_malloc_r>
 8007c2e:	b948      	cbnz	r0, 8007c44 <__smakebuf_r+0x44>
 8007c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c34:	059a      	lsls	r2, r3, #22
 8007c36:	d4ef      	bmi.n	8007c18 <__smakebuf_r+0x18>
 8007c38:	f023 0303 	bic.w	r3, r3, #3
 8007c3c:	f043 0302 	orr.w	r3, r3, #2
 8007c40:	81a3      	strh	r3, [r4, #12]
 8007c42:	e7e3      	b.n	8007c0c <__smakebuf_r+0xc>
 8007c44:	4b0d      	ldr	r3, [pc, #52]	; (8007c7c <__smakebuf_r+0x7c>)
 8007c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c48:	89a3      	ldrh	r3, [r4, #12]
 8007c4a:	6020      	str	r0, [r4, #0]
 8007c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c50:	81a3      	strh	r3, [r4, #12]
 8007c52:	9b00      	ldr	r3, [sp, #0]
 8007c54:	6163      	str	r3, [r4, #20]
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	6120      	str	r0, [r4, #16]
 8007c5a:	b15b      	cbz	r3, 8007c74 <__smakebuf_r+0x74>
 8007c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c60:	4630      	mov	r0, r6
 8007c62:	f000 f87f 	bl	8007d64 <_isatty_r>
 8007c66:	b128      	cbz	r0, 8007c74 <__smakebuf_r+0x74>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f023 0303 	bic.w	r3, r3, #3
 8007c6e:	f043 0301 	orr.w	r3, r3, #1
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	89a0      	ldrh	r0, [r4, #12]
 8007c76:	4305      	orrs	r5, r0
 8007c78:	81a5      	strh	r5, [r4, #12]
 8007c7a:	e7cd      	b.n	8007c18 <__smakebuf_r+0x18>
 8007c7c:	08007a11 	.word	0x08007a11

08007c80 <__malloc_lock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <__malloc_lock+0x8>)
 8007c82:	f7ff bf97 	b.w	8007bb4 <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	20013544 	.word	0x20013544

08007c8c <__malloc_unlock>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	; (8007c94 <__malloc_unlock+0x8>)
 8007c8e:	f7ff bf92 	b.w	8007bb6 <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	20013544 	.word	0x20013544

08007c98 <__sread>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	f000 f882 	bl	8007da8 <_read_r>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	bfab      	itete	ge
 8007ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007caa:	89a3      	ldrhlt	r3, [r4, #12]
 8007cac:	181b      	addge	r3, r3, r0
 8007cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cb2:	bfac      	ite	ge
 8007cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cb6:	81a3      	strhlt	r3, [r4, #12]
 8007cb8:	bd10      	pop	{r4, pc}

08007cba <__swrite>:
 8007cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	461f      	mov	r7, r3
 8007cc0:	898b      	ldrh	r3, [r1, #12]
 8007cc2:	05db      	lsls	r3, r3, #23
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	4616      	mov	r6, r2
 8007cca:	d505      	bpl.n	8007cd8 <__swrite+0x1e>
 8007ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f000 f856 	bl	8007d84 <_lseek_r>
 8007cd8:	89a3      	ldrh	r3, [r4, #12]
 8007cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce2:	81a3      	strh	r3, [r4, #12]
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	4628      	mov	r0, r5
 8007cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cee:	f7ff bb59 	b.w	80073a4 <_write_r>

08007cf2 <__sseek>:
 8007cf2:	b510      	push	{r4, lr}
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfa:	f000 f843 	bl	8007d84 <_lseek_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	89a3      	ldrh	r3, [r4, #12]
 8007d02:	bf15      	itete	ne
 8007d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d0e:	81a3      	strheq	r3, [r4, #12]
 8007d10:	bf18      	it	ne
 8007d12:	81a3      	strhne	r3, [r4, #12]
 8007d14:	bd10      	pop	{r4, pc}

08007d16 <__sclose>:
 8007d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1a:	f000 b801 	b.w	8007d20 <_close_r>
	...

08007d20 <_close_r>:
 8007d20:	b538      	push	{r3, r4, r5, lr}
 8007d22:	4d06      	ldr	r5, [pc, #24]	; (8007d3c <_close_r+0x1c>)
 8007d24:	2300      	movs	r3, #0
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	602b      	str	r3, [r5, #0]
 8007d2c:	f7f9 f869 	bl	8000e02 <_close>
 8007d30:	1c43      	adds	r3, r0, #1
 8007d32:	d102      	bne.n	8007d3a <_close_r+0x1a>
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	b103      	cbz	r3, 8007d3a <_close_r+0x1a>
 8007d38:	6023      	str	r3, [r4, #0]
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	2001354c 	.word	0x2001354c

08007d40 <_fstat_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	4d07      	ldr	r5, [pc, #28]	; (8007d60 <_fstat_r+0x20>)
 8007d44:	2300      	movs	r3, #0
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	602b      	str	r3, [r5, #0]
 8007d4e:	f7f9 f864 	bl	8000e1a <_fstat>
 8007d52:	1c43      	adds	r3, r0, #1
 8007d54:	d102      	bne.n	8007d5c <_fstat_r+0x1c>
 8007d56:	682b      	ldr	r3, [r5, #0]
 8007d58:	b103      	cbz	r3, 8007d5c <_fstat_r+0x1c>
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	bd38      	pop	{r3, r4, r5, pc}
 8007d5e:	bf00      	nop
 8007d60:	2001354c 	.word	0x2001354c

08007d64 <_isatty_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4d06      	ldr	r5, [pc, #24]	; (8007d80 <_isatty_r+0x1c>)
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4608      	mov	r0, r1
 8007d6e:	602b      	str	r3, [r5, #0]
 8007d70:	f7f9 f863 	bl	8000e3a <_isatty>
 8007d74:	1c43      	adds	r3, r0, #1
 8007d76:	d102      	bne.n	8007d7e <_isatty_r+0x1a>
 8007d78:	682b      	ldr	r3, [r5, #0]
 8007d7a:	b103      	cbz	r3, 8007d7e <_isatty_r+0x1a>
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
 8007d80:	2001354c 	.word	0x2001354c

08007d84 <_lseek_r>:
 8007d84:	b538      	push	{r3, r4, r5, lr}
 8007d86:	4d07      	ldr	r5, [pc, #28]	; (8007da4 <_lseek_r+0x20>)
 8007d88:	4604      	mov	r4, r0
 8007d8a:	4608      	mov	r0, r1
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	602a      	str	r2, [r5, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	f7f9 f85c 	bl	8000e50 <_lseek>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_lseek_r+0x1e>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_lseek_r+0x1e>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	2001354c 	.word	0x2001354c

08007da8 <_read_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d07      	ldr	r5, [pc, #28]	; (8007dc8 <_read_r+0x20>)
 8007dac:	4604      	mov	r4, r0
 8007dae:	4608      	mov	r0, r1
 8007db0:	4611      	mov	r1, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	f7f9 f806 	bl	8000dc8 <_read>
 8007dbc:	1c43      	adds	r3, r0, #1
 8007dbe:	d102      	bne.n	8007dc6 <_read_r+0x1e>
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	b103      	cbz	r3, 8007dc6 <_read_r+0x1e>
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	bd38      	pop	{r3, r4, r5, pc}
 8007dc8:	2001354c 	.word	0x2001354c

08007dcc <_init>:
 8007dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dce:	bf00      	nop
 8007dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dd2:	bc08      	pop	{r3}
 8007dd4:	469e      	mov	lr, r3
 8007dd6:	4770      	bx	lr

08007dd8 <_fini>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	bf00      	nop
 8007ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dde:	bc08      	pop	{r3}
 8007de0:	469e      	mov	lr, r3
 8007de2:	4770      	bx	lr
