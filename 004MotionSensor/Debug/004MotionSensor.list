
004MotionSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800d95c  0800d95c  0001d95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da30  0800da30  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800da30  0800da30  0001da30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da38  0800da38  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da38  0800da38  0001da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da3c  0800da3c  0001da3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800da40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00013d68  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013e00  20013e00  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031a2f  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dff  00000000  00000000  00051af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002210  00000000  00000000  000578f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ff0  00000000  00000000  00059b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d80  00000000  00000000  0005baf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000298b6  00000000  00000000  00083878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e54b2  00000000  00000000  000ad12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001925e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009348  00000000  00000000  00192634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d944 	.word	0x0800d944

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800d944 	.word	0x0800d944

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013d48 	.word	0x20013d48

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2108      	movs	r1, #8
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <MEMS_Write+0x44>)
 8000572:	f001 f8db 	bl	800172c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 8000576:	1df9      	adds	r1, r7, #7
 8000578:	230a      	movs	r3, #10
 800057a:	2201      	movs	r2, #1
 800057c:	4809      	ldr	r0, [pc, #36]	; (80005a4 <MEMS_Write+0x48>)
 800057e:	f004 fae4 	bl	8004b4a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 8000582:	1db9      	adds	r1, r7, #6
 8000584:	230a      	movs	r3, #10
 8000586:	2201      	movs	r2, #1
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <MEMS_Write+0x48>)
 800058a:	f004 fade 	bl	8004b4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2108      	movs	r1, #8
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MEMS_Write+0x44>)
 8000594:	f001 f8ca 	bl	800172c <HAL_GPIO_WritePin>
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	200134fc 	.word	0x200134fc

080005a8 <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2108      	movs	r1, #8
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <MEMS_Read+0x4c>)
 80005c4:	f001 f8b2 	bl	800172c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80005c8:	1df9      	adds	r1, r7, #7
 80005ca:	230a      	movs	r3, #10
 80005cc:	2201      	movs	r2, #1
 80005ce:	480a      	ldr	r0, [pc, #40]	; (80005f8 <MEMS_Read+0x50>)
 80005d0:	f004 fabb 	bl	8004b4a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 80005d4:	230a      	movs	r3, #10
 80005d6:	2201      	movs	r2, #1
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	4807      	ldr	r0, [pc, #28]	; (80005f8 <MEMS_Read+0x50>)
 80005dc:	f004 fbf1 	bl	8004dc2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2108      	movs	r1, #8
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <MEMS_Read+0x4c>)
 80005e6:	f001 f8a1 	bl	800172c <HAL_GPIO_WritePin>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	200134fc 	.word	0x200134fc

080005fc <Green_LED_Task>:
void Green_LED_Task(void *pvParameters)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);
 8000604:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <Green_LED_Task+0x1c>)
 800060a:	f001 f8a8 	bl	800175e <HAL_GPIO_TogglePin>
//		uint8_t data;
//		MEMS_Read(LIS3DSH_WHO_AM_I_ADDR, &data);
//		if(data == 0x3F){

//		}
		vTaskDelay(500 / portTICK_RATE_MS);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f009 ffa7 	bl	800a564 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_Pin);
 8000616:	e7f5      	b.n	8000604 <Green_LED_Task+0x8>
 8000618:	40020c00 	.word	0x40020c00

0800061c <vHandlerTask>:
	}
}
void vHandlerTask( void *pvParameters )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
		{
			/* Take the semaphore */
			uint8_t data;

			// semaphore was obtained
			xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <vHandlerTask+0x58>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f04f 31ff 	mov.w	r1, #4294967295
 800062c:	4618      	mov	r0, r3
 800062e:	f009 fb6b 	bl	8009d08 <xQueueSemaphoreTake>

            // Blink orange LED for 5 times

			for(int i = 0; i < 10; i++){
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e012      	b.n	800065e <vHandlerTask+0x42>
				uint32_t tStart = HAL_GetTick();
 8000638:	f000 fdca 	bl	80011d0 <HAL_GetTick>
 800063c:	6138      	str	r0, [r7, #16]
				HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_Pin);
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <vHandlerTask+0x5c>)
 8000644:	f001 f88b 	bl	800175e <HAL_GPIO_TogglePin>
				while(HAL_GetTick() - tStart < 250 / portTICK_RATE_MS);
 8000648:	bf00      	nop
 800064a:	f000 fdc1 	bl	80011d0 <HAL_GetTick>
 800064e:	4602      	mov	r2, r0
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	2bf9      	cmp	r3, #249	; 0xf9
 8000656:	d9f8      	bls.n	800064a <vHandlerTask+0x2e>
			for(int i = 0; i < 10; i++){
 8000658:	697b      	ldr	r3, [r7, #20]
 800065a:	3301      	adds	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	2b09      	cmp	r3, #9
 8000662:	dde9      	ble.n	8000638 <vHandlerTask+0x1c>
			}
			// reset interrupt register

			MEMS_Read(LIS3DSH_OUTS1_ADDR, &data);
 8000664:	f107 030f 	add.w	r3, r7, #15
 8000668:	4619      	mov	r1, r3
 800066a:	205f      	movs	r0, #95	; 0x5f
 800066c:	f7ff ff9c 	bl	80005a8 <MEMS_Read>
		{
 8000670:	e7d8      	b.n	8000624 <vHandlerTask+0x8>
 8000672:	bf00      	nop
 8000674:	200000b4 	.word	0x200000b4
 8000678:	40020c00 	.word	0x40020c00

0800067c <HAL_GPIO_EXTI_Callback>:
		}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	80fb      	strh	r3, [r7, #6]
	/* red LED toggle */
	HAL_GPIO_TogglePin(GPIOD, LED_RED_Pin);
 8000686:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <HAL_GPIO_EXTI_Callback+0x50>)
 800068c:	f001 f867 	bl	800175e <HAL_GPIO_TogglePin>
	BaseType_t xHigherPriorityTakeWoken = pdFALSE;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTakeWoken);
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f107 020c 	add.w	r2, r7, #12
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f009 f972 	bl	8009988 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTakeWoken);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d00a      	beq.n	80006c0 <HAL_GPIO_EXTI_Callback+0x44>
 80006aa:	f00c fd7f 	bl	800d1ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_GPIO_EXTI_Callback+0x58>)
 80006b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	f3bf 8f6f 	isb	sy
	/* Give the semaphore to unblock the handler task */

}
 80006be:	e001      	b.n	80006c4 <HAL_GPIO_EXTI_Callback+0x48>
	portYIELD_FROM_ISR(xHigherPriorityTakeWoken);
 80006c0:	f00c fd58 	bl	800d174 <SEGGER_SYSVIEW_RecordExitISR>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	200000b4 	.word	0x200000b4
 80006d4:	e000ed04 	.word	0xe000ed04

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fd41 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f87d 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f9a3 	bl	8000a30 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ea:	f000 f8e3 	bl	80008b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ee:	f000 f90f 	bl	8000910 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006f2:	f000 f93d 	bl	8000970 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006f6:	f008 fab7 	bl	8008c68 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80006fa:	f000 f96f 	bl	80009dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // 寫入 register //

  MEMS_Write(LIS3DSH_CTRL_REG1_ADDR, 0x01);
 80006fe:	2101      	movs	r1, #1
 8000700:	2021      	movs	r0, #33	; 0x21
 8000702:	f7ff ff2b 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG3_ADDR, 0x48);
 8000706:	2148      	movs	r1, #72	; 0x48
 8000708:	2023      	movs	r0, #35	; 0x23
 800070a:	f7ff ff27 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG4_ADDR, 0x67);
 800070e:	2167      	movs	r1, #103	; 0x67
 8000710:	2020      	movs	r0, #32
 8000712:	f7ff ff23 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_CTRL_REG5_ADDR, 0x00);
 8000716:	2100      	movs	r1, #0
 8000718:	2024      	movs	r0, #36	; 0x24
 800071a:	f7ff ff1f 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_THRS1_1_ADDR, 0x55);
 800071e:	2155      	movs	r1, #85	; 0x55
 8000720:	2057      	movs	r0, #87	; 0x57
 8000722:	f7ff ff1b 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_1_ADDR, 0x05);
 8000726:	2105      	movs	r1, #5
 8000728:	2040      	movs	r0, #64	; 0x40
 800072a:	f7ff ff17 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_ST1_2_ADDR, 0x11);
 800072e:	2111      	movs	r1, #17
 8000730:	2041      	movs	r0, #65	; 0x41
 8000732:	f7ff ff13 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_B_ADDR, 0xfc);
 8000736:	21fc      	movs	r1, #252	; 0xfc
 8000738:	2059      	movs	r0, #89	; 0x59
 800073a:	f7ff ff0f 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_MASK1_A_ADDR, 0xfc);
 800073e:	21fc      	movs	r1, #252	; 0xfc
 8000740:	205a      	movs	r0, #90	; 0x5a
 8000742:	f7ff ff0b 	bl	800055c <MEMS_Write>
  MEMS_Write(LIS3DSH_SETT1_ADDR, 0x01);
 8000746:	2101      	movs	r1, #1
 8000748:	205b      	movs	r0, #91	; 0x5b
 800074a:	f7ff ff07 	bl	800055c <MEMS_Write>

  // Create the semaphore //
  xSemaphore = xSemaphoreCreateBinary();
 800074e:	2203      	movs	r2, #3
 8000750:	2100      	movs	r1, #0
 8000752:	2001      	movs	r0, #1
 8000754:	f008 feac 	bl	80094b0 <xQueueGenericCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <main+0xf4>)
 800075c:	6013      	str	r3, [r2, #0]

  // task create //
  status = xTaskCreate(Green_LED_Task, "Green_LED_app", 128, NULL, 2, NULL);
 800075e:	2300      	movs	r3, #0
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2302      	movs	r3, #2
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	2300      	movs	r3, #0
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	4919      	ldr	r1, [pc, #100]	; (80007d0 <main+0xf8>)
 800076c:	4819      	ldr	r0, [pc, #100]	; (80007d4 <main+0xfc>)
 800076e:	f009 fd95 	bl	800a29c <xTaskCreate>
 8000772:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d00a      	beq.n	8000790 <main+0xb8>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077e:	f383 8811 	msr	BASEPRI, r3
 8000782:	f3bf 8f6f 	isb	sy
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800078c:	bf00      	nop
 800078e:	e7fe      	b.n	800078e <main+0xb6>
  status = xTaskCreate(vHandlerTask, "vTaskHandlerTask", 128, NULL, 5, NULL);
 8000790:	2300      	movs	r3, #0
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	2305      	movs	r3, #5
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2300      	movs	r3, #0
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	490e      	ldr	r1, [pc, #56]	; (80007d8 <main+0x100>)
 800079e:	480f      	ldr	r0, [pc, #60]	; (80007dc <main+0x104>)
 80007a0:	f009 fd7c 	bl	800a29c <xTaskCreate>
 80007a4:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d00a      	beq.n	80007c2 <main+0xea>
        __asm volatile
 80007ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007b0:	f383 8811 	msr	BASEPRI, r3
 80007b4:	f3bf 8f6f 	isb	sy
 80007b8:	f3bf 8f4f 	dsb	sy
 80007bc:	607b      	str	r3, [r7, #4]
    }
 80007be:	bf00      	nop
 80007c0:	e7fe      	b.n	80007c0 <main+0xe8>
  vTaskStartScheduler();
 80007c2:	f009 ff07 	bl	800a5d4 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007c6:	f008 fa75 	bl	8008cb4 <MX_USB_HOST_Process>
 80007ca:	e7fc      	b.n	80007c6 <main+0xee>
 80007cc:	200000b4 	.word	0x200000b4
 80007d0:	0800d95c 	.word	0x0800d95c
 80007d4:	080005fd 	.word	0x080005fd
 80007d8:	0800d96c 	.word	0x0800d96c
 80007dc:	0800061d 	.word	0x0800061d

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00c ffd8 	bl	800d7a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <SystemClock_Config+0xcc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <SystemClock_Config+0xd0>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000850:	2308      	movs	r3, #8
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000854:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000858:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800085e:	2307      	movs	r3, #7
 8000860:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fb00 	bl	8003e6c <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000872:	f000 f9f3 	bl	8000c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2302      	movs	r3, #2
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f003 fd61 	bl	800435c <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a0:	f000 f9dc 	bl	8000c5c <Error_Handler>
  }
}
 80008a4:	bf00      	nop
 80008a6:	3750      	adds	r7, #80	; 0x50
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C1_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C1_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C1_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C1_Init+0x50>)
 80008f2:	f002 fcd7 	bl	80032a4 <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008fc:	f000 f9ae 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200134a8 	.word	0x200134a8
 8000908:	40005400 	.word	0x40005400
 800090c:	000186a0 	.word	0x000186a0

08000910 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_I2S3_Init+0x54>)
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <MX_I2S3_Init+0x58>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2S3_Init+0x54>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2S3_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2S3_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_I2S3_Init+0x54>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_I2S3_Init+0x54>)
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <MX_I2S3_Init+0x5c>)
 800093a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2S3_Init+0x54>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_I2S3_Init+0x54>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2S3_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2S3_Init+0x54>)
 8000950:	f002 fdec 	bl	800352c <HAL_I2S_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800095a:	f000 f97f 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20013598 	.word	0x20013598
 8000968:	40003c00 	.word	0x40003c00
 800096c:	00017700 	.word	0x00017700

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_SPI1_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_SPI1_Init+0x64>)
 80009c2:	f004 f839 	bl	8004a38 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009cc:	f000 f946 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200134fc 	.word	0x200134fc
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <MX_USART2_UART_Init+0x50>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f005 f866 	bl	8005ae4 <HAL_UART_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1e:	f000 f91d 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20013554 	.word	0x20013554
 8000a2c:	40004400 	.word	0x40004400

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
 8000a4a:	4b76      	ldr	r3, [pc, #472]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a75      	ldr	r2, [pc, #468]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a50:	f043 0310 	orr.w	r3, r3, #16
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b73      	ldr	r3, [pc, #460]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0310 	and.w	r3, r3, #16
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	4b6f      	ldr	r3, [pc, #444]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a6e      	ldr	r2, [pc, #440]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b6c      	ldr	r3, [pc, #432]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b68      	ldr	r3, [pc, #416]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a67      	ldr	r2, [pc, #412]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b65      	ldr	r3, [pc, #404]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a60      	ldr	r2, [pc, #384]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b57      	ldr	r3, [pc, #348]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b53      	ldr	r3, [pc, #332]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a52      	ldr	r2, [pc, #328]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <MX_GPIO_Init+0x1f4>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2108      	movs	r1, #8
 8000af2:	484d      	ldr	r0, [pc, #308]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000af4:	f000 fe1a 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	484b      	ldr	r0, [pc, #300]	; (8000c2c <MX_GPIO_Init+0x1fc>)
 8000afe:	f000 fe15 	bl	800172c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b02:	2200      	movs	r2, #0
 8000b04:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b08:	4849      	ldr	r0, [pc, #292]	; (8000c30 <MX_GPIO_Init+0x200>)
 8000b0a:	f000 fe0f 	bl	800172c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4840      	ldr	r0, [pc, #256]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000b26:	f000 fc65 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483a      	ldr	r0, [pc, #232]	; (8000c2c <MX_GPIO_Init+0x1fc>)
 8000b42:	f000 fc57 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b46:	2308      	movs	r3, #8
 8000b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b56:	2305      	movs	r3, #5
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4832      	ldr	r0, [pc, #200]	; (8000c2c <MX_GPIO_Init+0x1fc>)
 8000b62:	f000 fc47 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b66:	2304      	movs	r3, #4
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	482e      	ldr	r0, [pc, #184]	; (8000c34 <MX_GPIO_Init+0x204>)
 8000b7a:	f000 fc3b 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b90:	2305      	movs	r3, #5
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4826      	ldr	r0, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x204>)
 8000b9c:	f000 fc2a 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ba0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ba4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	481d      	ldr	r0, [pc, #116]	; (8000c30 <MX_GPIO_Init+0x200>)
 8000bba:	f000 fc1b 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bbe:	2320      	movs	r3, #32
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_GPIO_Init+0x200>)
 8000bd2:	f000 fc0f 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000bec:	f000 fc02 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <MX_GPIO_Init+0x1f8>)
 8000c06:	f000 fbf5 	bl	80013f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	2006      	movs	r0, #6
 8000c10:	f000 fbc6 	bl	80013a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c14:	2006      	movs	r0, #6
 8000c16:	f000 fbdf 	bl	80013d8 <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3730      	adds	r7, #48	; 0x30
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40020c00 	.word	0x40020c00
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c4a:	f000 faad 	bl	80011a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40001000 	.word	0x40001000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <Error_Handler+0x8>
	...

08000c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a08      	ldr	r2, [pc, #32]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_I2C_MspInit+0x8c>)
 8000d14:	f000 fb6e 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <HAL_I2S_MspInit+0xf0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d15a      	bne.n	8000e2e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f003 fd15 	bl	80047b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d94:	f7ff ff62 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dec:	2310      	movs	r3, #16
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_I2S_MspInit+0xf8>)
 8000e08:	f000 faf4 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <HAL_I2S_MspInit+0xfc>)
 8000e2a:	f000 fae3 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3738      	adds	r7, #56	; 0x38
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_SPI_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	23e0      	movs	r3, #224	; 0xe0
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	f000 fa99 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	230c      	movs	r3, #12
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x8c>)
 8000f4e:	f000 fa51 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	2036      	movs	r0, #54	; 0x36
 8000f7e:	f000 fa0f 	bl	80013a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f82:	2036      	movs	r0, #54	; 0x36
 8000f84:	f000 fa28 	bl	80013d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_InitTick+0xa4>)
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_InitTick+0xa4>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	6413      	str	r3, [r2, #64]	; 0x40
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_InitTick+0xa4>)
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fa4:	f107 0210 	add.w	r2, r7, #16
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fbd0 	bl	8004754 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000fb4:	f003 fba6 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	4a13      	ldr	r2, [pc, #76]	; (8001010 <HAL_InitTick+0xa8>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0c9b      	lsrs	r3, r3, #18
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_InitTick+0xac>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <HAL_InitTick+0xb0>)
 8000fd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_InitTick+0xac>)
 8000fd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fda:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <HAL_InitTick+0xac>)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_InitTick+0xac>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_InitTick+0xac>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fec:	4809      	ldr	r0, [pc, #36]	; (8001014 <HAL_InitTick+0xac>)
 8000fee:	f004 facb 	bl	8005588 <HAL_TIM_Base_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d104      	bne.n	8001002 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ff8:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_InitTick+0xac>)
 8000ffa:	f004 fb1f 	bl	800563c <HAL_TIM_Base_Start_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e000      	b.n	8001004 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3730      	adds	r7, #48	; 0x30
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	431bde83 	.word	0x431bde83
 8001014:	200135e0 	.word	0x200135e0
 8001018:	40001000 	.word	0x40001000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PH0_OSC_IN_Pin);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fba1 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM6_DAC_IRQHandler+0x10>)
 800105e:	f004 fb5d 	bl	800571c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200135e0 	.word	0x200135e0

0800106c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <OTG_FS_IRQHandler+0x10>)
 8001072:	f000 fe11 	bl	8001c98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20013a04 	.word	0x20013a04

08001080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <_sbrk+0x5c>)
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <_sbrk+0x60>)
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d102      	bne.n	80010a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <_sbrk+0x64>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <_sbrk+0x68>)
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <_sbrk+0x64>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d207      	bcs.n	80010c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b0:	f00c fb22 	bl	800d6f8 <__errno>
 80010b4:	4603      	mov	r3, r0
 80010b6:	220c      	movs	r2, #12
 80010b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295
 80010be:	e009      	b.n	80010d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	4a05      	ldr	r2, [pc, #20]	; (80010e4 <_sbrk+0x64>)
 80010d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010d2:	68fb      	ldr	r3, [r7, #12]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20020000 	.word	0x20020000
 80010e0:	00000400 	.word	0x00000400
 80010e4:	200000b8 	.word	0x200000b8
 80010e8:	20013e00 	.word	0x20013e00

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f00c fae1 	bl	800d704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fac9 	bl	80006d8 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001154:	0800da40 	.word	0x0800da40
  ldr r2, =_sbss
 8001158:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800115c:	20013e00 	.word	0x20013e00

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f8fc 	bl	800138a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fee8 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fd66 	bl	8000c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20013628 	.word	0x20013628

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20013628 	.word	0x20013628

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff4c 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b2:	f7ff ff61 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	6978      	ldr	r0, [r7, #20]
 80013be:	f7ff ffb1 	bl	8001324 <NVIC_EncodePriority>
 80013c2:	4602      	mov	r2, r0
 80013c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff80 	bl	80012d0 <__NVIC_SetPriority>
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff54 	bl	8001294 <__NVIC_EnableIRQ>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	e16b      	b.n	80016e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001410:	2201      	movs	r2, #1
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	429a      	cmp	r2, r3
 800142a:	f040 815a 	bne.w	80016e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001442:	2b02      	cmp	r3, #2
 8001444:	d130      	bne.n	80014a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d017      	beq.n	80014e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	2203      	movs	r2, #3
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d123      	bne.n	8001538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	08da      	lsrs	r2, r3, #3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3208      	adds	r2, #8
 80014f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	08da      	lsrs	r2, r3, #3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3208      	adds	r2, #8
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	2203      	movs	r2, #3
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 80b4 	beq.w	80016e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b60      	ldr	r3, [pc, #384]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a5f      	ldr	r2, [pc, #380]	; (8001700 <HAL_GPIO_Init+0x30c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_GPIO_Init+0x30c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_GPIO_Init+0x310>)
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	3302      	adds	r3, #2
 800159e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0303 	and.w	r3, r3, #3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	220f      	movs	r2, #15
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x314>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d02b      	beq.n	800161a <HAL_GPIO_Init+0x226>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x318>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d025      	beq.n	8001616 <HAL_GPIO_Init+0x222>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x31c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01f      	beq.n	8001612 <HAL_GPIO_Init+0x21e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x320>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d019      	beq.n	800160e <HAL_GPIO_Init+0x21a>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x324>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d013      	beq.n	800160a <HAL_GPIO_Init+0x216>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	; (800171c <HAL_GPIO_Init+0x328>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00d      	beq.n	8001606 <HAL_GPIO_Init+0x212>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x32c>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d007      	beq.n	8001602 <HAL_GPIO_Init+0x20e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x330>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d101      	bne.n	80015fe <HAL_GPIO_Init+0x20a>
 80015fa:	2307      	movs	r3, #7
 80015fc:	e00e      	b.n	800161c <HAL_GPIO_Init+0x228>
 80015fe:	2308      	movs	r3, #8
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001602:	2306      	movs	r3, #6
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x228>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x228>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x228>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x310>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_GPIO_Init+0x334>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001664:	4b30      	ldr	r3, [pc, #192]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x334>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x334>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a12      	ldr	r2, [pc, #72]	; (8001728 <HAL_GPIO_Init+0x334>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f ae90 	bls.w	8001410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40021400 	.word	0x40021400
 8001720:	40021800 	.word	0x40021800
 8001724:	40021c00 	.word	0x40021c00
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
 8001738:	4613      	mov	r3, r2
 800173a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800173c:	787b      	ldrb	r3, [r7, #1]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001748:	e003      	b.n	8001752 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	041a      	lsls	r2, r3, #16
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	619a      	str	r2, [r3, #24]
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001770:	887a      	ldrh	r2, [r7, #2]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4013      	ands	r3, r2
 8001776:	041a      	lsls	r2, r3, #16
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43d9      	mvns	r1, r3
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	400b      	ands	r3, r1
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	4013      	ands	r3, r2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d006      	beq.n	80017b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe ff62 	bl	800067c <HAL_GPIO_EXTI_Callback>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013c00 	.word	0x40013c00

080017c4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b08f      	sub	sp, #60	; 0x3c
 80017c8:	af0a      	add	r7, sp, #40	; 0x28
 80017ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e054      	b.n	8001880 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d106      	bne.n	80017f6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f007 fa97 	bl	8008d24 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2203      	movs	r2, #3
 80017fa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fbed 	bl	8005ff4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	687e      	ldr	r6, [r7, #4]
 8001822:	466d      	mov	r5, sp
 8001824:	f106 0410 	add.w	r4, r6, #16
 8001828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001830:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001834:	e885 0003 	stmia.w	r5, {r0, r1}
 8001838:	1d33      	adds	r3, r6, #4
 800183a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183c:	6838      	ldr	r0, [r7, #0]
 800183e:	f004 fb67 	bl	8005f10 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fbe4 	bl	8006016 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	603b      	str	r3, [r7, #0]
 8001854:	687e      	ldr	r6, [r7, #4]
 8001856:	466d      	mov	r5, sp
 8001858:	f106 0410 	add.w	r4, r6, #16
 800185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001868:	e885 0003 	stmia.w	r5, {r0, r1}
 800186c:	1d33      	adds	r3, r6, #4
 800186e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001870:	6838      	ldr	r0, [r7, #0]
 8001872:	f004 fd4b 	bl	800630c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001888 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af04      	add	r7, sp, #16
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	70fb      	strb	r3, [r7, #3]
 800189a:	460b      	mov	r3, r1
 800189c:	70bb      	strb	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_HCD_HC_Init+0x28>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e076      	b.n	800199e <HAL_HCD_HC_Init+0x116>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	333d      	adds	r3, #61	; 0x3d
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3338      	adds	r3, #56	; 0x38
 80018d8:	787a      	ldrb	r2, [r7, #1]
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3340      	adds	r3, #64	; 0x40
 80018ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018ec:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	3339      	adds	r3, #57	; 0x39
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	333f      	adds	r3, #63	; 0x3f
 800190e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	78ba      	ldrb	r2, [r7, #2]
 8001918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800191c:	b2d0      	uxtb	r0, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	212c      	movs	r1, #44	; 0x2c
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	333a      	adds	r3, #58	; 0x3a
 800192a:	4602      	mov	r2, r0
 800192c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800192e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da09      	bge.n	800194a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	333b      	adds	r3, #59	; 0x3b
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
 8001948:	e008      	b.n	800195c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	333b      	adds	r3, #59	; 0x3b
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	333c      	adds	r3, #60	; 0x3c
 800196a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	787c      	ldrb	r4, [r7, #1]
 8001976:	78ba      	ldrb	r2, [r7, #2]
 8001978:	78f9      	ldrb	r1, [r7, #3]
 800197a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4623      	mov	r3, r4
 800198c:	f004 fe38 	bl	8006600 <USB_HC_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd90      	pop	{r4, r7, pc}

080019a6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_HCD_HC_Halt+0x1e>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e00f      	b.n	80019e4 <HAL_HCD_HC_Halt+0x3e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f005 f874 	bl	8006ac2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	70fb      	strb	r3, [r7, #3]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70bb      	strb	r3, [r7, #2]
 8001a02:	4613      	mov	r3, r2
 8001a04:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	333b      	adds	r3, #59	; 0x3b
 8001a14:	78ba      	ldrb	r2, [r7, #2]
 8001a16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	333f      	adds	r3, #63	; 0x3f
 8001a26:	787a      	ldrb	r2, [r7, #1]
 8001a28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a2a:	7c3b      	ldrb	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d112      	bne.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2203      	movs	r2, #3
 8001a40:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	333d      	adds	r3, #61	; 0x3d
 8001a50:	7f3a      	ldrb	r2, [r7, #28]
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e008      	b.n	8001a68 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	3342      	adds	r3, #66	; 0x42
 8001a64:	2202      	movs	r2, #2
 8001a66:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	f200 80c6 	bhi.w	8001bfc <HAL_HCD_HC_SubmitRequest+0x210>
 8001a70:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001be9 	.word	0x08001be9
 8001a80:	08001aed 	.word	0x08001aed
 8001a84:	08001b6b 	.word	0x08001b6b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a88:	7c3b      	ldrb	r3, [r7, #16]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	f040 80b8 	bne.w	8001c00 <HAL_HCD_HC_SubmitRequest+0x214>
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80b4 	bne.w	8001c00 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a98:	8b3b      	ldrh	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3355      	adds	r3, #85	; 0x55
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	212c      	movs	r1, #44	; 0x2c
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3355      	adds	r3, #85	; 0x55
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3342      	adds	r3, #66	; 0x42
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ad6:	e093      	b.n	8001c00 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	701a      	strb	r2, [r3, #0]
      break;
 8001aea:	e089      	b.n	8001c00 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001aec:	78bb      	ldrb	r3, [r7, #2]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d11d      	bne.n	8001b2e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	212c      	movs	r1, #44	; 0x2c
 8001af8:	fb01 f303 	mul.w	r3, r1, r3
 8001afc:	4413      	add	r3, r2
 8001afe:	3355      	adds	r3, #85	; 0x55
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	212c      	movs	r1, #44	; 0x2c
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	3342      	adds	r3, #66	; 0x42
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b18:	e073      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3342      	adds	r3, #66	; 0x42
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
      break;
 8001b2c:	e069      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3354      	adds	r3, #84	; 0x54
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3342      	adds	r3, #66	; 0x42
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
      break;
 8001b54:	e055      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3342      	adds	r3, #66	; 0x42
 8001b64:	2202      	movs	r2, #2
 8001b66:	701a      	strb	r2, [r3, #0]
      break;
 8001b68:	e04b      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b6a:	78bb      	ldrb	r3, [r7, #2]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d11d      	bne.n	8001bac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	212c      	movs	r1, #44	; 0x2c
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3355      	adds	r3, #85	; 0x55
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3342      	adds	r3, #66	; 0x42
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b96:	e034      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3342      	adds	r3, #66	; 0x42
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	701a      	strb	r2, [r3, #0]
      break;
 8001baa:	e02a      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3354      	adds	r3, #84	; 0x54
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e016      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3342      	adds	r3, #66	; 0x42
 8001be2:	2202      	movs	r2, #2
 8001be4:	701a      	strb	r2, [r3, #0]
      break;
 8001be6:	e00c      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bfc:	bf00      	nop
 8001bfe:	e000      	b.n	8001c02 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c00:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3344      	adds	r3, #68	; 0x44
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	8b3a      	ldrh	r2, [r7, #24]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	202c      	movs	r0, #44	; 0x2c
 8001c1c:	fb00 f303 	mul.w	r3, r0, r3
 8001c20:	440b      	add	r3, r1
 8001c22:	334c      	adds	r3, #76	; 0x4c
 8001c24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3360      	adds	r3, #96	; 0x60
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3350      	adds	r3, #80	; 0x50
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	212c      	movs	r1, #44	; 0x2c
 8001c50:	fb01 f303 	mul.w	r3, r1, r3
 8001c54:	4413      	add	r3, r2
 8001c56:	3339      	adds	r3, #57	; 0x39
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	212c      	movs	r1, #44	; 0x2c
 8001c62:	fb01 f303 	mul.w	r3, r1, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	3361      	adds	r3, #97	; 0x61
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	222c      	movs	r2, #44	; 0x2c
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	3338      	adds	r3, #56	; 0x38
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	18d1      	adds	r1, r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	f004 fdc8 	bl	800681c <USB_HC_StartXfer>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop

08001c98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 faeb 	bl	800628a <USB_GetMode>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	f040 80f6 	bne.w	8001ea8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f004 facf 	bl	8006264 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80ec 	beq.w	8001ea6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fac6 	bl	8006264 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ce2:	d104      	bne.n	8001cee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fab6 	bl	8006264 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d02:	d104      	bne.n	8001d0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 faa6 	bl	8006264 <USB_ReadInterrupts>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d22:	d104      	bne.n	8001d2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f004 fa96 	bl	8006264 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d103      	bne.n	8001d4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2202      	movs	r2, #2
 8001d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 fa88 	bl	8006264 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d5e:	d11c      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10f      	bne.n	8001d9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d7a:	2110      	movs	r1, #16
 8001d7c:	6938      	ldr	r0, [r7, #16]
 8001d7e:	f004 f997 	bl	80060b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d82:	6938      	ldr	r0, [r7, #16]
 8001d84:	f004 f9b8 	bl	80060f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f004 fb70 	bl	8006474 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f007 f843 	bl	8008e20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f004 fa60 	bl	8006264 <USB_ReadInterrupts>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001daa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dae:	d102      	bne.n	8001db6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f001 fa03 	bl	80031bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 fa52 	bl	8006264 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d106      	bne.n	8001dd8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f007 f80c 	bl	8008de8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fa41 	bl	8006264 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d101      	bne.n	8001df0 <HAL_HCD_IRQHandler+0x158>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_HCD_IRQHandler+0x15a>
 8001df0:	2300      	movs	r3, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d012      	beq.n	8001e1c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699a      	ldr	r2, [r3, #24]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0210 	bic.w	r2, r2, #16
 8001e04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f001 f906 	bl	8003018 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0210 	orr.w	r2, r2, #16
 8001e1a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f004 fa1f 	bl	8006264 <USB_ReadInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e30:	d13a      	bne.n	8001ea8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fe32 	bl	8006aa0 <USB_HC_ReadInterrupt>
 8001e3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e025      	b.n	8001e90 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d018      	beq.n	8001e8a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6e:	d106      	bne.n	8001e7e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f8ab 	bl	8001fd2 <HCD_HC_IN_IRQHandler>
 8001e7c:	e005      	b.n	8001e8a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fcc6 	bl	8002816 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d3d4      	bcc.n	8001e44 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	615a      	str	r2, [r3, #20]
 8001ea4:	e000      	b.n	8001ea8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ea6:	bf00      	nop
    }
  }
}
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_HCD_Start+0x16>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e013      	b.n	8001eec <HAL_HCD_Start+0x3e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fb32 	bl	800653c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 f878 	bl	8005fd2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_HCD_Stop+0x16>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e00d      	b.n	8001f26 <HAL_HCD_Stop+0x32>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f004 ff2c 	bl	8006d74 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f004 fad4 	bl	80064e8 <USB_ResetPort>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3360      	adds	r3, #96	; 0x60
 8001f64:	781b      	ldrb	r3, [r3, #0]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	212c      	movs	r1, #44	; 0x2c
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	3350      	adds	r3, #80	; 0x50
 8001f8c:	681b      	ldr	r3, [r3, #0]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fb18 	bl	80065dc <USB_GetCurrentFrame>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 faf3 	bl	80065ae <USB_GetHostSpeed>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d119      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	2304      	movs	r3, #4
 8002012:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	0151      	lsls	r1, r2, #5
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	440a      	add	r2, r1
 800202a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	60d3      	str	r3, [r2, #12]
 8002034:	e101      	b.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204c:	d12b      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	461a      	mov	r2, r3
 800205c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002060:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3361      	adds	r3, #97	; 0x61
 8002070:	2207      	movs	r2, #7
 8002072:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 fd0f 	bl	8006ac2 <USB_HC_Halt>
 80020a4:	e0c9      	b.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b20      	cmp	r3, #32
 80020ba:	d109      	bne.n	80020d0 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	2320      	movs	r3, #32
 80020cc:	6093      	str	r3, [r2, #8]
 80020ce:	e0b4      	b.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d133      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	0151      	lsls	r1, r2, #5
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	440a      	add	r2, r1
 80020fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	2205      	movs	r2, #5
 8002116:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	461a      	mov	r2, r3
 8002126:	2310      	movs	r3, #16
 8002128:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	2308      	movs	r3, #8
 800213a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fcbb 	bl	8006ac2 <USB_HC_Halt>
 800214c:	e075      	b.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002164:	d134      	bne.n	80021d0 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	0151      	lsls	r1, r2, #5
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	440a      	add	r2, r1
 800217c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	212c      	movs	r1, #44	; 0x2c
 800218c:	fb01 f303 	mul.w	r3, r1, r3
 8002190:	4413      	add	r3, r2
 8002192:	3361      	adds	r3, #97	; 0x61
 8002194:	2208      	movs	r2, #8
 8002196:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	015a      	lsls	r2, r3, #5
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4413      	add	r3, r2
 80021a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a4:	461a      	mov	r2, r3
 80021a6:	2310      	movs	r3, #16
 80021a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021bc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f004 fc7a 	bl	8006ac2 <USB_HC_Halt>
 80021ce:	e034      	b.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d129      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	0151      	lsls	r1, r2, #5
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	440a      	add	r2, r1
 80021fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3361      	adds	r3, #97	; 0x61
 8002214:	2206      	movs	r2, #6
 8002216:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f004 fc4d 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002250:	d122      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	0151      	lsls	r1, r2, #5
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	440a      	add	r2, r1
 8002268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fc20 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002294:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002296:	e2ba      	b.n	800280e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	f040 811b 	bne.w	80024e6 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d019      	beq.n	80022ec <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3348      	adds	r3, #72	; 0x48
 80022c6:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	440b      	add	r3, r1
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022da:	1ad2      	subs	r2, r2, r3
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	202c      	movs	r0, #44	; 0x2c
 80022e2:	fb00 f303 	mul.w	r3, r0, r3
 80022e6:	440b      	add	r3, r1
 80022e8:	3350      	adds	r3, #80	; 0x50
 80022ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	212c      	movs	r1, #44	; 0x2c
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	3361      	adds	r3, #97	; 0x61
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	212c      	movs	r1, #44	; 0x2c
 8002304:	fb01 f303 	mul.w	r3, r1, r3
 8002308:	4413      	add	r3, r2
 800230a:	335c      	adds	r3, #92	; 0x5c
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	461a      	mov	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	333f      	adds	r3, #63	; 0x3f
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	212c      	movs	r1, #44	; 0x2c
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	4413      	add	r3, r2
 8002342:	333f      	adds	r3, #63	; 0x3f
 8002344:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002346:	2b02      	cmp	r3, #2
 8002348:	d121      	bne.n	800238e <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4413      	add	r3, r2
 8002352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	440a      	add	r2, r1
 8002360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f004 fba4 	bl	8006ac2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	461a      	mov	r2, r3
 8002388:	2310      	movs	r3, #16
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	e066      	b.n	800245c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	212c      	movs	r1, #44	; 0x2c
 8002394:	fb01 f303 	mul.w	r3, r1, r3
 8002398:	4413      	add	r3, r2
 800239a:	333f      	adds	r3, #63	; 0x3f
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d127      	bne.n	80023f2 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	0151      	lsls	r1, r2, #5
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	440a      	add	r2, r1
 80023b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023c0:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3360      	adds	r3, #96	; 0x60
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	b2d9      	uxtb	r1, r3
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	202c      	movs	r0, #44	; 0x2c
 80023de:	fb00 f303 	mul.w	r3, r0, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3360      	adds	r3, #96	; 0x60
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f006 fd26 	bl	8008e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 80023f0:	e034      	b.n	800245c <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12a      	bne.n	800245c <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3360      	adds	r3, #96	; 0x60
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3354      	adds	r3, #84	; 0x54
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f083 0301 	eor.w	r3, r3, #1
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3354      	adds	r3, #84	; 0x54
 800243c:	4602      	mov	r2, r0
 800243e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	b2d9      	uxtb	r1, r3
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	fb00 f303 	mul.w	r3, r0, r3
 800244e:	4413      	add	r3, r2
 8002450:	3360      	adds	r3, #96	; 0x60
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f006 fcf0 	bl	8008e3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d12b      	bne.n	80024bc <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3348      	adds	r3, #72	; 0x48
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	202c      	movs	r0, #44	; 0x2c
 800247a:	fb00 f202 	mul.w	r2, r0, r2
 800247e:	440a      	add	r2, r1
 8002480:	3240      	adds	r2, #64	; 0x40
 8002482:	8812      	ldrh	r2, [r2, #0]
 8002484:	fbb3 f3f2 	udiv	r3, r3, r2
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 81be 	beq.w	800280e <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3354      	adds	r3, #84	; 0x54
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3354      	adds	r3, #84	; 0x54
 80024b6:	4602      	mov	r2, r0
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	e1a8      	b.n	800280e <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3354      	adds	r3, #84	; 0x54
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2d8      	uxtb	r0, r3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3354      	adds	r3, #84	; 0x54
 80024e0:	4602      	mov	r2, r0
 80024e2:	701a      	strb	r2, [r3, #0]
}
 80024e4:	e193      	b.n	800280e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	f040 8106 	bne.w	800270a <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	0151      	lsls	r1, r2, #5
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	440a      	add	r2, r1
 8002514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002518:	f023 0302 	bic.w	r3, r3, #2
 800251c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3361      	adds	r3, #97	; 0x61
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d109      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e0c9      	b.n	80026da <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3361      	adds	r3, #97	; 0x61
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d109      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	2205      	movs	r2, #5
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e0b5      	b.n	80026da <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3361      	adds	r3, #97	; 0x61
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d009      	beq.n	8002596 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3361      	adds	r3, #97	; 0x61
 8002590:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002592:	2b08      	cmp	r3, #8
 8002594:	d150      	bne.n	8002638 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	202c      	movs	r0, #44	; 0x2c
 80025ae:	fb00 f303 	mul.w	r3, r0, r3
 80025b2:	440b      	add	r3, r1
 80025b4:	335c      	adds	r3, #92	; 0x5c
 80025b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	335c      	adds	r3, #92	; 0x5c
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d912      	bls.n	80025f2 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	335c      	adds	r3, #92	; 0x5c
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	3360      	adds	r3, #96	; 0x60
 80025ec:	2204      	movs	r2, #4
 80025ee:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025f0:	e073      	b.n	80026da <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3360      	adds	r3, #96	; 0x60
 8002600:	2202      	movs	r2, #2
 8002602:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800261a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002622:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4413      	add	r3, r2
 800262c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002630:	461a      	mov	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002636:	e050      	b.n	80026da <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3361      	adds	r3, #97	; 0x61
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d122      	bne.n	8002692 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	212c      	movs	r1, #44	; 0x2c
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	4413      	add	r3, r2
 8002658:	3360      	adds	r3, #96	; 0x60
 800265a:	2202      	movs	r2, #2
 800265c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002674:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800267c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	e023      	b.n	80026da <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3361      	adds	r3, #97	; 0x61
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d119      	bne.n	80026da <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	335c      	adds	r3, #92	; 0x5c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	202c      	movs	r0, #44	; 0x2c
 80026be:	fb00 f303 	mul.w	r3, r0, r3
 80026c2:	440b      	add	r3, r1
 80026c4:	335c      	adds	r3, #92	; 0x5c
 80026c6:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3360      	adds	r3, #96	; 0x60
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2302      	movs	r3, #2
 80026ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	b2d9      	uxtb	r1, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	202c      	movs	r0, #44	; 0x2c
 80026f6:	fb00 f303 	mul.w	r3, r0, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3360      	adds	r3, #96	; 0x60
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f006 fb9a 	bl	8008e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002708:	e081      	b.n	800280e <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d176      	bne.n	800280e <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	333f      	adds	r3, #63	; 0x3f
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d121      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	335c      	adds	r3, #92	; 0x5c
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	0151      	lsls	r1, r2, #5
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	440a      	add	r2, r1
 800275c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	4611      	mov	r1, r2
 8002770:	4618      	mov	r0, r3
 8002772:	f004 f9a6 	bl	8006ac2 <USB_HC_Halt>
 8002776:	e041      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	333f      	adds	r3, #63	; 0x3f
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d009      	beq.n	80027a0 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	333f      	adds	r3, #63	; 0x3f
 800279a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800279c:	2b02      	cmp	r3, #2
 800279e:	d12d      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	335c      	adds	r3, #92	; 0x5c
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d120      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	3361      	adds	r3, #97	; 0x61
 80027c8:	2203      	movs	r2, #3
 80027ca:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	0151      	lsls	r1, r2, #5
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	440a      	add	r2, r1
 80027e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 f963 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2310      	movs	r3, #16
 800280c:	6093      	str	r3, [r2, #8]
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b088      	sub	sp, #32
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d119      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	2304      	movs	r3, #4
 8002856:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	440a      	add	r2, r1
 800286e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002872:	f043 0302 	orr.w	r3, r3, #2
 8002876:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002878:	e3ca      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d13e      	bne.n	800290e <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	461a      	mov	r2, r3
 800289e:	2320      	movs	r3, #32
 80028a0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	333d      	adds	r3, #61	; 0x3d
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 83ac 	bne.w	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	333d      	adds	r3, #61	; 0x3d
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3360      	adds	r3, #96	; 0x60
 80028d8:	2202      	movs	r2, #2
 80028da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	0151      	lsls	r1, r2, #5
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	440a      	add	r2, r1
 80028f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f004 f8db 	bl	8006ac2 <USB_HC_Halt>
}
 800290c:	e380      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d122      	bne.n	800296c <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	0151      	lsls	r1, r2, #5
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	440a      	add	r2, r1
 800293c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f8b6 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	461a      	mov	r2, r3
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	6093      	str	r3, [r2, #8]
}
 800296a:	e351      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4413      	add	r3, r2
 8002974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d150      	bne.n	8002a24 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	335c      	adds	r3, #92	; 0x5c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d111      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333d      	adds	r3, #61	; 0x3d
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2340      	movs	r3, #64	; 0x40
 80029cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 f862 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
}
 8002a22:	e2f5      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d13c      	bne.n	8002ab4 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3361      	adds	r3, #97	; 0x61
 8002a48:	2204      	movs	r2, #4
 8002a4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	333d      	adds	r3, #61	; 0x3d
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a8a:	f043 0302 	orr.w	r3, r3, #2
 8002a8e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 f811 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	2340      	movs	r3, #64	; 0x40
 8002ab0:	6093      	str	r3, [r2, #8]
}
 8002ab2:	e2ad      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d12a      	bne.n	8002b20 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2308      	movs	r3, #8
 8002ada:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	0151      	lsls	r1, r2, #5
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	440a      	add	r2, r1
 8002af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002af6:	f043 0302 	orr.w	r3, r3, #2
 8002afa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	4611      	mov	r1, r2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 ffdb 	bl	8006ac2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3361      	adds	r3, #97	; 0x61
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	e277      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d150      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	212c      	movs	r1, #44	; 0x2c
 8002b4e:	fb01 f303 	mul.w	r3, r1, r3
 8002b52:	4413      	add	r3, r2
 8002b54:	3361      	adds	r3, #97	; 0x61
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	212c      	movs	r1, #44	; 0x2c
 8002b60:	fb01 f303 	mul.w	r3, r1, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	333d      	adds	r3, #61	; 0x3d
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d112      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	333c      	adds	r3, #60	; 0x3c
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d108      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	333d      	adds	r3, #61	; 0x3d
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	0151      	lsls	r1, r2, #5
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	440a      	add	r2, r1
 8002baa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 ff7f 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	6093      	str	r3, [r2, #8]
}
 8002bd6:	e21b      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d174      	bne.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d121      	bne.n	8002c3a <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3361      	adds	r3, #97	; 0x61
 8002c04:	2206      	movs	r2, #6
 8002c06:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	0151      	lsls	r1, r2, #5
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	440a      	add	r2, r1
 8002c1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 ff45 	bl	8006ac2 <USB_HC_Halt>
 8002c38:	e044      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	335c      	adds	r3, #92	; 0x5c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	202c      	movs	r0, #44	; 0x2c
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	440b      	add	r3, r1
 8002c58:	335c      	adds	r3, #92	; 0x5c
 8002c5a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	212c      	movs	r1, #44	; 0x2c
 8002c62:	fb01 f303 	mul.w	r3, r1, r3
 8002c66:	4413      	add	r3, r2
 8002c68:	335c      	adds	r3, #92	; 0x5c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d920      	bls.n	8002cb2 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	335c      	adds	r3, #92	; 0x5c
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3360      	adds	r3, #96	; 0x60
 8002c90:	2204      	movs	r2, #4
 8002c92:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	b2d9      	uxtb	r1, r3
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	202c      	movs	r0, #44	; 0x2c
 8002c9e:	fb00 f303 	mul.w	r3, r0, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3360      	adds	r3, #96	; 0x60
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f006 f8c6 	bl	8008e3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cb0:	e008      	b.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	212c      	movs	r1, #44	; 0x2c
 8002cb8:	fb01 f303 	mul.w	r3, r1, r3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3360      	adds	r3, #96	; 0x60
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	6093      	str	r3, [r2, #8]
}
 8002cd6:	e19b      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	d134      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	0151      	lsls	r1, r2, #5
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	440a      	add	r2, r1
 8002d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f003 fed1 	bl	8006ac2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2310      	movs	r3, #16
 8002d30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	461a      	mov	r2, r3
 8002d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	212c      	movs	r1, #44	; 0x2c
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	3361      	adds	r3, #97	; 0x61
 8002d54:	2208      	movs	r2, #8
 8002d56:	701a      	strb	r2, [r3, #0]
}
 8002d58:	e15a      	b.n	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	f040 814f 	bne.w	8003010 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d8c:	f023 0302 	bic.w	r3, r3, #2
 8002d90:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	212c      	movs	r1, #44	; 0x2c
 8002d98:	fb01 f303 	mul.w	r3, r1, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3361      	adds	r3, #97	; 0x61
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d17d      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	212c      	movs	r1, #44	; 0x2c
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	212c      	movs	r1, #44	; 0x2c
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	333f      	adds	r3, #63	; 0x3f
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d00a      	beq.n	8002de2 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	333f      	adds	r3, #63	; 0x3f
 8002dda:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	f040 8100 	bne.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d113      	bne.n	8002e12 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	3355      	adds	r3, #85	; 0x55
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2d8      	uxtb	r0, r3
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	212c      	movs	r1, #44	; 0x2c
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3355      	adds	r3, #85	; 0x55
 8002e0e:	4602      	mov	r2, r0
 8002e10:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 80e3 	bne.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	334c      	adds	r3, #76	; 0x4c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80d8 	beq.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	334c      	adds	r3, #76	; 0x4c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	202c      	movs	r0, #44	; 0x2c
 8002e48:	fb00 f202 	mul.w	r2, r0, r2
 8002e4c:	440a      	add	r2, r1
 8002e4e:	3240      	adds	r2, #64	; 0x40
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	3b01      	subs	r3, #1
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	202c      	movs	r0, #44	; 0x2c
 8002e5c:	fb00 f202 	mul.w	r2, r0, r2
 8002e60:	440a      	add	r2, r1
 8002e62:	3240      	adds	r2, #64	; 0x40
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80b5 	beq.w	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3355      	adds	r3, #85	; 0x55
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	f083 0301 	eor.w	r3, r3, #1
 8002e8c:	b2d8      	uxtb	r0, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3355      	adds	r3, #85	; 0x55
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e09f      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	3361      	adds	r3, #97	; 0x61
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d109      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3360      	adds	r3, #96	; 0x60
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e08b      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	212c      	movs	r1, #44	; 0x2c
 8002ed0:	fb01 f303 	mul.w	r3, r1, r3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3361      	adds	r3, #97	; 0x61
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d109      	bne.n	8002ef2 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3360      	adds	r3, #96	; 0x60
 8002eec:	2202      	movs	r2, #2
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e077      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3361      	adds	r3, #97	; 0x61
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d109      	bne.n	8002f1a <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3360      	adds	r3, #96	; 0x60
 8002f14:	2205      	movs	r2, #5
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e063      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3361      	adds	r3, #97	; 0x61
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d009      	beq.n	8002f42 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3361      	adds	r3, #97	; 0x61
 8002f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d14f      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	212c      	movs	r1, #44	; 0x2c
 8002f48:	fb01 f303 	mul.w	r3, r1, r3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	335c      	adds	r3, #92	; 0x5c
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	202c      	movs	r0, #44	; 0x2c
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	440b      	add	r3, r1
 8002f60:	335c      	adds	r3, #92	; 0x5c
 8002f62:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	335c      	adds	r3, #92	; 0x5c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d912      	bls.n	8002f9e <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	335c      	adds	r3, #92	; 0x5c
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3360      	adds	r3, #96	; 0x60
 8002f98:	2204      	movs	r2, #4
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e021      	b.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3360      	adds	r3, #96	; 0x60
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fc6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fce:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	b2d9      	uxtb	r1, r3
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	202c      	movs	r0, #44	; 0x2c
 8002ffe:	fb00 f303 	mul.w	r3, r0, r3
 8003002:	4413      	add	r3, r2
 8003004:	3360      	adds	r3, #96	; 0x60
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f005 ff16 	bl	8008e3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003010:	bf00      	nop
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	0c5b      	lsrs	r3, r3, #17
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800304c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b02      	cmp	r3, #2
 8003052:	d004      	beq.n	800305e <HCD_RXQLVL_IRQHandler+0x46>
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b05      	cmp	r3, #5
 8003058:	f000 80a9 	beq.w	80031ae <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800305c:	e0aa      	b.n	80031b4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80a6 	beq.w	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	3344      	adds	r3, #68	; 0x44
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 809b 	beq.w	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3350      	adds	r3, #80	; 0x50
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	441a      	add	r2, r3
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	202c      	movs	r0, #44	; 0x2c
 8003096:	fb00 f303 	mul.w	r3, r0, r3
 800309a:	440b      	add	r3, r1
 800309c:	334c      	adds	r3, #76	; 0x4c
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d87a      	bhi.n	800319a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6818      	ldr	r0, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3344      	adds	r3, #68	; 0x44
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	b292      	uxth	r2, r2
 80030bc:	4619      	mov	r1, r3
 80030be:	f003 f879 	bl	80061b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3344      	adds	r3, #68	; 0x44
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	441a      	add	r2, r3
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	202c      	movs	r0, #44	; 0x2c
 80030dc:	fb00 f303 	mul.w	r3, r0, r3
 80030e0:	440b      	add	r3, r1
 80030e2:	3344      	adds	r3, #68	; 0x44
 80030e4:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	212c      	movs	r1, #44	; 0x2c
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	3350      	adds	r3, #80	; 0x50
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	441a      	add	r2, r3
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	202c      	movs	r0, #44	; 0x2c
 8003100:	fb00 f303 	mul.w	r3, r0, r3
 8003104:	440b      	add	r3, r1
 8003106:	3350      	adds	r3, #80	; 0x50
 8003108:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	0cdb      	lsrs	r3, r3, #19
 800311a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800311e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	212c      	movs	r1, #44	; 0x2c
 8003126:	fb01 f303 	mul.w	r3, r1, r3
 800312a:	4413      	add	r3, r2
 800312c:	3340      	adds	r3, #64	; 0x40
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4293      	cmp	r3, r2
 8003136:	d13c      	bne.n	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d039      	beq.n	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003154:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800315c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3354      	adds	r3, #84	; 0x54
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2d8      	uxtb	r0, r3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	212c      	movs	r1, #44	; 0x2c
 800318c:	fb01 f303 	mul.w	r3, r1, r3
 8003190:	4413      	add	r3, r2
 8003192:	3354      	adds	r3, #84	; 0x54
 8003194:	4602      	mov	r2, r0
 8003196:	701a      	strb	r2, [r3, #0]
      break;
 8003198:	e00b      	b.n	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	3360      	adds	r3, #96	; 0x60
 80031a8:	2204      	movs	r2, #4
 80031aa:	701a      	strb	r2, [r3, #0]
      break;
 80031ac:	e001      	b.n	80031b2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80031ae:	bf00      	nop
 80031b0:	e000      	b.n	80031b4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80031b2:	bf00      	nop
  }
}
 80031b4:	bf00      	nop
 80031b6:	3728      	adds	r7, #40	; 0x28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80031e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d10b      	bne.n	800320c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f005 fe00 	bl	8008e04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f043 0302 	orr.w	r3, r3, #2
 800320a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d132      	bne.n	800327c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d126      	bne.n	8003276 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d113      	bne.n	8003258 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003236:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800323a:	d106      	bne.n	800324a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2102      	movs	r1, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 f916 	bl	8006474 <USB_InitFSLSPClkSel>
 8003248:	e011      	b.n	800326e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f003 f90f 	bl	8006474 <USB_InitFSLSPClkSel>
 8003256:	e00a      	b.n	800326e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003266:	461a      	mov	r2, r3
 8003268:	f64e 2360 	movw	r3, #60000	; 0xea60
 800326c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f005 fdf2 	bl	8008e58 <HAL_HCD_PortEnabled_Callback>
 8003274:	e002      	b.n	800327c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f005 fdfc 	bl	8008e74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d103      	bne.n	800328e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f043 0320 	orr.w	r3, r3, #32
 800328c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003294:	461a      	mov	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	6013      	str	r3, [r2, #0]
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e12b      	b.n	800350e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fcf4 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003308:	f001 f9fc 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 800330c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4a81      	ldr	r2, [pc, #516]	; (8003518 <HAL_I2C_Init+0x274>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d807      	bhi.n	8003328 <HAL_I2C_Init+0x84>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a80      	ldr	r2, [pc, #512]	; (800351c <HAL_I2C_Init+0x278>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e006      	b.n	8003336 <HAL_I2C_Init+0x92>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a7d      	ldr	r2, [pc, #500]	; (8003520 <HAL_I2C_Init+0x27c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0e7      	b.n	800350e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a78      	ldr	r2, [pc, #480]	; (8003524 <HAL_I2C_Init+0x280>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0c9b      	lsrs	r3, r3, #18
 8003348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a6a      	ldr	r2, [pc, #424]	; (8003518 <HAL_I2C_Init+0x274>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d802      	bhi.n	8003378 <HAL_I2C_Init+0xd4>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3301      	adds	r3, #1
 8003376:	e009      	b.n	800338c <HAL_I2C_Init+0xe8>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	4a69      	ldr	r2, [pc, #420]	; (8003528 <HAL_I2C_Init+0x284>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	3301      	adds	r3, #1
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	495c      	ldr	r1, [pc, #368]	; (8003518 <HAL_I2C_Init+0x274>)
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d819      	bhi.n	80033e0 <HAL_I2C_Init+0x13c>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e59      	subs	r1, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ba:	1c59      	adds	r1, r3, #1
 80033bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c0:	400b      	ands	r3, r1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_I2C_Init+0x138>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e59      	subs	r1, r3, #1
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033da:	e051      	b.n	8003480 <HAL_I2C_Init+0x1dc>
 80033dc:	2304      	movs	r3, #4
 80033de:	e04f      	b.n	8003480 <HAL_I2C_Init+0x1dc>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d111      	bne.n	800340c <HAL_I2C_Init+0x168>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	1e58      	subs	r0, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	440b      	add	r3, r1
 80033f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e012      	b.n	8003432 <HAL_I2C_Init+0x18e>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1e58      	subs	r0, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	0099      	lsls	r1, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Init+0x196>
 8003436:	2301      	movs	r3, #1
 8003438:	e022      	b.n	8003480 <HAL_I2C_Init+0x1dc>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <HAL_I2C_Init+0x1bc>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1e58      	subs	r0, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	440b      	add	r3, r1
 8003450:	fbb0 f3f3 	udiv	r3, r0, r3
 8003454:	3301      	adds	r3, #1
 8003456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345e:	e00f      	b.n	8003480 <HAL_I2C_Init+0x1dc>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1e58      	subs	r0, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6859      	ldr	r1, [r3, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	0099      	lsls	r1, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	fbb0 f3f3 	udiv	r3, r0, r3
 8003476:	3301      	adds	r3, #1
 8003478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	6809      	ldr	r1, [r1, #0]
 8003484:	4313      	orrs	r3, r2
 8003486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69da      	ldr	r2, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6911      	ldr	r1, [r2, #16]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68d2      	ldr	r2, [r2, #12]
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	000186a0 	.word	0x000186a0
 800351c:	001e847f 	.word	0x001e847f
 8003520:	003d08ff 	.word	0x003d08ff
 8003524:	431bde83 	.word	0x431bde83
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e128      	b.n	8003790 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a90      	ldr	r2, [pc, #576]	; (8003798 <HAL_I2S_Init+0x26c>)
 8003556:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fd fbf5 	bl	8000d48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003574:	f023 030f 	bic.w	r3, r3, #15
 8003578:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2202      	movs	r2, #2
 8003580:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d060      	beq.n	800364c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003592:	2310      	movs	r3, #16
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	e001      	b.n	800359c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d802      	bhi.n	80035aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035aa:	2001      	movs	r0, #1
 80035ac:	f001 f9e6 	bl	800497c <HAL_RCCEx_GetPeriphCLKFreq>
 80035b0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ba:	d125      	bne.n	8003608 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	3305      	adds	r3, #5
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e01f      	b.n	8003626 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	3305      	adds	r3, #5
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	e00e      	b.n	8003626 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	461a      	mov	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003622:	3305      	adds	r3, #5
 8003624:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4a5c      	ldr	r2, [pc, #368]	; (800379c <HAL_I2S_Init+0x270>)
 800362a:	fba2 2303 	umull	r2, r3, r2, r3
 800362e:	08db      	lsrs	r3, r3, #3
 8003630:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	61bb      	str	r3, [r7, #24]
 800364a:	e003      	b.n	8003654 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800364c:	2302      	movs	r3, #2
 800364e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d902      	bls.n	8003660 <HAL_I2S_Init+0x134>
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2bff      	cmp	r3, #255	; 0xff
 800365e:	d907      	bls.n	8003670 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f043 0210 	orr.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e08f      	b.n	8003790 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	ea42 0103 	orr.w	r1, r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	430a      	orrs	r2, r1
 8003682:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800368e:	f023 030f 	bic.w	r3, r3, #15
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6851      	ldr	r1, [r2, #4]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68d2      	ldr	r2, [r2, #12]
 80036a0:	4311      	orrs	r1, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6992      	ldr	r2, [r2, #24]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d161      	bne.n	8003780 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a38      	ldr	r2, [pc, #224]	; (80037a0 <HAL_I2S_Init+0x274>)
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <HAL_I2S_Init+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d101      	bne.n	80036d0 <HAL_I2S_Init+0x1a4>
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_I2S_Init+0x27c>)
 80036ce:	e001      	b.n	80036d4 <HAL_I2S_Init+0x1a8>
 80036d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	4932      	ldr	r1, [pc, #200]	; (80037a4 <HAL_I2S_Init+0x278>)
 80036dc:	428a      	cmp	r2, r1
 80036de:	d101      	bne.n	80036e4 <HAL_I2S_Init+0x1b8>
 80036e0:	4a31      	ldr	r2, [pc, #196]	; (80037a8 <HAL_I2S_Init+0x27c>)
 80036e2:	e001      	b.n	80036e8 <HAL_I2S_Init+0x1bc>
 80036e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80036e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036ec:	f023 030f 	bic.w	r3, r3, #15
 80036f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_I2S_Init+0x278>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_I2S_Init+0x1d4>
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_I2S_Init+0x27c>)
 80036fe:	e001      	b.n	8003704 <HAL_I2S_Init+0x1d8>
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	2202      	movs	r2, #2
 8003706:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_I2S_Init+0x278>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_I2S_Init+0x1ea>
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_I2S_Init+0x27c>)
 8003714:	e001      	b.n	800371a <HAL_I2S_Init+0x1ee>
 8003716:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d003      	beq.n	8003730 <HAL_I2S_Init+0x204>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	e001      	b.n	800373c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003738:	2300      	movs	r3, #0
 800373a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003746:	4313      	orrs	r3, r2
 8003748:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003750:	4313      	orrs	r3, r2
 8003752:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800375a:	4313      	orrs	r3, r2
 800375c:	b29a      	uxth	r2, r3
 800375e:	897b      	ldrh	r3, [r7, #10]
 8003760:	4313      	orrs	r3, r2
 8003762:	b29b      	uxth	r3, r3
 8003764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003768:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <HAL_I2S_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_I2S_Init+0x24c>
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_I2S_Init+0x27c>)
 8003776:	e001      	b.n	800377c <HAL_I2S_Init+0x250>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	897a      	ldrh	r2, [r7, #10]
 800377e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	080038a3 	.word	0x080038a3
 800379c:	cccccccd 	.word	0xcccccccd
 80037a0:	080039b9 	.word	0x080039b9
 80037a4:	40003800 	.word	0x40003800
 80037a8:	40003400 	.word	0x40003400

080037ac <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	881a      	ldrh	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800382c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ffb8 	bl	80037ac <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	b292      	uxth	r2, r2
 8003858:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	1c9a      	adds	r2, r3, #2
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10e      	bne.n	800389a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ff93 	bl	80037c0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b086      	sub	sp, #24
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d13a      	bne.n	8003934 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d109      	bne.n	80038dc <I2S_IRQHandler+0x3a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d102      	bne.n	80038dc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffb4 	bl	8003844 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d126      	bne.n	8003934 <I2S_IRQHandler+0x92>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b20      	cmp	r3, #32
 80038f2:	d11f      	bne.n	8003934 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003902:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f043 0202 	orr.w	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff50 	bl	80037d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b03      	cmp	r3, #3
 800393e:	d136      	bne.n	80039ae <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d109      	bne.n	800395e <I2S_IRQHandler+0xbc>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d102      	bne.n	800395e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff45 	bl	80037e8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0308 	and.w	r3, r3, #8
 8003964:	2b08      	cmp	r3, #8
 8003966:	d122      	bne.n	80039ae <I2S_IRQHandler+0x10c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0320 	and.w	r3, r3, #32
 8003972:	2b20      	cmp	r3, #32
 8003974:	d11b      	bne.n	80039ae <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003984:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ff13 	bl	80037d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ae:	bf00      	nop
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4aa2      	ldr	r2, [pc, #648]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80039d2:	4ba2      	ldr	r3, [pc, #648]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d4:	e001      	b.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80039d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a9b      	ldr	r2, [pc, #620]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039f0:	4b9a      	ldr	r3, [pc, #616]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f2:	e001      	b.n	80039f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a04:	d004      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 8099 	bne.w	8003b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d107      	bne.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d002      	beq.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f925 	bl	8003c74 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d107      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f9c8 	bl	8003dd4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b40      	cmp	r3, #64	; 0x40
 8003a4c:	d13a      	bne.n	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d035      	beq.n	8003ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7e      	ldr	r2, [pc, #504]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a62:	4b7e      	ldr	r3, [pc, #504]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a64:	e001      	b.n	8003a6a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4979      	ldr	r1, [pc, #484]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a72:	428b      	cmp	r3, r1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a76:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a78:	e001      	b.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a92:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a94:	2300      	movs	r3, #0
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	f043 0202 	orr.w	r2, r3, #2
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fe88 	bl	80037d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	f040 80be 	bne.w	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80b8 	beq.w	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003af6:	4b59      	ldr	r3, [pc, #356]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003af8:	e001      	b.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4954      	ldr	r1, [pc, #336]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b06:	428b      	cmp	r3, r1
 8003b08:	d101      	bne.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b0a:	4b54      	ldr	r3, [pc, #336]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b0c:	e001      	b.n	8003b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fe4a 	bl	80037d4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b40:	e084      	b.n	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d107      	bne.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8be 	bl	8003cd8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f8fd 	bl	8003d70 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d12f      	bne.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d02a      	beq.n	8003be0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b98:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ba6:	e001      	b.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4929      	ldr	r1, [pc, #164]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bba:	e001      	b.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bc4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0202 	orr.w	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fdfa 	bl	80037d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0308 	and.w	r3, r3, #8
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d131      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02c      	beq.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bfe:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c00:	e001      	b.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4912      	ldr	r1, [pc, #72]	; (8003c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003c0e:	428b      	cmp	r3, r1
 8003c10:	d101      	bne.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003c14:	e001      	b.n	8003c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003c16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c2e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3c:	f043 0204 	orr.w	r2, r3, #4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fdc5 	bl	80037d4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c4a:	e000      	b.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c4c:	bf00      	nop
}
 8003c4e:	bf00      	nop
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40003800 	.word	0x40003800
 8003c5c:	40003400 	.word	0x40003400

08003c60 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	1c99      	adds	r1, r3, #2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6251      	str	r1, [r2, #36]	; 0x24
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cb4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ffc9 	bl	8003c60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c99      	adds	r1, r3, #2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6251      	str	r1, [r2, #36]	; 0x24
 8003cea:	8819      	ldrh	r1, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <I2SEx_TxISR_I2SExt+0x22>
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <I2SEx_TxISR_I2SExt+0x94>)
 8003cf8:	e001      	b.n	8003cfe <I2SEx_TxISR_I2SExt+0x26>
 8003cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfe:	460a      	mov	r2, r1
 8003d00:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d121      	bne.n	8003d5e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <I2SEx_TxISR_I2SExt+0x90>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <I2SEx_TxISR_I2SExt+0x50>
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <I2SEx_TxISR_I2SExt+0x94>)
 8003d26:	e001      	b.n	8003d2c <I2SEx_TxISR_I2SExt+0x54>
 8003d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	490d      	ldr	r1, [pc, #52]	; (8003d68 <I2SEx_TxISR_I2SExt+0x90>)
 8003d34:	428b      	cmp	r3, r1
 8003d36:	d101      	bne.n	8003d3c <I2SEx_TxISR_I2SExt+0x64>
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <I2SEx_TxISR_I2SExt+0x94>)
 8003d3a:	e001      	b.n	8003d40 <I2SEx_TxISR_I2SExt+0x68>
 8003d3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d44:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d106      	bne.n	8003d5e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff81 	bl	8003c60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40003400 	.word	0x40003400

08003d70 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68d8      	ldr	r0, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	1c99      	adds	r1, r3, #2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d88:	b282      	uxth	r2, r0
 8003d8a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff ff4a 	bl	8003c60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <I2SEx_RxISR_I2SExt+0x90>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <I2SEx_RxISR_I2SExt+0x16>
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <I2SEx_RxISR_I2SExt+0x94>)
 8003de8:	e001      	b.n	8003dee <I2SEx_RxISR_I2SExt+0x1a>
 8003dea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dee:	68d8      	ldr	r0, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	1c99      	adds	r1, r3, #2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dfa:	b282      	uxth	r2, r0
 8003dfc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d121      	bne.n	8003e5a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a12      	ldr	r2, [pc, #72]	; (8003e64 <I2SEx_RxISR_I2SExt+0x90>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <I2SEx_RxISR_I2SExt+0x50>
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <I2SEx_RxISR_I2SExt+0x94>)
 8003e22:	e001      	b.n	8003e28 <I2SEx_RxISR_I2SExt+0x54>
 8003e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	490d      	ldr	r1, [pc, #52]	; (8003e64 <I2SEx_RxISR_I2SExt+0x90>)
 8003e30:	428b      	cmp	r3, r1
 8003e32:	d101      	bne.n	8003e38 <I2SEx_RxISR_I2SExt+0x64>
 8003e34:	4b0c      	ldr	r3, [pc, #48]	; (8003e68 <I2SEx_RxISR_I2SExt+0x94>)
 8003e36:	e001      	b.n	8003e3c <I2SEx_RxISR_I2SExt+0x68>
 8003e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e40:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d106      	bne.n	8003e5a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff03 	bl	8003c60 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40003800 	.word	0x40003800
 8003e68:	40003400 	.word	0x40003400

08003e6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e264      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d075      	beq.n	8003f76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e8a:	4ba3      	ldr	r3, [pc, #652]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d00c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e96:	4ba0      	ldr	r3, [pc, #640]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d112      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ea2:	4b9d      	ldr	r3, [pc, #628]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eae:	d10b      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	4b99      	ldr	r3, [pc, #612]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05b      	beq.n	8003f74 <HAL_RCC_OscConfig+0x108>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d157      	bne.n	8003f74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e23f      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d106      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x74>
 8003ed2:	4b91      	ldr	r3, [pc, #580]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a90      	ldr	r2, [pc, #576]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	e01d      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x98>
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a8a      	ldr	r2, [pc, #552]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b88      	ldr	r3, [pc, #544]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a87      	ldr	r2, [pc, #540]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0xb0>
 8003f04:	4b84      	ldr	r3, [pc, #528]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a83      	ldr	r2, [pc, #524]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	4b81      	ldr	r3, [pc, #516]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a80      	ldr	r2, [pc, #512]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d013      	beq.n	8003f4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fd f954 	bl	80011d0 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2c:	f7fd f950 	bl	80011d0 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b64      	cmp	r3, #100	; 0x64
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e204      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0xc0>
 8003f4a:	e014      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f940 	bl	80011d0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fd f93c 	bl	80011d0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1f0      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	4b6c      	ldr	r3, [pc, #432]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0xe8>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d063      	beq.n	800404a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f8e:	4b62      	ldr	r3, [pc, #392]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d11c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9a:	4b5f      	ldr	r3, [pc, #380]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d116      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa6:	4b5c      	ldr	r3, [pc, #368]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e1c4      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbe:	4b56      	ldr	r3, [pc, #344]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4952      	ldr	r1, [pc, #328]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	e03a      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fdc:	4b4f      	ldr	r3, [pc, #316]	; (800411c <HAL_RCC_OscConfig+0x2b0>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe2:	f7fd f8f5 	bl	80011d0 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fea:	f7fd f8f1 	bl	80011d0 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e1a5      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffc:	4b46      	ldr	r3, [pc, #280]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004008:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4940      	ldr	r1, [pc, #256]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
 800401c:	e015      	b.n	800404a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800401e:	4b3f      	ldr	r3, [pc, #252]	; (800411c <HAL_RCC_OscConfig+0x2b0>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fd f8d4 	bl	80011d0 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402c:	f7fd f8d0 	bl	80011d0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e184      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800403e:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f0      	bne.n	800402c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d030      	beq.n	80040b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <HAL_RCC_OscConfig+0x2b4>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f8b4 	bl	80011d0 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800406c:	f7fd f8b0 	bl	80011d0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e164      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x200>
 800408a:	e015      	b.n	80040b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408c:	4b24      	ldr	r3, [pc, #144]	; (8004120 <HAL_RCC_OscConfig+0x2b4>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004092:	f7fd f89d 	bl	80011d0 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409a:	f7fd f899 	bl	80011d0 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e14d      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80a0 	beq.w	8004206 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10f      	bne.n	80040f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d121      	bne.n	8004146 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a07      	ldr	r2, [pc, #28]	; (8004124 <HAL_RCC_OscConfig+0x2b8>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7fd f85f 	bl	80011d0 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e011      	b.n	800413a <HAL_RCC_OscConfig+0x2ce>
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	42470000 	.word	0x42470000
 8004120:	42470e80 	.word	0x42470e80
 8004124:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004128:	f7fd f852 	bl	80011d0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e106      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413a:	4b85      	ldr	r3, [pc, #532]	; (8004350 <HAL_RCC_OscConfig+0x4e4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d106      	bne.n	800415c <HAL_RCC_OscConfig+0x2f0>
 800414e:	4b81      	ldr	r3, [pc, #516]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a80      	ldr	r2, [pc, #512]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	e01c      	b.n	8004196 <HAL_RCC_OscConfig+0x32a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d10c      	bne.n	800417e <HAL_RCC_OscConfig+0x312>
 8004164:	4b7b      	ldr	r3, [pc, #492]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a7a      	ldr	r2, [pc, #488]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800416a:	f043 0304 	orr.w	r3, r3, #4
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	4b78      	ldr	r3, [pc, #480]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a77      	ldr	r2, [pc, #476]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
 800417c:	e00b      	b.n	8004196 <HAL_RCC_OscConfig+0x32a>
 800417e:	4b75      	ldr	r3, [pc, #468]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	4a74      	ldr	r2, [pc, #464]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6713      	str	r3, [r2, #112]	; 0x70
 800418a:	4b72      	ldr	r3, [pc, #456]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	4a71      	ldr	r2, [pc, #452]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d015      	beq.n	80041ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7fd f817 	bl	80011d0 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd f813 	bl	80011d0 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e0c5      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041bc:	4b65      	ldr	r3, [pc, #404]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ee      	beq.n	80041a6 <HAL_RCC_OscConfig+0x33a>
 80041c8:	e014      	b.n	80041f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ca:	f7fd f801 	bl	80011d0 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d0:	e00a      	b.n	80041e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d2:	f7fc fffd 	bl	80011d0 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e0af      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e8:	4b5a      	ldr	r3, [pc, #360]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1ee      	bne.n	80041d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d105      	bne.n	8004206 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fa:	4b56      	ldr	r3, [pc, #344]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a55      	ldr	r2, [pc, #340]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004200:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 809b 	beq.w	8004346 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004210:	4b50      	ldr	r3, [pc, #320]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d05c      	beq.n	80042d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d141      	bne.n	80042a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	4b4c      	ldr	r3, [pc, #304]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422a:	f7fc ffd1 	bl	80011d0 <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004232:	f7fc ffcd 	bl	80011d0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e081      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004244:	4b43      	ldr	r3, [pc, #268]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1f0      	bne.n	8004232 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	019b      	lsls	r3, r3, #6
 8004260:	431a      	orrs	r2, r3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	085b      	lsrs	r3, r3, #1
 8004268:	3b01      	subs	r3, #1
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	4937      	ldr	r1, [pc, #220]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800427a:	4b37      	ldr	r3, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fc ffa6 	bl	80011d0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7fc ffa2 	bl	80011d0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e056      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x41c>
 80042a6:	e04e      	b.n	8004346 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x4ec>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ae:	f7fc ff8f 	bl	80011d0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fc ff8b 	bl	80011d0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e03f      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x44a>
 80042d4:	e037      	b.n	8004346 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e032      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <HAL_RCC_OscConfig+0x4e8>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d028      	beq.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d121      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d11a      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004312:	4013      	ands	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004318:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800431a:	4293      	cmp	r3, r2
 800431c:	d111      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d107      	bne.n	8004342 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d001      	beq.n	8004346 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40007000 	.word	0x40007000
 8004354:	40023800 	.word	0x40023800
 8004358:	42470060 	.word	0x42470060

0800435c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0cc      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004370:	4b68      	ldr	r3, [pc, #416]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d90c      	bls.n	8004398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b65      	ldr	r3, [pc, #404]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b63      	ldr	r3, [pc, #396]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0b8      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4a58      	ldr	r2, [pc, #352]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043c8:	4b53      	ldr	r3, [pc, #332]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a52      	ldr	r2, [pc, #328]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d4:	4b50      	ldr	r3, [pc, #320]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	494d      	ldr	r1, [pc, #308]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d044      	beq.n	800447c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d107      	bne.n	800440a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b47      	ldr	r3, [pc, #284]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d119      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e07f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d003      	beq.n	800441a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004416:	2b03      	cmp	r3, #3
 8004418:	d107      	bne.n	800442a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800441a:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e06f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442a:	4b3b      	ldr	r3, [pc, #236]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e067      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	4934      	ldr	r1, [pc, #208]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800444c:	f7fc fec0 	bl	80011d0 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004452:	e00a      	b.n	800446a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004454:	f7fc febc 	bl	80011d0 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e04f      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446a:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 020c 	and.w	r2, r3, #12
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	429a      	cmp	r2, r3
 800447a:	d1eb      	bne.n	8004454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800447c:	4b25      	ldr	r3, [pc, #148]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d20c      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e032      	b.n	800450a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4916      	ldr	r1, [pc, #88]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	490e      	ldr	r1, [pc, #56]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044e2:	f000 f821 	bl	8004528 <HAL_RCC_GetSysClockFreq>
 80044e6:	4602      	mov	r2, r0
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	091b      	lsrs	r3, r3, #4
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	490a      	ldr	r1, [pc, #40]	; (800451c <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	5ccb      	ldrb	r3, [r1, r3]
 80044f6:	fa22 f303 	lsr.w	r3, r2, r3
 80044fa:	4a09      	ldr	r2, [pc, #36]	; (8004520 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044fe:	4b09      	ldr	r3, [pc, #36]	; (8004524 <HAL_RCC_ClockConfig+0x1c8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc fd30 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023c00 	.word	0x40023c00
 8004518:	40023800 	.word	0x40023800
 800451c:	0800da0c 	.word	0x0800da0c
 8004520:	20000000 	.word	0x20000000
 8004524:	20000004 	.word	0x20000004

08004528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	2300      	movs	r3, #0
 800453a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004540:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f003 030c 	and.w	r3, r3, #12
 8004548:	2b08      	cmp	r3, #8
 800454a:	d00d      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x40>
 800454c:	2b08      	cmp	r3, #8
 800454e:	f200 80bd 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x34>
 8004556:	2b04      	cmp	r3, #4
 8004558:	d003      	beq.n	8004562 <HAL_RCC_GetSysClockFreq+0x3a>
 800455a:	e0b7      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800455e:	60bb      	str	r3, [r7, #8]
       break;
 8004560:	e0b7      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	e0b4      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004568:	4b5d      	ldr	r3, [pc, #372]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d04d      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457e:	4b58      	ldr	r3, [pc, #352]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	099b      	lsrs	r3, r3, #6
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	ea02 0800 	and.w	r8, r2, r0
 8004596:	ea03 0901 	and.w	r9, r3, r1
 800459a:	4640      	mov	r0, r8
 800459c:	4649      	mov	r1, r9
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	014b      	lsls	r3, r1, #5
 80045a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045ac:	0142      	lsls	r2, r0, #5
 80045ae:	4610      	mov	r0, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	ebb0 0008 	subs.w	r0, r0, r8
 80045b6:	eb61 0109 	sbc.w	r1, r1, r9
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	018b      	lsls	r3, r1, #6
 80045c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045c8:	0182      	lsls	r2, r0, #6
 80045ca:	1a12      	subs	r2, r2, r0
 80045cc:	eb63 0301 	sbc.w	r3, r3, r1
 80045d0:	f04f 0000 	mov.w	r0, #0
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	00d9      	lsls	r1, r3, #3
 80045da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045de:	00d0      	lsls	r0, r2, #3
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	eb12 0208 	adds.w	r2, r2, r8
 80045e8:	eb43 0309 	adc.w	r3, r3, r9
 80045ec:	f04f 0000 	mov.w	r0, #0
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	0259      	lsls	r1, r3, #9
 80045f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045fa:	0250      	lsls	r0, r2, #9
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	461a      	mov	r2, r3
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	f7fb fe2a 	bl	8000264 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4613      	mov	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e04a      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461a:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	099b      	lsrs	r3, r3, #6
 8004620:	461a      	mov	r2, r3
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	f240 10ff 	movw	r0, #511	; 0x1ff
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	ea02 0400 	and.w	r4, r2, r0
 8004632:	ea03 0501 	and.w	r5, r3, r1
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	014b      	lsls	r3, r1, #5
 8004644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004648:	0142      	lsls	r2, r0, #5
 800464a:	4610      	mov	r0, r2
 800464c:	4619      	mov	r1, r3
 800464e:	1b00      	subs	r0, r0, r4
 8004650:	eb61 0105 	sbc.w	r1, r1, r5
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	018b      	lsls	r3, r1, #6
 800465e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004662:	0182      	lsls	r2, r0, #6
 8004664:	1a12      	subs	r2, r2, r0
 8004666:	eb63 0301 	sbc.w	r3, r3, r1
 800466a:	f04f 0000 	mov.w	r0, #0
 800466e:	f04f 0100 	mov.w	r1, #0
 8004672:	00d9      	lsls	r1, r3, #3
 8004674:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004678:	00d0      	lsls	r0, r2, #3
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	1912      	adds	r2, r2, r4
 8004680:	eb45 0303 	adc.w	r3, r5, r3
 8004684:	f04f 0000 	mov.w	r0, #0
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	0299      	lsls	r1, r3, #10
 800468e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004692:	0290      	lsls	r0, r2, #10
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	4610      	mov	r0, r2
 800469a:	4619      	mov	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	461a      	mov	r2, r3
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	f7fb fdde 	bl	8000264 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4613      	mov	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	f003 0303 	and.w	r3, r3, #3
 80046ba:	3301      	adds	r3, #1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c8:	60bb      	str	r3, [r7, #8]
      break;
 80046ca:	e002      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046ce:	60bb      	str	r3, [r7, #8]
      break;
 80046d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046d2:	68bb      	ldr	r3, [r7, #8]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	007a1200 	.word	0x007a1200

080046ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b03      	ldr	r3, [pc, #12]	; (8004700 <HAL_RCC_GetHCLKFreq+0x14>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000000 	.word	0x20000000

08004704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004708:	f7ff fff0 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 800470c:	4602      	mov	r2, r0
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	0a9b      	lsrs	r3, r3, #10
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	4903      	ldr	r1, [pc, #12]	; (8004728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800471a:	5ccb      	ldrb	r3, [r1, r3]
 800471c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004720:	4618      	mov	r0, r3
 8004722:	bd80      	pop	{r7, pc}
 8004724:	40023800 	.word	0x40023800
 8004728:	0800da1c 	.word	0x0800da1c

0800472c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004730:	f7ff ffdc 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 8004734:	4602      	mov	r2, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0b5b      	lsrs	r3, r3, #13
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4903      	ldr	r1, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004742:	5ccb      	ldrb	r3, [r1, r3]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800da1c 	.word	0x0800da1c

08004754 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	220f      	movs	r2, #15
 8004762:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 0203 	and.w	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <HAL_RCC_GetClockConfig+0x5c>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004796:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCC_GetClockConfig+0x60>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40023800 	.word	0x40023800
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d035      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047e0:	4b62      	ldr	r3, [pc, #392]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e6:	f7fc fcf3 	bl	80011d0 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047ee:	f7fc fcef 	bl	80011d0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0b0      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004800:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	019a      	lsls	r2, r3, #6
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	071b      	lsls	r3, r3, #28
 8004818:	4955      	ldr	r1, [pc, #340]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004820:	4b52      	ldr	r3, [pc, #328]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004826:	f7fc fcd3 	bl	80011d0 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800482e:	f7fc fccf 	bl	80011d0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e090      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004840:	4b4b      	ldr	r3, [pc, #300]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8083 	beq.w	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	4b44      	ldr	r3, [pc, #272]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a43      	ldr	r2, [pc, #268]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b41      	ldr	r3, [pc, #260]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004876:	4b3f      	ldr	r3, [pc, #252]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a3e      	ldr	r2, [pc, #248]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004882:	f7fc fca5 	bl	80011d0 <HAL_GetTick>
 8004886:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004888:	e008      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fc fca1 	bl	80011d0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e062      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800489c:	4b35      	ldr	r3, [pc, #212]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048a8:	4b31      	ldr	r3, [pc, #196]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02f      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d028      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048c6:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d0:	4b29      	ldr	r3, [pc, #164]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048d6:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d114      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048ee:	f7fc fc6f 	bl	80011d0 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048f4:	e00a      	b.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fc fc6b 	bl	80011d0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	; 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e02a      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800490c:	4b18      	ldr	r3, [pc, #96]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ee      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004920:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004924:	d10d      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800493a:	490d      	ldr	r1, [pc, #52]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]
 8004940:	e005      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004948:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800494c:	6093      	str	r3, [r2, #8]
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004950:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495a:	4905      	ldr	r1, [pc, #20]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800495c:	4313      	orrs	r3, r2
 800495e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	42470068 	.word	0x42470068
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
 8004978:	42470e40 	.word	0x42470e40

0800497c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d13e      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d12f      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80049b0:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049b2:	617b      	str	r3, [r7, #20]
          break;
 80049b4:	e02f      	b.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80049b6:	4b1c      	ldr	r3, [pc, #112]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c2:	d108      	bne.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049cc:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	e007      	b.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049de:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
 80049f8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a00:	0f1b      	lsrs	r3, r3, #28
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
          break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	617b      	str	r3, [r7, #20]
          break;
 8004a14:	bf00      	nop
        }
      }
      break;
 8004a16:	bf00      	nop
    }
  }
  return frequency;
 8004a18:	697b      	ldr	r3, [r7, #20]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	00bb8000 	.word	0x00bb8000
 8004a30:	007a1200 	.word	0x007a1200
 8004a34:	00f42400 	.word	0x00f42400

08004a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e07b      	b.n	8004b42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d108      	bne.n	8004a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a5a:	d009      	beq.n	8004a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
 8004a62:	e005      	b.n	8004a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fc f9dc 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af4:	ea42 0103 	orr.w	r1, r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	0c1b      	lsrs	r3, r3, #16
 8004b0e:	f003 0104 	and.w	r1, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f003 0210 	and.w	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b088      	sub	sp, #32
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4613      	mov	r3, r2
 8004b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_Transmit+0x22>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e126      	b.n	8004dba <HAL_SPI_Transmit+0x270>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b74:	f7fc fb2c 	bl	80011d0 <HAL_GetTick>
 8004b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b7a:	88fb      	ldrh	r3, [r7, #6]
 8004b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b8e:	e10b      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_Transmit+0x52>
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ba0:	e102      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	88fa      	ldrh	r2, [r7, #6]
 8004bba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	88fa      	ldrh	r2, [r7, #6]
 8004bc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be8:	d10f      	bne.n	8004c0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d007      	beq.n	8004c28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c30:	d14b      	bne.n	8004cca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0xf6>
 8004c3a:	8afb      	ldrh	r3, [r7, #22]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d13e      	bne.n	8004cbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c64:	e02b      	b.n	8004cbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d112      	bne.n	8004c9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	881a      	ldrh	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	1c9a      	adds	r2, r3, #2
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c98:	e011      	b.n	8004cbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9a:	f7fc fa99 	bl	80011d0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d803      	bhi.n	8004cb2 <HAL_SPI_Transmit+0x168>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_Transmit+0x16e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cbc:	e074      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ce      	bne.n	8004c66 <HAL_SPI_Transmit+0x11c>
 8004cc8:	e04c      	b.n	8004d64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x18e>
 8004cd2:	8afb      	ldrh	r3, [r7, #22]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d140      	bne.n	8004d5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cfe:	e02c      	b.n	8004d5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d113      	bne.n	8004d36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	330c      	adds	r3, #12
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d34:	e011      	b.n	8004d5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d36:	f7fc fa4b 	bl	80011d0 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d803      	bhi.n	8004d4e <HAL_SPI_Transmit+0x204>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d102      	bne.n	8004d54 <HAL_SPI_Transmit+0x20a>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d58:	e026      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1cd      	bne.n	8004d00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	6839      	ldr	r1, [r7, #0]
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fbcb 	bl	8005504 <SPI_EndRxTxTransaction>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e000      	b.n	8004da8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004da6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004db8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af02      	add	r7, sp, #8
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dde:	d112      	bne.n	8004e06 <HAL_SPI_Receive+0x44>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10e      	bne.n	8004e06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2204      	movs	r2, #4
 8004dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f8f1 	bl	8004fe4 <HAL_SPI_TransmitReceive>
 8004e02:	4603      	mov	r3, r0
 8004e04:	e0ea      	b.n	8004fdc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_SPI_Receive+0x52>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0e3      	b.n	8004fdc <HAL_SPI_Receive+0x21a>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e1c:	f7fc f9d8 	bl	80011d0 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d002      	beq.n	8004e34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
 8004e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e32:	e0ca      	b.n	8004fca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Receive+0x7e>
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e44:	e0c1      	b.n	8004fca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	88fa      	ldrh	r2, [r7, #6]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8c:	d10f      	bne.n	8004eae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d162      	bne.n	8004f9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004ed4:	e02e      	b.n	8004f34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d115      	bne.n	8004f10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f103 020c 	add.w	r2, r3, #12
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f0e:	e011      	b.n	8004f34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f10:	f7fc f95e 	bl	80011d0 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d803      	bhi.n	8004f28 <HAL_SPI_Receive+0x166>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f26:	d102      	bne.n	8004f2e <HAL_SPI_Receive+0x16c>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f32:	e04a      	b.n	8004fca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1cb      	bne.n	8004ed6 <HAL_SPI_Receive+0x114>
 8004f3e:	e031      	b.n	8004fa4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d113      	bne.n	8004f76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	b292      	uxth	r2, r2
 8004f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f74:	e011      	b.n	8004f9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f76:	f7fc f92b 	bl	80011d0 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d803      	bhi.n	8004f8e <HAL_SPI_Receive+0x1cc>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8c:	d102      	bne.n	8004f94 <HAL_SPI_Receive+0x1d2>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f98:	e017      	b.n	8004fca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1cd      	bne.n	8004f40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	6839      	ldr	r1, [r7, #0]
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fa45 	bl	8005438 <SPI_EndRxTransaction>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
 8004fc6:	e000      	b.n	8004fca <HAL_SPI_Receive+0x208>
  }

error :
 8004fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08c      	sub	sp, #48	; 0x30
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_SPI_TransmitReceive+0x26>
 8005006:	2302      	movs	r3, #2
 8005008:	e18a      	b.n	8005320 <HAL_SPI_TransmitReceive+0x33c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005012:	f7fc f8dd 	bl	80011d0 <HAL_GetTick>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800501e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005028:	887b      	ldrh	r3, [r7, #2]
 800502a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800502c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005030:	2b01      	cmp	r3, #1
 8005032:	d00f      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x70>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503a:	d107      	bne.n	800504c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <HAL_SPI_TransmitReceive+0x68>
 8005044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005048:	2b04      	cmp	r3, #4
 800504a:	d003      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005052:	e15b      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_SPI_TransmitReceive+0x82>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_SPI_TransmitReceive+0x82>
 8005060:	887b      	ldrh	r3, [r7, #2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800506c:	e14e      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b04      	cmp	r3, #4
 8005078:	d003      	beq.n	8005082 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2205      	movs	r2, #5
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	887a      	ldrh	r2, [r7, #2]
 8005092:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	887a      	ldrh	r2, [r7, #2]
 80050aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d007      	beq.n	80050d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050de:	d178      	bne.n	80051d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x10a>
 80050e8:	8b7b      	ldrh	r3, [r7, #26]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d166      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	881a      	ldrh	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	1c9a      	adds	r2, r3, #2
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005112:	e053      	b.n	80051bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b02      	cmp	r3, #2
 8005120:	d11b      	bne.n	800515a <HAL_SPI_TransmitReceive+0x176>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d016      	beq.n	800515a <HAL_SPI_TransmitReceive+0x176>
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d113      	bne.n	800515a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	881a      	ldrh	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d119      	bne.n	800519c <HAL_SPI_TransmitReceive+0x1b8>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d014      	beq.n	800519c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	b292      	uxth	r2, r2
 800517e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005184:	1c9a      	adds	r2, r3, #2
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005198:	2301      	movs	r3, #1
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800519c:	f7fc f818 	bl	80011d0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d807      	bhi.n	80051bc <HAL_SPI_TransmitReceive+0x1d8>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d003      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051ba:	e0a7      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1a6      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x130>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1a1      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x130>
 80051d0:	e07c      	b.n	80052cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_SPI_TransmitReceive+0x1fc>
 80051da:	8b7b      	ldrh	r3, [r7, #26]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d16b      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	7812      	ldrb	r2, [r2, #0]
 80051ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005206:	e057      	b.n	80052b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d11c      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x26c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d017      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x26c>
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d114      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	7812      	ldrb	r2, [r2, #0]
 8005232:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d119      	bne.n	8005292 <HAL_SPI_TransmitReceive+0x2ae>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d014      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	b2d2      	uxtb	r2, r2
 8005274:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800528e:	2301      	movs	r3, #1
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005292:	f7fb ff9d 	bl	80011d0 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800529e:	429a      	cmp	r2, r3
 80052a0:	d803      	bhi.n	80052aa <HAL_SPI_TransmitReceive+0x2c6>
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d102      	bne.n	80052b0 <HAL_SPI_TransmitReceive+0x2cc>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80052b6:	e029      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1a2      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x224>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d19d      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f917 	bl	8005504 <SPI_EndRxTxTransaction>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052e8:	e010      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f2:	2300      	movs	r3, #0
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	e000      	b.n	800530c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800530a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800531c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	; 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005338:	f7fb ff4a 	bl	80011d0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005340:	1a9b      	subs	r3, r3, r2
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	4413      	add	r3, r2
 8005346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005348:	f7fb ff42 	bl	80011d0 <HAL_GetTick>
 800534c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800534e:	4b39      	ldr	r3, [pc, #228]	; (8005434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	015b      	lsls	r3, r3, #5
 8005354:	0d1b      	lsrs	r3, r3, #20
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800535e:	e054      	b.n	800540a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d050      	beq.n	800540a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005368:	f7fb ff32 	bl	80011d0 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	429a      	cmp	r2, r3
 8005376:	d902      	bls.n	800537e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d13d      	bne.n	80053fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800538c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005396:	d111      	bne.n	80053bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a0:	d004      	beq.n	80053ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053aa:	d107      	bne.n	80053bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c4:	d10f      	bne.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e017      	b.n	800542a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3b01      	subs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4013      	ands	r3, r2
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	bf0c      	ite	eq
 800541a:	2301      	moveq	r3, #1
 800541c:	2300      	movne	r3, #0
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	429a      	cmp	r2, r3
 8005426:	d19b      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	20000000 	.word	0x20000000

08005438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800544c:	d111      	bne.n	8005472 <SPI_EndRxTransaction+0x3a>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005456:	d004      	beq.n	8005462 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005460:	d107      	bne.n	8005472 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005470:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800547a:	d12a      	bne.n	80054d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005484:	d012      	beq.n	80054ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2200      	movs	r2, #0
 800548e:	2180      	movs	r1, #128	; 0x80
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff49 	bl	8005328 <SPI_WaitFlagStateUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02d      	beq.n	80054f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e026      	b.n	80054fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2101      	movs	r1, #1
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f7ff ff36 	bl	8005328 <SPI_WaitFlagStateUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01a      	beq.n	80054f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e013      	b.n	80054fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	2101      	movs	r1, #1
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff ff23 	bl	8005328 <SPI_WaitFlagStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e000      	b.n	80054fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005510:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <SPI_EndRxTxTransaction+0x7c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <SPI_EndRxTxTransaction+0x80>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0d5b      	lsrs	r3, r3, #21
 800551c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005520:	fb02 f303 	mul.w	r3, r2, r3
 8005524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552e:	d112      	bne.n	8005556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2200      	movs	r2, #0
 8005538:	2180      	movs	r1, #128	; 0x80
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fef4 	bl	8005328 <SPI_WaitFlagStateUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e00f      	b.n	8005576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3b01      	subs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b80      	cmp	r3, #128	; 0x80
 800556e:	d0f2      	beq.n	8005556 <SPI_EndRxTxTransaction+0x52>
 8005570:	e000      	b.n	8005574 <SPI_EndRxTxTransaction+0x70>
        break;
 8005572:	bf00      	nop
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000000 	.word	0x20000000
 8005584:	165e9f81 	.word	0x165e9f81

08005588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e041      	b.n	800561e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f839 	bl	8005626 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3304      	adds	r3, #4
 80055c4:	4619      	mov	r1, r3
 80055c6:	4610      	mov	r0, r2
 80055c8:	f000 f9d8 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
	...

0800563c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d001      	beq.n	8005654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e04e      	b.n	80056f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a23      	ldr	r2, [pc, #140]	; (8005700 <HAL_TIM_Base_Start_IT+0xc4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567e:	d01d      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1f      	ldr	r2, [pc, #124]	; (8005704 <HAL_TIM_Base_Start_IT+0xc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d018      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <HAL_TIM_Base_Start_IT+0xcc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1c      	ldr	r2, [pc, #112]	; (800570c <HAL_TIM_Base_Start_IT+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00e      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	; (8005710 <HAL_TIM_Base_Start_IT+0xd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <HAL_TIM_Base_Start_IT+0xd8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d004      	beq.n	80056bc <HAL_TIM_Base_Start_IT+0x80>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIM_Base_Start_IT+0xdc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d111      	bne.n	80056e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d010      	beq.n	80056f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f042 0201 	orr.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056de:	e007      	b.n	80056f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40010000 	.word	0x40010000
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40010400 	.word	0x40010400
 8005714:	40014000 	.word	0x40014000
 8005718:	40001800 	.word	0x40001800

0800571c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d122      	bne.n	8005778 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b02      	cmp	r3, #2
 800573e:	d11b      	bne.n	8005778 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0202 	mvn.w	r2, #2
 8005748:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f8ee 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8e0 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f8f1 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b04      	cmp	r3, #4
 8005784:	d122      	bne.n	80057cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b04      	cmp	r3, #4
 8005792:	d11b      	bne.n	80057cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f06f 0204 	mvn.w	r2, #4
 800579c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8c4 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80057b8:	e005      	b.n	80057c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f8b6 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8c7 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b08      	cmp	r3, #8
 80057d8:	d122      	bne.n	8005820 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d11b      	bne.n	8005820 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0208 	mvn.w	r2, #8
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f89a 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f88c 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f89d 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b10      	cmp	r3, #16
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0310 	and.w	r3, r3, #16
 8005838:	2b10      	cmp	r3, #16
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0210 	mvn.w	r2, #16
 8005844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2208      	movs	r2, #8
 800584a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f870 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f862 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f873 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d10e      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0201 	mvn.w	r2, #1
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb f9cc 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d10e      	bne.n	80058cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b8:	2b80      	cmp	r3, #128	; 0x80
 80058ba:	d107      	bne.n	80058cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f902 	bl	8005ad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d10e      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d107      	bne.n	80058f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f838 	bl	8005968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	f003 0320 	and.w	r3, r3, #32
 8005902:	2b20      	cmp	r3, #32
 8005904:	d10e      	bne.n	8005924 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b20      	cmp	r3, #32
 8005912:	d107      	bne.n	8005924 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0220 	mvn.w	r2, #32
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8cc 	bl	8005abc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a40      	ldr	r2, [pc, #256]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3a      	ldr	r2, [pc, #232]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d02b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d027      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d023      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d017      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a28      	ldr	r2, [pc, #160]	; (8005aa4 <TIM_Base_SetConfig+0x128>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_Base_SetConfig+0x130>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <TIM_Base_SetConfig+0x134>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a24      	ldr	r2, [pc, #144]	; (8005ab4 <TIM_Base_SetConfig+0x138>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a23      	ldr	r2, [pc, #140]	; (8005ab8 <TIM_Base_SetConfig+0x13c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800
 8005ab0:	40001800 	.word	0x40001800
 8005ab4:	40001c00 	.word	0x40001c00
 8005ab8:	40002000 	.word	0x40002000

08005abc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e03f      	b.n	8005b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d106      	bne.n	8005b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fb f9e4 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2224      	movs	r2, #36	; 0x24
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f829 	bl	8005b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695a      	ldr	r2, [r3, #20]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	b09f      	sub	sp, #124	; 0x7c
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b96:	68d9      	ldr	r1, [r3, #12]
 8005b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba4:	689a      	ldr	r2, [r3, #8]
 8005ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bc4:	f021 010c 	bic.w	r1, r1, #12
 8005bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	6999      	ldr	r1, [r3, #24]
 8005be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	ea40 0301 	orr.w	r3, r0, r1
 8005be8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	4bc5      	ldr	r3, [pc, #788]	; (8005f04 <UART_SetConfig+0x384>)
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d004      	beq.n	8005bfe <UART_SetConfig+0x7e>
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4bc3      	ldr	r3, [pc, #780]	; (8005f08 <UART_SetConfig+0x388>)
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d103      	bne.n	8005c06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfe:	f7fe fd95 	bl	800472c <HAL_RCC_GetPCLK2Freq>
 8005c02:	6778      	str	r0, [r7, #116]	; 0x74
 8005c04:	e002      	b.n	8005c0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fe fd7d 	bl	8004704 <HAL_RCC_GetPCLK1Freq>
 8005c0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	69db      	ldr	r3, [r3, #28]
 8005c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c14:	f040 80b6 	bne.w	8005d84 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1a:	461c      	mov	r4, r3
 8005c1c:	f04f 0500 	mov.w	r5, #0
 8005c20:	4622      	mov	r2, r4
 8005c22:	462b      	mov	r3, r5
 8005c24:	1891      	adds	r1, r2, r2
 8005c26:	6439      	str	r1, [r7, #64]	; 0x40
 8005c28:	415b      	adcs	r3, r3
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c30:	1912      	adds	r2, r2, r4
 8005c32:	eb45 0303 	adc.w	r3, r5, r3
 8005c36:	f04f 0000 	mov.w	r0, #0
 8005c3a:	f04f 0100 	mov.w	r1, #0
 8005c3e:	00d9      	lsls	r1, r3, #3
 8005c40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c44:	00d0      	lsls	r0, r2, #3
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	1911      	adds	r1, r2, r4
 8005c4c:	6639      	str	r1, [r7, #96]	; 0x60
 8005c4e:	416b      	adcs	r3, r5
 8005c50:	667b      	str	r3, [r7, #100]	; 0x64
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	1891      	adds	r1, r2, r2
 8005c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c60:	415b      	adcs	r3, r3
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c6c:	f7fa fafa 	bl	8000264 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4ba5      	ldr	r3, [pc, #660]	; (8005f0c <UART_SetConfig+0x38c>)
 8005c76:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	011e      	lsls	r6, r3, #4
 8005c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c80:	461c      	mov	r4, r3
 8005c82:	f04f 0500 	mov.w	r5, #0
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
 8005c8a:	1891      	adds	r1, r2, r2
 8005c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c8e:	415b      	adcs	r3, r3
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c96:	1912      	adds	r2, r2, r4
 8005c98:	eb45 0303 	adc.w	r3, r5, r3
 8005c9c:	f04f 0000 	mov.w	r0, #0
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	00d9      	lsls	r1, r3, #3
 8005ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005caa:	00d0      	lsls	r0, r2, #3
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	1911      	adds	r1, r2, r4
 8005cb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cb4:	416b      	adcs	r3, r5
 8005cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	1891      	adds	r1, r2, r2
 8005cc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cc6:	415b      	adcs	r3, r3
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005cd2:	f7fa fac7 	bl	8000264 <__aeabi_uldivmod>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4b8c      	ldr	r3, [pc, #560]	; (8005f0c <UART_SetConfig+0x38c>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2164      	movs	r1, #100	; 0x64
 8005ce4:	fb01 f303 	mul.w	r3, r1, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a87      	ldr	r2, [pc, #540]	; (8005f0c <UART_SetConfig+0x38c>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cfc:	441e      	add	r6, r3
 8005cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d00:	4618      	mov	r0, r3
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	1894      	adds	r4, r2, r2
 8005d0c:	623c      	str	r4, [r7, #32]
 8005d0e:	415b      	adcs	r3, r3
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d16:	1812      	adds	r2, r2, r0
 8005d18:	eb41 0303 	adc.w	r3, r1, r3
 8005d1c:	f04f 0400 	mov.w	r4, #0
 8005d20:	f04f 0500 	mov.w	r5, #0
 8005d24:	00dd      	lsls	r5, r3, #3
 8005d26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d2a:	00d4      	lsls	r4, r2, #3
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	462b      	mov	r3, r5
 8005d30:	1814      	adds	r4, r2, r0
 8005d32:	653c      	str	r4, [r7, #80]	; 0x50
 8005d34:	414b      	adcs	r3, r1
 8005d36:	657b      	str	r3, [r7, #84]	; 0x54
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	1891      	adds	r1, r2, r2
 8005d44:	61b9      	str	r1, [r7, #24]
 8005d46:	415b      	adcs	r3, r3
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d52:	f7fa fa87 	bl	8000264 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <UART_SetConfig+0x38c>)
 8005d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	2164      	movs	r1, #100	; 0x64
 8005d64:	fb01 f303 	mul.w	r3, r1, r3
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	3332      	adds	r3, #50	; 0x32
 8005d6e:	4a67      	ldr	r2, [pc, #412]	; (8005f0c <UART_SetConfig+0x38c>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f003 0207 	and.w	r2, r3, #7
 8005d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4432      	add	r2, r6
 8005d80:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d82:	e0b9      	b.n	8005ef8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d86:	461c      	mov	r4, r3
 8005d88:	f04f 0500 	mov.w	r5, #0
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	6139      	str	r1, [r7, #16]
 8005d94:	415b      	adcs	r3, r3
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d9c:	1912      	adds	r2, r2, r4
 8005d9e:	eb45 0303 	adc.w	r3, r5, r3
 8005da2:	f04f 0000 	mov.w	r0, #0
 8005da6:	f04f 0100 	mov.w	r1, #0
 8005daa:	00d9      	lsls	r1, r3, #3
 8005dac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005db0:	00d0      	lsls	r0, r2, #3
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	eb12 0804 	adds.w	r8, r2, r4
 8005dba:	eb43 0905 	adc.w	r9, r3, r5
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f04f 0100 	mov.w	r1, #0
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	f04f 0300 	mov.w	r3, #0
 8005dd0:	008b      	lsls	r3, r1, #2
 8005dd2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dd6:	0082      	lsls	r2, r0, #2
 8005dd8:	4640      	mov	r0, r8
 8005dda:	4649      	mov	r1, r9
 8005ddc:	f7fa fa42 	bl	8000264 <__aeabi_uldivmod>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4b49      	ldr	r3, [pc, #292]	; (8005f0c <UART_SetConfig+0x38c>)
 8005de6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	011e      	lsls	r6, r3, #4
 8005dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df0:	4618      	mov	r0, r3
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	1894      	adds	r4, r2, r2
 8005dfc:	60bc      	str	r4, [r7, #8]
 8005dfe:	415b      	adcs	r3, r3
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e06:	1812      	adds	r2, r2, r0
 8005e08:	eb41 0303 	adc.w	r3, r1, r3
 8005e0c:	f04f 0400 	mov.w	r4, #0
 8005e10:	f04f 0500 	mov.w	r5, #0
 8005e14:	00dd      	lsls	r5, r3, #3
 8005e16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e1a:	00d4      	lsls	r4, r2, #3
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	462b      	mov	r3, r5
 8005e20:	1814      	adds	r4, r2, r0
 8005e22:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e24:	414b      	adcs	r3, r1
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f04f 0100 	mov.w	r1, #0
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	008b      	lsls	r3, r1, #2
 8005e3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e40:	0082      	lsls	r2, r0, #2
 8005e42:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e46:	f7fa fa0d 	bl	8000264 <__aeabi_uldivmod>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <UART_SetConfig+0x38c>)
 8005e50:	fba3 1302 	umull	r1, r3, r3, r2
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	2164      	movs	r1, #100	; 0x64
 8005e58:	fb01 f303 	mul.w	r3, r1, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	011b      	lsls	r3, r3, #4
 8005e60:	3332      	adds	r3, #50	; 0x32
 8005e62:	4a2a      	ldr	r2, [pc, #168]	; (8005f0c <UART_SetConfig+0x38c>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e6e:	441e      	add	r6, r3
 8005e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e72:	4618      	mov	r0, r3
 8005e74:	f04f 0100 	mov.w	r1, #0
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	1894      	adds	r4, r2, r2
 8005e7e:	603c      	str	r4, [r7, #0]
 8005e80:	415b      	adcs	r3, r3
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e88:	1812      	adds	r2, r2, r0
 8005e8a:	eb41 0303 	adc.w	r3, r1, r3
 8005e8e:	f04f 0400 	mov.w	r4, #0
 8005e92:	f04f 0500 	mov.w	r5, #0
 8005e96:	00dd      	lsls	r5, r3, #3
 8005e98:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e9c:	00d4      	lsls	r4, r2, #3
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb12 0a00 	adds.w	sl, r2, r0
 8005ea6:	eb43 0b01 	adc.w	fp, r3, r1
 8005eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f04f 0100 	mov.w	r1, #0
 8005eb4:	f04f 0200 	mov.w	r2, #0
 8005eb8:	f04f 0300 	mov.w	r3, #0
 8005ebc:	008b      	lsls	r3, r1, #2
 8005ebe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ec2:	0082      	lsls	r2, r0, #2
 8005ec4:	4650      	mov	r0, sl
 8005ec6:	4659      	mov	r1, fp
 8005ec8:	f7fa f9cc 	bl	8000264 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <UART_SetConfig+0x38c>)
 8005ed2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	2164      	movs	r1, #100	; 0x64
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	3332      	adds	r3, #50	; 0x32
 8005ee4:	4a09      	ldr	r2, [pc, #36]	; (8005f0c <UART_SetConfig+0x38c>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4432      	add	r2, r6
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	377c      	adds	r7, #124	; 0x7c
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop
 8005f04:	40011000 	.word	0x40011000
 8005f08:	40011400 	.word	0x40011400
 8005f0c:	51eb851f 	.word	0x51eb851f

08005f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f10:	b084      	sub	sp, #16
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	f107 001c 	add.w	r0, r7, #28
 8005f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d122      	bne.n	8005f6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d105      	bne.n	8005f62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f9a0 	bl	80062a8 <USB_CoreReset>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e01a      	b.n	8005fa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f994 	bl	80062a8 <USB_CoreReset>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
 8005f96:	e005      	b.n	8005fa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d10b      	bne.n	8005fc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f043 0206 	orr.w	r2, r3, #6
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f043 0220 	orr.w	r2, r3, #32
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fce:	b004      	add	sp, #16
 8005fd0:	4770      	bx	lr

08005fd2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f023 0201 	bic.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d115      	bne.n	8006064 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006044:	2001      	movs	r0, #1
 8006046:	f7fb f8cf 	bl	80011e8 <HAL_Delay>
      ms++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f91a 	bl	800628a <USB_GetMode>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d01e      	beq.n	800609a <USB_SetCurrentMode+0x84>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b31      	cmp	r3, #49	; 0x31
 8006060:	d9f0      	bls.n	8006044 <USB_SetCurrentMode+0x2e>
 8006062:	e01a      	b.n	800609a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d115      	bne.n	8006096 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006076:	2001      	movs	r0, #1
 8006078:	f7fb f8b6 	bl	80011e8 <HAL_Delay>
      ms++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f901 	bl	800628a <USB_GetMode>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <USB_SetCurrentMode+0x84>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b31      	cmp	r3, #49	; 0x31
 8006092:	d9f0      	bls.n	8006076 <USB_SetCurrentMode+0x60>
 8006094:	e001      	b.n	800609a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e005      	b.n	80060a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b32      	cmp	r3, #50	; 0x32
 800609e:	d101      	bne.n	80060a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	019b      	lsls	r3, r3, #6
 80060c2:	f043 0220 	orr.w	r2, r3, #32
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	4a08      	ldr	r2, [pc, #32]	; (80060f4 <USB_FlushTxFifo+0x44>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e006      	b.n	80060e8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b20      	cmp	r3, #32
 80060e4:	d0f1      	beq.n	80060ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	00030d40 	.word	0x00030d40

080060f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2210      	movs	r2, #16
 8006108:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	4a08      	ldr	r2, [pc, #32]	; (8006134 <USB_FlushRxFifo+0x3c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e006      	b.n	8006128 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	f003 0310 	and.w	r3, r3, #16
 8006122:	2b10      	cmp	r3, #16
 8006124:	d0f1      	beq.n	800610a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	00030d40 	.word	0x00030d40

08006138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006138:	b480      	push	{r7}
 800613a:	b089      	sub	sp, #36	; 0x24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	460b      	mov	r3, r1
 8006148:	71fb      	strb	r3, [r7, #7]
 800614a:	4613      	mov	r3, r2
 800614c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006156:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d123      	bne.n	80061a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800615e:	88bb      	ldrh	r3, [r7, #4]
 8006160:	3303      	adds	r3, #3
 8006162:	089b      	lsrs	r3, r3, #2
 8006164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006166:	2300      	movs	r3, #0
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	e018      	b.n	800619e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	031a      	lsls	r2, r3, #12
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006178:	461a      	mov	r2, r3
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3301      	adds	r3, #1
 800618a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	3301      	adds	r3, #1
 8006190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	3301      	adds	r3, #1
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3e2      	bcc.n	800616c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3724      	adds	r7, #36	; 0x24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b08b      	sub	sp, #44	; 0x2c
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80061da:	2300      	movs	r3, #0
 80061dc:	623b      	str	r3, [r7, #32]
 80061de:	e014      	b.n	800620a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	3301      	adds	r3, #1
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	3301      	adds	r3, #1
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	3301      	adds	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	3301      	adds	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	3301      	adds	r3, #1
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	429a      	cmp	r2, r3
 8006210:	d3e6      	bcc.n	80061e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006212:	8bfb      	ldrh	r3, [r7, #30]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01e      	beq.n	8006256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006222:	461a      	mov	r2, r3
 8006224:	f107 0310 	add.w	r3, r7, #16
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	fa22 f303 	lsr.w	r3, r2, r3
 8006238:	b2da      	uxtb	r2, r3
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	701a      	strb	r2, [r3, #0]
      i++;
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	3301      	adds	r3, #1
 8006242:	623b      	str	r3, [r7, #32]
      pDest++;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	3301      	adds	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800624a:	8bfb      	ldrh	r3, [r7, #30]
 800624c:	3b01      	subs	r3, #1
 800624e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006250:	8bfb      	ldrh	r3, [r7, #30]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1ea      	bne.n	800622c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006258:	4618      	mov	r0, r3
 800625a:	372c      	adds	r7, #44	; 0x2c
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0301 	and.w	r3, r3, #1
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4a13      	ldr	r2, [pc, #76]	; (8006308 <USB_CoreReset+0x60>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d901      	bls.n	80062c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e01a      	b.n	80062fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	daf3      	bge.n	80062b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f043 0201 	orr.w	r2, r3, #1
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3301      	adds	r3, #1
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4a09      	ldr	r2, [pc, #36]	; (8006308 <USB_CoreReset+0x60>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d901      	bls.n	80062ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e006      	b.n	80062fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d0f1      	beq.n	80062dc <USB_CoreReset+0x34>

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	00030d40 	.word	0x00030d40

0800630c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800630c:	b084      	sub	sp, #16
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	f107 001c 	add.w	r0, r7, #28
 800631a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	2b00      	cmp	r3, #0
 800635c:	d018      	beq.n	8006390 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	2b01      	cmp	r3, #1
 8006362:	d10a      	bne.n	800637a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006372:	f043 0304 	orr.w	r3, r3, #4
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e014      	b.n	80063a4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006388:	f023 0304 	bic.w	r3, r3, #4
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e009      	b.n	80063a4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800639e:	f023 0304 	bic.w	r3, r3, #4
 80063a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80063a4:	2110      	movs	r1, #16
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fe82 	bl	80060b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fea3 	bl	80060f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e015      	b.n	80063e4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	461a      	mov	r2, r3
 80063da:	2300      	movs	r3, #0
 80063dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	6a3b      	ldr	r3, [r7, #32]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3e5      	bcc.n	80063b8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a13      	ldr	r2, [pc, #76]	; (8006460 <USB_HostInit+0x154>)
 8006412:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a13      	ldr	r2, [pc, #76]	; (8006464 <USB_HostInit+0x158>)
 8006418:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800641c:	e009      	b.n	8006432 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a10      	ldr	r2, [pc, #64]	; (8006468 <USB_HostInit+0x15c>)
 8006428:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a0f      	ldr	r2, [pc, #60]	; (800646c <USB_HostInit+0x160>)
 800642e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0210 	orr.w	r2, r3, #16
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <USB_HostInit+0x164>)
 800644a:	4313      	orrs	r3, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800645c:	b004      	add	sp, #16
 800645e:	4770      	bx	lr
 8006460:	01000200 	.word	0x01000200
 8006464:	00e00300 	.word	0x00e00300
 8006468:	00600080 	.word	0x00600080
 800646c:	004000e0 	.word	0x004000e0
 8006470:	a3200008 	.word	0xa3200008

08006474 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	78fb      	ldrb	r3, [r7, #3]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80064ac:	4313      	orrs	r3, r2
 80064ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d107      	bne.n	80064c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064bc:	461a      	mov	r2, r3
 80064be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80064c2:	6053      	str	r3, [r2, #4]
 80064c4:	e009      	b.n	80064da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d106      	bne.n	80064da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	461a      	mov	r2, r3
 80064d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80064d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006508:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006516:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006518:	2064      	movs	r0, #100	; 0x64
 800651a:	f7fa fe65 	bl	80011e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006526:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800652c:	200a      	movs	r0, #10
 800652e:	f7fa fe5b 	bl	80011e8 <HAL_Delay>

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006560:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <USB_DriveVbus+0x44>
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d106      	bne.n	8006580 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800657a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800657e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d109      	bne.n	80065a0 <USB_DriveVbus+0x64>
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800659a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800659e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	0c5b      	lsrs	r3, r3, #17
 80065cc:	f003 0303 	and.w	r3, r3, #3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	b29b      	uxth	r3, r3
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	4608      	mov	r0, r1
 800660a:	4611      	mov	r1, r2
 800660c:	461a      	mov	r2, r3
 800660e:	4603      	mov	r3, r0
 8006610:	70fb      	strb	r3, [r7, #3]
 8006612:	460b      	mov	r3, r1
 8006614:	70bb      	strb	r3, [r7, #2]
 8006616:	4613      	mov	r3, r2
 8006618:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006636:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800663a:	2b03      	cmp	r3, #3
 800663c:	d87e      	bhi.n	800673c <USB_HC_Init+0x13c>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <USB_HC_Init+0x44>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	08006655 	.word	0x08006655
 8006648:	080066ff 	.word	0x080066ff
 800664c:	08006655 	.word	0x08006655
 8006650:	080066c1 	.word	0x080066c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	4413      	add	r3, r2
 800665c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006660:	461a      	mov	r2, r3
 8006662:	f240 439d 	movw	r3, #1181	; 0x49d
 8006666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800666c:	2b00      	cmp	r3, #0
 800666e:	da10      	bge.n	8006692 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006670:	78fb      	ldrb	r3, [r7, #3]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	440a      	add	r2, r1
 8006686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800668a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006690:	e057      	b.n	8006742 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669a:	2b00      	cmp	r3, #0
 800669c:	d051      	beq.n	8006742 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066bc:	60d3      	str	r3, [r2, #12]
      break;
 80066be:	e040      	b.n	8006742 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066cc:	461a      	mov	r2, r3
 80066ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80066d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da34      	bge.n	8006746 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	78fa      	ldrb	r2, [r7, #3]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066fc:	e023      	b.n	8006746 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066fe:	78fb      	ldrb	r3, [r7, #3]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	461a      	mov	r2, r3
 800670c:	f240 2325 	movw	r3, #549	; 0x225
 8006710:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006712:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da17      	bge.n	800674a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006734:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006738:	60d3      	str	r3, [r2, #12]
      }
      break;
 800673a:	e006      	b.n	800674a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	77fb      	strb	r3, [r7, #31]
      break;
 8006740:	e004      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <USB_HC_Init+0x14c>
      break;
 800674a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006752:	699a      	ldr	r2, [r3, #24]
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	6939      	ldr	r1, [r7, #16]
 8006762:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006766:	4313      	orrs	r3, r2
 8006768:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006776:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800677a:	2b00      	cmp	r3, #0
 800677c:	da03      	bge.n	8006786 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800677e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	e001      	b.n	800678a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff ff0f 	bl	80065ae <USB_GetHostSpeed>
 8006790:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006796:	2b02      	cmp	r3, #2
 8006798:	d106      	bne.n	80067a8 <USB_HC_Init+0x1a8>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d003      	beq.n	80067a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e001      	b.n	80067ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067ac:	787b      	ldrb	r3, [r7, #1]
 80067ae:	059b      	lsls	r3, r3, #22
 80067b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067b4:	78bb      	ldrb	r3, [r7, #2]
 80067b6:	02db      	lsls	r3, r3, #11
 80067b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067c2:	049b      	lsls	r3, r3, #18
 80067c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80067cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	0159      	lsls	r1, r3, #5
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	440b      	add	r3, r1
 80067de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80067ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d10f      	bne.n	8006812 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006810:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006812:	7ffb      	ldrb	r3, [r7, #31]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3720      	adds	r7, #32
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08c      	sub	sp, #48	; 0x30
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	785b      	ldrb	r3, [r3, #1]
 8006832:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006838:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	2b00      	cmp	r3, #0
 8006844:	d02d      	beq.n	80068a2 <USB_HC_StartXfer+0x86>
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d129      	bne.n	80068a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d117      	bne.n	8006884 <USB_HC_StartXfer+0x68>
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	79db      	ldrb	r3, [r3, #7]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <USB_HC_StartXfer+0x48>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	79db      	ldrb	r3, [r3, #7]
 8006860:	2b02      	cmp	r3, #2
 8006862:	d10f      	bne.n	8006884 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	440a      	add	r2, r1
 800687a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10b      	bne.n	80068a2 <USB_HC_StartXfer+0x86>
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d107      	bne.n	80068a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	785b      	ldrb	r3, [r3, #1]
 8006896:	4619      	mov	r1, r3
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fa2f 	bl	8006cfc <USB_DoPing>
      return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e0f8      	b.n	8006a94 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d018      	beq.n	80068dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	8912      	ldrh	r2, [r2, #8]
 80068b2:	4413      	add	r3, r2
 80068b4:	3b01      	subs	r3, #1
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	8912      	ldrh	r2, [r2, #8]
 80068ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80068be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80068c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80068c2:	8b7b      	ldrh	r3, [r7, #26]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d90b      	bls.n	80068e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80068c8:	8b7b      	ldrh	r3, [r7, #26]
 80068ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	8912      	ldrh	r2, [r2, #8]
 80068d2:	fb02 f203 	mul.w	r2, r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	611a      	str	r2, [r3, #16]
 80068da:	e001      	b.n	80068e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80068dc:	2301      	movs	r3, #1
 80068de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	78db      	ldrb	r3, [r3, #3]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	8912      	ldrh	r2, [r2, #8]
 80068ee:	fb02 f203 	mul.w	r2, r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	611a      	str	r2, [r3, #16]
 80068f6:	e003      	b.n	8006900 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006908:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800690a:	04d9      	lsls	r1, r3, #19
 800690c:	4b63      	ldr	r3, [pc, #396]	; (8006a9c <USB_HC_StartXfer+0x280>)
 800690e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006910:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	7a9b      	ldrb	r3, [r3, #10]
 8006916:	075b      	lsls	r3, r3, #29
 8006918:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800691c:	69f9      	ldr	r1, [r7, #28]
 800691e:	0148      	lsls	r0, r1, #5
 8006920:	6a39      	ldr	r1, [r7, #32]
 8006922:	4401      	add	r1, r0
 8006924:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006928:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800692a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	68d9      	ldr	r1, [r3, #12]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	4413      	add	r3, r2
 800693e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006942:	460a      	mov	r2, r1
 8006944:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	6a3a      	ldr	r2, [r7, #32]
 8006972:	440a      	add	r2, r1
 8006974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006978:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800697c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	4413      	add	r3, r2
 8006986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	7e7b      	ldrb	r3, [r7, #25]
 800698e:	075b      	lsls	r3, r3, #29
 8006990:	69f9      	ldr	r1, [r7, #28]
 8006992:	0148      	lsls	r0, r1, #5
 8006994:	6a39      	ldr	r1, [r7, #32]
 8006996:	4401      	add	r1, r0
 8006998:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800699c:	4313      	orrs	r3, r2
 800699e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	78db      	ldrb	r3, [r3, #3]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	e003      	b.n	80069d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	461a      	mov	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e04e      	b.n	8006a94 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d149      	bne.n	8006a92 <USB_HC_StartXfer+0x276>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d045      	beq.n	8006a92 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	79db      	ldrb	r3, [r3, #7]
 8006a0a:	2b03      	cmp	r3, #3
 8006a0c:	d830      	bhi.n	8006a70 <USB_HC_StartXfer+0x254>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <USB_HC_StartXfer+0x1f8>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a49 	.word	0x08006a49
 8006a1c:	08006a25 	.word	0x08006a25
 8006a20:	08006a49 	.word	0x08006a49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a2e:	8afa      	ldrh	r2, [r7, #22]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d91c      	bls.n	8006a74 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	f043 0220 	orr.w	r2, r3, #32
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a46:	e015      	b.n	8006a74 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	3303      	adds	r3, #3
 8006a4e:	089b      	lsrs	r3, r3, #2
 8006a50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a52:	8afa      	ldrh	r2, [r7, #22]
 8006a54:	6a3b      	ldr	r3, [r7, #32]
 8006a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d90a      	bls.n	8006a78 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a6e:	e003      	b.n	8006a78 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <USB_HC_StartXfer+0x25e>
        break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <USB_HC_StartXfer+0x25e>
        break;
 8006a78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	68d9      	ldr	r1, [r3, #12]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	785a      	ldrb	r2, [r3, #1]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2000      	movs	r0, #0
 8006a8a:	9000      	str	r0, [sp, #0]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff fb53 	bl	8006138 <USB_WritePacket>
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3728      	adds	r7, #40	; 0x28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	1ff80000 	.word	0x1ff80000

08006aa0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	b29b      	uxth	r3, r3
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b089      	sub	sp, #36	; 0x24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	0c9b      	lsrs	r3, r3, #18
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	0fdb      	lsrs	r3, r3, #31
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f003 0320 	and.w	r3, r3, #32
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d104      	bne.n	8006b1c <USB_HC_Halt+0x5a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e0e8      	b.n	8006cee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <USB_HC_Halt+0x66>
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d173      	bne.n	8006c10 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	0151      	lsls	r1, r2, #5
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	440a      	add	r2, r1
 8006b3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0320 	and.w	r3, r3, #32
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 80cb 	bne.w	8006cec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d143      	bne.n	8006bea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	0151      	lsls	r1, r2, #5
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	440a      	add	r2, r1
 8006b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b80:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bc0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bce:	d81d      	bhi.n	8006c0c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be6:	d0ec      	beq.n	8006bc2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006be8:	e080      	b.n	8006cec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c08:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c0a:	e06f      	b.n	8006cec <USB_HC_Halt+0x22a>
            break;
 8006c0c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c0e:	e06d      	b.n	8006cec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d143      	bne.n	8006cc8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c7e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	0151      	lsls	r1, r2, #5
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	440a      	add	r2, r1
 8006c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c9e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cac:	d81d      	bhi.n	8006cea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc4:	d0ec      	beq.n	8006ca0 <USB_HC_Halt+0x1de>
 8006cc6:	e011      	b.n	8006cec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	e000      	b.n	8006cec <USB_HC_Halt+0x22a>
          break;
 8006cea:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3724      	adds	r7, #36	; 0x24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d10:	2301      	movs	r3, #1
 8006d12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	04da      	lsls	r2, r3, #19
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <USB_DoPing+0x74>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d2c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d44:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	1ff80000 	.word	0x1ff80000

08006d74 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff f935 	bl	8005ff4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006d8a:	2110      	movs	r1, #16
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff f98f 	bl	80060b0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7ff f9b0 	bl	80060f8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	e01f      	b.n	8006dde <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006db4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dbc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dc4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b0f      	cmp	r3, #15
 8006de2:	d9dc      	bls.n	8006d9e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	e034      	b.n	8006e54 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e00:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e08:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e10:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3301      	adds	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e30:	d80c      	bhi.n	8006e4c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e48:	d0ec      	beq.n	8006e24 <USB_StopHost+0xb0>
 8006e4a:	e000      	b.n	8006e4e <USB_StopHost+0xda>
        break;
 8006e4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3301      	adds	r3, #1
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	2b0f      	cmp	r3, #15
 8006e58:	d9c7      	bls.n	8006dea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e60:	461a      	mov	r2, r3
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff f8ae 	bl	8005fd2 <USB_EnableGlobalInt>

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b089      	sub	sp, #36	; 0x24
 8006e84:	af04      	add	r7, sp, #16
 8006e86:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006e88:	2301      	movs	r3, #1
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fc66 	bl	8007760 <USBH_FindInterface>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2bff      	cmp	r3, #255	; 0xff
 8006e9c:	d002      	beq.n	8006ea4 <USBH_CDC_InterfaceInit+0x24>
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d901      	bls.n	8006ea8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e13d      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc3b 	bl	8007728 <USBH_SelectInterface>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e131      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006ec6:	2050      	movs	r0, #80	; 0x50
 8006ec8:	f006 fc40 	bl	800d74c <malloc>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e11f      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ee4:	2250      	movs	r2, #80	; 0x50
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	68b8      	ldr	r0, [r7, #8]
 8006eea:	f006 fc5b 	bl	800d7a4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	211a      	movs	r1, #26
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da15      	bge.n	8006f32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	211a      	movs	r1, #26
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f16:	781a      	ldrb	r2, [r3, #0]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	211a      	movs	r1, #26
 8006f22:	fb01 f303 	mul.w	r3, r1, r3
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	785b      	ldrb	r3, [r3, #1]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fe32 	bl	8008ba2 <USBH_AllocPipe>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	461a      	mov	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	7819      	ldrb	r1, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	7858      	ldrb	r0, [r3, #1]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	8952      	ldrh	r2, [r2, #10]
 8006f5e:	9202      	str	r2, [sp, #8]
 8006f60:	2203      	movs	r2, #3
 8006f62:	9201      	str	r2, [sp, #4]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4623      	mov	r3, r4
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fdea 	bl	8008b44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f002 f8f9 	bl	8009170 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2200      	movs	r2, #0
 8006f82:	210a      	movs	r1, #10
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fbeb 	bl	8007760 <USBH_FindInterface>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	2bff      	cmp	r3, #255	; 0xff
 8006f92:	d002      	beq.n	8006f9a <USBH_CDC_InterfaceInit+0x11a>
 8006f94:	7bfb      	ldrb	r3, [r7, #15]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d901      	bls.n	8006f9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e0c2      	b.n	8007124 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	211a      	movs	r1, #26
 8006fa4:	fb01 f303 	mul.w	r3, r1, r3
 8006fa8:	4413      	add	r3, r2
 8006faa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	da16      	bge.n	8006fe4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	211a      	movs	r1, #26
 8006fbc:	fb01 f303 	mul.w	r3, r1, r3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fc6:	781a      	ldrb	r2, [r3, #0]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	211a      	movs	r1, #26
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fdc:	881a      	ldrh	r2, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	835a      	strh	r2, [r3, #26]
 8006fe2:	e015      	b.n	8007010 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	211a      	movs	r1, #26
 8006fea:	fb01 f303 	mul.w	r3, r1, r3
 8006fee:	4413      	add	r3, r2
 8006ff0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ff4:	781a      	ldrb	r2, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	211a      	movs	r1, #26
 8007000:	fb01 f303 	mul.w	r3, r1, r3
 8007004:	4413      	add	r3, r2
 8007006:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800700a:	881a      	ldrh	r2, [r3, #0]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	211a      	movs	r1, #26
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	4413      	add	r3, r2
 800701c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b25b      	sxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	da16      	bge.n	8007056 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	211a      	movs	r1, #26
 800702e:	fb01 f303 	mul.w	r3, r1, r3
 8007032:	4413      	add	r3, r2
 8007034:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007038:	781a      	ldrb	r2, [r3, #0]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	211a      	movs	r1, #26
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	835a      	strh	r2, [r3, #26]
 8007054:	e015      	b.n	8007082 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	211a      	movs	r1, #26
 800705c:	fb01 f303 	mul.w	r3, r1, r3
 8007060:	4413      	add	r3, r2
 8007062:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	211a      	movs	r1, #26
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	4413      	add	r3, r2
 8007078:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800707c:	881a      	ldrh	r2, [r3, #0]
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7b9b      	ldrb	r3, [r3, #14]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 fd8a 	bl	8008ba2 <USBH_AllocPipe>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	7bdb      	ldrb	r3, [r3, #15]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fd80 	bl	8008ba2 <USBH_AllocPipe>
 80070a2:	4603      	mov	r3, r0
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	7b59      	ldrb	r1, [r3, #13]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	7b98      	ldrb	r0, [r3, #14]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	8b12      	ldrh	r2, [r2, #24]
 80070c2:	9202      	str	r2, [sp, #8]
 80070c4:	2202      	movs	r2, #2
 80070c6:	9201      	str	r2, [sp, #4]
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4623      	mov	r3, r4
 80070cc:	4602      	mov	r2, r0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fd38 	bl	8008b44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	7b19      	ldrb	r1, [r3, #12]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	7bd8      	ldrb	r0, [r3, #15]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	8b52      	ldrh	r2, [r2, #26]
 80070ec:	9202      	str	r2, [sp, #8]
 80070ee:	2202      	movs	r2, #2
 80070f0:	9201      	str	r2, [sp, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4623      	mov	r3, r4
 80070f6:	4602      	mov	r2, r0
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fd23 	bl	8008b44 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	7b5b      	ldrb	r3, [r3, #13]
 800710a:	2200      	movs	r2, #0
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 f82e 	bl	8009170 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	7b1b      	ldrb	r3, [r3, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	4619      	mov	r1, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f002 f827 	bl	8009170 <USBH_LL_SetToggle>

  return USBH_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	bd90      	pop	{r4, r7, pc}

0800712c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fd18 	bl	8008b82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f001 fd43 	bl	8008be4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7b1b      	ldrb	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7b1b      	ldrb	r3, [r3, #12]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fd05 	bl	8008b82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	7b1b      	ldrb	r3, [r3, #12]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fd30 	bl	8008be4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	7b5b      	ldrb	r3, [r3, #13]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7b5b      	ldrb	r3, [r3, #13]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fcf2 	bl	8008b82 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	7b5b      	ldrb	r3, [r3, #13]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fd1d 	bl	8008be4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f006 fac9 	bl	800d75c <free>
    phost->pActiveClass->pData = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d0:	2200      	movs	r2, #0
 80071d2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	3340      	adds	r3, #64	; 0x40
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8b1 	bl	800735e <GetLineCoding>
 80071fc:	4603      	mov	r3, r0
 80071fe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007200:	7afb      	ldrb	r3, [r7, #11]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800720c:	2102      	movs	r1, #2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007212:	7afb      	ldrb	r3, [r7, #11]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800723c:	2b04      	cmp	r3, #4
 800723e:	d877      	bhi.n	8007330 <USBH_CDC_Process+0x114>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <USBH_CDC_Process+0x2c>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	0800725d 	.word	0x0800725d
 800724c:	08007263 	.word	0x08007263
 8007250:	08007293 	.word	0x08007293
 8007254:	08007307 	.word	0x08007307
 8007258:	08007315 	.word	0x08007315
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73fb      	strb	r3, [r7, #15]
      break;
 8007260:	e06d      	b.n	800733e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f897 	bl	800739c <SetLineCoding>
 800726e:	4603      	mov	r3, r0
 8007270:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007280:	e058      	b.n	8007334 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d055      	beq.n	8007334 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007290:	e050      	b.n	8007334 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3340      	adds	r3, #64	; 0x40
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f860 	bl	800735e <GetLineCoding>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d126      	bne.n	80072f6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ba:	791b      	ldrb	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d13b      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d133      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072da:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072dc:	429a      	cmp	r2, r3
 80072de:	d12b      	bne.n	8007338 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d124      	bne.n	8007338 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f958 	bl	80075a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072f4:	e020      	b.n	8007338 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d01d      	beq.n	8007338 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007304:	e018      	b.n	8007338 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f867 	bl	80073da <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f8da 	bl	80074c6 <CDC_ProcessReception>
      break;
 8007312:	e014      	b.n	800733e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 ffe3 	bl	80082e2 <USBH_ClrFeature>
 800731c:	4603      	mov	r3, r0
 800731e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800732e:	e005      	b.n	800733c <USBH_CDC_Process+0x120>

    default:
      break;
 8007330:	bf00      	nop
 8007332:	e004      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 8007334:	bf00      	nop
 8007336:	e002      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 8007338:	bf00      	nop
 800733a:	e000      	b.n	800733e <USBH_CDC_Process+0x122>
      break;
 800733c:	bf00      	nop

  }

  return status;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	22a1      	movs	r2, #161	; 0xa1
 800736c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2221      	movs	r2, #33	; 0x21
 8007372:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2207      	movs	r2, #7
 8007384:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	2207      	movs	r2, #7
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f001 f988 	bl	80086a2 <USBH_CtlReq>
 8007392:	4603      	mov	r3, r0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2221      	movs	r2, #33	; 0x21
 80073aa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2207      	movs	r2, #7
 80073c2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2207      	movs	r2, #7
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 f969 	bl	80086a2 <USBH_CtlReq>
 80073d0:	4603      	mov	r3, r0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b086      	sub	sp, #24
 80073de:	af02      	add	r7, sp, #8
 80073e0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80073ec:	2300      	movs	r3, #0
 80073ee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d002      	beq.n	8007400 <CDC_ProcessTransmission+0x26>
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d023      	beq.n	8007446 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80073fe:	e05e      	b.n	80074be <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	8b12      	ldrh	r2, [r2, #24]
 8007408:	4293      	cmp	r3, r2
 800740a:	d90b      	bls.n	8007424 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	69d9      	ldr	r1, [r3, #28]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8b1a      	ldrh	r2, [r3, #24]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	7b5b      	ldrb	r3, [r3, #13]
 8007418:	2001      	movs	r0, #1
 800741a:	9000      	str	r0, [sp, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fb4e 	bl	8008abe <USBH_BulkSendData>
 8007422:	e00b      	b.n	800743c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800742c:	b29a      	uxth	r2, r3
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	7b5b      	ldrb	r3, [r3, #13]
 8007432:	2001      	movs	r0, #1
 8007434:	9000      	str	r0, [sp, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fb41 	bl	8008abe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007444:	e03b      	b.n	80074be <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	7b5b      	ldrb	r3, [r3, #13]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 fe65 	bl	800911c <USBH_LL_GetURBState>
 8007452:	4603      	mov	r3, r0
 8007454:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007456:	7afb      	ldrb	r3, [r7, #11]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d128      	bne.n	80074ae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	8b12      	ldrh	r2, [r2, #24]
 8007464:	4293      	cmp	r3, r2
 8007466:	d90e      	bls.n	8007486 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	8b12      	ldrh	r2, [r2, #24]
 8007470:	1a9a      	subs	r2, r3, r2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	8b12      	ldrh	r2, [r2, #24]
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	61da      	str	r2, [r3, #28]
 8007484:	e002      	b.n	800748c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800749c:	e00e      	b.n	80074bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f868 	bl	800757c <USBH_CDC_TransmitCallback>
      break;
 80074ac:	e006      	b.n	80074bc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d103      	bne.n	80074bc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074bc:	bf00      	nop
  }
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074d8:	2300      	movs	r3, #0
 80074da:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d002      	beq.n	80074ec <CDC_ProcessReception+0x26>
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d00e      	beq.n	8007508 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80074ea:	e043      	b.n	8007574 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	6a19      	ldr	r1, [r3, #32]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	8b5a      	ldrh	r2, [r3, #26]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	7b1b      	ldrb	r3, [r3, #12]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fb05 	bl	8008b08 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2204      	movs	r2, #4
 8007502:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007506:	e035      	b.n	8007574 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	7b1b      	ldrb	r3, [r3, #12]
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fe04 	bl	800911c <USBH_LL_GetURBState>
 8007514:	4603      	mov	r3, r0
 8007516:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d129      	bne.n	8007572 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	7b1b      	ldrb	r3, [r3, #12]
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 fd67 	bl	8008ff8 <USBH_LL_GetLastXferSize>
 800752a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	429a      	cmp	r2, r3
 8007534:	d016      	beq.n	8007564 <CDC_ProcessReception+0x9e>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	8b5b      	ldrh	r3, [r3, #26]
 800753a:	461a      	mov	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4293      	cmp	r3, r2
 8007540:	d910      	bls.n	8007564 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	1ad2      	subs	r2, r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	441a      	add	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2203      	movs	r2, #3
 800755e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007562:	e006      	b.n	8007572 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f80f 	bl	8007590 <USBH_CDC_ReceiveCallback>
      break;
 8007572:	bf00      	nop
  }
}
 8007574:	bf00      	nop
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075cc:	2302      	movs	r3, #2
 80075ce:	e029      	b.n	8007624 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	79fa      	ldrb	r2, [r7, #7]
 80075d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 f81f 	bl	800762c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 fc37 	bl	8008e90 <USBH_LL_Init>

  return USBH_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
 800763c:	e009      	b.n	8007652 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	33e0      	adds	r3, #224	; 0xe0
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	2200      	movs	r2, #0
 800764a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b0e      	cmp	r3, #14
 8007656:	d9f2      	bls.n	800763e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e009      	b.n	8007672 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4413      	add	r3, r2
 8007664:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007668:	2200      	movs	r2, #0
 800766a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007678:	d3f1      	bcc.n	800765e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2240      	movs	r2, #64	; 0x40
 800769e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10e      	bne.n	8007710 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076f8:	1c59      	adds	r1, r3, #1
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	33de      	adds	r3, #222	; 0xde
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	e004      	b.n	800771a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e001      	b.n	800771a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007716:	2302      	movs	r3, #2
 8007718:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	429a      	cmp	r2, r3
 8007742:	d204      	bcs.n	800774e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800774c:	e001      	b.n	8007752 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800774e:	2302      	movs	r3, #2
 8007750:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	70fb      	strb	r3, [r7, #3]
 8007772:	460b      	mov	r3, r1
 8007774:	70bb      	strb	r3, [r7, #2]
 8007776:	4613      	mov	r3, r2
 8007778:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007788:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800778a:	e025      	b.n	80077d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	221a      	movs	r2, #26
 8007790:	fb02 f303 	mul.w	r3, r2, r3
 8007794:	3308      	adds	r3, #8
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	4413      	add	r3, r2
 800779a:	3302      	adds	r3, #2
 800779c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	78fa      	ldrb	r2, [r7, #3]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d002      	beq.n	80077ae <USBH_FindInterface+0x4e>
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	2bff      	cmp	r3, #255	; 0xff
 80077ac:	d111      	bne.n	80077d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077b2:	78ba      	ldrb	r2, [r7, #2]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d002      	beq.n	80077be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077b8:	78bb      	ldrb	r3, [r7, #2]
 80077ba:	2bff      	cmp	r3, #255	; 0xff
 80077bc:	d109      	bne.n	80077d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077c2:	787a      	ldrb	r2, [r7, #1]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d002      	beq.n	80077ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077c8:	787b      	ldrb	r3, [r7, #1]
 80077ca:	2bff      	cmp	r3, #255	; 0xff
 80077cc:	d101      	bne.n	80077d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	e006      	b.n	80077e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d9d6      	bls.n	800778c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077de:	23ff      	movs	r3, #255	; 0xff
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fb87 	bl	8008f08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80077fa:	2101      	movs	r1, #1
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fca0 	bl	8009142 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af04      	add	r7, sp, #16
 8007812:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007814:	2302      	movs	r3, #2
 8007816:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b01      	cmp	r3, #1
 8007826:	d102      	bne.n	800782e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2203      	movs	r2, #3
 800782c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b0b      	cmp	r3, #11
 8007836:	f200 81b3 	bhi.w	8007ba0 <USBH_Process+0x394>
 800783a:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <USBH_Process+0x34>)
 800783c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007840:	08007871 	.word	0x08007871
 8007844:	080078a3 	.word	0x080078a3
 8007848:	0800790b 	.word	0x0800790b
 800784c:	08007b3b 	.word	0x08007b3b
 8007850:	08007ba1 	.word	0x08007ba1
 8007854:	080079af 	.word	0x080079af
 8007858:	08007ae1 	.word	0x08007ae1
 800785c:	080079e5 	.word	0x080079e5
 8007860:	08007a05 	.word	0x08007a05
 8007864:	08007a25 	.word	0x08007a25
 8007868:	08007a53 	.word	0x08007a53
 800786c:	08007b23 	.word	0x08007b23
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8193 	beq.w	8007ba4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007884:	20c8      	movs	r0, #200	; 0xc8
 8007886:	f001 fca3 	bl	80091d0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fb99 	bl	8008fc2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078a0:	e180      	b.n	8007ba4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d107      	bne.n	80078bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078ba:	e182      	b.n	8007bc2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078c6:	d914      	bls.n	80078f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d903      	bls.n	80078ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220d      	movs	r2, #13
 80078e6:	701a      	strb	r2, [r3, #0]
      break;
 80078e8:	e16b      	b.n	8007bc2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
      break;
 80078f0:	e167      	b.n	8007bc2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80078f8:	f103 020a 	add.w	r2, r3, #10
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007902:	200a      	movs	r0, #10
 8007904:	f001 fc64 	bl	80091d0 <USBH_Delay>
      break;
 8007908:	e15b      	b.n	8007bc2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800791a:	2104      	movs	r1, #4
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007920:	2064      	movs	r0, #100	; 0x64
 8007922:	f001 fc55 	bl	80091d0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 fb24 	bl	8008f74 <USBH_LL_GetSpeed>
 800792c:	4603      	mov	r3, r0
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2205      	movs	r2, #5
 800793a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f92f 	bl	8008ba2 <USBH_AllocPipe>
 8007944:	4603      	mov	r3, r0
 8007946:	461a      	mov	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 f927 	bl	8008ba2 <USBH_AllocPipe>
 8007954:	4603      	mov	r3, r0
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7919      	ldrb	r1, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007970:	b292      	uxth	r2, r2
 8007972:	9202      	str	r2, [sp, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	9201      	str	r2, [sp, #4]
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	4603      	mov	r3, r0
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f8e0 	bl	8008b44 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7959      	ldrb	r1, [r3, #5]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007998:	b292      	uxth	r2, r2
 800799a:	9202      	str	r2, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	9201      	str	r2, [sp, #4]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	4603      	mov	r3, r0
 80079a4:	2200      	movs	r2, #0
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 f8cc 	bl	8008b44 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079ac:	e109      	b.n	8007bc2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f90c 	bl	8007bcc <USBH_HandleEnum>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 80f3 	bne.w	8007ba8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d103      	bne.n	80079dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2208      	movs	r2, #8
 80079d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079da:	e0e5      	b.n	8007ba8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2207      	movs	r2, #7
 80079e0:	701a      	strb	r2, [r3, #0]
      break;
 80079e2:	e0e1      	b.n	8007ba8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80de 	beq.w	8007bac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079f6:	2101      	movs	r1, #1
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2208      	movs	r2, #8
 8007a00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a02:	e0d3      	b.n	8007bac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fc20 	bl	8008254 <USBH_SetCfg>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 80ca 	bne.w	8007bb0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2209      	movs	r2, #9
 8007a20:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a22:	e0c5      	b.n	8007bb0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007a32:	2101      	movs	r1, #1
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fc30 	bl	800829a <USBH_SetFeature>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f040 80b9 	bne.w	8007bb4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	220a      	movs	r2, #10
 8007a46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a48:	e0b4      	b.n	8007bb4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	220a      	movs	r2, #10
 8007a4e:	701a      	strb	r2, [r3, #0]
      break;
 8007a50:	e0b0      	b.n	8007bb4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f000 80ad 	beq.w	8007bb8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
 8007a6a:	e016      	b.n	8007a9a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007a6c:	7bfa      	ldrb	r2, [r7, #15]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	32de      	adds	r2, #222	; 0xde
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	791a      	ldrb	r2, [r3, #4]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d108      	bne.n	8007a94 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	32de      	adds	r2, #222	; 0xde
 8007a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007a92:	e005      	b.n	8007aa0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	3301      	adds	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0e5      	beq.n	8007a6c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d016      	beq.n	8007ad8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	4798      	blx	r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2206      	movs	r2, #6
 8007ac0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ac8:	2103      	movs	r1, #3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ace:	e073      	b.n	8007bb8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	220d      	movs	r2, #13
 8007ad4:	701a      	strb	r2, [r3, #0]
      break;
 8007ad6:	e06f      	b.n	8007bb8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	220d      	movs	r2, #13
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e06b      	b.n	8007bb8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	4798      	blx	r3
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	220b      	movs	r2, #11
 8007b06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b08:	e058      	b.n	8007bbc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d154      	bne.n	8007bbc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	220d      	movs	r2, #13
 8007b16:	701a      	strb	r2, [r3, #0]
      break;
 8007b18:	e050      	b.n	8007bbc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	220d      	movs	r2, #13
 8007b1e:	701a      	strb	r2, [r3, #0]
      break;
 8007b20:	e04c      	b.n	8007bbc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d049      	beq.n	8007bc0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
      }
      break;
 8007b38:	e042      	b.n	8007bc0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fd72 	bl	800762c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b76:	2105      	movs	r1, #5
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d107      	bne.n	8007b98 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff fe2b 	bl	80077ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b96:	e014      	b.n	8007bc2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 f9b5 	bl	8008f08 <USBH_LL_Start>
      break;
 8007b9e:	e010      	b.n	8007bc2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e00e      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007ba4:	bf00      	nop
 8007ba6:	e00c      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007ba8:	bf00      	nop
 8007baa:	e00a      	b.n	8007bc2 <USBH_Process+0x3b6>
    break;
 8007bac:	bf00      	nop
 8007bae:	e008      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e006      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e004      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007bb8:	bf00      	nop
 8007bba:	e002      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007bbc:	bf00      	nop
 8007bbe:	e000      	b.n	8007bc2 <USBH_Process+0x3b6>
      break;
 8007bc0:	bf00      	nop
  }
  return USBH_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b088      	sub	sp, #32
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b07      	cmp	r3, #7
 8007be2:	f200 81c1 	bhi.w	8007f68 <USBH_HandleEnum+0x39c>
 8007be6:	a201      	add	r2, pc, #4	; (adr r2, 8007bec <USBH_HandleEnum+0x20>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c0d 	.word	0x08007c0d
 8007bf0:	08007ccb 	.word	0x08007ccb
 8007bf4:	08007d35 	.word	0x08007d35
 8007bf8:	08007dc3 	.word	0x08007dc3
 8007bfc:	08007e2d 	.word	0x08007e2d
 8007c00:	08007e9d 	.word	0x08007e9d
 8007c04:	08007ee3 	.word	0x08007ee3
 8007c08:	08007f29 	.word	0x08007f29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c0c:	2108      	movs	r1, #8
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa50 	bl	80080b4 <USBH_Get_DevDesc>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d130      	bne.n	8007c80 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7919      	ldrb	r1, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c42:	b292      	uxth	r2, r2
 8007c44:	9202      	str	r2, [sp, #8]
 8007c46:	2200      	movs	r2, #0
 8007c48:	9201      	str	r2, [sp, #4]
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2280      	movs	r2, #128	; 0x80
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 ff77 	bl	8008b44 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7959      	ldrb	r1, [r3, #5]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	9202      	str	r2, [sp, #8]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	9201      	str	r2, [sp, #4]
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	4603      	mov	r3, r0
 8007c76:	2200      	movs	r2, #0
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 ff63 	bl	8008b44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c7e:	e175      	b.n	8007f6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	f040 8172 	bne.w	8007f6c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c8e:	3301      	adds	r3, #1
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d903      	bls.n	8007caa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	220d      	movs	r2, #13
 8007ca6:	701a      	strb	r2, [r3, #0]
      break;
 8007ca8:	e160      	b.n	8007f6c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	795b      	ldrb	r3, [r3, #5]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 ff97 	bl	8008be4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	791b      	ldrb	r3, [r3, #4]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 ff91 	bl	8008be4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	701a      	strb	r2, [r3, #0]
      break;
 8007cc8:	e150      	b.n	8007f6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007cca:	2112      	movs	r1, #18
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f9f1 	bl	80080b4 <USBH_Get_DevDesc>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d103      	bne.n	8007ce4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ce2:	e145      	b.n	8007f70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ce4:	7bbb      	ldrb	r3, [r7, #14]
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	f040 8142 	bne.w	8007f70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d02:	2b03      	cmp	r3, #3
 8007d04:	d903      	bls.n	8007d0e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	220d      	movs	r2, #13
 8007d0a:	701a      	strb	r2, [r3, #0]
      break;
 8007d0c:	e130      	b.n	8007f70 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	795b      	ldrb	r3, [r3, #5]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 ff65 	bl	8008be4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	791b      	ldrb	r3, [r3, #4]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 ff5f 	bl	8008be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	701a      	strb	r2, [r3, #0]
      break;
 8007d32:	e11d      	b.n	8007f70 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d34:	2101      	movs	r1, #1
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa68 	bl	800820c <USBH_SetAddress>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d132      	bne.n	8007dac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007d46:	2002      	movs	r0, #2
 8007d48:	f001 fa42 	bl	80091d0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2203      	movs	r2, #3
 8007d58:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7919      	ldrb	r1, [r3, #4]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007d6e:	b292      	uxth	r2, r2
 8007d70:	9202      	str	r2, [sp, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	9201      	str	r2, [sp, #4]
 8007d76:	9300      	str	r3, [sp, #0]
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fee1 	bl	8008b44 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	7959      	ldrb	r1, [r3, #5]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d96:	b292      	uxth	r2, r2
 8007d98:	9202      	str	r2, [sp, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	9201      	str	r2, [sp, #4]
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	4603      	mov	r3, r0
 8007da2:	2200      	movs	r2, #0
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fecd 	bl	8008b44 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007daa:	e0e3      	b.n	8007f74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f040 80e0 	bne.w	8007f74 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	220d      	movs	r2, #13
 8007db8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	705a      	strb	r2, [r3, #1]
      break;
 8007dc0:	e0d8      	b.n	8007f74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007dc2:	2109      	movs	r1, #9
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f99d 	bl	8008104 <USBH_Get_CfgDesc>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d103      	bne.n	8007ddc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007dda:	e0cd      	b.n	8007f78 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	f040 80ca 	bne.w	8007f78 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dea:	3301      	adds	r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d903      	bls.n	8007e06 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	220d      	movs	r2, #13
 8007e02:	701a      	strb	r2, [r3, #0]
      break;
 8007e04:	e0b8      	b.n	8007f78 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fee9 	bl	8008be4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	791b      	ldrb	r3, [r3, #4]
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fee3 	bl	8008be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
      break;
 8007e2a:	e0a5      	b.n	8007f78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f965 	bl	8008104 <USBH_Get_CfgDesc>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d103      	bne.n	8007e4c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2205      	movs	r2, #5
 8007e48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e4a:	e097      	b.n	8007f7c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e4c:	7bbb      	ldrb	r3, [r7, #14]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	f040 8094 	bne.w	8007f7c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d903      	bls.n	8007e76 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	220d      	movs	r2, #13
 8007e72:	701a      	strb	r2, [r3, #0]
      break;
 8007e74:	e082      	b.n	8007f7c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	795b      	ldrb	r3, [r3, #5]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 feb1 	bl	8008be4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	791b      	ldrb	r3, [r3, #4]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 feab 	bl	8008be4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	701a      	strb	r2, [r3, #0]
      break;
 8007e9a:	e06f      	b.n	8007f7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d019      	beq.n	8007eda <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007eb2:	23ff      	movs	r3, #255	; 0xff
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f949 	bl	800814c <USBH_Get_StringDesc>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d103      	bne.n	8007ecc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2206      	movs	r2, #6
 8007ec8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007eca:	e059      	b.n	8007f80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ecc:	7bbb      	ldrb	r3, [r7, #14]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d156      	bne.n	8007f80 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2206      	movs	r2, #6
 8007ed6:	705a      	strb	r2, [r3, #1]
      break;
 8007ed8:	e052      	b.n	8007f80 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2206      	movs	r2, #6
 8007ede:	705a      	strb	r2, [r3, #1]
      break;
 8007ee0:	e04e      	b.n	8007f80 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d019      	beq.n	8007f20 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ef8:	23ff      	movs	r3, #255	; 0xff
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f926 	bl	800814c <USBH_Get_StringDesc>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2207      	movs	r2, #7
 8007f0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f10:	e038      	b.n	8007f84 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d135      	bne.n	8007f84 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2207      	movs	r2, #7
 8007f1c:	705a      	strb	r2, [r3, #1]
      break;
 8007f1e:	e031      	b.n	8007f84 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2207      	movs	r2, #7
 8007f24:	705a      	strb	r2, [r3, #1]
      break;
 8007f26:	e02d      	b.n	8007f84 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d017      	beq.n	8007f62 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f3e:	23ff      	movs	r3, #255	; 0xff
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f903 	bl	800814c <USBH_Get_StringDesc>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d102      	bne.n	8007f56 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007f54:	e018      	b.n	8007f88 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
 8007f58:	2b03      	cmp	r3, #3
 8007f5a:	d115      	bne.n	8007f88 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f60:	e012      	b.n	8007f88 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
      break;
 8007f66:	e00f      	b.n	8007f88 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007f68:	bf00      	nop
 8007f6a:	e00e      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f6c:	bf00      	nop
 8007f6e:	e00c      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f70:	bf00      	nop
 8007f72:	e00a      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f74:	bf00      	nop
 8007f76:	e008      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f78:	bf00      	nop
 8007f7a:	e006      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f7c:	bf00      	nop
 8007f7e:	e004      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f80:	bf00      	nop
 8007f82:	e002      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <USBH_HandleEnum+0x3be>
      break;
 8007f88:	bf00      	nop
  }
  return Status;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f804 	bl	8007fd6 <USBH_HandleSof>
}
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b0b      	cmp	r3, #11
 8007fe6:	d10a      	bne.n	8007ffe <USBH_HandleSof+0x28>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d005      	beq.n	8007ffe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
  }
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008006:	b480      	push	{r7}
 8008008:	b083      	sub	sp, #12
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008016:	bf00      	nop
}
 8008018:	370c      	adds	r7, #12
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008022:	b480      	push	{r7}
 8008024:	b083      	sub	sp, #12
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008032:	bf00      	nop
}
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 ff56 	bl	8008f3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fda3 	bl	8008be4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	795b      	ldrb	r3, [r3, #5]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fd9d 	bl	8008be4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80080c6:	78fb      	ldrb	r3, [r7, #3]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	4613      	mov	r3, r2
 80080ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d2:	2100      	movs	r1, #0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f864 	bl	80081a2 <USBH_GetDescriptor>
 80080da:	4603      	mov	r3, r0
 80080dc:	73fb      	strb	r3, [r7, #15]
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	b292      	uxth	r2, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f000 f918 	bl	800832a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af02      	add	r7, sp, #8
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	331c      	adds	r3, #28
 8008114:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008116:	887b      	ldrh	r3, [r7, #2]
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f83d 	bl	80081a2 <USBH_GetDescriptor>
 8008128:	4603      	mov	r3, r0
 800812a:	72fb      	strb	r3, [r7, #11]
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d107      	bne.n	8008142 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008138:	887a      	ldrh	r2, [r7, #2]
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	4618      	mov	r0, r3
 800813e:	f000 f964 	bl	800840a <USBH_ParseCfgDesc>
  }

  return status;
 8008142:	7afb      	ldrb	r3, [r7, #11]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	607a      	str	r2, [r7, #4]
 8008156:	461a      	mov	r2, r3
 8008158:	460b      	mov	r3, r1
 800815a:	72fb      	strb	r3, [r7, #11]
 800815c:	4613      	mov	r3, r2
 800815e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008160:	7afb      	ldrb	r3, [r7, #11]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008168:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008170:	893b      	ldrh	r3, [r7, #8]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	460b      	mov	r3, r1
 8008176:	2100      	movs	r1, #0
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f812 	bl	80081a2 <USBH_GetDescriptor>
 800817e:	4603      	mov	r3, r0
 8008180:	75fb      	strb	r3, [r7, #23]
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d107      	bne.n	8008198 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800818e:	893a      	ldrh	r2, [r7, #8]
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa37 	bl	8008606 <USBH_ParseStringDesc>
  }

  return status;
 8008198:	7dfb      	ldrb	r3, [r7, #23]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b084      	sub	sp, #16
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	607b      	str	r3, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	72fb      	strb	r3, [r7, #11]
 80081b0:	4613      	mov	r3, r2
 80081b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	789b      	ldrb	r3, [r3, #2]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d11c      	bne.n	80081f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80081bc:	7afb      	ldrb	r3, [r7, #11]
 80081be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2206      	movs	r2, #6
 80081cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	893a      	ldrh	r2, [r7, #8]
 80081d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80081d4:	893b      	ldrh	r3, [r7, #8]
 80081d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081de:	d104      	bne.n	80081ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f240 4209 	movw	r2, #1033	; 0x409
 80081e6:	829a      	strh	r2, [r3, #20]
 80081e8:	e002      	b.n	80081f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8b3a      	ldrh	r2, [r7, #24]
 80081f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80081f6:	8b3b      	ldrh	r3, [r7, #24]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fa50 	bl	80086a2 <USBH_CtlReq>
 8008202:	4603      	mov	r3, r0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	789b      	ldrb	r3, [r3, #2]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d10f      	bne.n	8008240 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2205      	movs	r2, #5
 800822a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	b29a      	uxth	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008240:	2200      	movs	r2, #0
 8008242:	2100      	movs	r1, #0
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 fa2c 	bl	80086a2 <USBH_CtlReq>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10e      	bne.n	8008286 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2209      	movs	r2, #9
 8008272:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	887a      	ldrh	r2, [r7, #2]
 8008278:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa09 	bl	80086a2 <USBH_CtlReq>
 8008290:	4603      	mov	r3, r0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b082      	sub	sp, #8
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10f      	bne.n	80082ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	b29a      	uxth	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082ce:	2200      	movs	r2, #0
 80082d0:	2100      	movs	r1, #0
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9e5 	bl	80086a2 <USBH_CtlReq>
 80082d8:	4603      	mov	r3, r0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	789b      	ldrb	r3, [r3, #2]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d10f      	bne.n	8008316 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2202      	movs	r2, #2
 80082fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008316:	2200      	movs	r2, #0
 8008318:	2100      	movs	r1, #0
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f9c1 	bl	80086a2 <USBH_CtlReq>
 8008320:	4603      	mov	r3, r0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800832a:	b480      	push	{r7}
 800832c:	b085      	sub	sp, #20
 800832e:	af00      	add	r7, sp, #0
 8008330:	60f8      	str	r0, [r7, #12]
 8008332:	60b9      	str	r1, [r7, #8]
 8008334:	4613      	mov	r3, r2
 8008336:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	785a      	ldrb	r2, [r3, #1]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3302      	adds	r3, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	b29a      	uxth	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3303      	adds	r3, #3
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	b29b      	uxth	r3, r3
 800835c:	4313      	orrs	r3, r2
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	791a      	ldrb	r2, [r3, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	795a      	ldrb	r2, [r3, #5]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	799a      	ldrb	r2, [r3, #6]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	79da      	ldrb	r2, [r3, #7]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	2b08      	cmp	r3, #8
 8008388:	d939      	bls.n	80083fe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	3308      	adds	r3, #8
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	b29a      	uxth	r2, r3
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	3309      	adds	r3, #9
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	b29b      	uxth	r3, r3
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	b29b      	uxth	r3, r3
 800839e:	4313      	orrs	r3, r2
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	330a      	adds	r3, #10
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	330b      	adds	r3, #11
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	330c      	adds	r3, #12
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	330d      	adds	r3, #13
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	b29a      	uxth	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	7b9a      	ldrb	r2, [r3, #14]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	7bda      	ldrb	r2, [r3, #15]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	7c1a      	ldrb	r2, [r3, #16]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	7c5a      	ldrb	r2, [r3, #17]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	745a      	strb	r2, [r3, #17]
  }
}
 80083fe:	bf00      	nop
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b08a      	sub	sp, #40	; 0x28
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	4613      	mov	r3, r2
 8008416:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800841c:	2300      	movs	r3, #0
 800841e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	781a      	ldrb	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	785a      	ldrb	r2, [r3, #1]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3302      	adds	r3, #2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b29a      	uxth	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3303      	adds	r3, #3
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	b29b      	uxth	r3, r3
 8008450:	4313      	orrs	r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	791a      	ldrb	r2, [r3, #4]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	795a      	ldrb	r2, [r3, #5]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	799a      	ldrb	r2, [r3, #6]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	79da      	ldrb	r2, [r3, #7]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	7a1a      	ldrb	r2, [r3, #8]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d95f      	bls.n	8008546 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008486:	2309      	movs	r3, #9
 8008488:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800848e:	e051      	b.n	8008534 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008490:	f107 0316 	add.w	r3, r7, #22
 8008494:	4619      	mov	r1, r3
 8008496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008498:	f000 f8e8 	bl	800866c <USBH_GetNextDesc>
 800849c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	d146      	bne.n	8008534 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80084a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084aa:	221a      	movs	r2, #26
 80084ac:	fb02 f303 	mul.w	r3, r2, r3
 80084b0:	3308      	adds	r3, #8
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	3302      	adds	r3, #2
 80084b8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80084ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084bc:	69f8      	ldr	r0, [r7, #28]
 80084be:	f000 f846 	bl	800854e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084cc:	e022      	b.n	8008514 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084ce:	f107 0316 	add.w	r3, r7, #22
 80084d2:	4619      	mov	r1, r3
 80084d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084d6:	f000 f8c9 	bl	800866c <USBH_GetNextDesc>
 80084da:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b05      	cmp	r3, #5
 80084e2:	d117      	bne.n	8008514 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80084e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80084ec:	3201      	adds	r2, #1
 80084ee:	00d2      	lsls	r2, r2, #3
 80084f0:	211a      	movs	r1, #26
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	3308      	adds	r3, #8
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	3304      	adds	r3, #4
 8008500:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008504:	69b8      	ldr	r0, [r7, #24]
 8008506:	f000 f851 	bl	80085ac <USBH_ParseEPDesc>
            ep_ix++;
 800850a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800850e:	3301      	adds	r3, #1
 8008510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	791b      	ldrb	r3, [r3, #4]
 8008518:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800851c:	429a      	cmp	r2, r3
 800851e:	d204      	bcs.n	800852a <USBH_ParseCfgDesc+0x120>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	885a      	ldrh	r2, [r3, #2]
 8008524:	8afb      	ldrh	r3, [r7, #22]
 8008526:	429a      	cmp	r2, r3
 8008528:	d8d1      	bhi.n	80084ce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800852a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800852e:	3301      	adds	r3, #1
 8008530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008538:	2b01      	cmp	r3, #1
 800853a:	d804      	bhi.n	8008546 <USBH_ParseCfgDesc+0x13c>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	885a      	ldrh	r2, [r3, #2]
 8008540:	8afb      	ldrh	r3, [r7, #22]
 8008542:	429a      	cmp	r2, r3
 8008544:	d8a4      	bhi.n	8008490 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008546:	bf00      	nop
 8008548:	3728      	adds	r7, #40	; 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800854e:	b480      	push	{r7}
 8008550:	b083      	sub	sp, #12
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	785a      	ldrb	r2, [r3, #1]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	789a      	ldrb	r2, [r3, #2]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	78da      	ldrb	r2, [r3, #3]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	791a      	ldrb	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	795a      	ldrb	r2, [r3, #5]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	799a      	ldrb	r2, [r3, #6]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	79da      	ldrb	r2, [r3, #7]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	7a1a      	ldrb	r2, [r3, #8]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	721a      	strb	r2, [r3, #8]
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781a      	ldrb	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	785a      	ldrb	r2, [r3, #1]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	789a      	ldrb	r2, [r3, #2]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	78da      	ldrb	r2, [r3, #3]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	3304      	adds	r3, #4
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	3305      	adds	r3, #5
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	4313      	orrs	r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	799a      	ldrb	r2, [r3, #6]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	719a      	strb	r2, [r3, #6]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008606:	b480      	push	{r7}
 8008608:	b087      	sub	sp, #28
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4613      	mov	r3, r2
 8008612:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	3301      	adds	r3, #1
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b03      	cmp	r3, #3
 800861c:	d120      	bne.n	8008660 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	1e9a      	subs	r2, r3, #2
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	4293      	cmp	r3, r2
 8008628:	bf28      	it	cs
 800862a:	4613      	movcs	r3, r2
 800862c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3302      	adds	r3, #2
 8008632:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008634:	2300      	movs	r3, #0
 8008636:	82fb      	strh	r3, [r7, #22]
 8008638:	e00b      	b.n	8008652 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800863a:	8afb      	ldrh	r3, [r7, #22]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	3301      	adds	r3, #1
 800864a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	3302      	adds	r3, #2
 8008650:	82fb      	strh	r3, [r7, #22]
 8008652:	8afa      	ldrh	r2, [r7, #22]
 8008654:	8abb      	ldrh	r3, [r7, #20]
 8008656:	429a      	cmp	r2, r3
 8008658:	d3ef      	bcc.n	800863a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	2200      	movs	r2, #0
 800865e:	701a      	strb	r2, [r3, #0]
  }
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	881a      	ldrh	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	4413      	add	r3, r2
 8008682:	b29a      	uxth	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4413      	add	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008694:	68fb      	ldr	r3, [r7, #12]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	4613      	mov	r3, r2
 80086ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086b0:	2301      	movs	r3, #1
 80086b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	789b      	ldrb	r3, [r3, #2]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d002      	beq.n	80086c2 <USBH_CtlReq+0x20>
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d00f      	beq.n	80086e0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80086c0:	e027      	b.n	8008712 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	88fa      	ldrh	r2, [r7, #6]
 80086cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2202      	movs	r2, #2
 80086d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80086da:	2301      	movs	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]
      break;
 80086de:	e018      	b.n	8008712 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f81b 	bl	800871c <USBH_HandleControl>
 80086e6:	4603      	mov	r3, r0
 80086e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <USBH_CtlReq+0x54>
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d106      	bne.n	8008704 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2201      	movs	r2, #1
 80086fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	761a      	strb	r2, [r3, #24]
      break;
 8008702:	e005      	b.n	8008710 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d102      	bne.n	8008710 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	709a      	strb	r2, [r3, #2]
      break;
 8008710:	bf00      	nop
  }
  return status;
 8008712:	7dfb      	ldrb	r3, [r7, #23]
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af02      	add	r7, sp, #8
 8008722:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008728:	2300      	movs	r3, #0
 800872a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7e1b      	ldrb	r3, [r3, #24]
 8008730:	3b01      	subs	r3, #1
 8008732:	2b0a      	cmp	r3, #10
 8008734:	f200 8156 	bhi.w	80089e4 <USBH_HandleControl+0x2c8>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBH_HandleControl+0x24>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	0800876d 	.word	0x0800876d
 8008744:	08008787 	.word	0x08008787
 8008748:	080087f1 	.word	0x080087f1
 800874c:	08008817 	.word	0x08008817
 8008750:	0800884f 	.word	0x0800884f
 8008754:	08008879 	.word	0x08008879
 8008758:	080088cb 	.word	0x080088cb
 800875c:	080088ed 	.word	0x080088ed
 8008760:	08008929 	.word	0x08008929
 8008764:	0800894f 	.word	0x0800894f
 8008768:	0800898d 	.word	0x0800898d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f103 0110 	add.w	r1, r3, #16
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	795b      	ldrb	r3, [r3, #5]
 8008776:	461a      	mov	r2, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f943 	bl	8008a04 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	761a      	strb	r2, [r3, #24]
      break;
 8008784:	e139      	b.n	80089fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	795b      	ldrb	r3, [r3, #5]
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fcc5 	bl	800911c <USBH_LL_GetURBState>
 8008792:	4603      	mov	r3, r0
 8008794:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d11e      	bne.n	80087da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7c1b      	ldrb	r3, [r3, #16]
 80087a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	8adb      	ldrh	r3, [r3, #22]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087ae:	7b7b      	ldrb	r3, [r7, #13]
 80087b0:	2b80      	cmp	r3, #128	; 0x80
 80087b2:	d103      	bne.n	80087bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2203      	movs	r2, #3
 80087b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80087ba:	e115      	b.n	80089e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2205      	movs	r2, #5
 80087c0:	761a      	strb	r2, [r3, #24]
      break;
 80087c2:	e111      	b.n	80089e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80087c4:	7b7b      	ldrb	r3, [r7, #13]
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d103      	bne.n	80087d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2209      	movs	r2, #9
 80087ce:	761a      	strb	r2, [r3, #24]
      break;
 80087d0:	e10a      	b.n	80089e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2207      	movs	r2, #7
 80087d6:	761a      	strb	r2, [r3, #24]
      break;
 80087d8:	e106      	b.n	80089e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b04      	cmp	r3, #4
 80087de:	d003      	beq.n	80087e8 <USBH_HandleControl+0xcc>
 80087e0:	7bbb      	ldrb	r3, [r7, #14]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	f040 8100 	bne.w	80089e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	220b      	movs	r2, #11
 80087ec:	761a      	strb	r2, [r3, #24]
      break;
 80087ee:	e0fb      	b.n	80089e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6899      	ldr	r1, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	899a      	ldrh	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	791b      	ldrb	r3, [r3, #4]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f93a 	bl	8008a82 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2204      	movs	r2, #4
 8008812:	761a      	strb	r2, [r3, #24]
      break;
 8008814:	e0f1      	b.n	80089fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	791b      	ldrb	r3, [r3, #4]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc7d 	bl	800911c <USBH_LL_GetURBState>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d102      	bne.n	8008832 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2209      	movs	r2, #9
 8008830:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b05      	cmp	r3, #5
 8008836:	d102      	bne.n	800883e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008838:	2303      	movs	r3, #3
 800883a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800883c:	e0d6      	b.n	80089ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b04      	cmp	r3, #4
 8008842:	f040 80d3 	bne.w	80089ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	220b      	movs	r2, #11
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e0ce      	b.n	80089ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6899      	ldr	r1, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	899a      	ldrh	r2, [r3, #12]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	795b      	ldrb	r3, [r3, #5]
 800885a:	2001      	movs	r0, #1
 800885c:	9000      	str	r0, [sp, #0]
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f8ea 	bl	8008a38 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800886a:	b29a      	uxth	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2206      	movs	r2, #6
 8008874:	761a      	strb	r2, [r3, #24]
      break;
 8008876:	e0c0      	b.n	80089fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	795b      	ldrb	r3, [r3, #5]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fc4c 	bl	800911c <USBH_LL_GetURBState>
 8008884:	4603      	mov	r3, r0
 8008886:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d103      	bne.n	8008896 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2207      	movs	r2, #7
 8008892:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008894:	e0ac      	b.n	80089f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d105      	bne.n	80088a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	220c      	movs	r2, #12
 80088a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088a2:	2303      	movs	r3, #3
 80088a4:	73fb      	strb	r3, [r7, #15]
      break;
 80088a6:	e0a3      	b.n	80089f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d103      	bne.n	80088b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2205      	movs	r2, #5
 80088b2:	761a      	strb	r2, [r3, #24]
      break;
 80088b4:	e09c      	b.n	80089f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	f040 8099 	bne.w	80089f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	220b      	movs	r2, #11
 80088c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80088c4:	2302      	movs	r3, #2
 80088c6:	73fb      	strb	r3, [r7, #15]
      break;
 80088c8:	e092      	b.n	80089f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	791b      	ldrb	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f8d5 	bl	8008a82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088de:	b29a      	uxth	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2208      	movs	r2, #8
 80088e8:	761a      	strb	r2, [r3, #24]

      break;
 80088ea:	e086      	b.n	80089fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	791b      	ldrb	r3, [r3, #4]
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fc12 	bl	800911c <USBH_LL_GetURBState>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088fc:	7bbb      	ldrb	r3, [r7, #14]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d105      	bne.n	800890e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	220d      	movs	r2, #13
 8008906:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800890c:	e072      	b.n	80089f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800890e:	7bbb      	ldrb	r3, [r7, #14]
 8008910:	2b04      	cmp	r3, #4
 8008912:	d103      	bne.n	800891c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	220b      	movs	r2, #11
 8008918:	761a      	strb	r2, [r3, #24]
      break;
 800891a:	e06b      	b.n	80089f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b05      	cmp	r3, #5
 8008920:	d168      	bne.n	80089f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008922:	2303      	movs	r3, #3
 8008924:	73fb      	strb	r3, [r7, #15]
      break;
 8008926:	e065      	b.n	80089f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	795b      	ldrb	r3, [r3, #5]
 800892c:	2201      	movs	r2, #1
 800892e:	9200      	str	r2, [sp, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	2100      	movs	r1, #0
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f87f 	bl	8008a38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	220a      	movs	r2, #10
 800894a:	761a      	strb	r2, [r3, #24]
      break;
 800894c:	e055      	b.n	80089fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	795b      	ldrb	r3, [r3, #5]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fbe1 	bl	800911c <USBH_LL_GetURBState>
 800895a:	4603      	mov	r3, r0
 800895c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800895e:	7bbb      	ldrb	r3, [r7, #14]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d105      	bne.n	8008970 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	220d      	movs	r2, #13
 800896c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800896e:	e043      	b.n	80089f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d103      	bne.n	800897e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2209      	movs	r2, #9
 800897a:	761a      	strb	r2, [r3, #24]
      break;
 800897c:	e03c      	b.n	80089f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b04      	cmp	r3, #4
 8008982:	d139      	bne.n	80089f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	220b      	movs	r2, #11
 8008988:	761a      	strb	r2, [r3, #24]
      break;
 800898a:	e035      	b.n	80089f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7e5b      	ldrb	r3, [r3, #25]
 8008990:	3301      	adds	r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	765a      	strb	r2, [r3, #25]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7e5b      	ldrb	r3, [r3, #25]
 800899c:	2b02      	cmp	r3, #2
 800899e:	d806      	bhi.n	80089ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089ac:	e025      	b.n	80089fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089b4:	2106      	movs	r1, #6
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	795b      	ldrb	r3, [r3, #5]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f90c 	bl	8008be4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	791b      	ldrb	r3, [r3, #4]
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f906 	bl	8008be4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80089de:	2302      	movs	r3, #2
 80089e0:	73fb      	strb	r3, [r7, #15]
      break;
 80089e2:	e00a      	b.n	80089fa <USBH_HandleControl+0x2de>

    default:
      break;
 80089e4:	bf00      	nop
 80089e6:	e008      	b.n	80089fa <USBH_HandleControl+0x2de>
      break;
 80089e8:	bf00      	nop
 80089ea:	e006      	b.n	80089fa <USBH_HandleControl+0x2de>
      break;
 80089ec:	bf00      	nop
 80089ee:	e004      	b.n	80089fa <USBH_HandleControl+0x2de>
      break;
 80089f0:	bf00      	nop
 80089f2:	e002      	b.n	80089fa <USBH_HandleControl+0x2de>
      break;
 80089f4:	bf00      	nop
 80089f6:	e000      	b.n	80089fa <USBH_HandleControl+0x2de>
      break;
 80089f8:	bf00      	nop
  }

  return status;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a12:	79f9      	ldrb	r1, [r7, #7]
 8008a14:	2300      	movs	r3, #0
 8008a16:	9303      	str	r3, [sp, #12]
 8008a18:	2308      	movs	r3, #8
 8008a1a:	9302      	str	r3, [sp, #8]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	2300      	movs	r3, #0
 8008a26:	2200      	movs	r2, #0
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 fb46 	bl	80090ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3710      	adds	r7, #16
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af04      	add	r7, sp, #16
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	4611      	mov	r1, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	460b      	mov	r3, r1
 8008a48:	80fb      	strh	r3, [r7, #6]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a5c:	7979      	ldrb	r1, [r7, #5]
 8008a5e:	7e3b      	ldrb	r3, [r7, #24]
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	88fb      	ldrh	r3, [r7, #6]
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2200      	movs	r2, #0
 8008a72:	68f8      	ldr	r0, [r7, #12]
 8008a74:	f000 fb21 	bl	80090ba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b088      	sub	sp, #32
 8008a86:	af04      	add	r7, sp, #16
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	460b      	mov	r3, r1
 8008a92:	80fb      	strh	r3, [r7, #6]
 8008a94:	4613      	mov	r3, r2
 8008a96:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a98:	7979      	ldrb	r1, [r7, #5]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9303      	str	r3, [sp, #12]
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	2201      	movs	r2, #1
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 fb03 	bl	80090ba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008ab4:	2300      	movs	r3, #0

}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b088      	sub	sp, #32
 8008ac2:	af04      	add	r7, sp, #16
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	461a      	mov	r2, r3
 8008acc:	460b      	mov	r3, r1
 8008ace:	80fb      	strh	r3, [r7, #6]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ae2:	7979      	ldrb	r1, [r7, #5]
 8008ae4:	7e3b      	ldrb	r3, [r7, #24]
 8008ae6:	9303      	str	r3, [sp, #12]
 8008ae8:	88fb      	ldrh	r3, [r7, #6]
 8008aea:	9302      	str	r3, [sp, #8]
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	2301      	movs	r3, #1
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	2302      	movs	r3, #2
 8008af6:	2200      	movs	r2, #0
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 fade 	bl	80090ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af04      	add	r7, sp, #16
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	4611      	mov	r1, r2
 8008b14:	461a      	mov	r2, r3
 8008b16:	460b      	mov	r3, r1
 8008b18:	80fb      	strh	r3, [r7, #6]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b1e:	7979      	ldrb	r1, [r7, #5]
 8008b20:	2300      	movs	r3, #0
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	9302      	str	r3, [sp, #8]
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2201      	movs	r2, #1
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fac0 	bl	80090ba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	70fb      	strb	r3, [r7, #3]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70bb      	strb	r3, [r7, #2]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008b5e:	7878      	ldrb	r0, [r7, #1]
 8008b60:	78ba      	ldrb	r2, [r7, #2]
 8008b62:	78f9      	ldrb	r1, [r7, #3]
 8008b64:	8b3b      	ldrh	r3, [r7, #24]
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	7d3b      	ldrb	r3, [r7, #20]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	7c3b      	ldrb	r3, [r7, #16]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	4603      	mov	r3, r0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fa53 	bl	800901e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa72 	bl	800907c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b084      	sub	sp, #16
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f836 	bl	8008c20 <USBH_GetFreePipe>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008bb8:	89fb      	ldrh	r3, [r7, #14]
 8008bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00a      	beq.n	8008bd8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	89fb      	ldrh	r3, [r7, #14]
 8008bc6:	f003 030f 	and.w	r3, r3, #15
 8008bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bce:	6879      	ldr	r1, [r7, #4]
 8008bd0:	33e0      	adds	r3, #224	; 0xe0
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008bd8:	89fb      	ldrh	r3, [r7, #14]
 8008bda:	b2db      	uxtb	r3, r3
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b0a      	cmp	r3, #10
 8008bf4:	d80d      	bhi.n	8008c12 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008bf6:	78fb      	ldrb	r3, [r7, #3]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	33e0      	adds	r3, #224	; 0xe0
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	78fb      	ldrb	r3, [r7, #3]
 8008c04:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	33e0      	adds	r3, #224	; 0xe0
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	440b      	add	r3, r1
 8008c10:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
 8008c30:	e00f      	b.n	8008c52 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	33e0      	adds	r3, #224	; 0xe0
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	e007      	b.n	8008c5c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	73fb      	strb	r3, [r7, #15]
 8008c52:	7bfb      	ldrb	r3, [r7, #15]
 8008c54:	2b0a      	cmp	r3, #10
 8008c56:	d9ec      	bls.n	8008c32 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	490e      	ldr	r1, [pc, #56]	; (8008ca8 <MX_USB_HOST_Init+0x40>)
 8008c70:	480e      	ldr	r0, [pc, #56]	; (8008cac <MX_USB_HOST_Init+0x44>)
 8008c72:	f7fe fca1 	bl	80075b8 <USBH_Init>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008c7c:	f7f7 ffee 	bl	8000c5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008c80:	490b      	ldr	r1, [pc, #44]	; (8008cb0 <MX_USB_HOST_Init+0x48>)
 8008c82:	480a      	ldr	r0, [pc, #40]	; (8008cac <MX_USB_HOST_Init+0x44>)
 8008c84:	f7fe fd26 	bl	80076d4 <USBH_RegisterClass>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008c8e:	f7f7 ffe5 	bl	8000c5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008c92:	4806      	ldr	r0, [pc, #24]	; (8008cac <MX_USB_HOST_Init+0x44>)
 8008c94:	f7fe fdaa 	bl	80077ec <USBH_Start>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008c9e:	f7f7 ffdd 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ca2:	bf00      	nop
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	08008cc9 	.word	0x08008cc9
 8008cac:	2001362c 	.word	0x2001362c
 8008cb0:	2000000c 	.word	0x2000000c

08008cb4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008cb8:	4802      	ldr	r0, [pc, #8]	; (8008cc4 <MX_USB_HOST_Process+0x10>)
 8008cba:	f7fe fda7 	bl	800780c <USBH_Process>
}
 8008cbe:	bf00      	nop
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2001362c 	.word	0x2001362c

08008cc8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d819      	bhi.n	8008d10 <USBH_UserProcess+0x48>
 8008cdc:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <USBH_UserProcess+0x1c>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d11 	.word	0x08008d11
 8008cf0:	08008d09 	.word	0x08008d09
 8008cf4:	08008cf9 	.word	0x08008cf9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008cf8:	4b09      	ldr	r3, [pc, #36]	; (8008d20 <USBH_UserProcess+0x58>)
 8008cfa:	2203      	movs	r2, #3
 8008cfc:	701a      	strb	r2, [r3, #0]
  break;
 8008cfe:	e008      	b.n	8008d12 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d00:	4b07      	ldr	r3, [pc, #28]	; (8008d20 <USBH_UserProcess+0x58>)
 8008d02:	2202      	movs	r2, #2
 8008d04:	701a      	strb	r2, [r3, #0]
  break;
 8008d06:	e004      	b.n	8008d12 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <USBH_UserProcess+0x58>)
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
  break;
 8008d0e:	e000      	b.n	8008d12 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d10:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	200000bc 	.word	0x200000bc

08008d24 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08a      	sub	sp, #40	; 0x28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d2c:	f107 0314 	add.w	r3, r7, #20
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]
 8008d38:	60da      	str	r2, [r3, #12]
 8008d3a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d44:	d147      	bne.n	8008dd6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	4b25      	ldr	r3, [pc, #148]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	4a24      	ldr	r2, [pc, #144]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008d50:	f043 0301 	orr.w	r3, r3, #1
 8008d54:	6313      	str	r3, [r2, #48]	; 0x30
 8008d56:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008d70:	f107 0314 	add.w	r3, r7, #20
 8008d74:	4619      	mov	r1, r3
 8008d76:	481b      	ldr	r0, [pc, #108]	; (8008de4 <HAL_HCD_MspInit+0xc0>)
 8008d78:	f7f8 fb3c 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008d7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d82:	2302      	movs	r3, #2
 8008d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008d8e:	230a      	movs	r3, #10
 8008d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d92:	f107 0314 	add.w	r3, r7, #20
 8008d96:	4619      	mov	r1, r3
 8008d98:	4812      	ldr	r0, [pc, #72]	; (8008de4 <HAL_HCD_MspInit+0xc0>)
 8008d9a:	f7f8 fb2b 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da8:	6353      	str	r3, [r2, #52]	; 0x34
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	4b0c      	ldr	r3, [pc, #48]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db2:	4a0b      	ldr	r2, [pc, #44]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008db8:	6453      	str	r3, [r2, #68]	; 0x44
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <HAL_HCD_MspInit+0xbc>)
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2043      	movs	r0, #67	; 0x43
 8008dcc:	f7f8 fae8 	bl	80013a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008dd0:	2043      	movs	r0, #67	; 0x43
 8008dd2:	f7f8 fb01 	bl	80013d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008dd6:	bf00      	nop
 8008dd8:	3728      	adds	r7, #40	; 0x28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40020000 	.word	0x40020000

08008de8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7ff f8db 	bl	8007fb2 <USBH_LL_IncTimer>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff f913 	bl	800803e <USBH_LL_Connect>
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff f91c 	bl	800806c <USBH_LL_Disconnect>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	460b      	mov	r3, r1
 8008e46:	70fb      	strb	r3, [r7, #3]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e4c:	bf00      	nop
 8008e4e:	370c      	adds	r7, #12
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr

08008e58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff f8cd 	bl	8008006 <USBH_LL_PortEnabled>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff f8cd 	bl	8008022 <USBH_LL_PortDisabled>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d12a      	bne.n	8008ef8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ea2:	4a18      	ldr	r2, [pc, #96]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a15      	ldr	r2, [pc, #84]	; (8008f04 <USBH_LL_Init+0x74>)
 8008eae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008eb2:	4b14      	ldr	r3, [pc, #80]	; (8008f04 <USBH_LL_Init+0x74>)
 8008eb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008eb8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008eba:	4b12      	ldr	r3, [pc, #72]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008ec0:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ece:	2202      	movs	r2, #2
 8008ed0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <USBH_LL_Init+0x74>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ed8:	480a      	ldr	r0, [pc, #40]	; (8008f04 <USBH_LL_Init+0x74>)
 8008eda:	f7f8 fc73 	bl	80017c4 <HAL_HCD_Init>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ee4:	f7f7 feba 	bl	8000c5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ee8:	4806      	ldr	r0, [pc, #24]	; (8008f04 <USBH_LL_Init+0x74>)
 8008eea:	f7f9 f856 	bl	8001f9a <HAL_HCD_GetCurrentFrame>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7ff f84e 	bl	8007f94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20013a04 	.word	0x20013a04

08008f08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f8 ffc5 	bl	8001eae <HAL_HCD_Start>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 f95c 	bl	80091e8 <USBH_Get_USB_Status>
 8008f30:	4603      	mov	r3, r0
 8008f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f8 ffcd 	bl	8001ef4 <HAL_HCD_Stop>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 f941 	bl	80091e8 <USBH_Get_USB_Status>
 8008f66:	4603      	mov	r3, r0
 8008f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f9 f815 	bl	8001fb6 <HAL_HCD_GetCurrentSpeed>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d00c      	beq.n	8008fac <USBH_LL_GetSpeed+0x38>
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d80d      	bhi.n	8008fb2 <USBH_LL_GetSpeed+0x3e>
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d002      	beq.n	8008fa0 <USBH_LL_GetSpeed+0x2c>
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d003      	beq.n	8008fa6 <USBH_LL_GetSpeed+0x32>
 8008f9e:	e008      	b.n	8008fb2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	e008      	b.n	8008fb8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008faa:	e005      	b.n	8008fb8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008fac:	2302      	movs	r3, #2
 8008fae:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb0:	e002      	b.n	8008fb8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb6:	bf00      	nop
  }
  return  speed;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f8 ffa8 	bl	8001f2e <HAL_HCD_ResetPort>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fe2:	7bfb      	ldrb	r3, [r7, #15]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f000 f8ff 	bl	80091e8 <USBH_Get_USB_Status>
 8008fea:	4603      	mov	r3, r0
 8008fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800900a:	78fa      	ldrb	r2, [r7, #3]
 800900c:	4611      	mov	r1, r2
 800900e:	4618      	mov	r0, r3
 8009010:	f7f8 ffaf 	bl	8001f72 <HAL_HCD_HC_GetXferCount>
 8009014:	4603      	mov	r3, r0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800901e:	b590      	push	{r4, r7, lr}
 8009020:	b089      	sub	sp, #36	; 0x24
 8009022:	af04      	add	r7, sp, #16
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	461a      	mov	r2, r3
 800902c:	4603      	mov	r3, r0
 800902e:	70fb      	strb	r3, [r7, #3]
 8009030:	460b      	mov	r3, r1
 8009032:	70bb      	strb	r3, [r7, #2]
 8009034:	4613      	mov	r3, r2
 8009036:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009046:	787c      	ldrb	r4, [r7, #1]
 8009048:	78ba      	ldrb	r2, [r7, #2]
 800904a:	78f9      	ldrb	r1, [r7, #3]
 800904c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800904e:	9302      	str	r3, [sp, #8]
 8009050:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009054:	9301      	str	r3, [sp, #4]
 8009056:	f897 3020 	ldrb.w	r3, [r7, #32]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	4623      	mov	r3, r4
 800905e:	f7f8 fc13 	bl	8001888 <HAL_HCD_HC_Init>
 8009062:	4603      	mov	r3, r0
 8009064:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f8bd 	bl	80091e8 <USBH_Get_USB_Status>
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009072:	7bbb      	ldrb	r3, [r7, #14]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	bd90      	pop	{r4, r7, pc}

0800907c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	460b      	mov	r3, r1
 8009086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009096:	78fa      	ldrb	r2, [r7, #3]
 8009098:	4611      	mov	r1, r2
 800909a:	4618      	mov	r0, r3
 800909c:	f7f8 fc83 	bl	80019a6 <HAL_HCD_HC_Halt>
 80090a0:	4603      	mov	r3, r0
 80090a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 f89e 	bl	80091e8 <USBH_Get_USB_Status>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80090ba:	b590      	push	{r4, r7, lr}
 80090bc:	b089      	sub	sp, #36	; 0x24
 80090be:	af04      	add	r7, sp, #16
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	4608      	mov	r0, r1
 80090c4:	4611      	mov	r1, r2
 80090c6:	461a      	mov	r2, r3
 80090c8:	4603      	mov	r3, r0
 80090ca:	70fb      	strb	r3, [r7, #3]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70bb      	strb	r3, [r7, #2]
 80090d0:	4613      	mov	r3, r2
 80090d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090e2:	787c      	ldrb	r4, [r7, #1]
 80090e4:	78ba      	ldrb	r2, [r7, #2]
 80090e6:	78f9      	ldrb	r1, [r7, #3]
 80090e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80090ec:	9303      	str	r3, [sp, #12]
 80090ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090f0:	9302      	str	r3, [sp, #8]
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	9301      	str	r3, [sp, #4]
 80090f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	4623      	mov	r3, r4
 80090fe:	f7f8 fc75 	bl	80019ec <HAL_HCD_HC_SubmitRequest>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009106:	7bfb      	ldrb	r3, [r7, #15]
 8009108:	4618      	mov	r0, r3
 800910a:	f000 f86d 	bl	80091e8 <USBH_Get_USB_Status>
 800910e:	4603      	mov	r3, r0
 8009110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009112:	7bbb      	ldrb	r3, [r7, #14]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	bd90      	pop	{r4, r7, pc}

0800911c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f7f8 ff09 	bl	8001f4a <HAL_HCD_HC_GetURBState>
 8009138:	4603      	mov	r3, r0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b082      	sub	sp, #8
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009154:	2b01      	cmp	r3, #1
 8009156:	d103      	bne.n	8009160 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009158:	78fb      	ldrb	r3, [r7, #3]
 800915a:	4618      	mov	r0, r3
 800915c:	f000 f870 	bl	8009240 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009160:	20c8      	movs	r0, #200	; 0xc8
 8009162:	f7f8 f841 	bl	80011e8 <HAL_Delay>
  return USBH_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
 800917c:	4613      	mov	r3, r2
 800917e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009186:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	212c      	movs	r1, #44	; 0x2c
 800918e:	fb01 f303 	mul.w	r3, r1, r3
 8009192:	4413      	add	r3, r2
 8009194:	333b      	adds	r3, #59	; 0x3b
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d009      	beq.n	80091b0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	212c      	movs	r1, #44	; 0x2c
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	4413      	add	r3, r2
 80091a8:	3354      	adds	r3, #84	; 0x54
 80091aa:	78ba      	ldrb	r2, [r7, #2]
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	e008      	b.n	80091c2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	212c      	movs	r1, #44	; 0x2c
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	3355      	adds	r3, #85	; 0x55
 80091be:	78ba      	ldrb	r2, [r7, #2]
 80091c0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f7f8 f805 	bl	80011e8 <HAL_Delay>
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d817      	bhi.n	800922c <USBH_Get_USB_Status+0x44>
 80091fc:	a201      	add	r2, pc, #4	; (adr r2, 8009204 <USBH_Get_USB_Status+0x1c>)
 80091fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009202:	bf00      	nop
 8009204:	08009215 	.word	0x08009215
 8009208:	0800921b 	.word	0x0800921b
 800920c:	08009221 	.word	0x08009221
 8009210:	08009227 	.word	0x08009227
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]
    break;
 8009218:	e00b      	b.n	8009232 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800921a:	2302      	movs	r3, #2
 800921c:	73fb      	strb	r3, [r7, #15]
    break;
 800921e:	e008      	b.n	8009232 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009220:	2301      	movs	r3, #1
 8009222:	73fb      	strb	r3, [r7, #15]
    break;
 8009224:	e005      	b.n	8009232 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009226:	2302      	movs	r3, #2
 8009228:	73fb      	strb	r3, [r7, #15]
    break;
 800922a:	e002      	b.n	8009232 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800922c:	2302      	movs	r3, #2
 800922e:	73fb      	strb	r3, [r7, #15]
    break;
 8009230:	bf00      	nop
  }
  return usb_status;
 8009232:	7bfb      	ldrb	r3, [r7, #15]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d102      	bne.n	800925a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e001      	b.n	800925e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800925a:	2301      	movs	r3, #1
 800925c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	461a      	mov	r2, r3
 8009262:	2101      	movs	r1, #1
 8009264:	4803      	ldr	r0, [pc, #12]	; (8009274 <MX_DriverVbusFS+0x34>)
 8009266:	f7f8 fa61 	bl	800172c <HAL_GPIO_WritePin>
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40020800 	.word	0x40020800

08009278 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f103 0208 	add.w	r2, r3, #8
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f04f 32ff 	mov.w	r2, #4294967295
 8009290:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f103 0208 	add.w	r2, r3, #8
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f103 0208 	add.w	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092c6:	bf00      	nop
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80092d2:	b480      	push	{r7}
 80092d4:	b085      	sub	sp, #20
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009330:	d103      	bne.n	800933a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e00c      	b.n	8009354 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3308      	adds	r3, #8
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	e002      	b.n	8009348 <vListInsert+0x2e>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	429a      	cmp	r2, r3
 8009352:	d2f6      	bcs.n	8009342 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]
}
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6892      	ldr	r2, [r2, #8]
 80093a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6852      	ldr	r2, [r2, #4]
 80093ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d103      	bne.n	80093c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	1e5a      	subs	r2, r3, #1
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xQueueGenericReset+0x2a>
        __asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	60bb      	str	r3, [r7, #8]
    }
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800940a:	f002 fb5d 	bl	800bac8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2200      	movs	r2, #0
 8009428:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943a:	3b01      	subs	r3, #1
 800943c:	68f9      	ldr	r1, [r7, #12]
 800943e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009440:	fb01 f303 	mul.w	r3, r1, r3
 8009444:	441a      	add	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	22ff      	movs	r2, #255	; 0xff
 800944e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	22ff      	movs	r2, #255	; 0xff
 8009456:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d114      	bne.n	800948a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d01a      	beq.n	800949e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3310      	adds	r3, #16
 800946c:	4618      	mov	r0, r3
 800946e:	f001 fb49 	bl	800ab04 <xTaskRemoveFromEventList>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d012      	beq.n	800949e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8009478:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <xQueueGenericReset+0xcc>)
 800947a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	f3bf 8f6f 	isb	sy
 8009488:	e009      	b.n	800949e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3310      	adds	r3, #16
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fef2 	bl	8009278 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	3324      	adds	r3, #36	; 0x24
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff feed 	bl	8009278 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800949e:	f002 fb43 	bl	800bb28 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80094a2:	2301      	movs	r3, #1
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	e000ed04 	.word	0xe000ed04

080094b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08c      	sub	sp, #48	; 0x30
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	4613      	mov	r3, r2
 80094bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <xQueueGenericCreate+0x2a>
        __asm volatile
 80094c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	61bb      	str	r3, [r7, #24]
    }
 80094d6:	bf00      	nop
 80094d8:	e7fe      	b.n	80094d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d006      	beq.n	80094f8 <xQueueGenericCreate+0x48>
 80094ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d101      	bne.n	80094fc <xQueueGenericCreate+0x4c>
 80094f8:	2301      	movs	r3, #1
 80094fa:	e000      	b.n	80094fe <xQueueGenericCreate+0x4e>
 80094fc:	2300      	movs	r3, #0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <xQueueGenericCreate+0x68>
        __asm volatile
 8009502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009506:	f383 8811 	msr	BASEPRI, r3
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	617b      	str	r3, [r7, #20]
    }
 8009514:	bf00      	nop
 8009516:	e7fe      	b.n	8009516 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800951e:	d90a      	bls.n	8009536 <xQueueGenericCreate+0x86>
        __asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	613b      	str	r3, [r7, #16]
    }
 8009532:	bf00      	nop
 8009534:	e7fe      	b.n	8009534 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	3350      	adds	r3, #80	; 0x50
 800953a:	4618      	mov	r0, r3
 800953c:	f002 fbee 	bl	800bd1c <pvPortMalloc>
 8009540:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00d      	beq.n	8009564 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	3350      	adds	r3, #80	; 0x50
 8009550:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009552:	79fa      	ldrb	r2, [r7, #7]
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	4613      	mov	r3, r2
 800955a:	69fa      	ldr	r2, [r7, #28]
 800955c:	68b9      	ldr	r1, [r7, #8]
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 f805 	bl	800956e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009564:	6a3b      	ldr	r3, [r7, #32]
    }
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	60f8      	str	r0, [r7, #12]
 8009576:	60b9      	str	r1, [r7, #8]
 8009578:	607a      	str	r2, [r7, #4]
 800957a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d103      	bne.n	800958a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e002      	b.n	8009590 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800959c:	2101      	movs	r1, #1
 800959e:	69b8      	ldr	r0, [r7, #24]
 80095a0:	f7ff ff1e 	bl	80093e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	68f9      	ldr	r1, [r7, #12]
 80095b2:	2073      	movs	r0, #115	; 0x73
 80095b4:	f003 f9f0 	bl	800c998 <SEGGER_SYSVIEW_RecordU32x3>
}
 80095b8:	bf00      	nop
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b090      	sub	sp, #64	; 0x40
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095ce:	2300      	movs	r3, #0
 80095d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10a      	bne.n	80095f2 <xQueueGenericSend+0x32>
        __asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d103      	bne.n	8009600 <xQueueGenericSend+0x40>
 80095f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <xQueueGenericSend+0x44>
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <xQueueGenericSend+0x46>
 8009604:	2300      	movs	r3, #0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10a      	bne.n	8009620 <xQueueGenericSend+0x60>
        __asm volatile
 800960a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800960e:	f383 8811 	msr	BASEPRI, r3
 8009612:	f3bf 8f6f 	isb	sy
 8009616:	f3bf 8f4f 	dsb	sy
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800961c:	bf00      	nop
 800961e:	e7fe      	b.n	800961e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d103      	bne.n	800962e <xQueueGenericSend+0x6e>
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962a:	2b01      	cmp	r3, #1
 800962c:	d101      	bne.n	8009632 <xQueueGenericSend+0x72>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <xQueueGenericSend+0x74>
 8009632:	2300      	movs	r3, #0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10a      	bne.n	800964e <xQueueGenericSend+0x8e>
        __asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	623b      	str	r3, [r7, #32]
    }
 800964a:	bf00      	nop
 800964c:	e7fe      	b.n	800964c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800964e:	f001 fbbd 	bl	800adcc <xTaskGetSchedulerState>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <xQueueGenericSend+0x9e>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <xQueueGenericSend+0xa2>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <xQueueGenericSend+0xa4>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xQueueGenericSend+0xbe>
        __asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	61fb      	str	r3, [r7, #28]
    }
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800967e:	f002 fa23 	bl	800bac8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968a:	429a      	cmp	r2, r3
 800968c:	d302      	bcc.n	8009694 <xQueueGenericSend+0xd4>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d136      	bne.n	8009702 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	4618      	mov	r0, r3
 8009698:	f003 fee6 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	460b      	mov	r3, r1
 80096a6:	4601      	mov	r1, r0
 80096a8:	205a      	movs	r0, #90	; 0x5a
 80096aa:	f003 f9eb 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096b4:	f000 fc7c 	bl	8009fb0 <prvCopyDataToQueue>
 80096b8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d010      	beq.n	80096e4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	3324      	adds	r3, #36	; 0x24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f001 fa1c 	bl	800ab04 <xTaskRemoveFromEventList>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d013      	beq.n	80096fa <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80096d2:	4b4d      	ldr	r3, [pc, #308]	; (8009808 <xQueueGenericSend+0x248>)
 80096d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d8:	601a      	str	r2, [r3, #0]
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	e00a      	b.n	80096fa <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d007      	beq.n	80096fa <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80096ea:	4b47      	ldr	r3, [pc, #284]	; (8009808 <xQueueGenericSend+0x248>)
 80096ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f0:	601a      	str	r2, [r3, #0]
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80096fa:	f002 fa15 	bl	800bb28 <vPortExitCritical>
                return pdPASS;
 80096fe:	2301      	movs	r3, #1
 8009700:	e07d      	b.n	80097fe <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d110      	bne.n	800972a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009708:	f002 fa0e 	bl	800bb28 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970e:	4618      	mov	r0, r3
 8009710:	f003 feaa 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	460b      	mov	r3, r1
 800971e:	4601      	mov	r1, r0
 8009720:	205a      	movs	r0, #90	; 0x5a
 8009722:	f003 f9af 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009726:	2300      	movs	r3, #0
 8009728:	e069      	b.n	80097fe <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800972a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009730:	f107 0314 	add.w	r3, r7, #20
 8009734:	4618      	mov	r0, r3
 8009736:	f001 fa4b 	bl	800abd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800973a:	2301      	movs	r3, #1
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800973e:	f002 f9f3 	bl	800bb28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009742:	f000 ffa9 	bl	800a698 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009746:	f002 f9bf 	bl	800bac8 <vPortEnterCritical>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009750:	b25b      	sxtb	r3, r3
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d103      	bne.n	8009760 <xQueueGenericSend+0x1a0>
 8009758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975a:	2200      	movs	r2, #0
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009766:	b25b      	sxtb	r3, r3
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d103      	bne.n	8009776 <xQueueGenericSend+0x1b6>
 800976e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009776:	f002 f9d7 	bl	800bb28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800977a:	1d3a      	adds	r2, r7, #4
 800977c:	f107 0314 	add.w	r3, r7, #20
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fa3a 	bl	800abfc <xTaskCheckForTimeOut>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d124      	bne.n	80097d8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800978e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009790:	f000 fd06 	bl	800a1a0 <prvIsQueueFull>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d018      	beq.n	80097cc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	3310      	adds	r3, #16
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4611      	mov	r1, r2
 80097a2:	4618      	mov	r0, r3
 80097a4:	f001 f95c 	bl	800aa60 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80097a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097aa:	f000 fc91 	bl	800a0d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80097ae:	f000 ff81 	bl	800a6b4 <xTaskResumeAll>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f47f af62 	bne.w	800967e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <xQueueGenericSend+0x248>)
 80097bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c0:	601a      	str	r2, [r3, #0]
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	e758      	b.n	800967e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80097cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ce:	f000 fc7f 	bl	800a0d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80097d2:	f000 ff6f 	bl	800a6b4 <xTaskResumeAll>
 80097d6:	e752      	b.n	800967e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80097d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097da:	f000 fc79 	bl	800a0d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80097de:	f000 ff69 	bl	800a6b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	4618      	mov	r0, r3
 80097e6:	f003 fe3f 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	460b      	mov	r3, r1
 80097f4:	4601      	mov	r1, r0
 80097f6:	205a      	movs	r0, #90	; 0x5a
 80097f8:	f003 f944 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80097fc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3738      	adds	r7, #56	; 0x38
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	e000ed04 	.word	0xe000ed04

0800980c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b090      	sub	sp, #64	; 0x40
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800981e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d103      	bne.n	8009848 <xQueueGenericSendFromISR+0x3c>
 8009840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <xQueueGenericSendFromISR+0x40>
 8009848:	2301      	movs	r3, #1
 800984a:	e000      	b.n	800984e <xQueueGenericSendFromISR+0x42>
 800984c:	2300      	movs	r3, #0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009856:	f383 8811 	msr	BASEPRI, r3
 800985a:	f3bf 8f6f 	isb	sy
 800985e:	f3bf 8f4f 	dsb	sy
 8009862:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009864:	bf00      	nop
 8009866:	e7fe      	b.n	8009866 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <xQueueGenericSendFromISR+0x6a>
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d101      	bne.n	800987a <xQueueGenericSendFromISR+0x6e>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <xQueueGenericSendFromISR+0x70>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	623b      	str	r3, [r7, #32]
    }
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009896:	f002 fa01 	bl	800bc9c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800989a:	f3ef 8211 	mrs	r2, BASEPRI
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	61fa      	str	r2, [r7, #28]
 80098b0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80098b2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098b4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098be:	429a      	cmp	r2, r3
 80098c0:	d302      	bcc.n	80098c8 <xQueueGenericSendFromISR+0xbc>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d148      	bne.n	800995a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	4618      	mov	r0, r3
 80098dc:	f003 fdc4 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 80098e0:	4601      	mov	r1, r0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	461a      	mov	r2, r3
 80098e6:	2060      	movs	r0, #96	; 0x60
 80098e8:	f002 fffc 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098ec:	683a      	ldr	r2, [r7, #0]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098f2:	f000 fb5d 	bl	8009fb0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80098f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098fe:	d112      	bne.n	8009926 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d025      	beq.n	8009954 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	4618      	mov	r0, r3
 800990e:	f001 f8f9 	bl	800ab04 <xTaskRemoveFromEventList>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01d      	beq.n	8009954 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01a      	beq.n	8009954 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	e016      	b.n	8009954 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009926:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800992a:	2b7f      	cmp	r3, #127	; 0x7f
 800992c:	d10a      	bne.n	8009944 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	617b      	str	r3, [r7, #20]
    }
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009944:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009948:	3301      	adds	r3, #1
 800994a:	b2db      	uxtb	r3, r3
 800994c:	b25a      	sxtb	r2, r3
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009954:	2301      	movs	r3, #1
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8009958:	e00b      	b.n	8009972 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	4618      	mov	r0, r3
 800995e:	f003 fd83 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009962:	4601      	mov	r1, r0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	461a      	mov	r2, r3
 8009968:	2060      	movs	r0, #96	; 0x60
 800996a:	f002 ffbb 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800996e:	2300      	movs	r3, #0
 8009970:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009974:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800997c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800997e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009980:	4618      	mov	r0, r3
 8009982:	3740      	adds	r7, #64	; 0x40
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08e      	sub	sp, #56	; 0x38
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <xQueueGiveFromISR+0x2a>
        __asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	623b      	str	r3, [r7, #32]
    }
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <xQueueGiveFromISR+0x48>
        __asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	61fb      	str	r3, [r7, #28]
    }
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <xQueueGiveFromISR+0x58>
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <xQueueGiveFromISR+0x5c>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <xQueueGiveFromISR+0x5e>
 80099e4:	2300      	movs	r3, #0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <xQueueGiveFromISR+0x78>
        __asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	61bb      	str	r3, [r7, #24]
    }
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a00:	f002 f94c 	bl	800bc9c <vPortValidateInterruptPriority>
        __asm volatile
 8009a04:	f3ef 8211 	mrs	r2, BASEPRI
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	617a      	str	r2, [r7, #20]
 8009a1a:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 8009a1c:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8009a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d244      	bcs.n	8009aba <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f003 fd13 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009a42:	4601      	mov	r1, r0
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	2060      	movs	r0, #96	; 0x60
 8009a4a:	f002 ff4b 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8009a56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d112      	bne.n	8009a86 <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d025      	beq.n	8009ab4 <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a6a:	3324      	adds	r3, #36	; 0x24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f001 f849 	bl	800ab04 <xTaskRemoveFromEventList>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01d      	beq.n	8009ab4 <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d01a      	beq.n	8009ab4 <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	2201      	movs	r2, #1
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	e016      	b.n	8009ab4 <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8009a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009a8c:	d10a      	bne.n	8009aa4 <xQueueGiveFromISR+0x11c>
        __asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60fb      	str	r3, [r7, #12]
    }
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	b25a      	sxtb	r2, r3
 8009aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	e00b      	b.n	8009ad2 <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	4618      	mov	r0, r3
 8009abe:	f003 fcd3 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	2060      	movs	r0, #96	; 0x60
 8009aca:	f002 ff0b 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8009ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad4:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f383 8811 	msr	BASEPRI, r3
    }
 8009adc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3738      	adds	r7, #56	; 0x38
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009ae8:	b590      	push	{r4, r7, lr}
 8009aea:	b08f      	sub	sp, #60	; 0x3c
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <xQueueReceive+0x30>
        __asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	623b      	str	r3, [r7, #32]
    }
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d103      	bne.n	8009b26 <xQueueReceive+0x3e>
 8009b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <xQueueReceive+0x42>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e000      	b.n	8009b2c <xQueueReceive+0x44>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <xQueueReceive+0x5e>
        __asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	61fb      	str	r3, [r7, #28]
    }
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b46:	f001 f941 	bl	800adcc <xTaskGetSchedulerState>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <xQueueReceive+0x6e>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <xQueueReceive+0x72>
 8009b56:	2301      	movs	r3, #1
 8009b58:	e000      	b.n	8009b5c <xQueueReceive+0x74>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10a      	bne.n	8009b76 <xQueueReceive+0x8e>
        __asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	61bb      	str	r3, [r7, #24]
    }
 8009b72:	bf00      	nop
 8009b74:	e7fe      	b.n	8009b74 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009b76:	f001 ffa7 	bl	800bac8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d02f      	beq.n	8009be6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b86:	68b9      	ldr	r1, [r7, #8]
 8009b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b8a:	f000 fa7b 	bl	800a084 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	4618      	mov	r0, r3
 8009b92:	f003 fc69 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2000      	movs	r0, #0
 8009b9a:	f003 fc65 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	9100      	str	r1, [sp, #0]
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	205c      	movs	r0, #92	; 0x5c
 8009baa:	f002 ff6b 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00f      	beq.n	8009bde <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 ff9e 	bl	800ab04 <xTaskRemoveFromEventList>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d007      	beq.n	8009bde <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009bce:	4b4d      	ldr	r3, [pc, #308]	; (8009d04 <xQueueReceive+0x21c>)
 8009bd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009bde:	f001 ffa3 	bl	800bb28 <vPortExitCritical>
                return pdPASS;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e08a      	b.n	8009cfc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d113      	bne.n	8009c14 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009bec:	f001 ff9c 	bl	800bb28 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f003 fc38 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	f003 fc34 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009c00:	4602      	mov	r2, r0
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2101      	movs	r1, #1
 8009c06:	9100      	str	r1, [sp, #0]
 8009c08:	4621      	mov	r1, r4
 8009c0a:	205c      	movs	r0, #92	; 0x5c
 8009c0c:	f002 ff3a 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e073      	b.n	8009cfc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 ffd6 	bl	800abd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009c28:	f001 ff7e 	bl	800bb28 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009c2c:	f000 fd34 	bl	800a698 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009c30:	f001 ff4a 	bl	800bac8 <vPortEnterCritical>
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d103      	bne.n	8009c4a <xQueueReceive+0x162>
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c50:	b25b      	sxtb	r3, r3
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d103      	bne.n	8009c60 <xQueueReceive+0x178>
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c60:	f001 ff62 	bl	800bb28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c64:	1d3a      	adds	r2, r7, #4
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 ffc5 	bl	800abfc <xTaskCheckForTimeOut>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d124      	bne.n	8009cc2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7a:	f000 fa7b 	bl	800a174 <prvIsQueueEmpty>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d018      	beq.n	8009cb6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	3324      	adds	r3, #36	; 0x24
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fee7 	bl	800aa60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c94:	f000 fa1c 	bl	800a0d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009c98:	f000 fd0c 	bl	800a6b4 <xTaskResumeAll>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f47f af69 	bne.w	8009b76 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8009ca4:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <xQueueReceive+0x21c>)
 8009ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	e75f      	b.n	8009b76 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb8:	f000 fa0a 	bl	800a0d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009cbc:	f000 fcfa 	bl	800a6b4 <xTaskResumeAll>
 8009cc0:	e759      	b.n	8009b76 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc4:	f000 fa04 	bl	800a0d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009cc8:	f000 fcf4 	bl	800a6b4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cce:	f000 fa51 	bl	800a174 <prvIsQueueEmpty>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f43f af4e 	beq.w	8009b76 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f003 fbc3 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	f003 fbbf 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009cea:	4602      	mov	r2, r0
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2101      	movs	r1, #1
 8009cf0:	9100      	str	r1, [sp, #0]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	205c      	movs	r0, #92	; 0x5c
 8009cf6:	f002 fec5 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009cfa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3734      	adds	r7, #52	; 0x34
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd90      	pop	{r4, r7, pc}
 8009d04:	e000ed04 	.word	0xe000ed04

08009d08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009d08:	b590      	push	{r4, r7, lr}
 8009d0a:	b091      	sub	sp, #68	; 0x44
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8009d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d28:	f383 8811 	msr	BASEPRI, r3
 8009d2c:	f3bf 8f6f 	isb	sy
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	623b      	str	r3, [r7, #32]
    }
 8009d36:	bf00      	nop
 8009d38:	e7fe      	b.n	8009d38 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00a      	beq.n	8009d58 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	61fb      	str	r3, [r7, #28]
    }
 8009d54:	bf00      	nop
 8009d56:	e7fe      	b.n	8009d56 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d58:	f001 f838 	bl	800adcc <xTaskGetSchedulerState>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <xQueueSemaphoreTake+0x60>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <xQueueSemaphoreTake+0x64>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e000      	b.n	8009d6e <xQueueSemaphoreTake+0x66>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	61bb      	str	r3, [r7, #24]
    }
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009d88:	f001 fe9e 	bl	800bac8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d034      	beq.n	8009e02 <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f003 fb64 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009da0:	4604      	mov	r4, r0
 8009da2:	2000      	movs	r0, #0
 8009da4:	f003 fb60 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009da8:	4602      	mov	r2, r0
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2101      	movs	r1, #1
 8009dae:	9100      	str	r1, [sp, #0]
 8009db0:	4621      	mov	r1, r4
 8009db2:	205c      	movs	r0, #92	; 0x5c
 8009db4:	f002 fe66 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dba:	1e5a      	subs	r2, r3, #1
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009dc8:	f001 f9b0 	bl	800b12c <pvTaskIncrementMutexHeldCount>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00f      	beq.n	8009dfa <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ddc:	3310      	adds	r3, #16
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fe90 	bl	800ab04 <xTaskRemoveFromEventList>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009dea:	4b64      	ldr	r3, [pc, #400]	; (8009f7c <xQueueSemaphoreTake+0x274>)
 8009dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df0:	601a      	str	r2, [r3, #0]
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009dfa:	f001 fe95 	bl	800bb28 <vPortExitCritical>
                return pdPASS;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e0b7      	b.n	8009f72 <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d121      	bne.n	8009e4c <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	617b      	str	r3, [r7, #20]
    }
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8009e24:	f001 fe80 	bl	800bb28 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f003 fb1c 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009e30:	4604      	mov	r4, r0
 8009e32:	2000      	movs	r0, #0
 8009e34:	f003 fb18 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	9100      	str	r1, [sp, #0]
 8009e40:	4621      	mov	r1, r4
 8009e42:	205c      	movs	r0, #92	; 0x5c
 8009e44:	f002 fe1e 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e092      	b.n	8009f72 <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 feba 	bl	800abd0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009e60:	f001 fe62 	bl	800bb28 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009e64:	f000 fc18 	bl	800a698 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009e68:	f001 fe2e 	bl	800bac8 <vPortEnterCritical>
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e72:	b25b      	sxtb	r3, r3
 8009e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e78:	d103      	bne.n	8009e82 <xQueueSemaphoreTake+0x17a>
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e88:	b25b      	sxtb	r3, r3
 8009e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e8e:	d103      	bne.n	8009e98 <xQueueSemaphoreTake+0x190>
 8009e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e98:	f001 fe46 	bl	800bb28 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e9c:	463a      	mov	r2, r7
 8009e9e:	f107 030c 	add.w	r3, r7, #12
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 fea9 	bl	800abfc <xTaskCheckForTimeOut>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d132      	bne.n	8009f16 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb2:	f000 f95f 	bl	800a174 <prvIsQueueEmpty>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d026      	beq.n	8009f0a <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d109      	bne.n	8009ed8 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8009ec4:	f001 fe00 	bl	800bac8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 ff9b 	bl	800ae08 <xTaskPriorityInherit>
 8009ed2:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8009ed4:	f001 fe28 	bl	800bb28 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	3324      	adds	r3, #36	; 0x24
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 fdbd 	bl	800aa60 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ee8:	f000 f8f2 	bl	800a0d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009eec:	f000 fbe2 	bl	800a6b4 <xTaskResumeAll>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f47f af48 	bne.w	8009d88 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8009ef8:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <xQueueSemaphoreTake+0x274>)
 8009efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	e73e      	b.n	8009d88 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f0c:	f000 f8e0 	bl	800a0d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009f10:	f000 fbd0 	bl	800a6b4 <xTaskResumeAll>
 8009f14:	e738      	b.n	8009d88 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8009f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f18:	f000 f8da 	bl	800a0d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009f1c:	f000 fbca 	bl	800a6b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f22:	f000 f927 	bl	800a174 <prvIsQueueEmpty>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f43f af2d 	beq.w	8009d88 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8009f34:	f001 fdc8 	bl	800bac8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f3a:	f000 f821 	bl	8009f80 <prvGetDisinheritPriorityAfterTimeout>
 8009f3e:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 f858 	bl	800affc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8009f4c:	f001 fdec 	bl	800bb28 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f52:	4618      	mov	r0, r3
 8009f54:	f003 fa88 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009f58:	4604      	mov	r4, r0
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	f003 fa84 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 8009f60:	4602      	mov	r2, r0
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2101      	movs	r1, #1
 8009f66:	9100      	str	r1, [sp, #0]
 8009f68:	4621      	mov	r1, r4
 8009f6a:	205c      	movs	r0, #92	; 0x5c
 8009f6c:	f002 fd8a 	bl	800ca84 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009f70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	373c      	adds	r7, #60	; 0x3c
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd90      	pop	{r4, r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1c3 030f 	rsb	r3, r3, #15
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e001      	b.n	8009fa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
    }
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10d      	bne.n	8009fea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d14d      	bne.n	800a072 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 ff8e 	bl	800aefc <xTaskPriorityDisinherit>
 8009fe0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	609a      	str	r2, [r3, #8]
 8009fe8:	e043      	b.n	800a072 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d119      	bne.n	800a024 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6858      	ldr	r0, [r3, #4]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	f003 fbc4 	bl	800d788 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a008:	441a      	add	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	685a      	ldr	r2, [r3, #4]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d32b      	bcc.n	800a072 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	e026      	b.n	800a072 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	68d8      	ldr	r0, [r3, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	461a      	mov	r2, r3
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	f003 fbaa 	bl	800d788 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03c:	425b      	negs	r3, r3
 800a03e:	441a      	add	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d207      	bcs.n	800a060 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	425b      	negs	r3, r3
 800a05a:	441a      	add	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d105      	bne.n	800a072 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d002      	beq.n	800a072 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	3b01      	subs	r3, #1
 800a070:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	1c5a      	adds	r2, r3, #1
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800a07a:	697b      	ldr	r3, [r7, #20]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3718      	adds	r7, #24
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d018      	beq.n	800a0c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	441a      	add	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d303      	bcc.n	800a0b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68d9      	ldr	r1, [r3, #12]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6838      	ldr	r0, [r7, #0]
 800a0c4:	f003 fb60 	bl	800d788 <memcpy>
    }
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a0d8:	f001 fcf6 	bl	800bac8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0e4:	e011      	b.n	800a10a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d012      	beq.n	800a114 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3324      	adds	r3, #36	; 0x24
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fd06 	bl	800ab04 <xTaskRemoveFromEventList>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a0fe:	f000 fde3 	bl	800acc8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a102:	7bfb      	ldrb	r3, [r7, #15]
 800a104:	3b01      	subs	r3, #1
 800a106:	b2db      	uxtb	r3, r3
 800a108:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dce9      	bgt.n	800a0e6 <prvUnlockQueue+0x16>
 800a112:	e000      	b.n	800a116 <prvUnlockQueue+0x46>
                        break;
 800a114:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	22ff      	movs	r2, #255	; 0xff
 800a11a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a11e:	f001 fd03 	bl	800bb28 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a122:	f001 fcd1 	bl	800bac8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a12c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a12e:	e011      	b.n	800a154 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	691b      	ldr	r3, [r3, #16]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d012      	beq.n	800a15e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3310      	adds	r3, #16
 800a13c:	4618      	mov	r0, r3
 800a13e:	f000 fce1 	bl	800ab04 <xTaskRemoveFromEventList>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d001      	beq.n	800a14c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a148:	f000 fdbe 	bl	800acc8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a14c:	7bbb      	ldrb	r3, [r7, #14]
 800a14e:	3b01      	subs	r3, #1
 800a150:	b2db      	uxtb	r3, r3
 800a152:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	dce9      	bgt.n	800a130 <prvUnlockQueue+0x60>
 800a15c:	e000      	b.n	800a160 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a15e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	22ff      	movs	r2, #255	; 0xff
 800a164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a168:	f001 fcde 	bl	800bb28 <vPortExitCritical>
}
 800a16c:	bf00      	nop
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a17c:	f001 fca4 	bl	800bac8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	e001      	b.n	800a192 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a18e:	2300      	movs	r3, #0
 800a190:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a192:	f001 fcc9 	bl	800bb28 <vPortExitCritical>

    return xReturn;
 800a196:	68fb      	ldr	r3, [r7, #12]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a1a8:	f001 fc8e 	bl	800bac8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d102      	bne.n	800a1be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e001      	b.n	800a1c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a1c2:	f001 fcb1 	bl	800bb28 <vPortExitCritical>

    return xReturn;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	e01e      	b.n	800a21e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1e0:	4a13      	ldr	r2, [pc, #76]	; (800a230 <vQueueAddToRegistry+0x60>)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d115      	bne.n	800a218 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1ec:	4910      	ldr	r1, [pc, #64]	; (800a230 <vQueueAddToRegistry+0x60>)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800a1f6:	4a0e      	ldr	r2, [pc, #56]	; (800a230 <vQueueAddToRegistry+0x60>)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	00db      	lsls	r3, r3, #3
 800a1fc:	4413      	add	r3, r2
 800a1fe:	687a      	ldr	r2, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4618      	mov	r0, r3
 800a206:	f003 f92f 	bl	800d468 <SEGGER_SYSVIEW_ShrinkId>
 800a20a:	4601      	mov	r1, r0
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	2071      	movs	r0, #113	; 0x71
 800a212:	f002 fb67 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800a216:	e006      	b.n	800a226 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3301      	adds	r3, #1
 800a21c:	60fb      	str	r3, [r7, #12]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b07      	cmp	r3, #7
 800a222:	d9dd      	bls.n	800a1e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a224:	bf00      	nop
 800a226:	bf00      	nop
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20013d08 	.word	0x20013d08

0800a234 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a244:	f001 fc40 	bl	800bac8 <vPortEnterCritical>
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a24e:	b25b      	sxtb	r3, r3
 800a250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a254:	d103      	bne.n	800a25e <vQueueWaitForMessageRestricted+0x2a>
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a264:	b25b      	sxtb	r3, r3
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26a:	d103      	bne.n	800a274 <vQueueWaitForMessageRestricted+0x40>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a274:	f001 fc58 	bl	800bb28 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	3324      	adds	r3, #36	; 0x24
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fc0d 	bl	800aaa8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a28e:	6978      	ldr	r0, [r7, #20]
 800a290:	f7ff ff1e 	bl	800a0d0 <prvUnlockQueue>
    }
 800a294:	bf00      	nop
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08c      	sub	sp, #48	; 0x30
 800a2a0:	af04      	add	r7, sp, #16
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 fd33 	bl	800bd1c <pvPortMalloc>
 800a2b6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00e      	beq.n	800a2dc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2be:	2058      	movs	r0, #88	; 0x58
 800a2c0:	f001 fd2c 	bl	800bd1c <pvPortMalloc>
 800a2c4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	697a      	ldr	r2, [r7, #20]
 800a2d0:	631a      	str	r2, [r3, #48]	; 0x30
 800a2d2:	e005      	b.n	800a2e0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800a2d4:	6978      	ldr	r0, [r7, #20]
 800a2d6:	f001 fe01 	bl	800bedc <vPortFree>
 800a2da:	e001      	b.n	800a2e0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d013      	beq.n	800a30e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a2e6:	88fa      	ldrh	r2, [r7, #6]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	68b9      	ldr	r1, [r7, #8]
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f80e 	bl	800a31e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a302:	69f8      	ldr	r0, [r7, #28]
 800a304:	f000 f8a2 	bl	800a44c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a308:	2301      	movs	r3, #1
 800a30a:	61bb      	str	r3, [r7, #24]
 800a30c:	e002      	b.n	800a314 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a30e:	f04f 33ff 	mov.w	r3, #4294967295
 800a312:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a314:	69bb      	ldr	r3, [r7, #24]
    }
 800a316:	4618      	mov	r0, r3
 800a318:	3720      	adds	r7, #32
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b088      	sub	sp, #32
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	607a      	str	r2, [r7, #4]
 800a32a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	461a      	mov	r2, r3
 800a336:	21a5      	movs	r1, #165	; 0xa5
 800a338:	f003 fa34 	bl	800d7a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a346:	3b01      	subs	r3, #1
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	f023 0307 	bic.w	r3, r3, #7
 800a354:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <prvInitialiseNewTask+0x58>
        __asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	617b      	str	r3, [r7, #20]
    }
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01f      	beq.n	800a3bc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a37c:	2300      	movs	r3, #0
 800a37e:	61fb      	str	r3, [r7, #28]
 800a380:	e012      	b.n	800a3a8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	7819      	ldrb	r1, [r3, #0]
 800a38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	3334      	adds	r3, #52	; 0x34
 800a392:	460a      	mov	r2, r1
 800a394:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	4413      	add	r3, r2
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b09      	cmp	r3, #9
 800a3ac:	d9e9      	bls.n	800a382 <prvInitialiseNewTask+0x64>
 800a3ae:	e000      	b.n	800a3b2 <prvInitialiseNewTask+0x94>
            {
                break;
 800a3b0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a3ba:	e003      	b.n	800a3c4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	2b0e      	cmp	r3, #14
 800a3c8:	d901      	bls.n	800a3ce <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3ca:	230e      	movs	r3, #14
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	2200      	movs	r2, #0
 800a3de:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe ff67 	bl	80092b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	3318      	adds	r3, #24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe ff62 	bl	80092b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fc:	f1c3 020f 	rsb	r2, r3, #15
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a408:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a40c:	3350      	adds	r3, #80	; 0x50
 800a40e:	2204      	movs	r2, #4
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f003 f9c6 	bl	800d7a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41a:	3354      	adds	r3, #84	; 0x54
 800a41c:	2201      	movs	r2, #1
 800a41e:	2100      	movs	r1, #0
 800a420:	4618      	mov	r0, r3
 800a422:	f003 f9bf 	bl	800d7a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	68f9      	ldr	r1, [r7, #12]
 800a42a:	69b8      	ldr	r0, [r7, #24]
 800a42c:	f001 fa1c 	bl	800b868 <pxPortInitialiseStack>
 800a430:	4602      	mov	r2, r0
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a440:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a442:	bf00      	nop
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
	...

0800a44c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a44c:	b5b0      	push	{r4, r5, r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a454:	f001 fb38 	bl	800bac8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a458:	4b3b      	ldr	r3, [pc, #236]	; (800a548 <prvAddNewTaskToReadyList+0xfc>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3301      	adds	r3, #1
 800a45e:	4a3a      	ldr	r2, [pc, #232]	; (800a548 <prvAddNewTaskToReadyList+0xfc>)
 800a460:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a462:	4b3a      	ldr	r3, [pc, #232]	; (800a54c <prvAddNewTaskToReadyList+0x100>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a46a:	4a38      	ldr	r2, [pc, #224]	; (800a54c <prvAddNewTaskToReadyList+0x100>)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a470:	4b35      	ldr	r3, [pc, #212]	; (800a548 <prvAddNewTaskToReadyList+0xfc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2b01      	cmp	r3, #1
 800a476:	d110      	bne.n	800a49a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a478:	f000 fc4a 	bl	800ad10 <prvInitialiseTaskLists>
 800a47c:	e00d      	b.n	800a49a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a47e:	4b34      	ldr	r3, [pc, #208]	; (800a550 <prvAddNewTaskToReadyList+0x104>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d109      	bne.n	800a49a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a486:	4b31      	ldr	r3, [pc, #196]	; (800a54c <prvAddNewTaskToReadyList+0x100>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	429a      	cmp	r2, r3
 800a492:	d802      	bhi.n	800a49a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a494:	4a2d      	ldr	r2, [pc, #180]	; (800a54c <prvAddNewTaskToReadyList+0x100>)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a49a:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <prvAddNewTaskToReadyList+0x108>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	4a2c      	ldr	r2, [pc, #176]	; (800a554 <prvAddNewTaskToReadyList+0x108>)
 800a4a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a4a4:	4b2b      	ldr	r3, [pc, #172]	; (800a554 <prvAddNewTaskToReadyList+0x108>)
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d016      	beq.n	800a4e0 <prvAddNewTaskToReadyList+0x94>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 feb1 	bl	800d21c <SEGGER_SYSVIEW_OnTaskCreate>
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	461d      	mov	r5, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	461c      	mov	r4, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	1ae3      	subs	r3, r4, r3
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	462b      	mov	r3, r5
 800a4dc:	f001 fe1c 	bl	800c118 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 ff1e 	bl	800d324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	409a      	lsls	r2, r3
 800a4f0:	4b19      	ldr	r3, [pc, #100]	; (800a558 <prvAddNewTaskToReadyList+0x10c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	4a18      	ldr	r2, [pc, #96]	; (800a558 <prvAddNewTaskToReadyList+0x10c>)
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4a15      	ldr	r2, [pc, #84]	; (800a55c <prvAddNewTaskToReadyList+0x110>)
 800a508:	441a      	add	r2, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3304      	adds	r3, #4
 800a50e:	4619      	mov	r1, r3
 800a510:	4610      	mov	r0, r2
 800a512:	f7fe fede 	bl	80092d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a516:	f001 fb07 	bl	800bb28 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a51a:	4b0d      	ldr	r3, [pc, #52]	; (800a550 <prvAddNewTaskToReadyList+0x104>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00e      	beq.n	800a540 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a522:	4b0a      	ldr	r3, [pc, #40]	; (800a54c <prvAddNewTaskToReadyList+0x100>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d207      	bcs.n	800a540 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a530:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <prvAddNewTaskToReadyList+0x114>)
 800a532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	f3bf 8f4f 	dsb	sy
 800a53c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a540:	bf00      	nop
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bdb0      	pop	{r4, r5, r7, pc}
 800a548:	20000248 	.word	0x20000248
 800a54c:	200000c0 	.word	0x200000c0
 800a550:	20000254 	.word	0x20000254
 800a554:	20000264 	.word	0x20000264
 800a558:	20000250 	.word	0x20000250
 800a55c:	200000c4 	.word	0x200000c4
 800a560:	e000ed04 	.word	0xe000ed04

0800a564 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d01b      	beq.n	800a5ae <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800a576:	4b15      	ldr	r3, [pc, #84]	; (800a5cc <vTaskDelay+0x68>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <vTaskDelay+0x30>
        __asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60bb      	str	r3, [r7, #8]
    }
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800a594:	f000 f880 	bl	800a698 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	2023      	movs	r0, #35	; 0x23
 800a59c:	f002 f966 	bl	800c86c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fdd6 	bl	800b154 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800a5a8:	f000 f884 	bl	800a6b4 <xTaskResumeAll>
 800a5ac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <vTaskDelay+0x6c>)
 800a5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	20000270 	.word	0x20000270
 800a5d0:	e000ed04 	.word	0xe000ed04

0800a5d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800a5da:	4b27      	ldr	r3, [pc, #156]	; (800a678 <vTaskStartScheduler+0xa4>)
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2282      	movs	r2, #130	; 0x82
 800a5e6:	4925      	ldr	r1, [pc, #148]	; (800a67c <vTaskStartScheduler+0xa8>)
 800a5e8:	4825      	ldr	r0, [pc, #148]	; (800a680 <vTaskStartScheduler+0xac>)
 800a5ea:	f7ff fe57 	bl	800a29c <xTaskCreate>
 800a5ee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d102      	bne.n	800a5fc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800a5f6:	f000 fe25 	bl	800b244 <xTimerCreateTimerTask>
 800a5fa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d124      	bne.n	800a64c <vTaskStartScheduler+0x78>
        __asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	60bb      	str	r3, [r7, #8]
    }
 800a614:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800a616:	4b1b      	ldr	r3, [pc, #108]	; (800a684 <vTaskStartScheduler+0xb0>)
 800a618:	f04f 32ff 	mov.w	r2, #4294967295
 800a61c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800a61e:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <vTaskStartScheduler+0xb4>)
 800a620:	2201      	movs	r2, #1
 800a622:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a624:	4b19      	ldr	r3, [pc, #100]	; (800a68c <vTaskStartScheduler+0xb8>)
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800a62a:	4b19      	ldr	r3, [pc, #100]	; (800a690 <vTaskStartScheduler+0xbc>)
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	4b12      	ldr	r3, [pc, #72]	; (800a678 <vTaskStartScheduler+0xa4>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d102      	bne.n	800a63c <vTaskStartScheduler+0x68>
 800a636:	f002 fdd5 	bl	800d1e4 <SEGGER_SYSVIEW_OnIdle>
 800a63a:	e004      	b.n	800a646 <vTaskStartScheduler+0x72>
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <vTaskStartScheduler+0xbc>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f002 fe2d 	bl	800d2a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800a646:	f001 f99d 	bl	800b984 <xPortStartScheduler>
 800a64a:	e00e      	b.n	800a66a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a652:	d10a      	bne.n	800a66a <vTaskStartScheduler+0x96>
        __asm volatile
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	607b      	str	r3, [r7, #4]
    }
 800a666:	bf00      	nop
 800a668:	e7fe      	b.n	800a668 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a66a:	4b0a      	ldr	r3, [pc, #40]	; (800a694 <vTaskStartScheduler+0xc0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
}
 800a66e:	bf00      	nop
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	2000026c 	.word	0x2000026c
 800a67c:	0800d984 	.word	0x0800d984
 800a680:	0800ace1 	.word	0x0800ace1
 800a684:	20000268 	.word	0x20000268
 800a688:	20000254 	.word	0x20000254
 800a68c:	2000024c 	.word	0x2000024c
 800a690:	200000c0 	.word	0x200000c0
 800a694:	2000002c 	.word	0x2000002c

0800a698 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a69c:	4b04      	ldr	r3, [pc, #16]	; (800a6b0 <vTaskSuspendAll+0x18>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	4a03      	ldr	r2, [pc, #12]	; (800a6b0 <vTaskSuspendAll+0x18>)
 800a6a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a6a6:	bf00      	nop
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	20000270 	.word	0x20000270

0800a6b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800a6c2:	4b43      	ldr	r3, [pc, #268]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10a      	bne.n	800a6e0 <xTaskResumeAll+0x2c>
        __asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	603b      	str	r3, [r7, #0]
    }
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a6e0:	f001 f9f2 	bl	800bac8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a6e4:	4b3a      	ldr	r3, [pc, #232]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	4a39      	ldr	r2, [pc, #228]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a6ec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ee:	4b38      	ldr	r3, [pc, #224]	; (800a7d0 <xTaskResumeAll+0x11c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d165      	bne.n	800a7c2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6f6:	4b37      	ldr	r3, [pc, #220]	; (800a7d4 <xTaskResumeAll+0x120>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d061      	beq.n	800a7c2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6fe:	e032      	b.n	800a766 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a700:	4b35      	ldr	r3, [pc, #212]	; (800a7d8 <xTaskResumeAll+0x124>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	3318      	adds	r3, #24
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fe3d 	bl	800938c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3304      	adds	r3, #4
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fe38 	bl	800938c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 fe00 	bl	800d324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	2201      	movs	r2, #1
 800a72a:	409a      	lsls	r2, r3
 800a72c:	4b2b      	ldr	r3, [pc, #172]	; (800a7dc <xTaskResumeAll+0x128>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4313      	orrs	r3, r2
 800a732:	4a2a      	ldr	r2, [pc, #168]	; (800a7dc <xTaskResumeAll+0x128>)
 800a734:	6013      	str	r3, [r2, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73a:	4613      	mov	r3, r2
 800a73c:	009b      	lsls	r3, r3, #2
 800a73e:	4413      	add	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4a27      	ldr	r2, [pc, #156]	; (800a7e0 <xTaskResumeAll+0x12c>)
 800a744:	441a      	add	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3304      	adds	r3, #4
 800a74a:	4619      	mov	r1, r3
 800a74c:	4610      	mov	r0, r2
 800a74e:	f7fe fdc0 	bl	80092d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a756:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <xTaskResumeAll+0x130>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d302      	bcc.n	800a766 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800a760:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <xTaskResumeAll+0x134>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a766:	4b1c      	ldr	r3, [pc, #112]	; (800a7d8 <xTaskResumeAll+0x124>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1c8      	bne.n	800a700 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a774:	f000 fb0e 	bl	800ad94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a778:	4b1c      	ldr	r3, [pc, #112]	; (800a7ec <xTaskResumeAll+0x138>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d010      	beq.n	800a7a6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a784:	f000 f846 	bl	800a814 <xTaskIncrementTick>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <xTaskResumeAll+0x134>)
 800a790:	2201      	movs	r2, #1
 800a792:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3b01      	subs	r3, #1
 800a798:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f1      	bne.n	800a784 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800a7a0:	4b12      	ldr	r3, [pc, #72]	; (800a7ec <xTaskResumeAll+0x138>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <xTaskResumeAll+0x134>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a7b2:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <xTaskResumeAll+0x13c>)
 800a7b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7b8:	601a      	str	r2, [r3, #0]
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a7c2:	f001 f9b1 	bl	800bb28 <vPortExitCritical>

    return xAlreadyYielded;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20000270 	.word	0x20000270
 800a7d4:	20000248 	.word	0x20000248
 800a7d8:	20000220 	.word	0x20000220
 800a7dc:	20000250 	.word	0x20000250
 800a7e0:	200000c4 	.word	0x200000c4
 800a7e4:	200000c0 	.word	0x200000c0
 800a7e8:	2000025c 	.word	0x2000025c
 800a7ec:	20000258 	.word	0x20000258
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <xTaskGetTickCount+0x1c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a800:	687b      	ldr	r3, [r7, #4]
}
 800a802:	4618      	mov	r0, r3
 800a804:	370c      	adds	r7, #12
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	2000024c 	.word	0x2000024c

0800a814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a81e:	4b50      	ldr	r3, [pc, #320]	; (800a960 <xTaskIncrementTick+0x14c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 8092 	bne.w	800a94c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a828:	4b4e      	ldr	r3, [pc, #312]	; (800a964 <xTaskIncrementTick+0x150>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3301      	adds	r3, #1
 800a82e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a830:	4a4c      	ldr	r2, [pc, #304]	; (800a964 <xTaskIncrementTick+0x150>)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d120      	bne.n	800a87e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800a83c:	4b4a      	ldr	r3, [pc, #296]	; (800a968 <xTaskIncrementTick+0x154>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00a      	beq.n	800a85c <xTaskIncrementTick+0x48>
        __asm volatile
 800a846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	603b      	str	r3, [r7, #0]
    }
 800a858:	bf00      	nop
 800a85a:	e7fe      	b.n	800a85a <xTaskIncrementTick+0x46>
 800a85c:	4b42      	ldr	r3, [pc, #264]	; (800a968 <xTaskIncrementTick+0x154>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	4b42      	ldr	r3, [pc, #264]	; (800a96c <xTaskIncrementTick+0x158>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a40      	ldr	r2, [pc, #256]	; (800a968 <xTaskIncrementTick+0x154>)
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	4a40      	ldr	r2, [pc, #256]	; (800a96c <xTaskIncrementTick+0x158>)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	4b3f      	ldr	r3, [pc, #252]	; (800a970 <xTaskIncrementTick+0x15c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3301      	adds	r3, #1
 800a876:	4a3e      	ldr	r2, [pc, #248]	; (800a970 <xTaskIncrementTick+0x15c>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	f000 fa8b 	bl	800ad94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a87e:	4b3d      	ldr	r3, [pc, #244]	; (800a974 <xTaskIncrementTick+0x160>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d34c      	bcc.n	800a922 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a888:	4b37      	ldr	r3, [pc, #220]	; (800a968 <xTaskIncrementTick+0x154>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d104      	bne.n	800a89c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a892:	4b38      	ldr	r3, [pc, #224]	; (800a974 <xTaskIncrementTick+0x160>)
 800a894:	f04f 32ff 	mov.w	r2, #4294967295
 800a898:	601a      	str	r2, [r3, #0]
                    break;
 800a89a:	e042      	b.n	800a922 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a89c:	4b32      	ldr	r3, [pc, #200]	; (800a968 <xTaskIncrementTick+0x154>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d203      	bcs.n	800a8bc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a8b4:	4a2f      	ldr	r2, [pc, #188]	; (800a974 <xTaskIncrementTick+0x160>)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a8ba:	e032      	b.n	800a922 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7fe fd63 	bl	800938c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d004      	beq.n	800a8d8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	3318      	adds	r3, #24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe fd5a 	bl	800938c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f002 fd22 	bl	800d324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	409a      	lsls	r2, r3
 800a8e8:	4b23      	ldr	r3, [pc, #140]	; (800a978 <xTaskIncrementTick+0x164>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	4a22      	ldr	r2, [pc, #136]	; (800a978 <xTaskIncrementTick+0x164>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <xTaskIncrementTick+0x168>)
 800a900:	441a      	add	r2, r3
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	3304      	adds	r3, #4
 800a906:	4619      	mov	r1, r3
 800a908:	4610      	mov	r0, r2
 800a90a:	f7fe fce2 	bl	80092d2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a912:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <xTaskIncrementTick+0x16c>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a918:	429a      	cmp	r2, r3
 800a91a:	d3b5      	bcc.n	800a888 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800a91c:	2301      	movs	r3, #1
 800a91e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a920:	e7b2      	b.n	800a888 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a922:	4b17      	ldr	r3, [pc, #92]	; (800a980 <xTaskIncrementTick+0x16c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a928:	4914      	ldr	r1, [pc, #80]	; (800a97c <xTaskIncrementTick+0x168>)
 800a92a:	4613      	mov	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	440b      	add	r3, r1
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d901      	bls.n	800a93e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a93e:	4b11      	ldr	r3, [pc, #68]	; (800a984 <xTaskIncrementTick+0x170>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	617b      	str	r3, [r7, #20]
 800a94a:	e004      	b.n	800a956 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a94c:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <xTaskIncrementTick+0x174>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3301      	adds	r3, #1
 800a952:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <xTaskIncrementTick+0x174>)
 800a954:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a956:	697b      	ldr	r3, [r7, #20]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3718      	adds	r7, #24
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20000270 	.word	0x20000270
 800a964:	2000024c 	.word	0x2000024c
 800a968:	20000218 	.word	0x20000218
 800a96c:	2000021c 	.word	0x2000021c
 800a970:	20000260 	.word	0x20000260
 800a974:	20000268 	.word	0x20000268
 800a978:	20000250 	.word	0x20000250
 800a97c:	200000c4 	.word	0x200000c4
 800a980:	200000c0 	.word	0x200000c0
 800a984:	2000025c 	.word	0x2000025c
 800a988:	20000258 	.word	0x20000258

0800a98c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b086      	sub	sp, #24
 800a990:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a992:	4b2d      	ldr	r3, [pc, #180]	; (800aa48 <vTaskSwitchContext+0xbc>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a99a:	4b2c      	ldr	r3, [pc, #176]	; (800aa4c <vTaskSwitchContext+0xc0>)
 800a99c:	2201      	movs	r2, #1
 800a99e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a9a0:	e04d      	b.n	800aa3e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800a9a2:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <vTaskSwitchContext+0xc0>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a8:	4b29      	ldr	r3, [pc, #164]	; (800aa50 <vTaskSwitchContext+0xc4>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	fab3 f383 	clz	r3, r3
 800a9b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a9b6:	7afb      	ldrb	r3, [r7, #11]
 800a9b8:	f1c3 031f 	rsb	r3, r3, #31
 800a9bc:	617b      	str	r3, [r7, #20]
 800a9be:	4925      	ldr	r1, [pc, #148]	; (800aa54 <vTaskSwitchContext+0xc8>)
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	440b      	add	r3, r1
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d10a      	bne.n	800a9e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	607b      	str	r3, [r7, #4]
    }
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <vTaskSwitchContext+0x5a>
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4a18      	ldr	r2, [pc, #96]	; (800aa54 <vTaskSwitchContext+0xc8>)
 800a9f4:	4413      	add	r3, r2
 800a9f6:	613b      	str	r3, [r7, #16]
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3308      	adds	r3, #8
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d104      	bne.n	800aa18 <vTaskSwitchContext+0x8c>
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	685a      	ldr	r2, [r3, #4]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	605a      	str	r2, [r3, #4]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	4a0e      	ldr	r2, [pc, #56]	; (800aa58 <vTaskSwitchContext+0xcc>)
 800aa20:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800aa22:	4b0d      	ldr	r3, [pc, #52]	; (800aa58 <vTaskSwitchContext+0xcc>)
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <vTaskSwitchContext+0xd0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d102      	bne.n	800aa34 <vTaskSwitchContext+0xa8>
 800aa2e:	f002 fbd9 	bl	800d1e4 <SEGGER_SYSVIEW_OnIdle>
}
 800aa32:	e004      	b.n	800aa3e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800aa34:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <vTaskSwitchContext+0xcc>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f002 fc31 	bl	800d2a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800aa3e:	bf00      	nop
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000270 	.word	0x20000270
 800aa4c:	2000025c 	.word	0x2000025c
 800aa50:	20000250 	.word	0x20000250
 800aa54:	200000c4 	.word	0x200000c4
 800aa58:	200000c0 	.word	0x200000c0
 800aa5c:	2000026c 	.word	0x2000026c

0800aa60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b084      	sub	sp, #16
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10a      	bne.n	800aa86 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	60fb      	str	r3, [r7, #12]
    }
 800aa82:	bf00      	nop
 800aa84:	e7fe      	b.n	800aa84 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa86:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <vTaskPlaceOnEventList+0x44>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	3318      	adds	r3, #24
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fe fc43 	bl	800931a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa94:	2101      	movs	r1, #1
 800aa96:	6838      	ldr	r0, [r7, #0]
 800aa98:	f000 fb5c 	bl	800b154 <prvAddCurrentTaskToDelayedList>
}
 800aa9c:	bf00      	nop
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200000c0 	.word	0x200000c0

0800aaa8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	617b      	str	r3, [r7, #20]
    }
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <vTaskPlaceOnEventListRestricted+0x58>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3318      	adds	r3, #24
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7fe fbfa 	bl	80092d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800aae4:	f04f 33ff 	mov.w	r3, #4294967295
 800aae8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800aaea:	2024      	movs	r0, #36	; 0x24
 800aaec:	f001 fea0 	bl	800c830 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	68b8      	ldr	r0, [r7, #8]
 800aaf4:	f000 fb2e 	bl	800b154 <prvAddCurrentTaskToDelayedList>
    }
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200000c0 	.word	0x200000c0

0800ab04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10a      	bne.n	800ab30 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	60fb      	str	r3, [r7, #12]
    }
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	3318      	adds	r3, #24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fc29 	bl	800938c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab3a:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <xTaskRemoveFromEventList+0xb4>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d120      	bne.n	800ab84 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	3304      	adds	r3, #4
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7fe fc20 	bl	800938c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f002 fbe8 	bl	800d324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	2201      	movs	r2, #1
 800ab5a:	409a      	lsls	r2, r3
 800ab5c:	4b17      	ldr	r3, [pc, #92]	; (800abbc <xTaskRemoveFromEventList+0xb8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	4a16      	ldr	r2, [pc, #88]	; (800abbc <xTaskRemoveFromEventList+0xb8>)
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	4413      	add	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4a13      	ldr	r2, [pc, #76]	; (800abc0 <xTaskRemoveFromEventList+0xbc>)
 800ab74:	441a      	add	r2, r3
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7fe fba8 	bl	80092d2 <vListInsertEnd>
 800ab82:	e005      	b.n	800ab90 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	3318      	adds	r3, #24
 800ab88:	4619      	mov	r1, r3
 800ab8a:	480e      	ldr	r0, [pc, #56]	; (800abc4 <xTaskRemoveFromEventList+0xc0>)
 800ab8c:	f7fe fba1 	bl	80092d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab94:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <xTaskRemoveFromEventList+0xc4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d905      	bls.n	800abaa <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800aba2:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <xTaskRemoveFromEventList+0xc8>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	e001      	b.n	800abae <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800abae:	697b      	ldr	r3, [r7, #20]
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20000270 	.word	0x20000270
 800abbc:	20000250 	.word	0x20000250
 800abc0:	200000c4 	.word	0x200000c4
 800abc4:	20000220 	.word	0x20000220
 800abc8:	200000c0 	.word	0x200000c0
 800abcc:	2000025c 	.word	0x2000025c

0800abd0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800abd8:	4b06      	ldr	r3, [pc, #24]	; (800abf4 <vTaskInternalSetTimeOutState+0x24>)
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800abe0:	4b05      	ldr	r3, [pc, #20]	; (800abf8 <vTaskInternalSetTimeOutState+0x28>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	605a      	str	r2, [r3, #4]
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	20000260 	.word	0x20000260
 800abf8:	2000024c 	.word	0x2000024c

0800abfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10a      	bne.n	800ac22 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	613b      	str	r3, [r7, #16]
    }
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800ac28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2c:	f383 8811 	msr	BASEPRI, r3
 800ac30:	f3bf 8f6f 	isb	sy
 800ac34:	f3bf 8f4f 	dsb	sy
 800ac38:	60fb      	str	r3, [r7, #12]
    }
 800ac3a:	bf00      	nop
 800ac3c:	e7fe      	b.n	800ac3c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800ac3e:	f000 ff43 	bl	800bac8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ac42:	4b1f      	ldr	r3, [pc, #124]	; (800acc0 <xTaskCheckForTimeOut+0xc4>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac5a:	d102      	bne.n	800ac62 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	e026      	b.n	800acb0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	4b17      	ldr	r3, [pc, #92]	; (800acc4 <xTaskCheckForTimeOut+0xc8>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d00a      	beq.n	800ac84 <xTaskCheckForTimeOut+0x88>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d305      	bcc.n	800ac84 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	e015      	b.n	800acb0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d20b      	bcs.n	800aca6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	1ad2      	subs	r2, r2, r3
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff ff98 	bl	800abd0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61fb      	str	r3, [r7, #28]
 800aca4:	e004      	b.n	800acb0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800acac:	2301      	movs	r3, #1
 800acae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800acb0:	f000 ff3a 	bl	800bb28 <vPortExitCritical>

    return xReturn;
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	2000024c 	.word	0x2000024c
 800acc4:	20000260 	.word	0x20000260

0800acc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800acc8:	b480      	push	{r7}
 800acca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800accc:	4b03      	ldr	r3, [pc, #12]	; (800acdc <vTaskMissedYield+0x14>)
 800acce:	2201      	movs	r2, #1
 800acd0:	601a      	str	r2, [r3, #0]
}
 800acd2:	bf00      	nop
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	2000025c 	.word	0x2000025c

0800ace0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800ace8:	f000 f84c 	bl	800ad84 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800acec:	4b06      	ldr	r3, [pc, #24]	; (800ad08 <prvIdleTask+0x28>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d9f9      	bls.n	800ace8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800acf4:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <prvIdleTask+0x2c>)
 800acf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ad04:	e7f0      	b.n	800ace8 <prvIdleTask+0x8>
 800ad06:	bf00      	nop
 800ad08:	200000c4 	.word	0x200000c4
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad16:	2300      	movs	r3, #0
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	e00c      	b.n	800ad36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4a10      	ldr	r2, [pc, #64]	; (800ad68 <prvInitialiseTaskLists+0x58>)
 800ad28:	4413      	add	r3, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe faa4 	bl	8009278 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	3301      	adds	r3, #1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b0e      	cmp	r3, #14
 800ad3a:	d9ef      	bls.n	800ad1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ad3c:	480b      	ldr	r0, [pc, #44]	; (800ad6c <prvInitialiseTaskLists+0x5c>)
 800ad3e:	f7fe fa9b 	bl	8009278 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ad42:	480b      	ldr	r0, [pc, #44]	; (800ad70 <prvInitialiseTaskLists+0x60>)
 800ad44:	f7fe fa98 	bl	8009278 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ad48:	480a      	ldr	r0, [pc, #40]	; (800ad74 <prvInitialiseTaskLists+0x64>)
 800ad4a:	f7fe fa95 	bl	8009278 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800ad4e:	480a      	ldr	r0, [pc, #40]	; (800ad78 <prvInitialiseTaskLists+0x68>)
 800ad50:	f7fe fa92 	bl	8009278 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <prvInitialiseTaskLists+0x6c>)
 800ad56:	4a05      	ldr	r2, [pc, #20]	; (800ad6c <prvInitialiseTaskLists+0x5c>)
 800ad58:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ad5a:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <prvInitialiseTaskLists+0x70>)
 800ad5c:	4a04      	ldr	r2, [pc, #16]	; (800ad70 <prvInitialiseTaskLists+0x60>)
 800ad5e:	601a      	str	r2, [r3, #0]
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	200000c4 	.word	0x200000c4
 800ad6c:	200001f0 	.word	0x200001f0
 800ad70:	20000204 	.word	0x20000204
 800ad74:	20000220 	.word	0x20000220
 800ad78:	20000234 	.word	0x20000234
 800ad7c:	20000218 	.word	0x20000218
 800ad80:	2000021c 	.word	0x2000021c

0800ad84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800ad88:	bf00      	nop
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
	...

0800ad94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad98:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <prvResetNextTaskUnblockTime+0x30>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d104      	bne.n	800adac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <prvResetNextTaskUnblockTime+0x34>)
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800adaa:	e005      	b.n	800adb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800adac:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <prvResetNextTaskUnblockTime+0x30>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a04      	ldr	r2, [pc, #16]	; (800adc8 <prvResetNextTaskUnblockTime+0x34>)
 800adb6:	6013      	str	r3, [r2, #0]
}
 800adb8:	bf00      	nop
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20000218 	.word	0x20000218
 800adc8:	20000268 	.word	0x20000268

0800adcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800adcc:	b480      	push	{r7}
 800adce:	b083      	sub	sp, #12
 800add0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800add2:	4b0b      	ldr	r3, [pc, #44]	; (800ae00 <xTaskGetSchedulerState+0x34>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800adda:	2301      	movs	r3, #1
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	e008      	b.n	800adf2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade0:	4b08      	ldr	r3, [pc, #32]	; (800ae04 <xTaskGetSchedulerState+0x38>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800ade8:	2302      	movs	r3, #2
 800adea:	607b      	str	r3, [r7, #4]
 800adec:	e001      	b.n	800adf2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800adee:	2300      	movs	r3, #0
 800adf0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800adf2:	687b      	ldr	r3, [r7, #4]
    }
 800adf4:	4618      	mov	r0, r3
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	20000254 	.word	0x20000254
 800ae04:	20000270 	.word	0x20000270

0800ae08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d063      	beq.n	800aee6 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	4b33      	ldr	r3, [pc, #204]	; (800aef0 <xTaskPriorityInherit+0xe8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d253      	bcs.n	800aed4 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	db06      	blt.n	800ae42 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae34:	4b2e      	ldr	r3, [pc, #184]	; (800aef0 <xTaskPriorityInherit+0xe8>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	f1c3 020f 	rsb	r2, r3, #15
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6959      	ldr	r1, [r3, #20]
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4a28      	ldr	r2, [pc, #160]	; (800aef4 <xTaskPriorityInherit+0xec>)
 800ae54:	4413      	add	r3, r2
 800ae56:	4299      	cmp	r1, r3
 800ae58:	d12f      	bne.n	800aeba <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7fe fa94 	bl	800938c <uxListRemove>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6e:	2201      	movs	r2, #1
 800ae70:	fa02 f303 	lsl.w	r3, r2, r3
 800ae74:	43da      	mvns	r2, r3
 800ae76:	4b20      	ldr	r3, [pc, #128]	; (800aef8 <xTaskPriorityInherit+0xf0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4013      	ands	r3, r2
 800ae7c:	4a1e      	ldr	r2, [pc, #120]	; (800aef8 <xTaskPriorityInherit+0xf0>)
 800ae7e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae80:	4b1b      	ldr	r3, [pc, #108]	; (800aef0 <xTaskPriorityInherit+0xe8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	2201      	movs	r2, #1
 800ae90:	409a      	lsls	r2, r3
 800ae92:	4b19      	ldr	r3, [pc, #100]	; (800aef8 <xTaskPriorityInherit+0xf0>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	4a17      	ldr	r2, [pc, #92]	; (800aef8 <xTaskPriorityInherit+0xf0>)
 800ae9a:	6013      	str	r3, [r2, #0]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea0:	4613      	mov	r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4a12      	ldr	r2, [pc, #72]	; (800aef4 <xTaskPriorityInherit+0xec>)
 800aeaa:	441a      	add	r2, r3
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f7fe fa0d 	bl	80092d2 <vListInsertEnd>
 800aeb8:	e004      	b.n	800aec4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aeba:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <xTaskPriorityInherit+0xe8>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4619      	mov	r1, r3
 800aec8:	2049      	movs	r0, #73	; 0x49
 800aeca:	f001 fccf 	bl	800c86c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800aece:	2301      	movs	r3, #1
 800aed0:	60fb      	str	r3, [r7, #12]
 800aed2:	e008      	b.n	800aee6 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aed8:	4b05      	ldr	r3, [pc, #20]	; (800aef0 <xTaskPriorityInherit+0xe8>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aede:	429a      	cmp	r2, r3
 800aee0:	d201      	bcs.n	800aee6 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800aee2:	2301      	movs	r3, #1
 800aee4:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800aee6:	68fb      	ldr	r3, [r7, #12]
    }
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	200000c0 	.word	0x200000c0
 800aef4:	200000c4 	.word	0x200000c4
 800aef8:	20000250 	.word	0x20000250

0800aefc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d068      	beq.n	800afe4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800af12:	4b37      	ldr	r3, [pc, #220]	; (800aff0 <xTaskPriorityDisinherit+0xf4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d00a      	beq.n	800af32 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	60fb      	str	r3, [r7, #12]
    }
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10a      	bne.n	800af50 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	60bb      	str	r3, [r7, #8]
    }
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af62:	429a      	cmp	r2, r3
 800af64:	d03e      	beq.n	800afe4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d13a      	bne.n	800afe4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	3304      	adds	r3, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f7fe fa0a 	bl	800938c <uxListRemove>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	2201      	movs	r2, #1
 800af84:	fa02 f303 	lsl.w	r3, r2, r3
 800af88:	43da      	mvns	r2, r3
 800af8a:	4b1a      	ldr	r3, [pc, #104]	; (800aff4 <xTaskPriorityDisinherit+0xf8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4013      	ands	r3, r2
 800af90:	4a18      	ldr	r2, [pc, #96]	; (800aff4 <xTaskPriorityDisinherit+0xf8>)
 800af92:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4619      	mov	r1, r3
 800af98:	204a      	movs	r0, #74	; 0x4a
 800af9a:	f001 fc67 	bl	800c86c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	f1c3 020f 	rsb	r2, r3, #15
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	2201      	movs	r2, #1
 800afb8:	409a      	lsls	r2, r3
 800afba:	4b0e      	ldr	r3, [pc, #56]	; (800aff4 <xTaskPriorityDisinherit+0xf8>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	4a0c      	ldr	r2, [pc, #48]	; (800aff4 <xTaskPriorityDisinherit+0xf8>)
 800afc2:	6013      	str	r3, [r2, #0]
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc8:	4613      	mov	r3, r2
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4a09      	ldr	r2, [pc, #36]	; (800aff8 <xTaskPriorityDisinherit+0xfc>)
 800afd2:	441a      	add	r2, r3
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	3304      	adds	r3, #4
 800afd8:	4619      	mov	r1, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	f7fe f979 	bl	80092d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800afe4:	697b      	ldr	r3, [r7, #20]
    }
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200000c0 	.word	0x200000c0
 800aff4:	20000250 	.word	0x20000250
 800aff8:	200000c4 	.word	0x200000c4

0800affc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800affc:	b580      	push	{r7, lr}
 800affe:	b088      	sub	sp, #32
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b00a:	2301      	movs	r3, #1
 800b00c:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 8081 	beq.w	800b118 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	60fb      	str	r3, [r7, #12]
    }
 800b030:	bf00      	nop
 800b032:	e7fe      	b.n	800b032 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d902      	bls.n	800b044 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	61fb      	str	r3, [r7, #28]
 800b042:	e002      	b.n	800b04a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b048:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b04a:	69bb      	ldr	r3, [r7, #24]
 800b04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	429a      	cmp	r2, r3
 800b052:	d061      	beq.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d15c      	bne.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b05e:	4b30      	ldr	r3, [pc, #192]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	429a      	cmp	r2, r3
 800b066:	d10a      	bne.n	800b07e <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 800b068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06c:	f383 8811 	msr	BASEPRI, r3
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	f3bf 8f4f 	dsb	sy
 800b078:	60bb      	str	r3, [r7, #8]
    }
 800b07a:	bf00      	nop
 800b07c:	e7fe      	b.n	800b07c <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4619      	mov	r1, r3
 800b082:	204a      	movs	r0, #74	; 0x4a
 800b084:	f001 fbf2 	bl	800c86c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	69fa      	ldr	r2, [r7, #28]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db04      	blt.n	800b0a6 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f1c3 020f 	rsb	r2, r3, #15
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	6959      	ldr	r1, [r3, #20]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	; (800b124 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b0b6:	4413      	add	r3, r2
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	d12d      	bne.n	800b118 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe f963 	bl	800938c <uxListRemove>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d6:	43da      	mvns	r2, r3
 800b0d8:	4b13      	ldr	r3, [pc, #76]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	4a12      	ldr	r2, [pc, #72]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b0e0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f002 f91d 	bl	800d324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	409a      	lsls	r2, r3
 800b0f2:	4b0d      	ldr	r3, [pc, #52]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	4a0b      	ldr	r2, [pc, #44]	; (800b128 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4a06      	ldr	r2, [pc, #24]	; (800b124 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800b10a:	441a      	add	r2, r3
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	3304      	adds	r3, #4
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f7fe f8dd 	bl	80092d2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b118:	bf00      	nop
 800b11a:	3720      	adds	r7, #32
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	200000c0 	.word	0x200000c0
 800b124:	200000c4 	.word	0x200000c4
 800b128:	20000250 	.word	0x20000250

0800b12c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800b12c:	b480      	push	{r7}
 800b12e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800b130:	4b07      	ldr	r3, [pc, #28]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d004      	beq.n	800b142 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b13e:	3201      	adds	r2, #1
 800b140:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800b142:	4b03      	ldr	r3, [pc, #12]	; (800b150 <pvTaskIncrementMutexHeldCount+0x24>)
 800b144:	681b      	ldr	r3, [r3, #0]
    }
 800b146:	4618      	mov	r0, r3
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	200000c0 	.word	0x200000c0

0800b154 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b15e:	4b32      	ldr	r3, [pc, #200]	; (800b228 <prvAddCurrentTaskToDelayedList+0xd4>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b164:	4b31      	ldr	r3, [pc, #196]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3304      	adds	r3, #4
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe f90e 	bl	800938c <uxListRemove>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10b      	bne.n	800b18e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b176:	4b2d      	ldr	r3, [pc, #180]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	2201      	movs	r2, #1
 800b17e:	fa02 f303 	lsl.w	r3, r2, r3
 800b182:	43da      	mvns	r2, r3
 800b184:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <prvAddCurrentTaskToDelayedList+0xdc>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4013      	ands	r3, r2
 800b18a:	4a29      	ldr	r2, [pc, #164]	; (800b230 <prvAddCurrentTaskToDelayedList+0xdc>)
 800b18c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b194:	d110      	bne.n	800b1b8 <prvAddCurrentTaskToDelayedList+0x64>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00d      	beq.n	800b1b8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800b19c:	4b23      	ldr	r3, [pc, #140]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	211b      	movs	r1, #27
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f002 f900 	bl	800d3a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1a8:	4b20      	ldr	r3, [pc, #128]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4820      	ldr	r0, [pc, #128]	; (800b234 <prvAddCurrentTaskToDelayedList+0xe0>)
 800b1b2:	f7fe f88e 	bl	80092d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b1b6:	e032      	b.n	800b21e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4413      	add	r3, r2
 800b1be:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1c0:	4b1a      	ldr	r3, [pc, #104]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d20f      	bcs.n	800b1f0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b1d0:	4b16      	ldr	r3, [pc, #88]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2104      	movs	r1, #4
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f002 f8e6 	bl	800d3a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1dc:	4b16      	ldr	r3, [pc, #88]	; (800b238 <prvAddCurrentTaskToDelayedList+0xe4>)
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b12      	ldr	r3, [pc, #72]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe f896 	bl	800931a <vListInsert>
}
 800b1ee:	e016      	b.n	800b21e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800b1f0:	4b0e      	ldr	r3, [pc, #56]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2104      	movs	r1, #4
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f002 f8d6 	bl	800d3a8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	; (800b23c <prvAddCurrentTaskToDelayedList+0xe8>)
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3304      	adds	r3, #4
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f7fe f886 	bl	800931a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b20e:	4b0c      	ldr	r3, [pc, #48]	; (800b240 <prvAddCurrentTaskToDelayedList+0xec>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	429a      	cmp	r2, r3
 800b216:	d202      	bcs.n	800b21e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <prvAddCurrentTaskToDelayedList+0xec>)
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	6013      	str	r3, [r2, #0]
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	2000024c 	.word	0x2000024c
 800b22c:	200000c0 	.word	0x200000c0
 800b230:	20000250 	.word	0x20000250
 800b234:	20000234 	.word	0x20000234
 800b238:	2000021c 	.word	0x2000021c
 800b23c:	20000218 	.word	0x20000218
 800b240:	20000268 	.word	0x20000268

0800b244 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b24e:	f000 fad5 	bl	800b7fc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b252:	4b11      	ldr	r3, [pc, #68]	; (800b298 <xTimerCreateTimerTask+0x54>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d00b      	beq.n	800b272 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b25a:	4b10      	ldr	r3, [pc, #64]	; (800b29c <xTimerCreateTimerTask+0x58>)
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	2302      	movs	r3, #2
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2300      	movs	r3, #0
 800b264:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b268:	490d      	ldr	r1, [pc, #52]	; (800b2a0 <xTimerCreateTimerTask+0x5c>)
 800b26a:	480e      	ldr	r0, [pc, #56]	; (800b2a4 <xTimerCreateTimerTask+0x60>)
 800b26c:	f7ff f816 	bl	800a29c <xTaskCreate>
 800b270:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	603b      	str	r3, [r7, #0]
    }
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800b28e:	687b      	ldr	r3, [r7, #4]
    }
 800b290:	4618      	mov	r0, r3
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200002a4 	.word	0x200002a4
 800b29c:	200002a8 	.word	0x200002a8
 800b2a0:	0800d98c 	.word	0x0800d98c
 800b2a4:	0800b3dd 	.word	0x0800b3dd

0800b2a8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <xTimerGenericCommand+0x2e>
        __asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	623b      	str	r3, [r7, #32]
    }
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b2d6:	4b1a      	ldr	r3, [pc, #104]	; (800b340 <xTimerGenericCommand+0x98>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d02a      	beq.n	800b334 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	2b05      	cmp	r3, #5
 800b2ee:	dc18      	bgt.n	800b322 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2f0:	f7ff fd6c 	bl	800adcc <xTaskGetSchedulerState>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d109      	bne.n	800b30e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2fa:	4b11      	ldr	r3, [pc, #68]	; (800b340 <xTimerGenericCommand+0x98>)
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	f107 0114 	add.w	r1, r7, #20
 800b302:	2300      	movs	r3, #0
 800b304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b306:	f7fe f95b 	bl	80095c0 <xQueueGenericSend>
 800b30a:	6278      	str	r0, [r7, #36]	; 0x24
 800b30c:	e012      	b.n	800b334 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b30e:	4b0c      	ldr	r3, [pc, #48]	; (800b340 <xTimerGenericCommand+0x98>)
 800b310:	6818      	ldr	r0, [r3, #0]
 800b312:	f107 0114 	add.w	r1, r7, #20
 800b316:	2300      	movs	r3, #0
 800b318:	2200      	movs	r2, #0
 800b31a:	f7fe f951 	bl	80095c0 <xQueueGenericSend>
 800b31e:	6278      	str	r0, [r7, #36]	; 0x24
 800b320:	e008      	b.n	800b334 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b322:	4b07      	ldr	r3, [pc, #28]	; (800b340 <xTimerGenericCommand+0x98>)
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f107 0114 	add.w	r1, r7, #20
 800b32a:	2300      	movs	r3, #0
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	f7fe fa6d 	bl	800980c <xQueueGenericSendFromISR>
 800b332:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800b336:	4618      	mov	r0, r3
 800b338:	3728      	adds	r7, #40	; 0x28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	200002a4 	.word	0x200002a4

0800b344 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b344:	b580      	push	{r7, lr}
 800b346:	b088      	sub	sp, #32
 800b348:	af02      	add	r7, sp, #8
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34e:	4b22      	ldr	r3, [pc, #136]	; (800b3d8 <prvProcessExpiredTimer+0x94>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe f815 	bl	800938c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d022      	beq.n	800b3b6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	699a      	ldr	r2, [r3, #24]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	18d1      	adds	r1, r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	683a      	ldr	r2, [r7, #0]
 800b37c:	6978      	ldr	r0, [r7, #20]
 800b37e:	f000 f8d1 	bl	800b524 <prvInsertTimerInActiveList>
 800b382:	4603      	mov	r3, r0
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01f      	beq.n	800b3c8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b388:	2300      	movs	r3, #0
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2300      	movs	r3, #0
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	2100      	movs	r1, #0
 800b392:	6978      	ldr	r0, [r7, #20]
 800b394:	f7ff ff88 	bl	800b2a8 <xTimerGenericCommand>
 800b398:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d113      	bne.n	800b3c8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	60fb      	str	r3, [r7, #12]
    }
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3bc:	f023 0301 	bic.w	r3, r3, #1
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	6a1b      	ldr	r3, [r3, #32]
 800b3cc:	6978      	ldr	r0, [r7, #20]
 800b3ce:	4798      	blx	r3
    }
 800b3d0:	bf00      	nop
 800b3d2:	3718      	adds	r7, #24
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2000029c 	.word	0x2000029c

0800b3dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3e4:	f107 0308 	add.w	r3, r7, #8
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 f857 	bl	800b49c <prvGetNextExpireTime>
 800b3ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 f803 	bl	800b400 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b3fa:	f000 f8d5 	bl	800b5a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3fe:	e7f1      	b.n	800b3e4 <prvTimerTask+0x8>

0800b400 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b40a:	f7ff f945 	bl	800a698 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b40e:	f107 0308 	add.w	r3, r7, #8
 800b412:	4618      	mov	r0, r3
 800b414:	f000 f866 	bl	800b4e4 <prvSampleTimeNow>
 800b418:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d130      	bne.n	800b482 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <prvProcessTimerOrBlockTask+0x3c>
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d806      	bhi.n	800b43c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b42e:	f7ff f941 	bl	800a6b4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b432:	68f9      	ldr	r1, [r7, #12]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff ff85 	bl	800b344 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b43a:	e024      	b.n	800b486 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d008      	beq.n	800b454 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b442:	4b13      	ldr	r3, [pc, #76]	; (800b490 <prvProcessTimerOrBlockTask+0x90>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <prvProcessTimerOrBlockTask+0x50>
 800b44c:	2301      	movs	r3, #1
 800b44e:	e000      	b.n	800b452 <prvProcessTimerOrBlockTask+0x52>
 800b450:	2300      	movs	r3, #0
 800b452:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b454:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <prvProcessTimerOrBlockTask+0x94>)
 800b456:	6818      	ldr	r0, [r3, #0]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1ad3      	subs	r3, r2, r3
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	4619      	mov	r1, r3
 800b462:	f7fe fee7 	bl	800a234 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b466:	f7ff f925 	bl	800a6b4 <xTaskResumeAll>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b470:	4b09      	ldr	r3, [pc, #36]	; (800b498 <prvProcessTimerOrBlockTask+0x98>)
 800b472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b476:	601a      	str	r2, [r3, #0]
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	f3bf 8f6f 	isb	sy
    }
 800b480:	e001      	b.n	800b486 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b482:	f7ff f917 	bl	800a6b4 <xTaskResumeAll>
    }
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	200002a0 	.word	0x200002a0
 800b494:	200002a4 	.word	0x200002a4
 800b498:	e000ed04 	.word	0xe000ed04

0800b49c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b4a4:	4b0e      	ldr	r3, [pc, #56]	; (800b4e0 <prvGetNextExpireTime+0x44>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <prvGetNextExpireTime+0x16>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	e000      	b.n	800b4b4 <prvGetNextExpireTime+0x18>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d105      	bne.n	800b4cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <prvGetNextExpireTime+0x44>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	60fb      	str	r3, [r7, #12]
 800b4ca:	e001      	b.n	800b4d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
    }
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3714      	adds	r7, #20
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	2000029c 	.word	0x2000029c

0800b4e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b4ec:	f7ff f982 	bl	800a7f4 <xTaskGetTickCount>
 800b4f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b4f2:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <prvSampleTimeNow+0x3c>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d205      	bcs.n	800b508 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b4fc:	f000 f91a 	bl	800b734 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	601a      	str	r2, [r3, #0]
 800b506:	e002      	b.n	800b50e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b50e:	4a04      	ldr	r2, [pc, #16]	; (800b520 <prvSampleTimeNow+0x3c>)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b514:	68fb      	ldr	r3, [r7, #12]
    }
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	200002ac 	.word	0x200002ac

0800b524 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
 800b530:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	68ba      	ldr	r2, [r7, #8]
 800b53a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	429a      	cmp	r2, r3
 800b548:	d812      	bhi.n	800b570 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	1ad2      	subs	r2, r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	429a      	cmp	r2, r3
 800b556:	d302      	bcc.n	800b55e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b558:	2301      	movs	r3, #1
 800b55a:	617b      	str	r3, [r7, #20]
 800b55c:	e01b      	b.n	800b596 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b55e:	4b10      	ldr	r3, [pc, #64]	; (800b5a0 <prvInsertTimerInActiveList+0x7c>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	3304      	adds	r3, #4
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f7fd fed6 	bl	800931a <vListInsert>
 800b56e:	e012      	b.n	800b596 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	d206      	bcs.n	800b586 <prvInsertTimerInActiveList+0x62>
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d302      	bcc.n	800b586 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b580:	2301      	movs	r3, #1
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	e007      	b.n	800b596 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b586:	4b07      	ldr	r3, [pc, #28]	; (800b5a4 <prvInsertTimerInActiveList+0x80>)
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4619      	mov	r1, r3
 800b590:	4610      	mov	r0, r2
 800b592:	f7fd fec2 	bl	800931a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b596:	697b      	ldr	r3, [r7, #20]
    }
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	200002a0 	.word	0x200002a0
 800b5a4:	2000029c 	.word	0x2000029c

0800b5a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08c      	sub	sp, #48	; 0x30
 800b5ac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b5ae:	e0ae      	b.n	800b70e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f2c0 80aa 	blt.w	800b70c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d004      	beq.n	800b5ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fd fedf 	bl	800938c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5ce:	1d3b      	adds	r3, r7, #4
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7ff ff87 	bl	800b4e4 <prvSampleTimeNow>
 800b5d6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	f200 8097 	bhi.w	800b70e <prvProcessReceivedCommands+0x166>
 800b5e0:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <prvProcessReceivedCommands+0x40>)
 800b5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e6:	bf00      	nop
 800b5e8:	0800b611 	.word	0x0800b611
 800b5ec:	0800b611 	.word	0x0800b611
 800b5f0:	0800b611 	.word	0x0800b611
 800b5f4:	0800b685 	.word	0x0800b685
 800b5f8:	0800b699 	.word	0x0800b699
 800b5fc:	0800b6e3 	.word	0x0800b6e3
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b611 	.word	0x0800b611
 800b608:	0800b685 	.word	0x0800b685
 800b60c:	0800b699 	.word	0x0800b699
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b616:	f043 0301 	orr.w	r3, r3, #1
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	18d1      	adds	r1, r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6a3a      	ldr	r2, [r7, #32]
 800b62e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b630:	f7ff ff78 	bl	800b524 <prvInsertTimerInActiveList>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d069      	beq.n	800b70e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b640:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b648:	f003 0304 	and.w	r3, r3, #4
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d05e      	beq.n	800b70e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	441a      	add	r2, r3
 800b658:	2300      	movs	r3, #0
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2300      	movs	r3, #0
 800b65e:	2100      	movs	r1, #0
 800b660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b662:	f7ff fe21 	bl	800b2a8 <xTimerGenericCommand>
 800b666:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d14f      	bne.n	800b70e <prvProcessReceivedCommands+0x166>
        __asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	61bb      	str	r3, [r7, #24]
    }
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b68a:	f023 0301 	bic.w	r3, r3, #1
 800b68e:	b2da      	uxtb	r2, r3
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800b696:	e03a      	b.n	800b70e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b69e:	f043 0301 	orr.w	r3, r3, #1
 800b6a2:	b2da      	uxtb	r2, r3
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	699b      	ldr	r3, [r3, #24]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10a      	bne.n	800b6ce <prvProcessReceivedCommands+0x126>
        __asm volatile
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	617b      	str	r3, [r7, #20]
    }
 800b6ca:	bf00      	nop
 800b6cc:	e7fe      	b.n	800b6cc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d0:	699a      	ldr	r2, [r3, #24]
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	18d1      	adds	r1, r2, r3
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	6a3a      	ldr	r2, [r7, #32]
 800b6da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6dc:	f7ff ff22 	bl	800b524 <prvInsertTimerInActiveList>
                        break;
 800b6e0:	e015      	b.n	800b70e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e8:	f003 0302 	and.w	r3, r3, #2
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d103      	bne.n	800b6f8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800b6f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b6f2:	f000 fbf3 	bl	800bedc <vPortFree>
 800b6f6:	e00a      	b.n	800b70e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6fe:	f023 0301 	bic.w	r3, r3, #1
 800b702:	b2da      	uxtb	r2, r3
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b70a:	e000      	b.n	800b70e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800b70c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b70e:	4b08      	ldr	r3, [pc, #32]	; (800b730 <prvProcessReceivedCommands+0x188>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f107 0108 	add.w	r1, r7, #8
 800b716:	2200      	movs	r2, #0
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe f9e5 	bl	8009ae8 <xQueueReceive>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	f47f af45 	bne.w	800b5b0 <prvProcessReceivedCommands+0x8>
        }
    }
 800b726:	bf00      	nop
 800b728:	bf00      	nop
 800b72a:	3728      	adds	r7, #40	; 0x28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	200002a4 	.word	0x200002a4

0800b734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b73a:	e048      	b.n	800b7ce <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b73c:	4b2d      	ldr	r3, [pc, #180]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b746:	4b2b      	ldr	r3, [pc, #172]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68db      	ldr	r3, [r3, #12]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3304      	adds	r3, #4
 800b754:	4618      	mov	r0, r3
 800b756:	f7fd fe19 	bl	800938c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6a1b      	ldr	r3, [r3, #32]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b768:	f003 0304 	and.w	r3, r3, #4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d02e      	beq.n	800b7ce <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	4413      	add	r3, r2
 800b778:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d90e      	bls.n	800b7a0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	68ba      	ldr	r2, [r7, #8]
 800b786:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b78e:	4b19      	ldr	r3, [pc, #100]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3304      	adds	r3, #4
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fd fdbe 	bl	800931a <vListInsert>
 800b79e:	e016      	b.n	800b7ce <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f7ff fd7c 	bl	800b2a8 <xTimerGenericCommand>
 800b7b0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <prvSwitchTimerLists+0x9a>
        __asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	603b      	str	r3, [r7, #0]
    }
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7ce:	4b09      	ldr	r3, [pc, #36]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1b1      	bne.n	800b73c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b7d8:	4b06      	ldr	r3, [pc, #24]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b7de:	4b06      	ldr	r3, [pc, #24]	; (800b7f8 <prvSwitchTimerLists+0xc4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a04      	ldr	r2, [pc, #16]	; (800b7f4 <prvSwitchTimerLists+0xc0>)
 800b7e4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b7e6:	4a04      	ldr	r2, [pc, #16]	; (800b7f8 <prvSwitchTimerLists+0xc4>)
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	6013      	str	r3, [r2, #0]
    }
 800b7ec:	bf00      	nop
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	2000029c 	.word	0x2000029c
 800b7f8:	200002a0 	.word	0x200002a0

0800b7fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b800:	f000 f962 	bl	800bac8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <prvCheckForValidListAndQueue+0x54>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d11d      	bne.n	800b848 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b80c:	4811      	ldr	r0, [pc, #68]	; (800b854 <prvCheckForValidListAndQueue+0x58>)
 800b80e:	f7fd fd33 	bl	8009278 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b812:	4811      	ldr	r0, [pc, #68]	; (800b858 <prvCheckForValidListAndQueue+0x5c>)
 800b814:	f7fd fd30 	bl	8009278 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b818:	4b10      	ldr	r3, [pc, #64]	; (800b85c <prvCheckForValidListAndQueue+0x60>)
 800b81a:	4a0e      	ldr	r2, [pc, #56]	; (800b854 <prvCheckForValidListAndQueue+0x58>)
 800b81c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b81e:	4b10      	ldr	r3, [pc, #64]	; (800b860 <prvCheckForValidListAndQueue+0x64>)
 800b820:	4a0d      	ldr	r2, [pc, #52]	; (800b858 <prvCheckForValidListAndQueue+0x5c>)
 800b822:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b824:	2200      	movs	r2, #0
 800b826:	210c      	movs	r1, #12
 800b828:	200a      	movs	r0, #10
 800b82a:	f7fd fe41 	bl	80094b0 <xQueueGenericCreate>
 800b82e:	4603      	mov	r3, r0
 800b830:	4a07      	ldr	r2, [pc, #28]	; (800b850 <prvCheckForValidListAndQueue+0x54>)
 800b832:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <prvCheckForValidListAndQueue+0x54>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d005      	beq.n	800b848 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b83c:	4b04      	ldr	r3, [pc, #16]	; (800b850 <prvCheckForValidListAndQueue+0x54>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4908      	ldr	r1, [pc, #32]	; (800b864 <prvCheckForValidListAndQueue+0x68>)
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fcc4 	bl	800a1d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b848:	f000 f96e 	bl	800bb28 <vPortExitCritical>
    }
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200002a4 	.word	0x200002a4
 800b854:	20000274 	.word	0x20000274
 800b858:	20000288 	.word	0x20000288
 800b85c:	2000029c 	.word	0x2000029c
 800b860:	200002a0 	.word	0x200002a0
 800b864:	0800d994 	.word	0x0800d994

0800b868 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3b04      	subs	r3, #4
 800b878:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b880:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3b04      	subs	r3, #4
 800b886:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f023 0201 	bic.w	r2, r3, #1
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3b04      	subs	r3, #4
 800b896:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b898:	4a0c      	ldr	r2, [pc, #48]	; (800b8cc <pxPortInitialiseStack+0x64>)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3b14      	subs	r3, #20
 800b8a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3b04      	subs	r3, #4
 800b8ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f06f 0202 	mvn.w	r2, #2
 800b8b6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	3b20      	subs	r3, #32
 800b8bc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b8be:	68fb      	ldr	r3, [r7, #12]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	0800b8d1 	.word	0x0800b8d1

0800b8d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b8da:	4b12      	ldr	r3, [pc, #72]	; (800b924 <prvTaskExitError+0x54>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e2:	d00a      	beq.n	800b8fa <prvTaskExitError+0x2a>
        __asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	f383 8811 	msr	BASEPRI, r3
 800b8ec:	f3bf 8f6f 	isb	sy
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	60fb      	str	r3, [r7, #12]
    }
 800b8f6:	bf00      	nop
 800b8f8:	e7fe      	b.n	800b8f8 <prvTaskExitError+0x28>
        __asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	60bb      	str	r3, [r7, #8]
    }
 800b90c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b90e:	bf00      	nop
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d0fc      	beq.n	800b910 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b916:	bf00      	nop
 800b918:	bf00      	nop
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20000030 	.word	0x20000030
	...

0800b930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <pxCurrentTCBConst2>)
 800b932:	6819      	ldr	r1, [r3, #0]
 800b934:	6808      	ldr	r0, [r1, #0]
 800b936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	f380 8809 	msr	PSP, r0
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f04f 0000 	mov.w	r0, #0
 800b946:	f380 8811 	msr	BASEPRI, r0
 800b94a:	4770      	bx	lr
 800b94c:	f3af 8000 	nop.w

0800b950 <pxCurrentTCBConst2>:
 800b950:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop

0800b958 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b958:	4808      	ldr	r0, [pc, #32]	; (800b97c <prvPortStartFirstTask+0x24>)
 800b95a:	6800      	ldr	r0, [r0, #0]
 800b95c:	6800      	ldr	r0, [r0, #0]
 800b95e:	f380 8808 	msr	MSP, r0
 800b962:	f04f 0000 	mov.w	r0, #0
 800b966:	f380 8814 	msr	CONTROL, r0
 800b96a:	b662      	cpsie	i
 800b96c:	b661      	cpsie	f
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	df00      	svc	0
 800b978:	bf00      	nop
 800b97a:	0000      	.short	0x0000
 800b97c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop

0800b984 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b98a:	4b46      	ldr	r3, [pc, #280]	; (800baa4 <xPortStartScheduler+0x120>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a46      	ldr	r2, [pc, #280]	; (800baa8 <xPortStartScheduler+0x124>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d10a      	bne.n	800b9aa <xPortStartScheduler+0x26>
        __asm volatile
 800b994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b998:	f383 8811 	msr	BASEPRI, r3
 800b99c:	f3bf 8f6f 	isb	sy
 800b9a0:	f3bf 8f4f 	dsb	sy
 800b9a4:	613b      	str	r3, [r7, #16]
    }
 800b9a6:	bf00      	nop
 800b9a8:	e7fe      	b.n	800b9a8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b9aa:	4b3e      	ldr	r3, [pc, #248]	; (800baa4 <xPortStartScheduler+0x120>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a3f      	ldr	r2, [pc, #252]	; (800baac <xPortStartScheduler+0x128>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d10a      	bne.n	800b9ca <xPortStartScheduler+0x46>
        __asm volatile
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	60fb      	str	r3, [r7, #12]
    }
 800b9c6:	bf00      	nop
 800b9c8:	e7fe      	b.n	800b9c8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b9ca:	4b39      	ldr	r3, [pc, #228]	; (800bab0 <xPortStartScheduler+0x12c>)
 800b9cc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	22ff      	movs	r2, #255	; 0xff
 800b9da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9e4:	78fb      	ldrb	r3, [r7, #3]
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	4b31      	ldr	r3, [pc, #196]	; (800bab4 <xPortStartScheduler+0x130>)
 800b9f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9f2:	4b31      	ldr	r3, [pc, #196]	; (800bab8 <xPortStartScheduler+0x134>)
 800b9f4:	2207      	movs	r2, #7
 800b9f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9f8:	e009      	b.n	800ba0e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800b9fa:	4b2f      	ldr	r3, [pc, #188]	; (800bab8 <xPortStartScheduler+0x134>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	4a2d      	ldr	r2, [pc, #180]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba02:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	005b      	lsls	r3, r3, #1
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba16:	2b80      	cmp	r3, #128	; 0x80
 800ba18:	d0ef      	beq.n	800b9fa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ba1a:	4b27      	ldr	r3, [pc, #156]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f1c3 0307 	rsb	r3, r3, #7
 800ba22:	2b04      	cmp	r3, #4
 800ba24:	d00a      	beq.n	800ba3c <xPortStartScheduler+0xb8>
        __asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
    }
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba3c:	4b1e      	ldr	r3, [pc, #120]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	4a1d      	ldr	r2, [pc, #116]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba44:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba46:	4b1c      	ldr	r3, [pc, #112]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba4e:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <xPortStartScheduler+0x134>)
 800ba50:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ba5a:	4b18      	ldr	r3, [pc, #96]	; (800babc <xPortStartScheduler+0x138>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a17      	ldr	r2, [pc, #92]	; (800babc <xPortStartScheduler+0x138>)
 800ba60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ba66:	4b15      	ldr	r3, [pc, #84]	; (800babc <xPortStartScheduler+0x138>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a14      	ldr	r2, [pc, #80]	; (800babc <xPortStartScheduler+0x138>)
 800ba6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ba72:	f000 f8e3 	bl	800bc3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <xPortStartScheduler+0x13c>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800ba7c:	f000 f902 	bl	800bc84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba80:	4b10      	ldr	r3, [pc, #64]	; (800bac4 <xPortStartScheduler+0x140>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a0f      	ldr	r2, [pc, #60]	; (800bac4 <xPortStartScheduler+0x140>)
 800ba86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800ba8c:	f7ff ff64 	bl	800b958 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ba90:	f7fe ff7c 	bl	800a98c <vTaskSwitchContext>
    prvTaskExitError();
 800ba94:	f7ff ff1c 	bl	800b8d0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3718      	adds	r7, #24
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	e000ed00 	.word	0xe000ed00
 800baa8:	410fc271 	.word	0x410fc271
 800baac:	410fc270 	.word	0x410fc270
 800bab0:	e000e400 	.word	0xe000e400
 800bab4:	200002b0 	.word	0x200002b0
 800bab8:	200002b4 	.word	0x200002b4
 800babc:	e000ed20 	.word	0xe000ed20
 800bac0:	20000030 	.word	0x20000030
 800bac4:	e000ef34 	.word	0xe000ef34

0800bac8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
        __asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	607b      	str	r3, [r7, #4]
    }
 800bae0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800bae2:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <vPortEnterCritical+0x58>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3301      	adds	r3, #1
 800bae8:	4a0d      	ldr	r2, [pc, #52]	; (800bb20 <vPortEnterCritical+0x58>)
 800baea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800baec:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <vPortEnterCritical+0x58>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d10f      	bne.n	800bb14 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800baf4:	4b0b      	ldr	r3, [pc, #44]	; (800bb24 <vPortEnterCritical+0x5c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <vPortEnterCritical+0x4c>
        __asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	603b      	str	r3, [r7, #0]
    }
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <vPortEnterCritical+0x4a>
    }
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr
 800bb20:	20000030 	.word	0x20000030
 800bb24:	e000ed04 	.word	0xe000ed04

0800bb28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <vPortExitCritical+0x50>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10a      	bne.n	800bb4c <vPortExitCritical+0x24>
        __asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	607b      	str	r3, [r7, #4]
    }
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800bb4c:	4b0a      	ldr	r3, [pc, #40]	; (800bb78 <vPortExitCritical+0x50>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	4a09      	ldr	r2, [pc, #36]	; (800bb78 <vPortExitCritical+0x50>)
 800bb54:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800bb56:	4b08      	ldr	r3, [pc, #32]	; (800bb78 <vPortExitCritical+0x50>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <vPortExitCritical+0x42>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	f383 8811 	msr	BASEPRI, r3
    }
 800bb68:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bb6a:	bf00      	nop
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20000030 	.word	0x20000030
 800bb7c:	00000000 	.word	0x00000000

0800bb80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bb80:	f3ef 8009 	mrs	r0, PSP
 800bb84:	f3bf 8f6f 	isb	sy
 800bb88:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <pxCurrentTCBConst>)
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	f01e 0f10 	tst.w	lr, #16
 800bb90:	bf08      	it	eq
 800bb92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb9a:	6010      	str	r0, [r2, #0]
 800bb9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bba4:	f380 8811 	msr	BASEPRI, r0
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	f3bf 8f6f 	isb	sy
 800bbb0:	f7fe feec 	bl	800a98c <vTaskSwitchContext>
 800bbb4:	f04f 0000 	mov.w	r0, #0
 800bbb8:	f380 8811 	msr	BASEPRI, r0
 800bbbc:	bc09      	pop	{r0, r3}
 800bbbe:	6819      	ldr	r1, [r3, #0]
 800bbc0:	6808      	ldr	r0, [r1, #0]
 800bbc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc6:	f01e 0f10 	tst.w	lr, #16
 800bbca:	bf08      	it	eq
 800bbcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bbd0:	f380 8809 	msr	PSP, r0
 800bbd4:	f3bf 8f6f 	isb	sy
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	f3af 8000 	nop.w

0800bbe0 <pxCurrentTCBConst>:
 800bbe0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bbe4:	bf00      	nop
 800bbe6:	bf00      	nop

0800bbe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
        __asm volatile
 800bbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf2:	f383 8811 	msr	BASEPRI, r3
 800bbf6:	f3bf 8f6f 	isb	sy
 800bbfa:	f3bf 8f4f 	dsb	sy
 800bbfe:	607b      	str	r3, [r7, #4]
    }
 800bc00:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800bc02:	f001 fa75 	bl	800d0f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bc06:	f7fe fe05 	bl	800a814 <xTaskIncrementTick>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d006      	beq.n	800bc1e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800bc10:	f001 facc 	bl	800d1ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc14:	4b08      	ldr	r3, [pc, #32]	; (800bc38 <SysTick_Handler+0x50>)
 800bc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1a:	601a      	str	r2, [r3, #0]
 800bc1c:	e001      	b.n	800bc22 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800bc1e:	f001 faa9 	bl	800d174 <SEGGER_SYSVIEW_RecordExitISR>
 800bc22:	2300      	movs	r3, #0
 800bc24:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	f383 8811 	msr	BASEPRI, r3
    }
 800bc2c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <vPortSetupTimerInterrupt+0x38>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	; (800bc78 <vPortSetupTimerInterrupt+0x3c>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a0a      	ldr	r2, [pc, #40]	; (800bc7c <vPortSetupTimerInterrupt+0x40>)
 800bc52:	fba2 2303 	umull	r2, r3, r2, r3
 800bc56:	099b      	lsrs	r3, r3, #6
 800bc58:	4a09      	ldr	r2, [pc, #36]	; (800bc80 <vPortSetupTimerInterrupt+0x44>)
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc5e:	4b04      	ldr	r3, [pc, #16]	; (800bc70 <vPortSetupTimerInterrupt+0x34>)
 800bc60:	2207      	movs	r2, #7
 800bc62:	601a      	str	r2, [r3, #0]
}
 800bc64:	bf00      	nop
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	e000e010 	.word	0xe000e010
 800bc74:	e000e018 	.word	0xe000e018
 800bc78:	20000000 	.word	0x20000000
 800bc7c:	10624dd3 	.word	0x10624dd3
 800bc80:	e000e014 	.word	0xe000e014

0800bc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bc84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc94 <vPortEnableVFP+0x10>
 800bc88:	6801      	ldr	r1, [r0, #0]
 800bc8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc8e:	6001      	str	r1, [r0, #0]
 800bc90:	4770      	bx	lr
 800bc92:	0000      	.short	0x0000
 800bc94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop

0800bc9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800bca2:	f3ef 8305 	mrs	r3, IPSR
 800bca6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b0f      	cmp	r3, #15
 800bcac:	d914      	bls.n	800bcd8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bcae:	4a17      	ldr	r2, [pc, #92]	; (800bd0c <vPortValidateInterruptPriority+0x70>)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	4413      	add	r3, r2
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bcb8:	4b15      	ldr	r3, [pc, #84]	; (800bd10 <vPortValidateInterruptPriority+0x74>)
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	7afa      	ldrb	r2, [r7, #11]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d20a      	bcs.n	800bcd8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800bcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc6:	f383 8811 	msr	BASEPRI, r3
 800bcca:	f3bf 8f6f 	isb	sy
 800bcce:	f3bf 8f4f 	dsb	sy
 800bcd2:	607b      	str	r3, [r7, #4]
    }
 800bcd4:	bf00      	nop
 800bcd6:	e7fe      	b.n	800bcd6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bcd8:	4b0e      	ldr	r3, [pc, #56]	; (800bd14 <vPortValidateInterruptPriority+0x78>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bce0:	4b0d      	ldr	r3, [pc, #52]	; (800bd18 <vPortValidateInterruptPriority+0x7c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d90a      	bls.n	800bcfe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	603b      	str	r3, [r7, #0]
    }
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <vPortValidateInterruptPriority+0x60>
    }
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	e000e3f0 	.word	0xe000e3f0
 800bd10:	200002b0 	.word	0x200002b0
 800bd14:	e000ed0c 	.word	0xe000ed0c
 800bd18:	200002b4 	.word	0x200002b4

0800bd1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b08a      	sub	sp, #40	; 0x28
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800bd28:	f7fe fcb6 	bl	800a698 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800bd2c:	4b65      	ldr	r3, [pc, #404]	; (800bec4 <pvPortMalloc+0x1a8>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800bd34:	f000 f934 	bl	800bfa0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bd38:	4b63      	ldr	r3, [pc, #396]	; (800bec8 <pvPortMalloc+0x1ac>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4013      	ands	r3, r2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f040 80a7 	bne.w	800be94 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d02d      	beq.n	800bda8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800bd4c:	2208      	movs	r2, #8
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d227      	bcs.n	800bda8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800bd58:	2208      	movs	r2, #8
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f003 0307 	and.w	r3, r3, #7
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d021      	beq.n	800bdae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f023 0307 	bic.w	r3, r3, #7
 800bd70:	3308      	adds	r3, #8
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d214      	bcs.n	800bda2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f023 0307 	bic.w	r3, r3, #7
 800bd7e:	3308      	adds	r3, #8
 800bd80:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f003 0307 	and.w	r3, r3, #7
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d010      	beq.n	800bdae <pvPortMalloc+0x92>
        __asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	617b      	str	r3, [r7, #20]
    }
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bda6:	e002      	b.n	800bdae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	607b      	str	r3, [r7, #4]
 800bdac:	e000      	b.n	800bdb0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d06e      	beq.n	800be94 <pvPortMalloc+0x178>
 800bdb6:	4b45      	ldr	r3, [pc, #276]	; (800becc <pvPortMalloc+0x1b0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d869      	bhi.n	800be94 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800bdc0:	4b43      	ldr	r3, [pc, #268]	; (800bed0 <pvPortMalloc+0x1b4>)
 800bdc2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800bdc4:	4b42      	ldr	r3, [pc, #264]	; (800bed0 <pvPortMalloc+0x1b4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdca:	e004      	b.n	800bdd6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d903      	bls.n	800bde8 <pvPortMalloc+0xcc>
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1f1      	bne.n	800bdcc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800bde8:	4b36      	ldr	r3, [pc, #216]	; (800bec4 <pvPortMalloc+0x1a8>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d050      	beq.n	800be94 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2208      	movs	r2, #8
 800bdf8:	4413      	add	r3, r2
 800bdfa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	1ad2      	subs	r2, r2, r3
 800be0c:	2308      	movs	r3, #8
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	429a      	cmp	r2, r3
 800be12:	d91f      	bls.n	800be54 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4413      	add	r3, r2
 800be1a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f003 0307 	and.w	r3, r3, #7
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00a      	beq.n	800be3c <pvPortMalloc+0x120>
        __asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	613b      	str	r3, [r7, #16]
    }
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800be3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	1ad2      	subs	r2, r2, r3
 800be44:	69bb      	ldr	r3, [r7, #24]
 800be46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800be48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800be4e:	69b8      	ldr	r0, [r7, #24]
 800be50:	f000 f908 	bl	800c064 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800be54:	4b1d      	ldr	r3, [pc, #116]	; (800becc <pvPortMalloc+0x1b0>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	4a1b      	ldr	r2, [pc, #108]	; (800becc <pvPortMalloc+0x1b0>)
 800be60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800be62:	4b1a      	ldr	r3, [pc, #104]	; (800becc <pvPortMalloc+0x1b0>)
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	4b1b      	ldr	r3, [pc, #108]	; (800bed4 <pvPortMalloc+0x1b8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d203      	bcs.n	800be76 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be6e:	4b17      	ldr	r3, [pc, #92]	; (800becc <pvPortMalloc+0x1b0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a18      	ldr	r2, [pc, #96]	; (800bed4 <pvPortMalloc+0x1b8>)
 800be74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <pvPortMalloc+0x1ac>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	431a      	orrs	r2, r3
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	2200      	movs	r2, #0
 800be88:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800be8a:	4b13      	ldr	r3, [pc, #76]	; (800bed8 <pvPortMalloc+0x1bc>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	3301      	adds	r3, #1
 800be90:	4a11      	ldr	r2, [pc, #68]	; (800bed8 <pvPortMalloc+0x1bc>)
 800be92:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800be94:	f7fe fc0e 	bl	800a6b4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <pvPortMalloc+0x19c>
        __asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	60fb      	str	r3, [r7, #12]
    }
 800beb4:	bf00      	nop
 800beb6:	e7fe      	b.n	800beb6 <pvPortMalloc+0x19a>
    return pvReturn;
 800beb8:	69fb      	ldr	r3, [r7, #28]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3728      	adds	r7, #40	; 0x28
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
 800bec2:	bf00      	nop
 800bec4:	20012ec0 	.word	0x20012ec0
 800bec8:	20012ed4 	.word	0x20012ed4
 800becc:	20012ec4 	.word	0x20012ec4
 800bed0:	20012eb8 	.word	0x20012eb8
 800bed4:	20012ec8 	.word	0x20012ec8
 800bed8:	20012ecc 	.word	0x20012ecc

0800bedc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d04d      	beq.n	800bf8a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800beee:	2308      	movs	r3, #8
 800bef0:	425b      	negs	r3, r3
 800bef2:	697a      	ldr	r2, [r7, #20]
 800bef4:	4413      	add	r3, r2
 800bef6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	4b24      	ldr	r3, [pc, #144]	; (800bf94 <vPortFree+0xb8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4013      	ands	r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10a      	bne.n	800bf20 <vPortFree+0x44>
        __asm volatile
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60fb      	str	r3, [r7, #12]
    }
 800bf1c:	bf00      	nop
 800bf1e:	e7fe      	b.n	800bf1e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00a      	beq.n	800bf3e <vPortFree+0x62>
        __asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	60bb      	str	r3, [r7, #8]
    }
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	4b14      	ldr	r3, [pc, #80]	; (800bf94 <vPortFree+0xb8>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4013      	ands	r3, r2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d01e      	beq.n	800bf8a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d11a      	bne.n	800bf8a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	685a      	ldr	r2, [r3, #4]
 800bf58:	4b0e      	ldr	r3, [pc, #56]	; (800bf94 <vPortFree+0xb8>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	43db      	mvns	r3, r3
 800bf5e:	401a      	ands	r2, r3
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800bf64:	f7fe fb98 	bl	800a698 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <vPortFree+0xbc>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4413      	add	r3, r2
 800bf72:	4a09      	ldr	r2, [pc, #36]	; (800bf98 <vPortFree+0xbc>)
 800bf74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf76:	6938      	ldr	r0, [r7, #16]
 800bf78:	f000 f874 	bl	800c064 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bf7c:	4b07      	ldr	r3, [pc, #28]	; (800bf9c <vPortFree+0xc0>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3301      	adds	r3, #1
 800bf82:	4a06      	ldr	r2, [pc, #24]	; (800bf9c <vPortFree+0xc0>)
 800bf84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800bf86:	f7fe fb95 	bl	800a6b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800bf8a:	bf00      	nop
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	20012ed4 	.word	0x20012ed4
 800bf98:	20012ec4 	.word	0x20012ec4
 800bf9c:	20012ed0 	.word	0x20012ed0

0800bfa0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bfa6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800bfaa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800bfac:	4b27      	ldr	r3, [pc, #156]	; (800c04c <prvHeapInit+0xac>)
 800bfae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00c      	beq.n	800bfd4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	3307      	adds	r3, #7
 800bfbe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f023 0307 	bic.w	r3, r3, #7
 800bfc6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	4a1f      	ldr	r2, [pc, #124]	; (800c04c <prvHeapInit+0xac>)
 800bfd0:	4413      	add	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bfd8:	4a1d      	ldr	r2, [pc, #116]	; (800c050 <prvHeapInit+0xb0>)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800bfde:	4b1c      	ldr	r3, [pc, #112]	; (800c050 <prvHeapInit+0xb0>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68ba      	ldr	r2, [r7, #8]
 800bfe8:	4413      	add	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800bfec:	2208      	movs	r2, #8
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	1a9b      	subs	r3, r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f023 0307 	bic.w	r3, r3, #7
 800bffa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4a15      	ldr	r2, [pc, #84]	; (800c054 <prvHeapInit+0xb4>)
 800c000:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <prvHeapInit+0xb4>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2200      	movs	r2, #0
 800c008:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c00a:	4b12      	ldr	r3, [pc, #72]	; (800c054 <prvHeapInit+0xb4>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2200      	movs	r2, #0
 800c010:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	1ad2      	subs	r2, r2, r3
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c020:	4b0c      	ldr	r3, [pc, #48]	; (800c054 <prvHeapInit+0xb4>)
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <prvHeapInit+0xb8>)
 800c02e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	4a09      	ldr	r2, [pc, #36]	; (800c05c <prvHeapInit+0xbc>)
 800c036:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c038:	4b09      	ldr	r3, [pc, #36]	; (800c060 <prvHeapInit+0xc0>)
 800c03a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c03e:	601a      	str	r2, [r3, #0]
}
 800c040:	bf00      	nop
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr
 800c04c:	200002b8 	.word	0x200002b8
 800c050:	20012eb8 	.word	0x20012eb8
 800c054:	20012ec0 	.word	0x20012ec0
 800c058:	20012ec8 	.word	0x20012ec8
 800c05c:	20012ec4 	.word	0x20012ec4
 800c060:	20012ed4 	.word	0x20012ed4

0800c064 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c06c:	4b28      	ldr	r3, [pc, #160]	; (800c110 <prvInsertBlockIntoFreeList+0xac>)
 800c06e:	60fb      	str	r3, [r7, #12]
 800c070:	e002      	b.n	800c078 <prvInsertBlockIntoFreeList+0x14>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60fb      	str	r3, [r7, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d8f7      	bhi.n	800c072 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	4413      	add	r3, r2
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d108      	bne.n	800c0a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	441a      	add	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d118      	bne.n	800c0ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <prvInsertBlockIntoFreeList+0xb0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d00d      	beq.n	800c0e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685a      	ldr	r2, [r3, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	441a      	add	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	e008      	b.n	800c0f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c0e2:	4b0c      	ldr	r3, [pc, #48]	; (800c114 <prvInsertBlockIntoFreeList+0xb0>)
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	e003      	b.n	800c0f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c0f4:	68fa      	ldr	r2, [r7, #12]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d002      	beq.n	800c102 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	20012eb8 	.word	0x20012eb8
 800c114:	20012ec0 	.word	0x20012ec0

0800c118 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af02      	add	r7, sp, #8
 800c11e:	60f8      	str	r0, [r7, #12]
 800c120:	60b9      	str	r1, [r7, #8]
 800c122:	607a      	str	r2, [r7, #4]
 800c124:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c126:	2205      	movs	r2, #5
 800c128:	492b      	ldr	r1, [pc, #172]	; (800c1d8 <SYSVIEW_AddTask+0xc0>)
 800c12a:	68b8      	ldr	r0, [r7, #8]
 800c12c:	f001 fb1e 	bl	800d76c <memcmp>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d04b      	beq.n	800c1ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c136:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b07      	cmp	r3, #7
 800c13c:	d903      	bls.n	800c146 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c13e:	4828      	ldr	r0, [pc, #160]	; (800c1e0 <SYSVIEW_AddTask+0xc8>)
 800c140:	f001 fa7e 	bl	800d640 <SEGGER_SYSVIEW_Warn>
    return;
 800c144:	e044      	b.n	800c1d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c146:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	4926      	ldr	r1, [pc, #152]	; (800c1e4 <SYSVIEW_AddTask+0xcc>)
 800c14c:	4613      	mov	r3, r2
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	4413      	add	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	440b      	add	r3, r1
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c15a:	4b20      	ldr	r3, [pc, #128]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4921      	ldr	r1, [pc, #132]	; (800c1e4 <SYSVIEW_AddTask+0xcc>)
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	440b      	add	r3, r1
 800c16a:	3304      	adds	r3, #4
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c170:	4b1a      	ldr	r3, [pc, #104]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	491b      	ldr	r1, [pc, #108]	; (800c1e4 <SYSVIEW_AddTask+0xcc>)
 800c176:	4613      	mov	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	440b      	add	r3, r1
 800c180:	3308      	adds	r3, #8
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c186:	4b15      	ldr	r3, [pc, #84]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	4916      	ldr	r1, [pc, #88]	; (800c1e4 <SYSVIEW_AddTask+0xcc>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	4413      	add	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	440b      	add	r3, r1
 800c196:	330c      	adds	r3, #12
 800c198:	683a      	ldr	r2, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	4910      	ldr	r1, [pc, #64]	; (800c1e4 <SYSVIEW_AddTask+0xcc>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3310      	adds	r3, #16
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c1b2:	4b0a      	ldr	r3, [pc, #40]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	4a08      	ldr	r2, [pc, #32]	; (800c1dc <SYSVIEW_AddTask+0xc4>)
 800c1ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	68b9      	ldr	r1, [r7, #8]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	f000 f80e 	bl	800c1e8 <SYSVIEW_SendTaskInfo>
 800c1cc:	e000      	b.n	800c1d0 <SYSVIEW_AddTask+0xb8>
    return;
 800c1ce:	bf00      	nop

}
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	0800d99c 	.word	0x0800d99c
 800c1dc:	20012f78 	.word	0x20012f78
 800c1e0:	0800d9a4 	.word	0x0800d9a4
 800c1e4:	20012ed8 	.word	0x20012ed8

0800c1e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b08a      	sub	sp, #40	; 0x28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c1f6:	f107 0314 	add.w	r3, r7, #20
 800c1fa:	2214      	movs	r2, #20
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f001 fad0 	bl	800d7a4 <memset>
  TaskInfo.TaskID     = TaskID;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fe3d 	bl	800ce9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c222:	bf00      	nop
 800c224:	3728      	adds	r7, #40	; 0x28
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
	...

0800c22c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c232:	4b24      	ldr	r3, [pc, #144]	; (800c2c4 <_DoInit+0x98>)
 800c234:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2203      	movs	r2, #3
 800c23a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2203      	movs	r2, #3
 800c240:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a20      	ldr	r2, [pc, #128]	; (800c2c8 <_DoInit+0x9c>)
 800c246:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a20      	ldr	r2, [pc, #128]	; (800c2cc <_DoInit+0xa0>)
 800c24c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c254:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a17      	ldr	r2, [pc, #92]	; (800c2c8 <_DoInit+0x9c>)
 800c26c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a17      	ldr	r2, [pc, #92]	; (800c2d0 <_DoInit+0xa4>)
 800c272:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2210      	movs	r2, #16
 800c278:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3307      	adds	r3, #7
 800c290:	4a10      	ldr	r2, [pc, #64]	; (800c2d4 <_DoInit+0xa8>)
 800c292:	6810      	ldr	r0, [r2, #0]
 800c294:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c296:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a0e      	ldr	r2, [pc, #56]	; (800c2d8 <_DoInit+0xac>)
 800c29e:	6810      	ldr	r0, [r2, #0]
 800c2a0:	6018      	str	r0, [r3, #0]
 800c2a2:	8891      	ldrh	r1, [r2, #4]
 800c2a4:	7992      	ldrb	r2, [r2, #6]
 800c2a6:	8099      	strh	r1, [r3, #4]
 800c2a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c2aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800c2b4:	f3bf 8f5f 	dmb	sy
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20013d48 	.word	0x20013d48
 800c2c8:	0800d9f4 	.word	0x0800d9f4
 800c2cc:	20012f7c 	.word	0x20012f7c
 800c2d0:	2001337c 	.word	0x2001337c
 800c2d4:	0800da00 	.word	0x0800da00
 800c2d8:	0800da04 	.word	0x0800da04

0800c2dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08c      	sub	sp, #48	; 0x30
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c2e8:	4b3e      	ldr	r3, [pc, #248]	; (800c3e4 <SEGGER_RTT_ReadNoLock+0x108>)
 800c2ea:	623b      	str	r3, [r7, #32]
 800c2ec:	6a3b      	ldr	r3, [r7, #32]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <SEGGER_RTT_ReadNoLock+0x1e>
 800c2f6:	f7ff ff99 	bl	800c22c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	00db      	lsls	r3, r3, #3
 800c304:	3360      	adds	r3, #96	; 0x60
 800c306:	4a37      	ldr	r2, [pc, #220]	; (800c3e4 <SEGGER_RTT_ReadNoLock+0x108>)
 800c308:	4413      	add	r3, r2
 800c30a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800c310:	69fb      	ldr	r3, [r7, #28]
 800c312:	691b      	ldr	r3, [r3, #16]
 800c314:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800c316:	69fb      	ldr	r3, [r7, #28]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c31c:	2300      	movs	r3, #0
 800c31e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	429a      	cmp	r2, r3
 800c326:	d92b      	bls.n	800c380 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	689a      	ldr	r2, [r3, #8]
 800c32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4293      	cmp	r3, r2
 800c338:	bf28      	it	cs
 800c33a:	4613      	movcs	r3, r2
 800c33c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	4413      	add	r3, r2
 800c346:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c348:	697a      	ldr	r2, [r7, #20]
 800c34a:	6939      	ldr	r1, [r7, #16]
 800c34c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c34e:	f001 fa1b 	bl	800d788 <memcpy>
    NumBytesRead += NumBytesRem;
 800c352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	4413      	add	r3, r2
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	4413      	add	r3, r2
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	4413      	add	r3, r2
 800c370:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c378:	429a      	cmp	r2, r3
 800c37a:	d101      	bne.n	800c380 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c37c:	2300      	movs	r3, #0
 800c37e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4293      	cmp	r3, r2
 800c38e:	bf28      	it	cs
 800c390:	4613      	movcs	r3, r2
 800c392:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d019      	beq.n	800c3ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	4413      	add	r3, r2
 800c3a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c3a4:	697a      	ldr	r2, [r7, #20]
 800c3a6:	6939      	ldr	r1, [r7, #16]
 800c3a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3aa:	f001 f9ed 	bl	800d788 <memcpy>
    NumBytesRead += NumBytesRem;
 800c3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800c3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c3c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3730      	adds	r7, #48	; 0x30
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	20013d48 	.word	0x20013d48

0800c3e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c3f8:	e002      	b.n	800c400 <_EncodeStr+0x18>
    Len++;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800c400:	68ba      	ldr	r2, [r7, #8]
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	4413      	add	r3, r2
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1f6      	bne.n	800c3fa <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800c40c:	693a      	ldr	r2, [r7, #16]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	429a      	cmp	r2, r3
 800c412:	d901      	bls.n	800c418 <_EncodeStr+0x30>
    Len = Limit;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	2bfe      	cmp	r3, #254	; 0xfe
 800c41c:	d806      	bhi.n	800c42c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1c5a      	adds	r2, r3, #1
 800c422:	60fa      	str	r2, [r7, #12]
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	b2d2      	uxtb	r2, r2
 800c428:	701a      	strb	r2, [r3, #0]
 800c42a:	e011      	b.n	800c450 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	60fa      	str	r2, [r7, #12]
 800c432:	22ff      	movs	r2, #255	; 0xff
 800c434:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	60fa      	str	r2, [r7, #12]
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	0a19      	lsrs	r1, r3, #8
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	1c5a      	adds	r2, r3, #1
 800c44a:	60fa      	str	r2, [r7, #12]
 800c44c:	b2ca      	uxtb	r2, r1
 800c44e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c454:	e00a      	b.n	800c46c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	1c53      	adds	r3, r2, #1
 800c45a:	60bb      	str	r3, [r7, #8]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	1c59      	adds	r1, r3, #1
 800c460:	60f9      	str	r1, [r7, #12]
 800c462:	7812      	ldrb	r2, [r2, #0]
 800c464:	701a      	strb	r2, [r3, #0]
    n++;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	3301      	adds	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	429a      	cmp	r2, r3
 800c472:	d3f0      	bcc.n	800c456 <_EncodeStr+0x6e>
  }
  return pPayload;
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	371c      	adds	r7, #28
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c482:	b480      	push	{r7}
 800c484:	b083      	sub	sp, #12
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3304      	adds	r3, #4
}
 800c48e:	4618      	mov	r0, r3
 800c490:	370c      	adds	r7, #12
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr
	...

0800c49c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c4a2:	4b36      	ldr	r3, [pc, #216]	; (800c57c <_HandleIncomingPacket+0xe0>)
 800c4a4:	7e1b      	ldrb	r3, [r3, #24]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	1cfb      	adds	r3, r7, #3
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f7ff ff15 	bl	800c2dc <SEGGER_RTT_ReadNoLock>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd54      	ble.n	800c566 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	2b80      	cmp	r3, #128	; 0x80
 800c4c0:	d032      	beq.n	800c528 <_HandleIncomingPacket+0x8c>
 800c4c2:	2b80      	cmp	r3, #128	; 0x80
 800c4c4:	dc42      	bgt.n	800c54c <_HandleIncomingPacket+0xb0>
 800c4c6:	2b07      	cmp	r3, #7
 800c4c8:	dc16      	bgt.n	800c4f8 <_HandleIncomingPacket+0x5c>
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd3e      	ble.n	800c54c <_HandleIncomingPacket+0xb0>
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	2b06      	cmp	r3, #6
 800c4d2:	d83b      	bhi.n	800c54c <_HandleIncomingPacket+0xb0>
 800c4d4:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <_HandleIncomingPacket+0x40>)
 800c4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4da:	bf00      	nop
 800c4dc:	0800c4ff 	.word	0x0800c4ff
 800c4e0:	0800c505 	.word	0x0800c505
 800c4e4:	0800c50b 	.word	0x0800c50b
 800c4e8:	0800c511 	.word	0x0800c511
 800c4ec:	0800c517 	.word	0x0800c517
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	0800c523 	.word	0x0800c523
 800c4f8:	2b7f      	cmp	r3, #127	; 0x7f
 800c4fa:	d036      	beq.n	800c56a <_HandleIncomingPacket+0xce>
 800c4fc:	e026      	b.n	800c54c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c4fe:	f000 fb53 	bl	800cba8 <SEGGER_SYSVIEW_Start>
      break;
 800c502:	e037      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c504:	f000 fc0a 	bl	800cd1c <SEGGER_SYSVIEW_Stop>
      break;
 800c508:	e034      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c50a:	f000 fdbf 	bl	800d08c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c50e:	e031      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c510:	f000 fda8 	bl	800d064 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c514:	e02e      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c516:	f000 fc27 	bl	800cd68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c51a:	e02b      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c51c:	f001 f852 	bl	800d5c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c520:	e028      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c522:	f001 f831 	bl	800d588 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c526:	e025      	b.n	800c574 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c528:	4b14      	ldr	r3, [pc, #80]	; (800c57c <_HandleIncomingPacket+0xe0>)
 800c52a:	7e1b      	ldrb	r3, [r3, #24]
 800c52c:	4618      	mov	r0, r3
 800c52e:	1cfb      	adds	r3, r7, #3
 800c530:	2201      	movs	r2, #1
 800c532:	4619      	mov	r1, r3
 800c534:	f7ff fed2 	bl	800c2dc <SEGGER_RTT_ReadNoLock>
 800c538:	4603      	mov	r3, r0
 800c53a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dd15      	ble.n	800c56e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c542:	78fb      	ldrb	r3, [r7, #3]
 800c544:	4618      	mov	r0, r3
 800c546:	f000 ff9f 	bl	800d488 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c54a:	e010      	b.n	800c56e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	b25b      	sxtb	r3, r3
 800c550:	2b00      	cmp	r3, #0
 800c552:	da0e      	bge.n	800c572 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c554:	4b09      	ldr	r3, [pc, #36]	; (800c57c <_HandleIncomingPacket+0xe0>)
 800c556:	7e1b      	ldrb	r3, [r3, #24]
 800c558:	4618      	mov	r0, r3
 800c55a:	1cfb      	adds	r3, r7, #3
 800c55c:	2201      	movs	r2, #1
 800c55e:	4619      	mov	r1, r3
 800c560:	f7ff febc 	bl	800c2dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c564:	e005      	b.n	800c572 <_HandleIncomingPacket+0xd6>
    }
  }
 800c566:	bf00      	nop
 800c568:	e004      	b.n	800c574 <_HandleIncomingPacket+0xd8>
      break;
 800c56a:	bf00      	nop
 800c56c:	e002      	b.n	800c574 <_HandleIncomingPacket+0xd8>
      break;
 800c56e:	bf00      	nop
 800c570:	e000      	b.n	800c574 <_HandleIncomingPacket+0xd8>
      break;
 800c572:	bf00      	nop
}
 800c574:	bf00      	nop
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	2001338c 	.word	0x2001338c

0800c580 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	; 0x30
 800c584:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c586:	2301      	movs	r3, #1
 800c588:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c58a:	1d3b      	adds	r3, r7, #4
 800c58c:	3301      	adds	r3, #1
 800c58e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c594:	4b31      	ldr	r3, [pc, #196]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	62bb      	str	r3, [r7, #40]	; 0x28
 800c59a:	e00b      	b.n	800c5b4 <_TrySendOverflowPacket+0x34>
 800c59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a2:	1c59      	adds	r1, r3, #1
 800c5a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c5a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5aa:	b2d2      	uxtb	r2, r2
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	09db      	lsrs	r3, r3, #7
 800c5b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	2b7f      	cmp	r3, #127	; 0x7f
 800c5b8:	d8f0      	bhi.n	800c59c <_TrySendOverflowPacket+0x1c>
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c2:	b2d2      	uxtb	r2, r2
 800c5c4:	701a      	strb	r2, [r3, #0]
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c5ca:	4b25      	ldr	r3, [pc, #148]	; (800c660 <_TrySendOverflowPacket+0xe0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c5d0:	4b22      	ldr	r3, [pc, #136]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	623b      	str	r3, [r7, #32]
 800c5e2:	e00b      	b.n	800c5fc <_TrySendOverflowPacket+0x7c>
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	1c59      	adds	r1, r3, #1
 800c5ec:	6279      	str	r1, [r7, #36]	; 0x24
 800c5ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	701a      	strb	r2, [r3, #0]
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	09db      	lsrs	r3, r3, #7
 800c5fa:	623b      	str	r3, [r7, #32]
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	2b7f      	cmp	r3, #127	; 0x7f
 800c600:	d8f0      	bhi.n	800c5e4 <_TrySendOverflowPacket+0x64>
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	627a      	str	r2, [r7, #36]	; 0x24
 800c608:	6a3a      	ldr	r2, [r7, #32]
 800c60a:	b2d2      	uxtb	r2, r2
 800c60c:	701a      	strb	r2, [r3, #0]
 800c60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c610:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800c612:	4b12      	ldr	r3, [pc, #72]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c614:	785b      	ldrb	r3, [r3, #1]
 800c616:	4618      	mov	r0, r3
 800c618:	1d3b      	adds	r3, r7, #4
 800c61a:	69fa      	ldr	r2, [r7, #28]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	461a      	mov	r2, r3
 800c620:	1d3b      	adds	r3, r7, #4
 800c622:	4619      	mov	r1, r3
 800c624:	f7f3 fdd4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c628:	4603      	mov	r3, r0
 800c62a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d009      	beq.n	800c646 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c632:	4a0a      	ldr	r2, [pc, #40]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c634:	69bb      	ldr	r3, [r7, #24]
 800c636:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c638:	4b08      	ldr	r3, [pc, #32]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	4b06      	ldr	r3, [pc, #24]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c642:	701a      	strb	r2, [r3, #0]
 800c644:	e004      	b.n	800c650 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c648:	695b      	ldr	r3, [r3, #20]
 800c64a:	3301      	adds	r3, #1
 800c64c:	4a03      	ldr	r2, [pc, #12]	; (800c65c <_TrySendOverflowPacket+0xdc>)
 800c64e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c650:	693b      	ldr	r3, [r7, #16]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3730      	adds	r7, #48	; 0x30
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	2001338c 	.word	0x2001338c
 800c660:	e0001004 	.word	0xe0001004

0800c664 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	; 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c670:	4b6c      	ldr	r3, [pc, #432]	; (800c824 <_SendPacket+0x1c0>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b01      	cmp	r3, #1
 800c676:	d010      	beq.n	800c69a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c678:	4b6a      	ldr	r3, [pc, #424]	; (800c824 <_SendPacket+0x1c0>)
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	f000 80a3 	beq.w	800c7c8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c682:	4b68      	ldr	r3, [pc, #416]	; (800c824 <_SendPacket+0x1c0>)
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2b02      	cmp	r3, #2
 800c688:	d109      	bne.n	800c69e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c68a:	f7ff ff79 	bl	800c580 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c68e:	4b65      	ldr	r3, [pc, #404]	; (800c824 <_SendPacket+0x1c0>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	2b01      	cmp	r3, #1
 800c694:	f040 809a 	bne.w	800c7cc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800c698:	e001      	b.n	800c69e <_SendPacket+0x3a>
    goto Send;
 800c69a:	bf00      	nop
 800c69c:	e000      	b.n	800c6a0 <_SendPacket+0x3c>
Send:
 800c69e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b1f      	cmp	r3, #31
 800c6a4:	d809      	bhi.n	800c6ba <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c6a6:	4b5f      	ldr	r3, [pc, #380]	; (800c824 <_SendPacket+0x1c0>)
 800c6a8:	69da      	ldr	r2, [r3, #28]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f040 808b 	bne.w	800c7d0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b17      	cmp	r3, #23
 800c6be:	d807      	bhi.n	800c6d0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e03d      	b.n	800c74c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800c6d0:	68ba      	ldr	r2, [r7, #8]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	2b7f      	cmp	r3, #127	; 0x7f
 800c6dc:	d912      	bls.n	800c704 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	09da      	lsrs	r2, r3, #7
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	60fb      	str	r3, [r7, #12]
 800c6e8:	b2d2      	uxtb	r2, r2
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	3a01      	subs	r2, #1
 800c6f6:	60fa      	str	r2, [r7, #12]
 800c6f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	701a      	strb	r2, [r3, #0]
 800c702:	e006      	b.n	800c712 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	3b01      	subs	r3, #1
 800c708:	60fb      	str	r3, [r7, #12]
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	b2da      	uxtb	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b7f      	cmp	r3, #127	; 0x7f
 800c716:	d912      	bls.n	800c73e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	09da      	lsrs	r2, r3, #7
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	3b01      	subs	r3, #1
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	b2d2      	uxtb	r2, r2
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	3a01      	subs	r2, #1
 800c730:	60fa      	str	r2, [r7, #12]
 800c732:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c736:	b2da      	uxtb	r2, r3
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	701a      	strb	r2, [r3, #0]
 800c73c:	e006      	b.n	800c74c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3b01      	subs	r3, #1
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	b2da      	uxtb	r2, r3
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c74c:	4b36      	ldr	r3, [pc, #216]	; (800c828 <_SendPacket+0x1c4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c752:	4b34      	ldr	r3, [pc, #208]	; (800c824 <_SendPacket+0x1c0>)
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	627b      	str	r3, [r7, #36]	; 0x24
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	623b      	str	r3, [r7, #32]
 800c764:	e00b      	b.n	800c77e <_SendPacket+0x11a>
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76c:	1c59      	adds	r1, r3, #1
 800c76e:	6279      	str	r1, [r7, #36]	; 0x24
 800c770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c774:	b2d2      	uxtb	r2, r2
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	09db      	lsrs	r3, r3, #7
 800c77c:	623b      	str	r3, [r7, #32]
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	2b7f      	cmp	r3, #127	; 0x7f
 800c782:	d8f0      	bhi.n	800c766 <_SendPacket+0x102>
 800c784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	627a      	str	r2, [r7, #36]	; 0x24
 800c78a:	6a3a      	ldr	r2, [r7, #32]
 800c78c:	b2d2      	uxtb	r2, r2
 800c78e:	701a      	strb	r2, [r3, #0]
 800c790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c792:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800c794:	4b23      	ldr	r3, [pc, #140]	; (800c824 <_SendPacket+0x1c0>)
 800c796:	785b      	ldrb	r3, [r3, #1]
 800c798:	4618      	mov	r0, r3
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	68f9      	ldr	r1, [r7, #12]
 800c7a4:	f7f3 fd14 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c7b2:	4a1c      	ldr	r2, [pc, #112]	; (800c824 <_SendPacket+0x1c0>)
 800c7b4:	69bb      	ldr	r3, [r7, #24]
 800c7b6:	60d3      	str	r3, [r2, #12]
 800c7b8:	e00b      	b.n	800c7d2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <_SendPacket+0x1c0>)
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	4b18      	ldr	r3, [pc, #96]	; (800c824 <_SendPacket+0x1c0>)
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	e004      	b.n	800c7d2 <_SendPacket+0x16e>
    goto SendDone;
 800c7c8:	bf00      	nop
 800c7ca:	e002      	b.n	800c7d2 <_SendPacket+0x16e>
      goto SendDone;
 800c7cc:	bf00      	nop
 800c7ce:	e000      	b.n	800c7d2 <_SendPacket+0x16e>
      goto SendDone;
 800c7d0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c7d2:	4b14      	ldr	r3, [pc, #80]	; (800c824 <_SendPacket+0x1c0>)
 800c7d4:	7e1b      	ldrb	r3, [r3, #24]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4a14      	ldr	r2, [pc, #80]	; (800c82c <_SendPacket+0x1c8>)
 800c7da:	460b      	mov	r3, r1
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	440b      	add	r3, r1
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	4413      	add	r3, r2
 800c7e4:	336c      	adds	r3, #108	; 0x6c
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	4b0e      	ldr	r3, [pc, #56]	; (800c824 <_SendPacket+0x1c0>)
 800c7ea:	7e1b      	ldrb	r3, [r3, #24]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	490f      	ldr	r1, [pc, #60]	; (800c82c <_SendPacket+0x1c8>)
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	4403      	add	r3, r0
 800c7f6:	00db      	lsls	r3, r3, #3
 800c7f8:	440b      	add	r3, r1
 800c7fa:	3370      	adds	r3, #112	; 0x70
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d00b      	beq.n	800c81a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c802:	4b08      	ldr	r3, [pc, #32]	; (800c824 <_SendPacket+0x1c0>)
 800c804:	789b      	ldrb	r3, [r3, #2]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d107      	bne.n	800c81a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c80a:	4b06      	ldr	r3, [pc, #24]	; (800c824 <_SendPacket+0x1c0>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c810:	f7ff fe44 	bl	800c49c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c814:	4b03      	ldr	r3, [pc, #12]	; (800c824 <_SendPacket+0x1c0>)
 800c816:	2200      	movs	r2, #0
 800c818:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c81a:	bf00      	nop
 800c81c:	3728      	adds	r7, #40	; 0x28
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	2001338c 	.word	0x2001338c
 800c828:	e0001004 	.word	0xe0001004
 800c82c:	20013d48 	.word	0x20013d48

0800c830 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c838:	f3ef 8311 	mrs	r3, BASEPRI
 800c83c:	f04f 0120 	mov.w	r1, #32
 800c840:	f381 8811 	msr	BASEPRI, r1
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	4808      	ldr	r0, [pc, #32]	; (800c868 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c848:	f7ff fe1b 	bl	800c482 <_PreparePacket>
 800c84c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	68b8      	ldr	r0, [r7, #8]
 800c854:	f7ff ff06 	bl	800c664 <_SendPacket>
  RECORD_END();
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f383 8811 	msr	BASEPRI, r3
}
 800c85e:	bf00      	nop
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	200133bc 	.word	0x200133bc

0800c86c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c876:	f3ef 8311 	mrs	r3, BASEPRI
 800c87a:	f04f 0120 	mov.w	r1, #32
 800c87e:	f381 8811 	msr	BASEPRI, r1
 800c882:	617b      	str	r3, [r7, #20]
 800c884:	4816      	ldr	r0, [pc, #88]	; (800c8e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c886:	f7ff fdfc 	bl	800c482 <_PreparePacket>
 800c88a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	61fb      	str	r3, [r7, #28]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	61bb      	str	r3, [r7, #24]
 800c898:	e00b      	b.n	800c8b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c89a:	69bb      	ldr	r3, [r7, #24]
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	1c59      	adds	r1, r3, #1
 800c8a2:	61f9      	str	r1, [r7, #28]
 800c8a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c8a8:	b2d2      	uxtb	r2, r2
 800c8aa:	701a      	strb	r2, [r3, #0]
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	09db      	lsrs	r3, r3, #7
 800c8b0:	61bb      	str	r3, [r7, #24]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c8b6:	d8f0      	bhi.n	800c89a <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	1c5a      	adds	r2, r3, #1
 800c8bc:	61fa      	str	r2, [r7, #28]
 800c8be:	69ba      	ldr	r2, [r7, #24]
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	68f9      	ldr	r1, [r7, #12]
 800c8cc:	6938      	ldr	r0, [r7, #16]
 800c8ce:	f7ff fec9 	bl	800c664 <_SendPacket>
  RECORD_END();
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f383 8811 	msr	BASEPRI, r3
}
 800c8d8:	bf00      	nop
 800c8da:	3720      	adds	r7, #32
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	200133bc 	.word	0x200133bc

0800c8e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08c      	sub	sp, #48	; 0x30
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c8f0:	f3ef 8311 	mrs	r3, BASEPRI
 800c8f4:	f04f 0120 	mov.w	r1, #32
 800c8f8:	f381 8811 	msr	BASEPRI, r1
 800c8fc:	61fb      	str	r3, [r7, #28]
 800c8fe:	4825      	ldr	r0, [pc, #148]	; (800c994 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c900:	f7ff fdbf 	bl	800c482 <_PreparePacket>
 800c904:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	62bb      	str	r3, [r7, #40]	; 0x28
 800c912:	e00b      	b.n	800c92c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c916:	b2da      	uxtb	r2, r3
 800c918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91a:	1c59      	adds	r1, r3, #1
 800c91c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800c91e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c922:	b2d2      	uxtb	r2, r2
 800c924:	701a      	strb	r2, [r3, #0]
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	09db      	lsrs	r3, r3, #7
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	2b7f      	cmp	r3, #127	; 0x7f
 800c930:	d8f0      	bhi.n	800c914 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	627b      	str	r3, [r7, #36]	; 0x24
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	623b      	str	r3, [r7, #32]
 800c94a:	e00b      	b.n	800c964 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c952:	1c59      	adds	r1, r3, #1
 800c954:	6279      	str	r1, [r7, #36]	; 0x24
 800c956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c95a:	b2d2      	uxtb	r2, r2
 800c95c:	701a      	strb	r2, [r3, #0]
 800c95e:	6a3b      	ldr	r3, [r7, #32]
 800c960:	09db      	lsrs	r3, r3, #7
 800c962:	623b      	str	r3, [r7, #32]
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	2b7f      	cmp	r3, #127	; 0x7f
 800c968:	d8f0      	bhi.n	800c94c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	627a      	str	r2, [r7, #36]	; 0x24
 800c970:	6a3a      	ldr	r2, [r7, #32]
 800c972:	b2d2      	uxtb	r2, r2
 800c974:	701a      	strb	r2, [r3, #0]
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c97a:	68fa      	ldr	r2, [r7, #12]
 800c97c:	6979      	ldr	r1, [r7, #20]
 800c97e:	69b8      	ldr	r0, [r7, #24]
 800c980:	f7ff fe70 	bl	800c664 <_SendPacket>
  RECORD_END();
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	f383 8811 	msr	BASEPRI, r3
}
 800c98a:	bf00      	nop
 800c98c:	3730      	adds	r7, #48	; 0x30
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	200133bc 	.word	0x200133bc

0800c998 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08e      	sub	sp, #56	; 0x38
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c9a6:	f3ef 8311 	mrs	r3, BASEPRI
 800c9aa:	f04f 0120 	mov.w	r1, #32
 800c9ae:	f381 8811 	msr	BASEPRI, r1
 800c9b2:	61fb      	str	r3, [r7, #28]
 800c9b4:	4832      	ldr	r0, [pc, #200]	; (800ca80 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c9b6:	f7ff fd64 	bl	800c482 <_PreparePacket>
 800c9ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c9c8:	e00b      	b.n	800c9e2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d0:	1c59      	adds	r1, r3, #1
 800c9d2:	6379      	str	r1, [r7, #52]	; 0x34
 800c9d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c9d8:	b2d2      	uxtb	r2, r2
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9de:	09db      	lsrs	r3, r3, #7
 800c9e0:	633b      	str	r3, [r7, #48]	; 0x30
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	2b7f      	cmp	r3, #127	; 0x7f
 800c9e6:	d8f0      	bhi.n	800c9ca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	1c5a      	adds	r2, r3, #1
 800c9ec:	637a      	str	r2, [r7, #52]	; 0x34
 800c9ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f0:	b2d2      	uxtb	r2, r2
 800c9f2:	701a      	strb	r2, [r3, #0]
 800c9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca00:	e00b      	b.n	800ca1a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	1c59      	adds	r1, r3, #1
 800ca0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ca0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca10:	b2d2      	uxtb	r2, r2
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	09db      	lsrs	r3, r3, #7
 800ca18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	2b7f      	cmp	r3, #127	; 0x7f
 800ca1e:	d8f0      	bhi.n	800ca02 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800ca20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ca26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	701a      	strb	r2, [r3, #0]
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	627b      	str	r3, [r7, #36]	; 0x24
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	623b      	str	r3, [r7, #32]
 800ca38:	e00b      	b.n	800ca52 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	1c59      	adds	r1, r3, #1
 800ca42:	6279      	str	r1, [r7, #36]	; 0x24
 800ca44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ca48:	b2d2      	uxtb	r2, r2
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	09db      	lsrs	r3, r3, #7
 800ca50:	623b      	str	r3, [r7, #32]
 800ca52:	6a3b      	ldr	r3, [r7, #32]
 800ca54:	2b7f      	cmp	r3, #127	; 0x7f
 800ca56:	d8f0      	bhi.n	800ca3a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5a:	1c5a      	adds	r2, r3, #1
 800ca5c:	627a      	str	r2, [r7, #36]	; 0x24
 800ca5e:	6a3a      	ldr	r2, [r7, #32]
 800ca60:	b2d2      	uxtb	r2, r2
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	6979      	ldr	r1, [r7, #20]
 800ca6c:	69b8      	ldr	r0, [r7, #24]
 800ca6e:	f7ff fdf9 	bl	800c664 <_SendPacket>
  RECORD_END();
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	f383 8811 	msr	BASEPRI, r3
}
 800ca78:	bf00      	nop
 800ca7a:	3738      	adds	r7, #56	; 0x38
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	200133bc 	.word	0x200133bc

0800ca84 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b090      	sub	sp, #64	; 0x40
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca92:	f3ef 8311 	mrs	r3, BASEPRI
 800ca96:	f04f 0120 	mov.w	r1, #32
 800ca9a:	f381 8811 	msr	BASEPRI, r1
 800ca9e:	61fb      	str	r3, [r7, #28]
 800caa0:	4840      	ldr	r0, [pc, #256]	; (800cba4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800caa2:	f7ff fcee 	bl	800c482 <_PreparePacket>
 800caa6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800caa8:	69bb      	ldr	r3, [r7, #24]
 800caaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	63bb      	str	r3, [r7, #56]	; 0x38
 800cab4:	e00b      	b.n	800cace <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800cab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cabc:	1c59      	adds	r1, r3, #1
 800cabe:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cac0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	09db      	lsrs	r3, r3, #7
 800cacc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad0:	2b7f      	cmp	r3, #127	; 0x7f
 800cad2:	d8f0      	bhi.n	800cab6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800cad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cadc:	b2d2      	uxtb	r2, r2
 800cade:	701a      	strb	r2, [r3, #0]
 800cae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	637b      	str	r3, [r7, #52]	; 0x34
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	633b      	str	r3, [r7, #48]	; 0x30
 800caec:	e00b      	b.n	800cb06 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	1c59      	adds	r1, r3, #1
 800caf6:	6379      	str	r1, [r7, #52]	; 0x34
 800caf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cafc:	b2d2      	uxtb	r2, r2
 800cafe:	701a      	strb	r2, [r3, #0]
 800cb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb02:	09db      	lsrs	r3, r3, #7
 800cb04:	633b      	str	r3, [r7, #48]	; 0x30
 800cb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb08:	2b7f      	cmp	r3, #127	; 0x7f
 800cb0a:	d8f0      	bhi.n	800caee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800cb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	637a      	str	r2, [r7, #52]	; 0x34
 800cb12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb14:	b2d2      	uxtb	r2, r2
 800cb16:	701a      	strb	r2, [r3, #0]
 800cb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb24:	e00b      	b.n	800cb3e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2c:	1c59      	adds	r1, r3, #1
 800cb2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cb30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb34:	b2d2      	uxtb	r2, r2
 800cb36:	701a      	strb	r2, [r3, #0]
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	09db      	lsrs	r3, r3, #7
 800cb3c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	2b7f      	cmp	r3, #127	; 0x7f
 800cb42:	d8f0      	bhi.n	800cb26 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb4c:	b2d2      	uxtb	r2, r2
 800cb4e:	701a      	strb	r2, [r3, #0]
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	627b      	str	r3, [r7, #36]	; 0x24
 800cb58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb5a:	623b      	str	r3, [r7, #32]
 800cb5c:	e00b      	b.n	800cb76 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	b2da      	uxtb	r2, r3
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	1c59      	adds	r1, r3, #1
 800cb66:	6279      	str	r1, [r7, #36]	; 0x24
 800cb68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cb6c:	b2d2      	uxtb	r2, r2
 800cb6e:	701a      	strb	r2, [r3, #0]
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	09db      	lsrs	r3, r3, #7
 800cb74:	623b      	str	r3, [r7, #32]
 800cb76:	6a3b      	ldr	r3, [r7, #32]
 800cb78:	2b7f      	cmp	r3, #127	; 0x7f
 800cb7a:	d8f0      	bhi.n	800cb5e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	1c5a      	adds	r2, r3, #1
 800cb80:	627a      	str	r2, [r7, #36]	; 0x24
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	b2d2      	uxtb	r2, r2
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	6979      	ldr	r1, [r7, #20]
 800cb90:	69b8      	ldr	r0, [r7, #24]
 800cb92:	f7ff fd67 	bl	800c664 <_SendPacket>
  RECORD_END();
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	f383 8811 	msr	BASEPRI, r3
}
 800cb9c:	bf00      	nop
 800cb9e:	3740      	adds	r7, #64	; 0x40
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200133bc 	.word	0x200133bc

0800cba8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b08c      	sub	sp, #48	; 0x30
 800cbac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800cbae:	4b58      	ldr	r3, [pc, #352]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800cbb4:	f3ef 8311 	mrs	r3, BASEPRI
 800cbb8:	f04f 0120 	mov.w	r1, #32
 800cbbc:	f381 8811 	msr	BASEPRI, r1
 800cbc0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800cbc2:	4b53      	ldr	r3, [pc, #332]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800cbc4:	785b      	ldrb	r3, [r3, #1]
 800cbc6:	220a      	movs	r2, #10
 800cbc8:	4952      	ldr	r1, [pc, #328]	; (800cd14 <SEGGER_SYSVIEW_Start+0x16c>)
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7f3 fb00 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800cbd6:	200a      	movs	r0, #10
 800cbd8:	f7ff fe2a 	bl	800c830 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cbdc:	f3ef 8311 	mrs	r3, BASEPRI
 800cbe0:	f04f 0120 	mov.w	r1, #32
 800cbe4:	f381 8811 	msr	BASEPRI, r1
 800cbe8:	60bb      	str	r3, [r7, #8]
 800cbea:	484b      	ldr	r0, [pc, #300]	; (800cd18 <SEGGER_SYSVIEW_Start+0x170>)
 800cbec:	f7ff fc49 	bl	800c482 <_PreparePacket>
 800cbf0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbfa:	4b45      	ldr	r3, [pc, #276]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc00:	e00b      	b.n	800cc1a <SEGGER_SYSVIEW_Start+0x72>
 800cc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc08:	1c59      	adds	r1, r3, #1
 800cc0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cc0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc10:	b2d2      	uxtb	r2, r2
 800cc12:	701a      	strb	r2, [r3, #0]
 800cc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc16:	09db      	lsrs	r3, r3, #7
 800cc18:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	2b7f      	cmp	r3, #127	; 0x7f
 800cc1e:	d8f0      	bhi.n	800cc02 <SEGGER_SYSVIEW_Start+0x5a>
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	1c5a      	adds	r2, r3, #1
 800cc24:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc28:	b2d2      	uxtb	r2, r2
 800cc2a:	701a      	strb	r2, [r3, #0]
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
 800cc34:	4b36      	ldr	r3, [pc, #216]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800cc36:	689b      	ldr	r3, [r3, #8]
 800cc38:	623b      	str	r3, [r7, #32]
 800cc3a:	e00b      	b.n	800cc54 <SEGGER_SYSVIEW_Start+0xac>
 800cc3c:	6a3b      	ldr	r3, [r7, #32]
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	1c59      	adds	r1, r3, #1
 800cc44:	6279      	str	r1, [r7, #36]	; 0x24
 800cc46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc4a:	b2d2      	uxtb	r2, r2
 800cc4c:	701a      	strb	r2, [r3, #0]
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	09db      	lsrs	r3, r3, #7
 800cc52:	623b      	str	r3, [r7, #32]
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	2b7f      	cmp	r3, #127	; 0x7f
 800cc58:	d8f0      	bhi.n	800cc3c <SEGGER_SYSVIEW_Start+0x94>
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	627a      	str	r2, [r7, #36]	; 0x24
 800cc60:	6a3a      	ldr	r2, [r7, #32]
 800cc62:	b2d2      	uxtb	r2, r2
 800cc64:	701a      	strb	r2, [r3, #0]
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	4b28      	ldr	r3, [pc, #160]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	61bb      	str	r3, [r7, #24]
 800cc74:	e00b      	b.n	800cc8e <SEGGER_SYSVIEW_Start+0xe6>
 800cc76:	69bb      	ldr	r3, [r7, #24]
 800cc78:	b2da      	uxtb	r2, r3
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	1c59      	adds	r1, r3, #1
 800cc7e:	61f9      	str	r1, [r7, #28]
 800cc80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cc84:	b2d2      	uxtb	r2, r2
 800cc86:	701a      	strb	r2, [r3, #0]
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	09db      	lsrs	r3, r3, #7
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	2b7f      	cmp	r3, #127	; 0x7f
 800cc92:	d8f0      	bhi.n	800cc76 <SEGGER_SYSVIEW_Start+0xce>
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	1c5a      	adds	r2, r3, #1
 800cc98:	61fa      	str	r2, [r7, #28]
 800cc9a:	69ba      	ldr	r2, [r7, #24]
 800cc9c:	b2d2      	uxtb	r2, r2
 800cc9e:	701a      	strb	r2, [r3, #0]
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	2300      	movs	r3, #0
 800ccaa:	613b      	str	r3, [r7, #16]
 800ccac:	e00b      	b.n	800ccc6 <SEGGER_SYSVIEW_Start+0x11e>
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	b2da      	uxtb	r2, r3
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	1c59      	adds	r1, r3, #1
 800ccb6:	6179      	str	r1, [r7, #20]
 800ccb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ccbc:	b2d2      	uxtb	r2, r2
 800ccbe:	701a      	strb	r2, [r3, #0]
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	09db      	lsrs	r3, r3, #7
 800ccc4:	613b      	str	r3, [r7, #16]
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	2b7f      	cmp	r3, #127	; 0x7f
 800ccca:	d8f0      	bhi.n	800ccae <SEGGER_SYSVIEW_Start+0x106>
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	1c5a      	adds	r2, r3, #1
 800ccd0:	617a      	str	r2, [r7, #20]
 800ccd2:	693a      	ldr	r2, [r7, #16]
 800ccd4:	b2d2      	uxtb	r2, r2
 800ccd6:	701a      	strb	r2, [r3, #0]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ccdc:	2218      	movs	r2, #24
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f7ff fcbf 	bl	800c664 <_SendPacket>
      RECORD_END();
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ccec:	4b08      	ldr	r3, [pc, #32]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800ccee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d002      	beq.n	800ccfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800ccf4:	4b06      	ldr	r3, [pc, #24]	; (800cd10 <SEGGER_SYSVIEW_Start+0x168>)
 800ccf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800ccfa:	f000 f9c7 	bl	800d08c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800ccfe:	f000 f9b1 	bl	800d064 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800cd02:	f000 fc5f 	bl	800d5c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800cd06:	bf00      	nop
 800cd08:	3730      	adds	r7, #48	; 0x30
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	2001338c 	.word	0x2001338c
 800cd14:	0800da24 	.word	0x0800da24
 800cd18:	200133bc 	.word	0x200133bc

0800cd1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cd22:	f3ef 8311 	mrs	r3, BASEPRI
 800cd26:	f04f 0120 	mov.w	r1, #32
 800cd2a:	f381 8811 	msr	BASEPRI, r1
 800cd2e:	607b      	str	r3, [r7, #4]
 800cd30:	480b      	ldr	r0, [pc, #44]	; (800cd60 <SEGGER_SYSVIEW_Stop+0x44>)
 800cd32:	f7ff fba6 	bl	800c482 <_PreparePacket>
 800cd36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800cd38:	4b0a      	ldr	r3, [pc, #40]	; (800cd64 <SEGGER_SYSVIEW_Stop+0x48>)
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d007      	beq.n	800cd50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800cd40:	220b      	movs	r2, #11
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	6838      	ldr	r0, [r7, #0]
 800cd46:	f7ff fc8d 	bl	800c664 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800cd4a:	4b06      	ldr	r3, [pc, #24]	; (800cd64 <SEGGER_SYSVIEW_Stop+0x48>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f383 8811 	msr	BASEPRI, r3
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	200133bc 	.word	0x200133bc
 800cd64:	2001338c 	.word	0x2001338c

0800cd68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08c      	sub	sp, #48	; 0x30
 800cd6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cd6e:	f3ef 8311 	mrs	r3, BASEPRI
 800cd72:	f04f 0120 	mov.w	r1, #32
 800cd76:	f381 8811 	msr	BASEPRI, r1
 800cd7a:	60fb      	str	r3, [r7, #12]
 800cd7c:	4845      	ldr	r0, [pc, #276]	; (800ce94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800cd7e:	f7ff fb80 	bl	800c482 <_PreparePacket>
 800cd82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd8c:	4b42      	ldr	r3, [pc, #264]	; (800ce98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd92:	e00b      	b.n	800cdac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800cd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd96:	b2da      	uxtb	r2, r3
 800cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9a:	1c59      	adds	r1, r3, #1
 800cd9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cd9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cda2:	b2d2      	uxtb	r2, r2
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda8:	09db      	lsrs	r3, r3, #7
 800cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdae:	2b7f      	cmp	r3, #127	; 0x7f
 800cdb0:	d8f0      	bhi.n	800cd94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800cdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb4:	1c5a      	adds	r2, r3, #1
 800cdb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdba:	b2d2      	uxtb	r2, r2
 800cdbc:	701a      	strb	r2, [r3, #0]
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc6:	4b34      	ldr	r3, [pc, #208]	; (800ce98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	623b      	str	r3, [r7, #32]
 800cdcc:	e00b      	b.n	800cde6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800cdce:	6a3b      	ldr	r3, [r7, #32]
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	1c59      	adds	r1, r3, #1
 800cdd6:	6279      	str	r1, [r7, #36]	; 0x24
 800cdd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cddc:	b2d2      	uxtb	r2, r2
 800cdde:	701a      	strb	r2, [r3, #0]
 800cde0:	6a3b      	ldr	r3, [r7, #32]
 800cde2:	09db      	lsrs	r3, r3, #7
 800cde4:	623b      	str	r3, [r7, #32]
 800cde6:	6a3b      	ldr	r3, [r7, #32]
 800cde8:	2b7f      	cmp	r3, #127	; 0x7f
 800cdea:	d8f0      	bhi.n	800cdce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	627a      	str	r2, [r7, #36]	; 0x24
 800cdf2:	6a3a      	ldr	r2, [r7, #32]
 800cdf4:	b2d2      	uxtb	r2, r2
 800cdf6:	701a      	strb	r2, [r3, #0]
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	61fb      	str	r3, [r7, #28]
 800ce00:	4b25      	ldr	r3, [pc, #148]	; (800ce98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	61bb      	str	r3, [r7, #24]
 800ce06:	e00b      	b.n	800ce20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	1c59      	adds	r1, r3, #1
 800ce10:	61f9      	str	r1, [r7, #28]
 800ce12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	09db      	lsrs	r3, r3, #7
 800ce1e:	61bb      	str	r3, [r7, #24]
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2b7f      	cmp	r3, #127	; 0x7f
 800ce24:	d8f0      	bhi.n	800ce08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	61fa      	str	r2, [r7, #28]
 800ce2c:	69ba      	ldr	r2, [r7, #24]
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	617b      	str	r3, [r7, #20]
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	613b      	str	r3, [r7, #16]
 800ce3e:	e00b      	b.n	800ce58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	1c59      	adds	r1, r3, #1
 800ce48:	6179      	str	r1, [r7, #20]
 800ce4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ce4e:	b2d2      	uxtb	r2, r2
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	09db      	lsrs	r3, r3, #7
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	2b7f      	cmp	r3, #127	; 0x7f
 800ce5c:	d8f0      	bhi.n	800ce40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	617a      	str	r2, [r7, #20]
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800ce6e:	2218      	movs	r2, #24
 800ce70:	6879      	ldr	r1, [r7, #4]
 800ce72:	68b8      	ldr	r0, [r7, #8]
 800ce74:	f7ff fbf6 	bl	800c664 <_SendPacket>
  RECORD_END();
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800ce7e:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ce80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800ce86:	4b04      	ldr	r3, [pc, #16]	; (800ce98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ce88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8a:	4798      	blx	r3
  }
}
 800ce8c:	bf00      	nop
 800ce8e:	3730      	adds	r7, #48	; 0x30
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	200133bc 	.word	0x200133bc
 800ce98:	2001338c 	.word	0x2001338c

0800ce9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b092      	sub	sp, #72	; 0x48
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cea4:	f3ef 8311 	mrs	r3, BASEPRI
 800cea8:	f04f 0120 	mov.w	r1, #32
 800ceac:	f381 8811 	msr	BASEPRI, r1
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	486a      	ldr	r0, [pc, #424]	; (800d05c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800ceb4:	f7ff fae5 	bl	800c482 <_PreparePacket>
 800ceb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	647b      	str	r3, [r7, #68]	; 0x44
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681a      	ldr	r2, [r3, #0]
 800cec6:	4b66      	ldr	r3, [pc, #408]	; (800d060 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	643b      	str	r3, [r7, #64]	; 0x40
 800cece:	e00b      	b.n	800cee8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800ced0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ced6:	1c59      	adds	r1, r3, #1
 800ced8:	6479      	str	r1, [r7, #68]	; 0x44
 800ceda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cede:	b2d2      	uxtb	r2, r2
 800cee0:	701a      	strb	r2, [r3, #0]
 800cee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee4:	09db      	lsrs	r3, r3, #7
 800cee6:	643b      	str	r3, [r7, #64]	; 0x40
 800cee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceea:	2b7f      	cmp	r3, #127	; 0x7f
 800ceec:	d8f0      	bhi.n	800ced0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800ceee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	647a      	str	r2, [r7, #68]	; 0x44
 800cef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cef6:	b2d2      	uxtb	r2, r2
 800cef8:	701a      	strb	r2, [r3, #0]
 800cefa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cefc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf08:	e00b      	b.n	800cf22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	b2da      	uxtb	r2, r3
 800cf0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf10:	1c59      	adds	r1, r3, #1
 800cf12:	63f9      	str	r1, [r7, #60]	; 0x3c
 800cf14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	09db      	lsrs	r3, r3, #7
 800cf20:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf24:	2b7f      	cmp	r3, #127	; 0x7f
 800cf26:	d8f0      	bhi.n	800cf0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800cf28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cf2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf30:	b2d2      	uxtb	r2, r2
 800cf32:	701a      	strb	r2, [r3, #0]
 800cf34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	2220      	movs	r2, #32
 800cf3e:	4619      	mov	r1, r3
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f7ff fa51 	bl	800c3e8 <_EncodeStr>
 800cf46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800cf48:	2209      	movs	r2, #9
 800cf4a:	68f9      	ldr	r1, [r7, #12]
 800cf4c:	6938      	ldr	r0, [r7, #16]
 800cf4e:	f7ff fb89 	bl	800c664 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	637b      	str	r3, [r7, #52]	; 0x34
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	4b40      	ldr	r3, [pc, #256]	; (800d060 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	633b      	str	r3, [r7, #48]	; 0x30
 800cf66:	e00b      	b.n	800cf80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800cf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	6379      	str	r1, [r7, #52]	; 0x34
 800cf72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cf76:	b2d2      	uxtb	r2, r2
 800cf78:	701a      	strb	r2, [r3, #0]
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7c:	09db      	lsrs	r3, r3, #7
 800cf7e:	633b      	str	r3, [r7, #48]	; 0x30
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	2b7f      	cmp	r3, #127	; 0x7f
 800cf84:	d8f0      	bhi.n	800cf68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf88:	1c5a      	adds	r2, r3, #1
 800cf8a:	637a      	str	r2, [r7, #52]	; 0x34
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8e:	b2d2      	uxtb	r2, r2
 800cf90:	701a      	strb	r2, [r3, #0]
 800cf92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfa0:	e00b      	b.n	800cfba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa8:	1c59      	adds	r1, r3, #1
 800cfaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800cfac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfb0:	b2d2      	uxtb	r2, r2
 800cfb2:	701a      	strb	r2, [r3, #0]
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	09db      	lsrs	r3, r3, #7
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	2b7f      	cmp	r3, #127	; 0x7f
 800cfbe:	d8f0      	bhi.n	800cfa2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc2:	1c5a      	adds	r2, r3, #1
 800cfc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc8:	b2d2      	uxtb	r2, r2
 800cfca:	701a      	strb	r2, [r3, #0]
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	623b      	str	r3, [r7, #32]
 800cfda:	e00b      	b.n	800cff4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	b2da      	uxtb	r2, r3
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	1c59      	adds	r1, r3, #1
 800cfe4:	6279      	str	r1, [r7, #36]	; 0x24
 800cfe6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800cfea:	b2d2      	uxtb	r2, r2
 800cfec:	701a      	strb	r2, [r3, #0]
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	09db      	lsrs	r3, r3, #7
 800cff2:	623b      	str	r3, [r7, #32]
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	2b7f      	cmp	r3, #127	; 0x7f
 800cff8:	d8f0      	bhi.n	800cfdc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	1c5a      	adds	r2, r3, #1
 800cffe:	627a      	str	r2, [r7, #36]	; 0x24
 800d000:	6a3a      	ldr	r2, [r7, #32]
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	61fb      	str	r3, [r7, #28]
 800d00e:	2300      	movs	r3, #0
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	e00b      	b.n	800d02c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	b2da      	uxtb	r2, r3
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	1c59      	adds	r1, r3, #1
 800d01c:	61f9      	str	r1, [r7, #28]
 800d01e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d022:	b2d2      	uxtb	r2, r2
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	09db      	lsrs	r3, r3, #7
 800d02a:	61bb      	str	r3, [r7, #24]
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	2b7f      	cmp	r3, #127	; 0x7f
 800d030:	d8f0      	bhi.n	800d014 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	61fa      	str	r2, [r7, #28]
 800d038:	69ba      	ldr	r2, [r7, #24]
 800d03a:	b2d2      	uxtb	r2, r2
 800d03c:	701a      	strb	r2, [r3, #0]
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d042:	2215      	movs	r2, #21
 800d044:	68f9      	ldr	r1, [r7, #12]
 800d046:	6938      	ldr	r0, [r7, #16]
 800d048:	f7ff fb0c 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	f383 8811 	msr	BASEPRI, r3
}
 800d052:	bf00      	nop
 800d054:	3748      	adds	r7, #72	; 0x48
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	200133bc 	.word	0x200133bc
 800d060:	2001338c 	.word	0x2001338c

0800d064 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d064:	b580      	push	{r7, lr}
 800d066:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d068:	4b07      	ldr	r3, [pc, #28]	; (800d088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d06a:	6a1b      	ldr	r3, [r3, #32]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d008      	beq.n	800d082 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d070:	4b05      	ldr	r3, [pc, #20]	; (800d088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d07a:	4b03      	ldr	r3, [pc, #12]	; (800d088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	4798      	blx	r3
  }
}
 800d082:	bf00      	nop
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	2001338c 	.word	0x2001338c

0800d08c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d092:	4b15      	ldr	r3, [pc, #84]	; (800d0e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d094:	6a1b      	ldr	r3, [r3, #32]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d01a      	beq.n	800d0d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d09a:	4b13      	ldr	r3, [pc, #76]	; (800d0e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d09c:	6a1b      	ldr	r3, [r3, #32]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d015      	beq.n	800d0d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d0a4:	4b10      	ldr	r3, [pc, #64]	; (800d0e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d0a6:	6a1b      	ldr	r3, [r3, #32]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4798      	blx	r3
 800d0ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d0b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d0b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0b6:	f04f 0200 	mov.w	r2, #0
 800d0ba:	f04f 0300 	mov.w	r3, #0
 800d0be:	000a      	movs	r2, r1
 800d0c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	200d      	movs	r0, #13
 800d0ca:	f7ff fc0b 	bl	800c8e4 <SEGGER_SYSVIEW_RecordU32x2>
 800d0ce:	e006      	b.n	800d0de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d0d0:	4b06      	ldr	r3, [pc, #24]	; (800d0ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	200c      	movs	r0, #12
 800d0d8:	f7ff fbc8 	bl	800c86c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d0dc:	bf00      	nop
 800d0de:	bf00      	nop
 800d0e0:	370c      	adds	r7, #12
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	2001338c 	.word	0x2001338c
 800d0ec:	e0001004 	.word	0xe0001004

0800d0f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b086      	sub	sp, #24
 800d0f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d0f6:	f3ef 8311 	mrs	r3, BASEPRI
 800d0fa:	f04f 0120 	mov.w	r1, #32
 800d0fe:	f381 8811 	msr	BASEPRI, r1
 800d102:	60fb      	str	r3, [r7, #12]
 800d104:	4819      	ldr	r0, [pc, #100]	; (800d16c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d106:	f7ff f9bc 	bl	800c482 <_PreparePacket>
 800d10a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d110:	4b17      	ldr	r3, [pc, #92]	; (800d170 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d118:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	617b      	str	r3, [r7, #20]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	613b      	str	r3, [r7, #16]
 800d122:	e00b      	b.n	800d13c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	b2da      	uxtb	r2, r3
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	1c59      	adds	r1, r3, #1
 800d12c:	6179      	str	r1, [r7, #20]
 800d12e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d132:	b2d2      	uxtb	r2, r2
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	09db      	lsrs	r3, r3, #7
 800d13a:	613b      	str	r3, [r7, #16]
 800d13c:	693b      	ldr	r3, [r7, #16]
 800d13e:	2b7f      	cmp	r3, #127	; 0x7f
 800d140:	d8f0      	bhi.n	800d124 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	1c5a      	adds	r2, r3, #1
 800d146:	617a      	str	r2, [r7, #20]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d152:	2202      	movs	r2, #2
 800d154:	6879      	ldr	r1, [r7, #4]
 800d156:	68b8      	ldr	r0, [r7, #8]
 800d158:	f7ff fa84 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f383 8811 	msr	BASEPRI, r3
}
 800d162:	bf00      	nop
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	200133bc 	.word	0x200133bc
 800d170:	e000ed04 	.word	0xe000ed04

0800d174 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d17a:	f3ef 8311 	mrs	r3, BASEPRI
 800d17e:	f04f 0120 	mov.w	r1, #32
 800d182:	f381 8811 	msr	BASEPRI, r1
 800d186:	607b      	str	r3, [r7, #4]
 800d188:	4807      	ldr	r0, [pc, #28]	; (800d1a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d18a:	f7ff f97a 	bl	800c482 <_PreparePacket>
 800d18e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d190:	2203      	movs	r2, #3
 800d192:	6839      	ldr	r1, [r7, #0]
 800d194:	6838      	ldr	r0, [r7, #0]
 800d196:	f7ff fa65 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f383 8811 	msr	BASEPRI, r3
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	200133bc 	.word	0x200133bc

0800d1ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d1b2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1b6:	f04f 0120 	mov.w	r1, #32
 800d1ba:	f381 8811 	msr	BASEPRI, r1
 800d1be:	607b      	str	r3, [r7, #4]
 800d1c0:	4807      	ldr	r0, [pc, #28]	; (800d1e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d1c2:	f7ff f95e 	bl	800c482 <_PreparePacket>
 800d1c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d1c8:	2212      	movs	r2, #18
 800d1ca:	6839      	ldr	r1, [r7, #0]
 800d1cc:	6838      	ldr	r0, [r7, #0]
 800d1ce:	f7ff fa49 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f383 8811 	msr	BASEPRI, r3
}
 800d1d8:	bf00      	nop
 800d1da:	3708      	adds	r7, #8
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}
 800d1e0:	200133bc 	.word	0x200133bc

0800d1e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d1ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d1ee:	f04f 0120 	mov.w	r1, #32
 800d1f2:	f381 8811 	msr	BASEPRI, r1
 800d1f6:	607b      	str	r3, [r7, #4]
 800d1f8:	4807      	ldr	r0, [pc, #28]	; (800d218 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d1fa:	f7ff f942 	bl	800c482 <_PreparePacket>
 800d1fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d200:	2211      	movs	r2, #17
 800d202:	6839      	ldr	r1, [r7, #0]
 800d204:	6838      	ldr	r0, [r7, #0]
 800d206:	f7ff fa2d 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f383 8811 	msr	BASEPRI, r3
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	200133bc 	.word	0x200133bc

0800d21c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b088      	sub	sp, #32
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d224:	f3ef 8311 	mrs	r3, BASEPRI
 800d228:	f04f 0120 	mov.w	r1, #32
 800d22c:	f381 8811 	msr	BASEPRI, r1
 800d230:	617b      	str	r3, [r7, #20]
 800d232:	4819      	ldr	r0, [pc, #100]	; (800d298 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d234:	f7ff f925 	bl	800c482 <_PreparePacket>
 800d238:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d23e:	4b17      	ldr	r3, [pc, #92]	; (800d29c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	1ad3      	subs	r3, r2, r3
 800d246:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	61fb      	str	r3, [r7, #28]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	61bb      	str	r3, [r7, #24]
 800d250:	e00b      	b.n	800d26a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	b2da      	uxtb	r2, r3
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	1c59      	adds	r1, r3, #1
 800d25a:	61f9      	str	r1, [r7, #28]
 800d25c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d260:	b2d2      	uxtb	r2, r2
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	09db      	lsrs	r3, r3, #7
 800d268:	61bb      	str	r3, [r7, #24]
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b7f      	cmp	r3, #127	; 0x7f
 800d26e:	d8f0      	bhi.n	800d252 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	61fa      	str	r2, [r7, #28]
 800d276:	69ba      	ldr	r2, [r7, #24]
 800d278:	b2d2      	uxtb	r2, r2
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d280:	2208      	movs	r2, #8
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	6938      	ldr	r0, [r7, #16]
 800d286:	f7ff f9ed 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	f383 8811 	msr	BASEPRI, r3
}
 800d290:	bf00      	nop
 800d292:	3720      	adds	r7, #32
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	200133bc 	.word	0x200133bc
 800d29c:	2001338c 	.word	0x2001338c

0800d2a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d2a8:	f3ef 8311 	mrs	r3, BASEPRI
 800d2ac:	f04f 0120 	mov.w	r1, #32
 800d2b0:	f381 8811 	msr	BASEPRI, r1
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	4819      	ldr	r0, [pc, #100]	; (800d31c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d2b8:	f7ff f8e3 	bl	800c482 <_PreparePacket>
 800d2bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d2c2:	4b17      	ldr	r3, [pc, #92]	; (800d320 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	61fb      	str	r3, [r7, #28]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	61bb      	str	r3, [r7, #24]
 800d2d4:	e00b      	b.n	800d2ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d2d6:	69bb      	ldr	r3, [r7, #24]
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	1c59      	adds	r1, r3, #1
 800d2de:	61f9      	str	r1, [r7, #28]
 800d2e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d2e4:	b2d2      	uxtb	r2, r2
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	09db      	lsrs	r3, r3, #7
 800d2ec:	61bb      	str	r3, [r7, #24]
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	2b7f      	cmp	r3, #127	; 0x7f
 800d2f2:	d8f0      	bhi.n	800d2d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	61fa      	str	r2, [r7, #28]
 800d2fa:	69ba      	ldr	r2, [r7, #24]
 800d2fc:	b2d2      	uxtb	r2, r2
 800d2fe:	701a      	strb	r2, [r3, #0]
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d304:	2204      	movs	r2, #4
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	6938      	ldr	r0, [r7, #16]
 800d30a:	f7ff f9ab 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	f383 8811 	msr	BASEPRI, r3
}
 800d314:	bf00      	nop
 800d316:	3720      	adds	r7, #32
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	200133bc 	.word	0x200133bc
 800d320:	2001338c 	.word	0x2001338c

0800d324 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d32c:	f3ef 8311 	mrs	r3, BASEPRI
 800d330:	f04f 0120 	mov.w	r1, #32
 800d334:	f381 8811 	msr	BASEPRI, r1
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	4819      	ldr	r0, [pc, #100]	; (800d3a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d33c:	f7ff f8a1 	bl	800c482 <_PreparePacket>
 800d340:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d342:	693b      	ldr	r3, [r7, #16]
 800d344:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d346:	4b17      	ldr	r3, [pc, #92]	; (800d3a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	61bb      	str	r3, [r7, #24]
 800d358:	e00b      	b.n	800d372 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	1c59      	adds	r1, r3, #1
 800d362:	61f9      	str	r1, [r7, #28]
 800d364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d368:	b2d2      	uxtb	r2, r2
 800d36a:	701a      	strb	r2, [r3, #0]
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	09db      	lsrs	r3, r3, #7
 800d370:	61bb      	str	r3, [r7, #24]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	2b7f      	cmp	r3, #127	; 0x7f
 800d376:	d8f0      	bhi.n	800d35a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	61fa      	str	r2, [r7, #28]
 800d37e:	69ba      	ldr	r2, [r7, #24]
 800d380:	b2d2      	uxtb	r2, r2
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d388:	2206      	movs	r2, #6
 800d38a:	68f9      	ldr	r1, [r7, #12]
 800d38c:	6938      	ldr	r0, [r7, #16]
 800d38e:	f7ff f969 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f383 8811 	msr	BASEPRI, r3
}
 800d398:	bf00      	nop
 800d39a:	3720      	adds	r7, #32
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	200133bc 	.word	0x200133bc
 800d3a4:	2001338c 	.word	0x2001338c

0800d3a8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08a      	sub	sp, #40	; 0x28
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d3b2:	f3ef 8311 	mrs	r3, BASEPRI
 800d3b6:	f04f 0120 	mov.w	r1, #32
 800d3ba:	f381 8811 	msr	BASEPRI, r1
 800d3be:	617b      	str	r3, [r7, #20]
 800d3c0:	4827      	ldr	r0, [pc, #156]	; (800d460 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d3c2:	f7ff f85e 	bl	800c482 <_PreparePacket>
 800d3c6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d3c8:	693b      	ldr	r3, [r7, #16]
 800d3ca:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d3cc:	4b25      	ldr	r3, [pc, #148]	; (800d464 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	623b      	str	r3, [r7, #32]
 800d3de:	e00b      	b.n	800d3f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e6:	1c59      	adds	r1, r3, #1
 800d3e8:	6279      	str	r1, [r7, #36]	; 0x24
 800d3ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d3ee:	b2d2      	uxtb	r2, r2
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	6a3b      	ldr	r3, [r7, #32]
 800d3f4:	09db      	lsrs	r3, r3, #7
 800d3f6:	623b      	str	r3, [r7, #32]
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	2b7f      	cmp	r3, #127	; 0x7f
 800d3fc:	d8f0      	bhi.n	800d3e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	627a      	str	r2, [r7, #36]	; 0x24
 800d404:	6a3a      	ldr	r2, [r7, #32]
 800d406:	b2d2      	uxtb	r2, r2
 800d408:	701a      	strb	r2, [r3, #0]
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	61bb      	str	r3, [r7, #24]
 800d416:	e00b      	b.n	800d430 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	1c59      	adds	r1, r3, #1
 800d420:	61f9      	str	r1, [r7, #28]
 800d422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d426:	b2d2      	uxtb	r2, r2
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	09db      	lsrs	r3, r3, #7
 800d42e:	61bb      	str	r3, [r7, #24]
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	2b7f      	cmp	r3, #127	; 0x7f
 800d434:	d8f0      	bhi.n	800d418 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	1c5a      	adds	r2, r3, #1
 800d43a:	61fa      	str	r2, [r7, #28]
 800d43c:	69ba      	ldr	r2, [r7, #24]
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d446:	2207      	movs	r2, #7
 800d448:	68f9      	ldr	r1, [r7, #12]
 800d44a:	6938      	ldr	r0, [r7, #16]
 800d44c:	f7ff f90a 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	f383 8811 	msr	BASEPRI, r3
}
 800d456:	bf00      	nop
 800d458:	3728      	adds	r7, #40	; 0x28
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	200133bc 	.word	0x200133bc
 800d464:	2001338c 	.word	0x2001338c

0800d468 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d470:	4b04      	ldr	r3, [pc, #16]	; (800d484 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	1ad3      	subs	r3, r2, r3
}
 800d478:	4618      	mov	r0, r3
 800d47a:	370c      	adds	r7, #12
 800d47c:	46bd      	mov	sp, r7
 800d47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d482:	4770      	bx	lr
 800d484:	2001338c 	.word	0x2001338c

0800d488 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08c      	sub	sp, #48	; 0x30
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	4603      	mov	r3, r0
 800d490:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d492:	4b3b      	ldr	r3, [pc, #236]	; (800d580 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d06d      	beq.n	800d576 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800d49a:	4b39      	ldr	r3, [pc, #228]	; (800d580 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4a4:	e008      	b.n	800d4b8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d007      	beq.n	800d4c2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d3f2      	bcc.n	800d4a6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800d4c0:	e000      	b.n	800d4c4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d4c2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d055      	beq.n	800d576 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d4ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d4ce:	f04f 0120 	mov.w	r1, #32
 800d4d2:	f381 8811 	msr	BASEPRI, r1
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	482a      	ldr	r0, [pc, #168]	; (800d584 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800d4da:	f7fe ffd2 	bl	800c482 <_PreparePacket>
 800d4de:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	623b      	str	r3, [r7, #32]
 800d4ec:	e00b      	b.n	800d506 <SEGGER_SYSVIEW_SendModule+0x7e>
 800d4ee:	6a3b      	ldr	r3, [r7, #32]
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	1c59      	adds	r1, r3, #1
 800d4f6:	6279      	str	r1, [r7, #36]	; 0x24
 800d4f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d4fc:	b2d2      	uxtb	r2, r2
 800d4fe:	701a      	strb	r2, [r3, #0]
 800d500:	6a3b      	ldr	r3, [r7, #32]
 800d502:	09db      	lsrs	r3, r3, #7
 800d504:	623b      	str	r3, [r7, #32]
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	2b7f      	cmp	r3, #127	; 0x7f
 800d50a:	d8f0      	bhi.n	800d4ee <SEGGER_SYSVIEW_SendModule+0x66>
 800d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	627a      	str	r2, [r7, #36]	; 0x24
 800d512:	6a3a      	ldr	r2, [r7, #32]
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	e00b      	b.n	800d540 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	1c59      	adds	r1, r3, #1
 800d530:	61f9      	str	r1, [r7, #28]
 800d532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d536:	b2d2      	uxtb	r2, r2
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	09db      	lsrs	r3, r3, #7
 800d53e:	61bb      	str	r3, [r7, #24]
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	2b7f      	cmp	r3, #127	; 0x7f
 800d544:	d8f0      	bhi.n	800d528 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	1c5a      	adds	r2, r3, #1
 800d54a:	61fa      	str	r2, [r7, #28]
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	b2d2      	uxtb	r2, r2
 800d550:	701a      	strb	r2, [r3, #0]
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2280      	movs	r2, #128	; 0x80
 800d55c:	4619      	mov	r1, r3
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f7fe ff42 	bl	800c3e8 <_EncodeStr>
 800d564:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d566:	2216      	movs	r2, #22
 800d568:	68f9      	ldr	r1, [r7, #12]
 800d56a:	6938      	ldr	r0, [r7, #16]
 800d56c:	f7ff f87a 	bl	800c664 <_SendPacket>
      RECORD_END();
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800d576:	bf00      	nop
 800d578:	3730      	adds	r7, #48	; 0x30
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	200133b4 	.word	0x200133b4
 800d584:	200133bc 	.word	0x200133bc

0800d588 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d58e:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00f      	beq.n	800d5b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	691b      	ldr	r3, [r3, #16]
 800d5ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d1f2      	bne.n	800d59c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	200133b4 	.word	0x200133b4

0800d5c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d5ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d5ce:	f04f 0120 	mov.w	r1, #32
 800d5d2:	f381 8811 	msr	BASEPRI, r1
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	4817      	ldr	r0, [pc, #92]	; (800d638 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d5da:	f7fe ff52 	bl	800c482 <_PreparePacket>
 800d5de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	617b      	str	r3, [r7, #20]
 800d5e8:	4b14      	ldr	r3, [pc, #80]	; (800d63c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]
 800d5ee:	e00b      	b.n	800d608 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	1c59      	adds	r1, r3, #1
 800d5f8:	6179      	str	r1, [r7, #20]
 800d5fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d5fe:	b2d2      	uxtb	r2, r2
 800d600:	701a      	strb	r2, [r3, #0]
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	09db      	lsrs	r3, r3, #7
 800d606:	613b      	str	r3, [r7, #16]
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2b7f      	cmp	r3, #127	; 0x7f
 800d60c:	d8f0      	bhi.n	800d5f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	1c5a      	adds	r2, r3, #1
 800d612:	617a      	str	r2, [r7, #20]
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	b2d2      	uxtb	r2, r2
 800d618:	701a      	strb	r2, [r3, #0]
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d61e:	221b      	movs	r2, #27
 800d620:	6879      	ldr	r1, [r7, #4]
 800d622:	68b8      	ldr	r0, [r7, #8]
 800d624:	f7ff f81e 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f383 8811 	msr	BASEPRI, r3
}
 800d62e:	bf00      	nop
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	200133bc 	.word	0x200133bc
 800d63c:	200133b8 	.word	0x200133b8

0800d640 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d640:	b580      	push	{r7, lr}
 800d642:	b08a      	sub	sp, #40	; 0x28
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d648:	f3ef 8311 	mrs	r3, BASEPRI
 800d64c:	f04f 0120 	mov.w	r1, #32
 800d650:	f381 8811 	msr	BASEPRI, r1
 800d654:	617b      	str	r3, [r7, #20]
 800d656:	4827      	ldr	r0, [pc, #156]	; (800d6f4 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d658:	f7fe ff13 	bl	800c482 <_PreparePacket>
 800d65c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d65e:	2280      	movs	r2, #128	; 0x80
 800d660:	6879      	ldr	r1, [r7, #4]
 800d662:	6938      	ldr	r0, [r7, #16]
 800d664:	f7fe fec0 	bl	800c3e8 <_EncodeStr>
 800d668:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
 800d66e:	2301      	movs	r3, #1
 800d670:	623b      	str	r3, [r7, #32]
 800d672:	e00b      	b.n	800d68c <SEGGER_SYSVIEW_Warn+0x4c>
 800d674:	6a3b      	ldr	r3, [r7, #32]
 800d676:	b2da      	uxtb	r2, r3
 800d678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67a:	1c59      	adds	r1, r3, #1
 800d67c:	6279      	str	r1, [r7, #36]	; 0x24
 800d67e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d682:	b2d2      	uxtb	r2, r2
 800d684:	701a      	strb	r2, [r3, #0]
 800d686:	6a3b      	ldr	r3, [r7, #32]
 800d688:	09db      	lsrs	r3, r3, #7
 800d68a:	623b      	str	r3, [r7, #32]
 800d68c:	6a3b      	ldr	r3, [r7, #32]
 800d68e:	2b7f      	cmp	r3, #127	; 0x7f
 800d690:	d8f0      	bhi.n	800d674 <SEGGER_SYSVIEW_Warn+0x34>
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	627a      	str	r2, [r7, #36]	; 0x24
 800d698:	6a3a      	ldr	r2, [r7, #32]
 800d69a:	b2d2      	uxtb	r2, r2
 800d69c:	701a      	strb	r2, [r3, #0]
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	61fb      	str	r3, [r7, #28]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	61bb      	str	r3, [r7, #24]
 800d6aa:	e00b      	b.n	800d6c4 <SEGGER_SYSVIEW_Warn+0x84>
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	1c59      	adds	r1, r3, #1
 800d6b4:	61f9      	str	r1, [r7, #28]
 800d6b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d6ba:	b2d2      	uxtb	r2, r2
 800d6bc:	701a      	strb	r2, [r3, #0]
 800d6be:	69bb      	ldr	r3, [r7, #24]
 800d6c0:	09db      	lsrs	r3, r3, #7
 800d6c2:	61bb      	str	r3, [r7, #24]
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	2b7f      	cmp	r3, #127	; 0x7f
 800d6c8:	d8f0      	bhi.n	800d6ac <SEGGER_SYSVIEW_Warn+0x6c>
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	61fa      	str	r2, [r7, #28]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	b2d2      	uxtb	r2, r2
 800d6d4:	701a      	strb	r2, [r3, #0]
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d6da:	221a      	movs	r2, #26
 800d6dc:	68f9      	ldr	r1, [r7, #12]
 800d6de:	6938      	ldr	r0, [r7, #16]
 800d6e0:	f7fe ffc0 	bl	800c664 <_SendPacket>
  RECORD_END();
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	f383 8811 	msr	BASEPRI, r3
}
 800d6ea:	bf00      	nop
 800d6ec:	3728      	adds	r7, #40	; 0x28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200133bc 	.word	0x200133bc

0800d6f8 <__errno>:
 800d6f8:	4b01      	ldr	r3, [pc, #4]	; (800d700 <__errno+0x8>)
 800d6fa:	6818      	ldr	r0, [r3, #0]
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	20000034 	.word	0x20000034

0800d704 <__libc_init_array>:
 800d704:	b570      	push	{r4, r5, r6, lr}
 800d706:	4d0d      	ldr	r5, [pc, #52]	; (800d73c <__libc_init_array+0x38>)
 800d708:	4c0d      	ldr	r4, [pc, #52]	; (800d740 <__libc_init_array+0x3c>)
 800d70a:	1b64      	subs	r4, r4, r5
 800d70c:	10a4      	asrs	r4, r4, #2
 800d70e:	2600      	movs	r6, #0
 800d710:	42a6      	cmp	r6, r4
 800d712:	d109      	bne.n	800d728 <__libc_init_array+0x24>
 800d714:	4d0b      	ldr	r5, [pc, #44]	; (800d744 <__libc_init_array+0x40>)
 800d716:	4c0c      	ldr	r4, [pc, #48]	; (800d748 <__libc_init_array+0x44>)
 800d718:	f000 f914 	bl	800d944 <_init>
 800d71c:	1b64      	subs	r4, r4, r5
 800d71e:	10a4      	asrs	r4, r4, #2
 800d720:	2600      	movs	r6, #0
 800d722:	42a6      	cmp	r6, r4
 800d724:	d105      	bne.n	800d732 <__libc_init_array+0x2e>
 800d726:	bd70      	pop	{r4, r5, r6, pc}
 800d728:	f855 3b04 	ldr.w	r3, [r5], #4
 800d72c:	4798      	blx	r3
 800d72e:	3601      	adds	r6, #1
 800d730:	e7ee      	b.n	800d710 <__libc_init_array+0xc>
 800d732:	f855 3b04 	ldr.w	r3, [r5], #4
 800d736:	4798      	blx	r3
 800d738:	3601      	adds	r6, #1
 800d73a:	e7f2      	b.n	800d722 <__libc_init_array+0x1e>
 800d73c:	0800da38 	.word	0x0800da38
 800d740:	0800da38 	.word	0x0800da38
 800d744:	0800da38 	.word	0x0800da38
 800d748:	0800da3c 	.word	0x0800da3c

0800d74c <malloc>:
 800d74c:	4b02      	ldr	r3, [pc, #8]	; (800d758 <malloc+0xc>)
 800d74e:	4601      	mov	r1, r0
 800d750:	6818      	ldr	r0, [r3, #0]
 800d752:	f000 b87f 	b.w	800d854 <_malloc_r>
 800d756:	bf00      	nop
 800d758:	20000034 	.word	0x20000034

0800d75c <free>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <free+0xc>)
 800d75e:	4601      	mov	r1, r0
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	f000 b827 	b.w	800d7b4 <_free_r>
 800d766:	bf00      	nop
 800d768:	20000034 	.word	0x20000034

0800d76c <memcmp>:
 800d76c:	b530      	push	{r4, r5, lr}
 800d76e:	3901      	subs	r1, #1
 800d770:	2400      	movs	r4, #0
 800d772:	42a2      	cmp	r2, r4
 800d774:	d101      	bne.n	800d77a <memcmp+0xe>
 800d776:	2000      	movs	r0, #0
 800d778:	e005      	b.n	800d786 <memcmp+0x1a>
 800d77a:	5d03      	ldrb	r3, [r0, r4]
 800d77c:	3401      	adds	r4, #1
 800d77e:	5d0d      	ldrb	r5, [r1, r4]
 800d780:	42ab      	cmp	r3, r5
 800d782:	d0f6      	beq.n	800d772 <memcmp+0x6>
 800d784:	1b58      	subs	r0, r3, r5
 800d786:	bd30      	pop	{r4, r5, pc}

0800d788 <memcpy>:
 800d788:	440a      	add	r2, r1
 800d78a:	4291      	cmp	r1, r2
 800d78c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d790:	d100      	bne.n	800d794 <memcpy+0xc>
 800d792:	4770      	bx	lr
 800d794:	b510      	push	{r4, lr}
 800d796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d79a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d79e:	4291      	cmp	r1, r2
 800d7a0:	d1f9      	bne.n	800d796 <memcpy+0xe>
 800d7a2:	bd10      	pop	{r4, pc}

0800d7a4 <memset>:
 800d7a4:	4402      	add	r2, r0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d100      	bne.n	800d7ae <memset+0xa>
 800d7ac:	4770      	bx	lr
 800d7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800d7b2:	e7f9      	b.n	800d7a8 <memset+0x4>

0800d7b4 <_free_r>:
 800d7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7b6:	2900      	cmp	r1, #0
 800d7b8:	d048      	beq.n	800d84c <_free_r+0x98>
 800d7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7be:	9001      	str	r0, [sp, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7c6:	bfb8      	it	lt
 800d7c8:	18e4      	addlt	r4, r4, r3
 800d7ca:	f000 f8ad 	bl	800d928 <__malloc_lock>
 800d7ce:	4a20      	ldr	r2, [pc, #128]	; (800d850 <_free_r+0x9c>)
 800d7d0:	9801      	ldr	r0, [sp, #4]
 800d7d2:	6813      	ldr	r3, [r2, #0]
 800d7d4:	4615      	mov	r5, r2
 800d7d6:	b933      	cbnz	r3, 800d7e6 <_free_r+0x32>
 800d7d8:	6063      	str	r3, [r4, #4]
 800d7da:	6014      	str	r4, [r2, #0]
 800d7dc:	b003      	add	sp, #12
 800d7de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7e2:	f000 b8a7 	b.w	800d934 <__malloc_unlock>
 800d7e6:	42a3      	cmp	r3, r4
 800d7e8:	d90b      	bls.n	800d802 <_free_r+0x4e>
 800d7ea:	6821      	ldr	r1, [r4, #0]
 800d7ec:	1862      	adds	r2, r4, r1
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bf04      	itt	eq
 800d7f2:	681a      	ldreq	r2, [r3, #0]
 800d7f4:	685b      	ldreq	r3, [r3, #4]
 800d7f6:	6063      	str	r3, [r4, #4]
 800d7f8:	bf04      	itt	eq
 800d7fa:	1852      	addeq	r2, r2, r1
 800d7fc:	6022      	streq	r2, [r4, #0]
 800d7fe:	602c      	str	r4, [r5, #0]
 800d800:	e7ec      	b.n	800d7dc <_free_r+0x28>
 800d802:	461a      	mov	r2, r3
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	b10b      	cbz	r3, 800d80c <_free_r+0x58>
 800d808:	42a3      	cmp	r3, r4
 800d80a:	d9fa      	bls.n	800d802 <_free_r+0x4e>
 800d80c:	6811      	ldr	r1, [r2, #0]
 800d80e:	1855      	adds	r5, r2, r1
 800d810:	42a5      	cmp	r5, r4
 800d812:	d10b      	bne.n	800d82c <_free_r+0x78>
 800d814:	6824      	ldr	r4, [r4, #0]
 800d816:	4421      	add	r1, r4
 800d818:	1854      	adds	r4, r2, r1
 800d81a:	42a3      	cmp	r3, r4
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	d1dd      	bne.n	800d7dc <_free_r+0x28>
 800d820:	681c      	ldr	r4, [r3, #0]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	6053      	str	r3, [r2, #4]
 800d826:	4421      	add	r1, r4
 800d828:	6011      	str	r1, [r2, #0]
 800d82a:	e7d7      	b.n	800d7dc <_free_r+0x28>
 800d82c:	d902      	bls.n	800d834 <_free_r+0x80>
 800d82e:	230c      	movs	r3, #12
 800d830:	6003      	str	r3, [r0, #0]
 800d832:	e7d3      	b.n	800d7dc <_free_r+0x28>
 800d834:	6825      	ldr	r5, [r4, #0]
 800d836:	1961      	adds	r1, r4, r5
 800d838:	428b      	cmp	r3, r1
 800d83a:	bf04      	itt	eq
 800d83c:	6819      	ldreq	r1, [r3, #0]
 800d83e:	685b      	ldreq	r3, [r3, #4]
 800d840:	6063      	str	r3, [r4, #4]
 800d842:	bf04      	itt	eq
 800d844:	1949      	addeq	r1, r1, r5
 800d846:	6021      	streq	r1, [r4, #0]
 800d848:	6054      	str	r4, [r2, #4]
 800d84a:	e7c7      	b.n	800d7dc <_free_r+0x28>
 800d84c:	b003      	add	sp, #12
 800d84e:	bd30      	pop	{r4, r5, pc}
 800d850:	200134a0 	.word	0x200134a0

0800d854 <_malloc_r>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	1ccd      	adds	r5, r1, #3
 800d858:	f025 0503 	bic.w	r5, r5, #3
 800d85c:	3508      	adds	r5, #8
 800d85e:	2d0c      	cmp	r5, #12
 800d860:	bf38      	it	cc
 800d862:	250c      	movcc	r5, #12
 800d864:	2d00      	cmp	r5, #0
 800d866:	4606      	mov	r6, r0
 800d868:	db01      	blt.n	800d86e <_malloc_r+0x1a>
 800d86a:	42a9      	cmp	r1, r5
 800d86c:	d903      	bls.n	800d876 <_malloc_r+0x22>
 800d86e:	230c      	movs	r3, #12
 800d870:	6033      	str	r3, [r6, #0]
 800d872:	2000      	movs	r0, #0
 800d874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d876:	f000 f857 	bl	800d928 <__malloc_lock>
 800d87a:	4921      	ldr	r1, [pc, #132]	; (800d900 <_malloc_r+0xac>)
 800d87c:	680a      	ldr	r2, [r1, #0]
 800d87e:	4614      	mov	r4, r2
 800d880:	b99c      	cbnz	r4, 800d8aa <_malloc_r+0x56>
 800d882:	4f20      	ldr	r7, [pc, #128]	; (800d904 <_malloc_r+0xb0>)
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	b923      	cbnz	r3, 800d892 <_malloc_r+0x3e>
 800d888:	4621      	mov	r1, r4
 800d88a:	4630      	mov	r0, r6
 800d88c:	f000 f83c 	bl	800d908 <_sbrk_r>
 800d890:	6038      	str	r0, [r7, #0]
 800d892:	4629      	mov	r1, r5
 800d894:	4630      	mov	r0, r6
 800d896:	f000 f837 	bl	800d908 <_sbrk_r>
 800d89a:	1c43      	adds	r3, r0, #1
 800d89c:	d123      	bne.n	800d8e6 <_malloc_r+0x92>
 800d89e:	230c      	movs	r3, #12
 800d8a0:	6033      	str	r3, [r6, #0]
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f000 f846 	bl	800d934 <__malloc_unlock>
 800d8a8:	e7e3      	b.n	800d872 <_malloc_r+0x1e>
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	1b5b      	subs	r3, r3, r5
 800d8ae:	d417      	bmi.n	800d8e0 <_malloc_r+0x8c>
 800d8b0:	2b0b      	cmp	r3, #11
 800d8b2:	d903      	bls.n	800d8bc <_malloc_r+0x68>
 800d8b4:	6023      	str	r3, [r4, #0]
 800d8b6:	441c      	add	r4, r3
 800d8b8:	6025      	str	r5, [r4, #0]
 800d8ba:	e004      	b.n	800d8c6 <_malloc_r+0x72>
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	42a2      	cmp	r2, r4
 800d8c0:	bf0c      	ite	eq
 800d8c2:	600b      	streq	r3, [r1, #0]
 800d8c4:	6053      	strne	r3, [r2, #4]
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f000 f834 	bl	800d934 <__malloc_unlock>
 800d8cc:	f104 000b 	add.w	r0, r4, #11
 800d8d0:	1d23      	adds	r3, r4, #4
 800d8d2:	f020 0007 	bic.w	r0, r0, #7
 800d8d6:	1ac2      	subs	r2, r0, r3
 800d8d8:	d0cc      	beq.n	800d874 <_malloc_r+0x20>
 800d8da:	1a1b      	subs	r3, r3, r0
 800d8dc:	50a3      	str	r3, [r4, r2]
 800d8de:	e7c9      	b.n	800d874 <_malloc_r+0x20>
 800d8e0:	4622      	mov	r2, r4
 800d8e2:	6864      	ldr	r4, [r4, #4]
 800d8e4:	e7cc      	b.n	800d880 <_malloc_r+0x2c>
 800d8e6:	1cc4      	adds	r4, r0, #3
 800d8e8:	f024 0403 	bic.w	r4, r4, #3
 800d8ec:	42a0      	cmp	r0, r4
 800d8ee:	d0e3      	beq.n	800d8b8 <_malloc_r+0x64>
 800d8f0:	1a21      	subs	r1, r4, r0
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f000 f808 	bl	800d908 <_sbrk_r>
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d1dd      	bne.n	800d8b8 <_malloc_r+0x64>
 800d8fc:	e7cf      	b.n	800d89e <_malloc_r+0x4a>
 800d8fe:	bf00      	nop
 800d900:	200134a0 	.word	0x200134a0
 800d904:	200134a4 	.word	0x200134a4

0800d908 <_sbrk_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	; (800d924 <_sbrk_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7f3 fbb4 	bl	8001080 <_sbrk>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_sbrk_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_sbrk_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	20013df0 	.word	0x20013df0

0800d928 <__malloc_lock>:
 800d928:	4801      	ldr	r0, [pc, #4]	; (800d930 <__malloc_lock+0x8>)
 800d92a:	f000 b809 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d92e:	bf00      	nop
 800d930:	20013df8 	.word	0x20013df8

0800d934 <__malloc_unlock>:
 800d934:	4801      	ldr	r0, [pc, #4]	; (800d93c <__malloc_unlock+0x8>)
 800d936:	f000 b804 	b.w	800d942 <__retarget_lock_release_recursive>
 800d93a:	bf00      	nop
 800d93c:	20013df8 	.word	0x20013df8

0800d940 <__retarget_lock_acquire_recursive>:
 800d940:	4770      	bx	lr

0800d942 <__retarget_lock_release_recursive>:
 800d942:	4770      	bx	lr

0800d944 <_init>:
 800d944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d946:	bf00      	nop
 800d948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94a:	bc08      	pop	{r3}
 800d94c:	469e      	mov	lr, r3
 800d94e:	4770      	bx	lr

0800d950 <_fini>:
 800d950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d952:	bf00      	nop
 800d954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d956:	bc08      	pop	{r3}
 800d958:	469e      	mov	lr, r3
 800d95a:	4770      	bx	lr
