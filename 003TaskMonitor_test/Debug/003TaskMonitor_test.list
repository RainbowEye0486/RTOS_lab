
003TaskMonitor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c61c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800c7ac  0800c7ac  0001c7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c888  0800c888  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800c888  0800c888  0001c888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c890  0800c890  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c890  0800c890  0001c890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c894  0800c894  0001c894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800c898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00013ca8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013d40  20013d40  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00034537  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005ed4  00000000  00000000  000545ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002200  00000000  00000000  0005a4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fe0  00000000  00000000  0005c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028513  00000000  00000000  0005e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029aa0  00000000  00000000  00086bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c77  00000000  00000000  000b066b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001952e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009300  00000000  00000000  00195338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c794 	.word	0x0800c794

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800c794 	.word	0x0800c794

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013c88 	.word	0x20013c88

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b96e 	b.w	8000558 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468c      	mov	ip, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	f040 8083 	bne.w	80003aa <__udivmoddi4+0x116>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4617      	mov	r7, r2
 80002a8:	d947      	bls.n	800033a <__udivmoddi4+0xa6>
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	b142      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	f1c2 0020 	rsb	r0, r2, #32
 80002b4:	fa24 f000 	lsr.w	r0, r4, r0
 80002b8:	4091      	lsls	r1, r2
 80002ba:	4097      	lsls	r7, r2
 80002bc:	ea40 0c01 	orr.w	ip, r0, r1
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbbc f6f8 	udiv	r6, ip, r8
 80002cc:	fa1f fe87 	uxth.w	lr, r7
 80002d0:	fb08 c116 	mls	r1, r8, r6, ip
 80002d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d8:	fb06 f10e 	mul.w	r1, r6, lr
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18fb      	adds	r3, r7, r3
 80002e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002e6:	f080 8119 	bcs.w	800051c <__udivmoddi4+0x288>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8116 	bls.w	800051c <__udivmoddi4+0x288>
 80002f0:	3e02      	subs	r6, #2
 80002f2:	443b      	add	r3, r7
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fe0e 	mul.w	lr, r0, lr
 8000308:	45a6      	cmp	lr, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	193c      	adds	r4, r7, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8105 	bcs.w	8000520 <__udivmoddi4+0x28c>
 8000316:	45a6      	cmp	lr, r4
 8000318:	f240 8102 	bls.w	8000520 <__udivmoddi4+0x28c>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000324:	eba4 040e 	sub.w	r4, r4, lr
 8000328:	2600      	movs	r6, #0
 800032a:	b11d      	cbz	r5, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c5 4300 	strd	r4, r3, [r5]
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xaa>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f282 	clz	r2, r2
 8000342:	2a00      	cmp	r2, #0
 8000344:	d150      	bne.n	80003e8 <__udivmoddi4+0x154>
 8000346:	1bcb      	subs	r3, r1, r7
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f f887 	uxth.w	r8, r7
 8000350:	2601      	movs	r6, #1
 8000352:	fbb3 fcfe 	udiv	ip, r3, lr
 8000356:	0c21      	lsrs	r1, r4, #16
 8000358:	fb0e 331c 	mls	r3, lr, ip, r3
 800035c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000360:	fb08 f30c 	mul.w	r3, r8, ip
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xe4>
 8000368:	1879      	adds	r1, r7, r1
 800036a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0xe2>
 8000370:	428b      	cmp	r3, r1
 8000372:	f200 80e9 	bhi.w	8000548 <__udivmoddi4+0x2b4>
 8000376:	4684      	mov	ip, r0
 8000378:	1ac9      	subs	r1, r1, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000380:	fb0e 1110 	mls	r1, lr, r0, r1
 8000384:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000388:	fb08 f800 	mul.w	r8, r8, r0
 800038c:	45a0      	cmp	r8, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x10c>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x10a>
 8000398:	45a0      	cmp	r8, r4
 800039a:	f200 80d9 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 0408 	sub.w	r4, r4, r8
 80003a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a8:	e7bf      	b.n	800032a <__udivmoddi4+0x96>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d909      	bls.n	80003c2 <__udivmoddi4+0x12e>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 80b1 	beq.w	8000516 <__udivmoddi4+0x282>
 80003b4:	2600      	movs	r6, #0
 80003b6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ba:	4630      	mov	r0, r6
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	fab3 f683 	clz	r6, r3
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d14a      	bne.n	8000460 <__udivmoddi4+0x1cc>
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0x140>
 80003ce:	4282      	cmp	r2, r0
 80003d0:	f200 80b8 	bhi.w	8000544 <__udivmoddi4+0x2b0>
 80003d4:	1a84      	subs	r4, r0, r2
 80003d6:	eb61 0103 	sbc.w	r1, r1, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	468c      	mov	ip, r1
 80003de:	2d00      	cmp	r5, #0
 80003e0:	d0a8      	beq.n	8000334 <__udivmoddi4+0xa0>
 80003e2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003e6:	e7a5      	b.n	8000334 <__udivmoddi4+0xa0>
 80003e8:	f1c2 0320 	rsb	r3, r2, #32
 80003ec:	fa20 f603 	lsr.w	r6, r0, r3
 80003f0:	4097      	lsls	r7, r2
 80003f2:	fa01 f002 	lsl.w	r0, r1, r2
 80003f6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fa:	40d9      	lsrs	r1, r3
 80003fc:	4330      	orrs	r0, r6
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	fbb1 f6fe 	udiv	r6, r1, lr
 8000404:	fa1f f887 	uxth.w	r8, r7
 8000408:	fb0e 1116 	mls	r1, lr, r6, r1
 800040c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000410:	fb06 f108 	mul.w	r1, r6, r8
 8000414:	4299      	cmp	r1, r3
 8000416:	fa04 f402 	lsl.w	r4, r4, r2
 800041a:	d909      	bls.n	8000430 <__udivmoddi4+0x19c>
 800041c:	18fb      	adds	r3, r7, r3
 800041e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000422:	f080 808d 	bcs.w	8000540 <__udivmoddi4+0x2ac>
 8000426:	4299      	cmp	r1, r3
 8000428:	f240 808a 	bls.w	8000540 <__udivmoddi4+0x2ac>
 800042c:	3e02      	subs	r6, #2
 800042e:	443b      	add	r3, r7
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	b281      	uxth	r1, r0
 8000434:	fbb3 f0fe 	udiv	r0, r3, lr
 8000438:	fb0e 3310 	mls	r3, lr, r0, r3
 800043c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000440:	fb00 f308 	mul.w	r3, r0, r8
 8000444:	428b      	cmp	r3, r1
 8000446:	d907      	bls.n	8000458 <__udivmoddi4+0x1c4>
 8000448:	1879      	adds	r1, r7, r1
 800044a:	f100 3cff 	add.w	ip, r0, #4294967295
 800044e:	d273      	bcs.n	8000538 <__udivmoddi4+0x2a4>
 8000450:	428b      	cmp	r3, r1
 8000452:	d971      	bls.n	8000538 <__udivmoddi4+0x2a4>
 8000454:	3802      	subs	r0, #2
 8000456:	4439      	add	r1, r7
 8000458:	1acb      	subs	r3, r1, r3
 800045a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800045e:	e778      	b.n	8000352 <__udivmoddi4+0xbe>
 8000460:	f1c6 0c20 	rsb	ip, r6, #32
 8000464:	fa03 f406 	lsl.w	r4, r3, r6
 8000468:	fa22 f30c 	lsr.w	r3, r2, ip
 800046c:	431c      	orrs	r4, r3
 800046e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000472:	fa01 f306 	lsl.w	r3, r1, r6
 8000476:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800047a:	fa21 f10c 	lsr.w	r1, r1, ip
 800047e:	431f      	orrs	r7, r3
 8000480:	0c3b      	lsrs	r3, r7, #16
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fa1f f884 	uxth.w	r8, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000492:	fb09 fa08 	mul.w	sl, r9, r8
 8000496:	458a      	cmp	sl, r1
 8000498:	fa02 f206 	lsl.w	r2, r2, r6
 800049c:	fa00 f306 	lsl.w	r3, r0, r6
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x220>
 80004a2:	1861      	adds	r1, r4, r1
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	d248      	bcs.n	800053c <__udivmoddi4+0x2a8>
 80004aa:	458a      	cmp	sl, r1
 80004ac:	d946      	bls.n	800053c <__udivmoddi4+0x2a8>
 80004ae:	f1a9 0902 	sub.w	r9, r9, #2
 80004b2:	4421      	add	r1, r4
 80004b4:	eba1 010a 	sub.w	r1, r1, sl
 80004b8:	b2bf      	uxth	r7, r7
 80004ba:	fbb1 f0fe 	udiv	r0, r1, lr
 80004be:	fb0e 1110 	mls	r1, lr, r0, r1
 80004c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004c6:	fb00 f808 	mul.w	r8, r0, r8
 80004ca:	45b8      	cmp	r8, r7
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x24a>
 80004ce:	19e7      	adds	r7, r4, r7
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d22e      	bcs.n	8000534 <__udivmoddi4+0x2a0>
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d92c      	bls.n	8000534 <__udivmoddi4+0x2a0>
 80004da:	3802      	subs	r0, #2
 80004dc:	4427      	add	r7, r4
 80004de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e2:	eba7 0708 	sub.w	r7, r7, r8
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	454f      	cmp	r7, r9
 80004ec:	46c6      	mov	lr, r8
 80004ee:	4649      	mov	r1, r9
 80004f0:	d31a      	bcc.n	8000528 <__udivmoddi4+0x294>
 80004f2:	d017      	beq.n	8000524 <__udivmoddi4+0x290>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x27a>
 80004f6:	ebb3 020e 	subs.w	r2, r3, lr
 80004fa:	eb67 0701 	sbc.w	r7, r7, r1
 80004fe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000502:	40f2      	lsrs	r2, r6
 8000504:	ea4c 0202 	orr.w	r2, ip, r2
 8000508:	40f7      	lsrs	r7, r6
 800050a:	e9c5 2700 	strd	r2, r7, [r5]
 800050e:	2600      	movs	r6, #0
 8000510:	4631      	mov	r1, r6
 8000512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000516:	462e      	mov	r6, r5
 8000518:	4628      	mov	r0, r5
 800051a:	e70b      	b.n	8000334 <__udivmoddi4+0xa0>
 800051c:	4606      	mov	r6, r0
 800051e:	e6e9      	b.n	80002f4 <__udivmoddi4+0x60>
 8000520:	4618      	mov	r0, r3
 8000522:	e6fd      	b.n	8000320 <__udivmoddi4+0x8c>
 8000524:	4543      	cmp	r3, r8
 8000526:	d2e5      	bcs.n	80004f4 <__udivmoddi4+0x260>
 8000528:	ebb8 0e02 	subs.w	lr, r8, r2
 800052c:	eb69 0104 	sbc.w	r1, r9, r4
 8000530:	3801      	subs	r0, #1
 8000532:	e7df      	b.n	80004f4 <__udivmoddi4+0x260>
 8000534:	4608      	mov	r0, r1
 8000536:	e7d2      	b.n	80004de <__udivmoddi4+0x24a>
 8000538:	4660      	mov	r0, ip
 800053a:	e78d      	b.n	8000458 <__udivmoddi4+0x1c4>
 800053c:	4681      	mov	r9, r0
 800053e:	e7b9      	b.n	80004b4 <__udivmoddi4+0x220>
 8000540:	4666      	mov	r6, ip
 8000542:	e775      	b.n	8000430 <__udivmoddi4+0x19c>
 8000544:	4630      	mov	r0, r6
 8000546:	e74a      	b.n	80003de <__udivmoddi4+0x14a>
 8000548:	f1ac 0c02 	sub.w	ip, ip, #2
 800054c:	4439      	add	r1, r7
 800054e:	e713      	b.n	8000378 <__udivmoddi4+0xe4>
 8000550:	3802      	subs	r0, #2
 8000552:	443c      	add	r4, r7
 8000554:	e724      	b.n	80003a0 <__udivmoddi4+0x10c>
 8000556:	bf00      	nop

08000558 <__aeabi_idiv0>:
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fd8b 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f889 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f9af 	bl	80008cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f8ef 	bl	8000750 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000572:	f000 f91b 	bl	80007ac <MX_I2S3_Init>
  MX_SPI1_Init();
 8000576:	f000 f949 	bl	800080c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800057a:	f007 fdc9 	bl	8008110 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f97b 	bl	8000878 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(Red_LED_App, "Red_LED", 200, NULL, 1, &red_handle);
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4932      	ldr	r1, [pc, #200]	; (800065c <main+0x100>)
 8000592:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0x104>)
 8000594:	f008 fed2 	bl	800933c <xTaskCreate>
 8000598:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x58>
  status = xTaskCreate(Green_LED_App, "Green_LED", 200, NULL, 1, &green_handle);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2301      	movs	r3, #1
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2300      	movs	r3, #0
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	4927      	ldr	r1, [pc, #156]	; (8000664 <main+0x108>)
 80005c6:	4828      	ldr	r0, [pc, #160]	; (8000668 <main+0x10c>)
 80005c8:	f008 feb8 	bl	800933c <xTaskCreate>
 80005cc:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x8e>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	61fb      	str	r3, [r7, #28]
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x8c>
  status = xTaskCreate(Delay_App, "Delay_App", 200, NULL, 14, &delay_handle);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	230e      	movs	r3, #14
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	491c      	ldr	r1, [pc, #112]	; (800066c <main+0x110>)
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <main+0x114>)
 80005fc:	f008 fe9e 	bl	800933c <xTaskCreate>
 8000600:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0xc2>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	61bb      	str	r3, [r7, #24]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0xc0>
  status = xTaskCreate(TaskMonitor_App, "TaskMonit", 200, NULL, 3, &monitor_handle);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2303      	movs	r3, #3
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	4912      	ldr	r1, [pc, #72]	; (8000674 <main+0x118>)
 800062c:	4812      	ldr	r0, [pc, #72]	; (8000678 <main+0x11c>)
 800062e:	f008 fe85 	bl	800933c <xTaskCreate>
 8000632:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000636:	2b01      	cmp	r3, #1
 8000638:	d00a      	beq.n	8000650 <main+0xf4>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	617b      	str	r3, [r7, #20]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0xf2>

  vTaskStartScheduler();
 8000650:	f009 f810 	bl	8009674 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000654:	f007 fd82 	bl	800815c <MX_USB_HOST_Process>
 8000658:	e7fc      	b.n	8000654 <main+0xf8>
 800065a:	bf00      	nop
 800065c:	0800c7ac 	.word	0x0800c7ac
 8000660:	08000ac9 	.word	0x08000ac9
 8000664:	0800c7b4 	.word	0x0800c7b4
 8000668:	08000af5 	.word	0x08000af5
 800066c:	0800c7c0 	.word	0x0800c7c0
 8000670:	08000b21 	.word	0x08000b21
 8000674:	0800c7cc 	.word	0x0800c7cc
 8000678:	08000b4d 	.word	0x08000b4d

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f00b ffb2 	bl	800c5f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f003 fb26 	bl	8003d54 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070e:	f000 fa39 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f003 fd87 	bl	8004244 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 fa22 	bl	8000b84 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f002 fcfd 	bl	800318c <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f9f4 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200133dc 	.word	0x200133dc
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_I2S3_Init+0x54>)
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <MX_I2S3_Init+0x58>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2S3_Init+0x54>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_I2S3_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2S3_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_I2S3_Init+0x54>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <MX_I2S3_Init+0x5c>)
 80007d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_I2S3_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2S3_Init+0x54>)
 80007ec:	f002 fe12 	bl	8003414 <HAL_I2S_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f6:	f000 f9c5 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200134d8 	.word	0x200134d8
 8000804:	40003c00 	.word	0x40003c00
 8000808:	00017700 	.word	0x00017700

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f004 f85f 	bl	8004920 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f98c 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20013438 	.word	0x20013438
 8000874:	40013000 	.word	0x40013000

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <MX_USART2_UART_Init+0x50>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f004 fb6c 	bl	8004f8c <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ba:	f000 f963 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20013490 	.word	0x20013490
 80008c8:	40004400 	.word	0x40004400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08c      	sub	sp, #48	; 0x30
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b72      	ldr	r3, [pc, #456]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a71      	ldr	r2, [pc, #452]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	4b6b      	ldr	r3, [pc, #428]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6a      	ldr	r2, [pc, #424]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a63      	ldr	r2, [pc, #396]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b5d      	ldr	r3, [pc, #372]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b5a      	ldr	r3, [pc, #360]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a55      	ldr	r2, [pc, #340]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b53      	ldr	r3, [pc, #332]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b4f      	ldr	r3, [pc, #316]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b4c      	ldr	r3, [pc, #304]	; (8000ab0 <MX_GPIO_Init+0x1e4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2108      	movs	r1, #8
 800098e:	4849      	ldr	r0, [pc, #292]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000990:	f000 fe58 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4847      	ldr	r0, [pc, #284]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 800099a:	f000 fe53 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099e:	2200      	movs	r2, #0
 80009a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <MX_GPIO_Init+0x1f0>)
 80009a6:	f000 fe4d 	bl	8001644 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	483c      	ldr	r0, [pc, #240]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 80009c2:	f000 fca3 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4836      	ldr	r0, [pc, #216]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 80009de:	f000 fc95 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e2:	2308      	movs	r3, #8
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	482e      	ldr	r0, [pc, #184]	; (8000ab8 <MX_GPIO_Init+0x1ec>)
 80009fe:	f000 fc85 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a06:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	482a      	ldr	r0, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0x1f4>)
 8000a18:	f000 fc78 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4825      	ldr	r0, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000a30:	f000 fc6c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a46:	2305      	movs	r3, #5
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_GPIO_Init+0x1f8>)
 8000a52:	f000 fc5b 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a56:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_GPIO_Init+0x1f0>)
 8000a70:	f000 fc4c 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 031c 	add.w	r3, r7, #28
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_GPIO_Init+0x1f0>)
 8000a88:	f000 fc40 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a90:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0x1e8>)
 8000aa2:	f000 fc33 	bl	800130c <HAL_GPIO_Init>

}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	; 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <Red_LED_App>:

/* USER CODE BEGIN 4 */
void Red_LED_App(void *pvParameters){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	uint32_t Redtimer = 800;
 8000ad0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000ad4:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <Red_LED_App+0x28>)
 8000adc:	f000 fdcb 	bl	8001676 <HAL_GPIO_TogglePin>
		vTaskDelay(Redtimer);
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f008 fd8f 	bl	8009604 <vTaskDelay>
		Redtimer+=1;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Red_LED_Pin);
 8000aec:	e7f3      	b.n	8000ad6 <Red_LED_App+0xe>
 8000aee:	bf00      	nop
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <Green_LED_App>:
	}
}

void Green_LED_App(void *pvParameters){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint32_t Greentimer = 1000;
 8000afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b00:	60fb      	str	r3, [r7, #12]
	for(;;){
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <Green_LED_App+0x28>)
 8000b08:	f000 fdb5 	bl	8001676 <HAL_GPIO_TogglePin>
		vTaskDelay(Greentimer);
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f008 fd79 	bl	8009604 <vTaskDelay>
		Greentimer+=2;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3302      	adds	r3, #2
 8000b16:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(GPIOD,Green_LED_Pin);
 8000b18:	e7f3      	b.n	8000b02 <Green_LED_App+0xe>
 8000b1a:	bf00      	nop
 8000b1c:	40020c00 	.word	0x40020c00

08000b20 <Delay_App>:
	}
}

void Delay_App(void *pvParameters){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	int delayflag=0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
	uint32_t delaytime;
	while(1){
		if(delayflag==0){
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <Delay_App+0x1e>
			delaytime = 1000;
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	60bb      	str	r3, [r7, #8]
			delayflag=1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e002      	b.n	8000b44 <Delay_App+0x24>
		}else{
			delaytime=0xFFFFFFFF;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	60bb      	str	r3, [r7, #8]
		}
		vTaskDelay(delaytime);
 8000b44:	68b8      	ldr	r0, [r7, #8]
 8000b46:	f008 fd5d 	bl	8009604 <vTaskDelay>
		if(delayflag==0){
 8000b4a:	e7ef      	b.n	8000b2c <Delay_App+0xc>

08000b4c <TaskMonitor_App>:
	}
}

void TaskMonitor_App(void *pvParameters){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	for(;;){
		//Taskmonitor();
		vTaskDelay(1000);
 8000b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b58:	f008 fd54 	bl	8009604 <vTaskDelay>
 8000b5c:	e7fa      	b.n	8000b54 <TaskMonitor_App+0x8>
	...

08000b60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b72:	f000 faa5 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40001000 	.word	0x40001000

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_I2C_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12c      	bne.n	8000c5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c30:	2304      	movs	r3, #4
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <HAL_I2C_MspInit+0x8c>)
 8000c3c:	f000 fb66 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_I2C_MspInit+0x88>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40005400 	.word	0x40005400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400

08000c70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	; 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <HAL_I2S_MspInit+0xf0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d15a      	bne.n	8000d56 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ca4:	23c0      	movs	r3, #192	; 0xc0
 8000ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f003 fcf5 	bl	80046a0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cbc:	f7ff ff62 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4b20      	ldr	r3, [pc, #128]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce4:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6313      	str	r3, [r2, #48]	; 0x30
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a18      	ldr	r2, [pc, #96]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d14:	2310      	movs	r3, #16
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d24:	2306      	movs	r3, #6
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <HAL_I2S_MspInit+0xf8>)
 8000d30:	f000 faec 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d34:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d46:	2306      	movs	r3, #6
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <HAL_I2S_MspInit+0xfc>)
 8000d52:	f000 fadb 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3738      	adds	r7, #56	; 0x38
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40003c00 	.word	0x40003c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020800 	.word	0x40020800

08000d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_SPI_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12b      	bne.n	8000dea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000d9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a10      	ldr	r2, [pc, #64]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000dca:	23e0      	movs	r3, #224	; 0xe0
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000de6:	f000 fa91 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40013000 	.word	0x40013000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_UART_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	6413      	str	r3, [r2, #64]	; 0x40
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_UART_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0x8c>)
 8000e76:	f000 fa49 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f000 fa07 	bl	80012b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eaa:	2036      	movs	r0, #54	; 0x36
 8000eac:	f000 fa20 	bl	80012f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_InitTick+0xa4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_InitTick+0xa4>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0xa4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ecc:	f107 0210 	add.w	r2, r7, #16
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 fbb0 	bl	800463c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000edc:	f003 fb86 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_InitTick+0xa8>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0xac>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_InitTick+0xb0>)
 8000ef8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_InitTick+0xac>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_InitTick+0xac>)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_InitTick+0xac>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_InitTick+0xac>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_InitTick+0xac>)
 8000f16:	f003 fd8c 	bl	8004a32 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_InitTick+0xac>)
 8000f22:	f003 fddf 	bl	8004ae4 <HAL_TIM_Base_Start_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	20013520 	.word	0x20013520
 8000f40:	40001000 	.word	0x40001000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM6_DAC_IRQHandler+0x10>)
 8000f76:	f003 fe25 	bl	8004bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20013520 	.word	0x20013520

08000f84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <OTG_FS_IRQHandler+0x10>)
 8000f8a:	f000 fdf9 	bl	8001b80 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20013944 	.word	0x20013944

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d207      	bcs.n	8000fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc8:	f00b fabe 	bl	800c548 <__errno>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20020000 	.word	0x20020000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	200000b4 	.word	0x200000b4
 8001000:	20013d40 	.word	0x20013d40

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f00b fa7d 	bl	800c554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fa7f 	bl	800055c <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800106c:	0800c898 	.word	0x0800c898
  ldr r2, =_sbss
 8001070:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001074:	20013d40 	.word	0x20013d40

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>
	...

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f8fc 	bl	80012a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fef0 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fd6e 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20013568 	.word	0x20013568

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20013568 	.word	0x20013568

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff4c 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ca:	f7ff ff61 	bl	8001190 <__NVIC_GetPriorityGrouping>
 80012ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68b9      	ldr	r1, [r7, #8]
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff ffb1 	bl	800123c <NVIC_EncodePriority>
 80012da:	4602      	mov	r2, r0
 80012dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff80 	bl	80011e8 <__NVIC_SetPriority>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff54 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e16b      	b.n	8001600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001328:	2201      	movs	r2, #1
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 815a 	bne.w	80015fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b01      	cmp	r3, #1
 8001350:	d005      	beq.n	800135e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135a:	2b02      	cmp	r3, #2
 800135c:	d130      	bne.n	80013c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	2203      	movs	r2, #3
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001394:	2201      	movs	r2, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	f003 0201 	and.w	r2, r3, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d017      	beq.n	80013fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d123      	bne.n	8001450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	08da      	lsrs	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3208      	adds	r2, #8
 800144a:	69b9      	ldr	r1, [r7, #24]
 800144c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0203 	and.w	r2, r3, #3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80b4 	beq.w	80015fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b60      	ldr	r3, [pc, #384]	; (8001618 <HAL_GPIO_Init+0x30c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <HAL_GPIO_Init+0x30c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_GPIO_Init+0x30c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ae:	4a5b      	ldr	r2, [pc, #364]	; (800161c <HAL_GPIO_Init+0x310>)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	089b      	lsrs	r3, r3, #2
 80014b4:	3302      	adds	r3, #2
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	220f      	movs	r2, #15
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_GPIO_Init+0x314>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x226>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a51      	ldr	r2, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x318>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x222>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a50      	ldr	r2, [pc, #320]	; (8001628 <HAL_GPIO_Init+0x31c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x21e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4f      	ldr	r2, [pc, #316]	; (800162c <HAL_GPIO_Init+0x320>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_GPIO_Init+0x324>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x216>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x328>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x212>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x32c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x20e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x330>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20a>
 8001512:	2307      	movs	r3, #7
 8001514:	e00e      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001516:	2308      	movs	r3, #8
 8001518:	e00c      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151a:	2306      	movs	r3, #6
 800151c:	e00a      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800151e:	2305      	movs	r3, #5
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001522:	2304      	movs	r3, #4
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x228>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x228>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x310>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <HAL_GPIO_Init+0x334>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <HAL_GPIO_Init+0x334>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_GPIO_Init+0x334>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a0:	4a27      	ldr	r2, [pc, #156]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ca:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <HAL_GPIO_Init+0x334>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f ae90 	bls.w	8001328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40021400 	.word	0x40021400
 8001638:	40021800 	.word	0x40021800
 800163c:	40021c00 	.word	0x40021c00
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001688:	887a      	ldrh	r2, [r7, #2]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	041a      	lsls	r2, r3, #16
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43d9      	mvns	r1, r3
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	400b      	ands	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80016aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ac:	b08f      	sub	sp, #60	; 0x3c
 80016ae:	af0a      	add	r7, sp, #40	; 0x28
 80016b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e054      	b.n	8001766 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f006 fd78 	bl	80081cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 fece 	bl	800549c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	687e      	ldr	r6, [r7, #4]
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	e894 0003 	ldmia.w	r4, {r0, r1}
 800171a:	e885 0003 	stmia.w	r5, {r0, r1}
 800171e:	1d33      	adds	r3, r6, #4
 8001720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f003 fe48 	bl	80053b8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f003 fec5 	bl	80054be <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	687e      	ldr	r6, [r7, #4]
 800173c:	466d      	mov	r5, sp
 800173e:	f106 0410 	add.w	r4, r6, #16
 8001742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001752:	1d33      	adds	r3, r6, #4
 8001754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001756:	6838      	ldr	r0, [r7, #0]
 8001758:	f004 f82c 	bl	80057b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800176e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b089      	sub	sp, #36	; 0x24
 8001772:	af04      	add	r7, sp, #16
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	4608      	mov	r0, r1
 8001778:	4611      	mov	r1, r2
 800177a:	461a      	mov	r2, r3
 800177c:	4603      	mov	r3, r0
 800177e:	70fb      	strb	r3, [r7, #3]
 8001780:	460b      	mov	r3, r1
 8001782:	70bb      	strb	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_HCD_HC_Init+0x28>
 8001792:	2302      	movs	r3, #2
 8001794:	e076      	b.n	8001884 <HAL_HCD_HC_Init+0x116>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	212c      	movs	r1, #44	; 0x2c
 80017a4:	fb01 f303 	mul.w	r3, r1, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	333d      	adds	r3, #61	; 0x3d
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3338      	adds	r3, #56	; 0x38
 80017be:	787a      	ldrb	r2, [r7, #1]
 80017c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	212c      	movs	r1, #44	; 0x2c
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	4413      	add	r3, r2
 80017ce:	3340      	adds	r3, #64	; 0x40
 80017d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017d2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3339      	adds	r3, #57	; 0x39
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	333f      	adds	r3, #63	; 0x3f
 80017f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80017f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	78ba      	ldrb	r2, [r7, #2]
 80017fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001802:	b2d0      	uxtb	r0, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	212c      	movs	r1, #44	; 0x2c
 8001808:	fb01 f303 	mul.w	r3, r1, r3
 800180c:	4413      	add	r3, r2
 800180e:	333a      	adds	r3, #58	; 0x3a
 8001810:	4602      	mov	r2, r0
 8001812:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da09      	bge.n	8001830 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	333b      	adds	r3, #59	; 0x3b
 800182a:	2201      	movs	r2, #1
 800182c:	701a      	strb	r2, [r3, #0]
 800182e:	e008      	b.n	8001842 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	212c      	movs	r1, #44	; 0x2c
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	333b      	adds	r3, #59	; 0x3b
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	333c      	adds	r3, #60	; 0x3c
 8001850:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001854:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6818      	ldr	r0, [r3, #0]
 800185a:	787c      	ldrb	r4, [r7, #1]
 800185c:	78ba      	ldrb	r2, [r7, #2]
 800185e:	78f9      	ldrb	r1, [r7, #3]
 8001860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	4623      	mov	r3, r4
 8001872:	f004 f919 	bl	8005aa8 <USB_HC_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}

0800188c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_HCD_HC_Halt+0x1e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e00f      	b.n	80018ca <HAL_HCD_HC_Halt+0x3e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fb55 	bl	8005f6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	4608      	mov	r0, r1
 80018de:	4611      	mov	r1, r2
 80018e0:	461a      	mov	r2, r3
 80018e2:	4603      	mov	r3, r0
 80018e4:	70fb      	strb	r3, [r7, #3]
 80018e6:	460b      	mov	r3, r1
 80018e8:	70bb      	strb	r3, [r7, #2]
 80018ea:	4613      	mov	r3, r2
 80018ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80018ee:	78fb      	ldrb	r3, [r7, #3]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	212c      	movs	r1, #44	; 0x2c
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	333b      	adds	r3, #59	; 0x3b
 80018fc:	78ba      	ldrb	r2, [r7, #2]
 80018fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	212c      	movs	r1, #44	; 0x2c
 8001906:	fb01 f303 	mul.w	r3, r1, r3
 800190a:	4413      	add	r3, r2
 800190c:	333f      	adds	r3, #63	; 0x3f
 800190e:	787a      	ldrb	r2, [r7, #1]
 8001910:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001912:	7c3b      	ldrb	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	212c      	movs	r1, #44	; 0x2c
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	3342      	adds	r3, #66	; 0x42
 8001926:	2203      	movs	r2, #3
 8001928:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	333d      	adds	r3, #61	; 0x3d
 8001938:	7f3a      	ldrb	r2, [r7, #28]
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e008      	b.n	8001950 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	212c      	movs	r1, #44	; 0x2c
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4413      	add	r3, r2
 800194a:	3342      	adds	r3, #66	; 0x42
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001950:	787b      	ldrb	r3, [r7, #1]
 8001952:	2b03      	cmp	r3, #3
 8001954:	f200 80c6 	bhi.w	8001ae4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001958:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001ad1 	.word	0x08001ad1
 8001968:	080019d5 	.word	0x080019d5
 800196c:	08001a53 	.word	0x08001a53
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001970:	7c3b      	ldrb	r3, [r7, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	f040 80b8 	bne.w	8001ae8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001978:	78bb      	ldrb	r3, [r7, #2]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 80b4 	bne.w	8001ae8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001980:	8b3b      	ldrh	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d108      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3355      	adds	r3, #85	; 0x55
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3355      	adds	r3, #85	; 0x55
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d109      	bne.n	80019c0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3342      	adds	r3, #66	; 0x42
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019be:	e093      	b.n	8001ae8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	212c      	movs	r1, #44	; 0x2c
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	3342      	adds	r3, #66	; 0x42
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
      break;
 80019d2:	e089      	b.n	8001ae8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11d      	bne.n	8001a16 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	212c      	movs	r1, #44	; 0x2c
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	3355      	adds	r3, #85	; 0x55
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	3342      	adds	r3, #66	; 0x42
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a00:	e073      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3342      	adds	r3, #66	; 0x42
 8001a10:	2202      	movs	r2, #2
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e069      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3354      	adds	r3, #84	; 0x54
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	3342      	adds	r3, #66	; 0x42
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
      break;
 8001a3c:	e055      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3e:	78fb      	ldrb	r3, [r7, #3]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	212c      	movs	r1, #44	; 0x2c
 8001a44:	fb01 f303 	mul.w	r3, r1, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	3342      	adds	r3, #66	; 0x42
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	701a      	strb	r2, [r3, #0]
      break;
 8001a50:	e04b      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a52:	78bb      	ldrb	r3, [r7, #2]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d11d      	bne.n	8001a94 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3355      	adds	r3, #85	; 0x55
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	3342      	adds	r3, #66	; 0x42
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a7e:	e034      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3342      	adds	r3, #66	; 0x42
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]
      break;
 8001a92:	e02a      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3354      	adds	r3, #84	; 0x54
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa8:	78fb      	ldrb	r3, [r7, #3]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	212c      	movs	r1, #44	; 0x2c
 8001aae:	fb01 f303 	mul.w	r3, r1, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3342      	adds	r3, #66	; 0x42
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
      break;
 8001aba:	e016      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3342      	adds	r3, #66	; 0x42
 8001aca:	2202      	movs	r2, #2
 8001acc:	701a      	strb	r2, [r3, #0]
      break;
 8001ace:	e00c      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3342      	adds	r3, #66	; 0x42
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001ae4:	bf00      	nop
 8001ae6:	e000      	b.n	8001aea <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ae8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	212c      	movs	r1, #44	; 0x2c
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	3344      	adds	r3, #68	; 0x44
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	8b3a      	ldrh	r2, [r7, #24]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	202c      	movs	r0, #44	; 0x2c
 8001b04:	fb00 f303 	mul.w	r3, r0, r3
 8001b08:	440b      	add	r3, r1
 8001b0a:	334c      	adds	r3, #76	; 0x4c
 8001b0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	3360      	adds	r3, #96	; 0x60
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3350      	adds	r3, #80	; 0x50
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3339      	adds	r3, #57	; 0x39
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3361      	adds	r3, #97	; 0x61
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	222c      	movs	r2, #44	; 0x2c
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	3338      	adds	r3, #56	; 0x38
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	18d1      	adds	r1, r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f004 f8a8 	bl	8005cc4 <USB_HC_StartXfer>
 8001b74:	4603      	mov	r3, r0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop

08001b80 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fdcb 	bl	8005732 <USB_GetMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	f040 80f6 	bne.w	8001d90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fdaf 	bl	800570c <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80ec 	beq.w	8001d8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f003 fda6 	bl	800570c <USB_ReadInterrupts>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bca:	d104      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bd4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fd96 	bl	800570c <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bea:	d104      	bne.n	8001bf6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bf4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f003 fd86 	bl	800570c <USB_ReadInterrupts>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c0a:	d104      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fd76 	bl	800570c <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d103      	bne.n	8001c32 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fd68 	bl	800570c <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c46:	d11c      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c50:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c62:	2110      	movs	r1, #16
 8001c64:	6938      	ldr	r0, [r7, #16]
 8001c66:	f003 fc77 	bl	8005558 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c6a:	6938      	ldr	r0, [r7, #16]
 8001c6c:	f003 fc98 	bl	80055a0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 fe50 	bl	800591c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f006 fb23 	bl	80082c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fd40 	bl	800570c <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c96:	d102      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f001 fa03 	bl	80030a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fd32 	bl	800570c <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d106      	bne.n	8001cc0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f006 faec 	bl	8008290 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fd21 	bl	800570c <USB_ReadInterrupts>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b10      	cmp	r3, #16
 8001cd2:	d101      	bne.n	8001cd8 <HAL_HCD_IRQHandler+0x158>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_HCD_IRQHandler+0x15a>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d012      	beq.n	8001d04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0210 	bic.w	r2, r2, #16
 8001cec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f001 f906 	bl	8002f00 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0210 	orr.w	r2, r2, #16
 8001d02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fcff 	bl	800570c <USB_ReadInterrupts>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d18:	d13a      	bne.n	8001d90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 f912 	bl	8005f48 <USB_HC_ReadInterrupt>
 8001d24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	e025      	b.n	8001d78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d018      	beq.n	8001d72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	015a      	lsls	r2, r3, #5
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d56:	d106      	bne.n	8001d66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ab 	bl	8001eba <HCD_HC_IN_IRQHandler>
 8001d64:	e005      	b.n	8001d72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fcc6 	bl	80026fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3d4      	bcc.n	8001d2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	e000      	b.n	8001d90 <HAL_HCD_IRQHandler+0x210>
      return;
 8001d8e:	bf00      	nop
    }
  }
}
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_HCD_Start+0x16>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e013      	b.n	8001dd4 <HAL_HCD_Start+0x3e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f003 fe12 	bl	80059e4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fb58 	bl	800547a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_HCD_Stop+0x16>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e00d      	b.n	8001e0e <HAL_HCD_Stop+0x32>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fa0c 	bl	800621c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fdb4 	bl	8005990 <USB_ResetPort>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e3e:	78fb      	ldrb	r3, [r7, #3]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3360      	adds	r3, #96	; 0x60
 8001e4c:	781b      	ldrb	r3, [r3, #0]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	3350      	adds	r3, #80	; 0x50
 8001e74:	681b      	ldr	r3, [r3, #0]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fdf8 	bl	8005a84 <USB_GetCurrentFrame>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 fdd3 	bl	8005a56 <USB_GetHostSpeed>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d119      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2304      	movs	r3, #4
 8001efa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	0151      	lsls	r1, r2, #5
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	440a      	add	r2, r1
 8001f12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	60d3      	str	r3, [r2, #12]
 8001f1c:	e101      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f34:	d12b      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f42:	461a      	mov	r2, r3
 8001f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	3361      	adds	r3, #97	; 0x61
 8001f58:	2207      	movs	r2, #7
 8001f5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	0151      	lsls	r1, r2, #5
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	440a      	add	r2, r1
 8001f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f76:	f043 0302 	orr.w	r3, r3, #2
 8001f7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 ffef 	bl	8005f6a <USB_HC_Halt>
 8001f8c:	e0c9      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d109      	bne.n	8001fb8 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	6093      	str	r3, [r2, #8]
 8001fb6:	e0b4      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d133      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	0151      	lsls	r1, r2, #5
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	440a      	add	r2, r1
 8001fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3361      	adds	r3, #97	; 0x61
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	461a      	mov	r2, r3
 800200e:	2310      	movs	r3, #16
 8002010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	461a      	mov	r2, r3
 8002020:	2308      	movs	r3, #8
 8002022:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f003 ff9b 	bl	8005f6a <USB_HC_Halt>
 8002034:	e075      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204c:	d134      	bne.n	80020b8 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4413      	add	r3, r2
 8002056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	0151      	lsls	r1, r2, #5
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	440a      	add	r2, r1
 8002064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3361      	adds	r3, #97	; 0x61
 800207c:	2208      	movs	r2, #8
 800207e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	015a      	lsls	r2, r3, #5
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4413      	add	r3, r2
 8002088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208c:	461a      	mov	r2, r3
 800208e:	2310      	movs	r3, #16
 8002090:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 ff5a 	bl	8005f6a <USB_HC_Halt>
 80020b6:	e034      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b80      	cmp	r3, #128	; 0x80
 80020cc:	d129      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	0151      	lsls	r1, r2, #5
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	440a      	add	r2, r1
 80020e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3361      	adds	r3, #97	; 0x61
 80020fc:	2206      	movs	r2, #6
 80020fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f003 ff2d 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	461a      	mov	r2, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	015a      	lsls	r2, r3, #5
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4413      	add	r3, r2
 800212a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002138:	d122      	bne.n	8002180 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	440a      	add	r2, r1
 8002150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f003 ff00 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800217c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800217e:	e2ba      	b.n	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	f040 811b 	bne.w	80023ce <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d019      	beq.n	80021d4 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	3348      	adds	r3, #72	; 0x48
 80021ae:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	0159      	lsls	r1, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	440b      	add	r3, r1
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021c2:	1ad2      	subs	r2, r2, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	202c      	movs	r0, #44	; 0x2c
 80021ca:	fb00 f303 	mul.w	r3, r0, r3
 80021ce:	440b      	add	r3, r1
 80021d0:	3350      	adds	r3, #80	; 0x50
 80021d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3361      	adds	r3, #97	; 0x61
 80021e2:	2201      	movs	r2, #1
 80021e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	335c      	adds	r3, #92	; 0x5c
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	2301      	movs	r3, #1
 8002208:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333f      	adds	r3, #63	; 0x3f
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333f      	adds	r3, #63	; 0x3f
 800222c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800222e:	2b02      	cmp	r3, #2
 8002230:	d121      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	0151      	lsls	r1, r2, #5
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	440a      	add	r2, r1
 8002248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fe84 	bl	8005f6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	461a      	mov	r2, r3
 8002270:	2310      	movs	r3, #16
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	e066      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333f      	adds	r3, #63	; 0x3f
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d127      	bne.n	80022da <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	015a      	lsls	r2, r3, #5
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4413      	add	r3, r2
 8002292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	0151      	lsls	r1, r2, #5
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	440a      	add	r2, r1
 80022a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022a8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3360      	adds	r3, #96	; 0x60
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	b2d9      	uxtb	r1, r3
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	202c      	movs	r0, #44	; 0x2c
 80022c6:	fb00 f303 	mul.w	r3, r0, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3360      	adds	r3, #96	; 0x60
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f006 f806 	bl	80082e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022d8:	e034      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	212c      	movs	r1, #44	; 0x2c
 80022e0:	fb01 f303 	mul.w	r3, r1, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	333f      	adds	r3, #63	; 0x3f
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d12a      	bne.n	8002344 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	212c      	movs	r1, #44	; 0x2c
 80022f4:	fb01 f303 	mul.w	r3, r1, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	3360      	adds	r3, #96	; 0x60
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	3354      	adds	r3, #84	; 0x54
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2d8      	uxtb	r0, r3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3354      	adds	r3, #84	; 0x54
 8002324:	4602      	mov	r2, r0
 8002326:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	202c      	movs	r0, #44	; 0x2c
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	4413      	add	r3, r2
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 ffd0 	bl	80082e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d12b      	bne.n	80023a4 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	3348      	adds	r3, #72	; 0x48
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	202c      	movs	r0, #44	; 0x2c
 8002362:	fb00 f202 	mul.w	r2, r0, r2
 8002366:	440a      	add	r2, r1
 8002368:	3240      	adds	r2, #64	; 0x40
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 81be 	beq.w	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	212c      	movs	r1, #44	; 0x2c
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	3354      	adds	r3, #84	; 0x54
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b2d8      	uxtb	r0, r3
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	212c      	movs	r1, #44	; 0x2c
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	3354      	adds	r3, #84	; 0x54
 800239e:	4602      	mov	r2, r0
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	e1a8      	b.n	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	212c      	movs	r1, #44	; 0x2c
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	3354      	adds	r3, #84	; 0x54
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f083 0301 	eor.w	r3, r3, #1
 80023b8:	b2d8      	uxtb	r0, r3
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3354      	adds	r3, #84	; 0x54
 80023c8:	4602      	mov	r2, r0
 80023ca:	701a      	strb	r2, [r3, #0]
}
 80023cc:	e193      	b.n	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	f040 8106 	bne.w	80025f2 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002400:	f023 0302 	bic.w	r3, r3, #2
 8002404:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	3361      	adds	r3, #97	; 0x61
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d109      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3360      	adds	r3, #96	; 0x60
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
 800242c:	e0c9      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	3361      	adds	r3, #97	; 0x61
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d109      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3360      	adds	r3, #96	; 0x60
 8002450:	2205      	movs	r2, #5
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e0b5      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	3361      	adds	r3, #97	; 0x61
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d009      	beq.n	800247e <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3361      	adds	r3, #97	; 0x61
 8002478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800247a:	2b08      	cmp	r3, #8
 800247c:	d150      	bne.n	8002520 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	335c      	adds	r3, #92	; 0x5c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	202c      	movs	r0, #44	; 0x2c
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	440b      	add	r3, r1
 800249c:	335c      	adds	r3, #92	; 0x5c
 800249e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	335c      	adds	r3, #92	; 0x5c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d912      	bls.n	80024da <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	335c      	adds	r3, #92	; 0x5c
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	212c      	movs	r1, #44	; 0x2c
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	4413      	add	r3, r2
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	2204      	movs	r2, #4
 80024d6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024d8:	e073      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	212c      	movs	r1, #44	; 0x2c
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	3360      	adds	r3, #96	; 0x60
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002502:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800250a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	015a      	lsls	r2, r3, #5
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4413      	add	r3, r2
 8002514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002518:	461a      	mov	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800251e:	e050      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d122      	bne.n	800257a <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	3360      	adds	r3, #96	; 0x60
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800255c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002564:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e023      	b.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	212c      	movs	r1, #44	; 0x2c
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4413      	add	r3, r2
 8002586:	3361      	adds	r3, #97	; 0x61
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b07      	cmp	r3, #7
 800258c:	d119      	bne.n	80025c2 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	335c      	adds	r3, #92	; 0x5c
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	202c      	movs	r0, #44	; 0x2c
 80025a6:	fb00 f303 	mul.w	r3, r0, r3
 80025aa:	440b      	add	r3, r1
 80025ac:	335c      	adds	r3, #92	; 0x5c
 80025ae:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3360      	adds	r3, #96	; 0x60
 80025be:	2204      	movs	r2, #4
 80025c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	2302      	movs	r3, #2
 80025d2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	b2d9      	uxtb	r1, r3
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	fb00 f303 	mul.w	r3, r0, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3360      	adds	r3, #96	; 0x60
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f005 fe7a 	bl	80082e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80025f0:	e081      	b.n	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b10      	cmp	r3, #16
 8002606:	d176      	bne.n	80026f6 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	333f      	adds	r3, #63	; 0x3f
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d121      	bne.n	8002660 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	335c      	adds	r3, #92	; 0x5c
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	440a      	add	r2, r1
 8002644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f003 fc86 	bl	8005f6a <USB_HC_Halt>
 800265e:	e041      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	333f      	adds	r3, #63	; 0x3f
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d009      	beq.n	8002688 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	333f      	adds	r3, #63	; 0x3f
 8002682:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002684:	2b02      	cmp	r3, #2
 8002686:	d12d      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d120      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	212c      	movs	r1, #44	; 0x2c
 80026a8:	fb01 f303 	mul.w	r3, r1, r3
 80026ac:	4413      	add	r3, r2
 80026ae:	3361      	adds	r3, #97	; 0x61
 80026b0:	2203      	movs	r2, #3
 80026b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fc43 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2310      	movs	r3, #16
 80026f4:	6093      	str	r3, [r2, #8]
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b088      	sub	sp, #32
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d119      	bne.n	8002762 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2304      	movs	r3, #4
 800273e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	440a      	add	r2, r1
 8002756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002760:	e3ca      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b20      	cmp	r3, #32
 8002776:	d13e      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002784:	461a      	mov	r2, r3
 8002786:	2320      	movs	r3, #32
 8002788:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	333d      	adds	r3, #61	; 0x3d
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	f040 83ac 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	333d      	adds	r3, #61	; 0x3d
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3360      	adds	r3, #96	; 0x60
 80027c0:	2202      	movs	r2, #2
 80027c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	0151      	lsls	r1, r2, #5
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	440a      	add	r2, r1
 80027da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027de:	f043 0302 	orr.w	r3, r3, #2
 80027e2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fbbb 	bl	8005f6a <USB_HC_Halt>
}
 80027f4:	e380      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	d122      	bne.n	8002854 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	0151      	lsls	r1, r2, #5
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	440a      	add	r2, r1
 8002824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fb96 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	461a      	mov	r2, r3
 800284c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002850:	6093      	str	r3, [r2, #8]
}
 8002852:	e351      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b01      	cmp	r3, #1
 8002868:	d150      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	335c      	adds	r3, #92	; 0x5c
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d111      	bne.n	80028b6 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	333d      	adds	r3, #61	; 0x3d
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fb42 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	2301      	movs	r3, #1
 80028f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
}
 800290a:	e2f5      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d13c      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3361      	adds	r3, #97	; 0x61
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	333d      	adds	r3, #61	; 0x3d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	0151      	lsls	r1, r2, #5
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	440a      	add	r2, r1
 800296e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002972:	f043 0302 	orr.w	r3, r3, #2
 8002976:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	4611      	mov	r1, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f003 faf1 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	461a      	mov	r2, r3
 8002996:	2340      	movs	r3, #64	; 0x40
 8002998:	6093      	str	r3, [r2, #8]
}
 800299a:	e2ad      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d12a      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	015a      	lsls	r2, r3, #5
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4413      	add	r3, r2
 80029ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029be:	461a      	mov	r2, r3
 80029c0:	2308      	movs	r3, #8
 80029c2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fabb 	bl	8005f6a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3361      	adds	r3, #97	; 0x61
 8002a02:	2205      	movs	r2, #5
 8002a04:	701a      	strb	r2, [r3, #0]
}
 8002a06:	e277      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d150      	bne.n	8002ac0 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	212c      	movs	r1, #44	; 0x2c
 8002a24:	fb01 f303 	mul.w	r3, r1, r3
 8002a28:	4413      	add	r3, r2
 8002a2a:	335c      	adds	r3, #92	; 0x5c
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3361      	adds	r3, #97	; 0x61
 8002a3e:	2203      	movs	r2, #3
 8002a40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	333d      	adds	r3, #61	; 0x3d
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d112      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	333c      	adds	r3, #60	; 0x3c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	333d      	adds	r3, #61	; 0x3d
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f003 fa5f 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2310      	movs	r3, #16
 8002abc:	6093      	str	r3, [r2, #8]
}
 8002abe:	e21b      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d174      	bne.n	8002bc0 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d121      	bne.n	8002b22 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	3361      	adds	r3, #97	; 0x61
 8002aec:	2206      	movs	r2, #6
 8002aee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	0151      	lsls	r1, r2, #5
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	440a      	add	r2, r1
 8002b06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 fa25 	bl	8005f6a <USB_HC_Halt>
 8002b20:	e044      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	212c      	movs	r1, #44	; 0x2c
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	335c      	adds	r3, #92	; 0x5c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	202c      	movs	r0, #44	; 0x2c
 8002b3a:	fb00 f303 	mul.w	r3, r0, r3
 8002b3e:	440b      	add	r3, r1
 8002b40:	335c      	adds	r3, #92	; 0x5c
 8002b42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	335c      	adds	r3, #92	; 0x5c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d920      	bls.n	8002b9a <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3360      	adds	r3, #96	; 0x60
 8002b78:	2204      	movs	r2, #4
 8002b7a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	b2d9      	uxtb	r1, r3
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	202c      	movs	r0, #44	; 0x2c
 8002b86:	fb00 f303 	mul.w	r3, r0, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3360      	adds	r3, #96	; 0x60
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	461a      	mov	r2, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f005 fba6 	bl	80082e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b98:	e008      	b.n	8002bac <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3360      	adds	r3, #96	; 0x60
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	6093      	str	r3, [r2, #8]
}
 8002bbe:	e19b      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d134      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	0151      	lsls	r1, r2, #5
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	440a      	add	r2, r1
 8002bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 f9b1 	bl	8005f6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	461a      	mov	r2, r3
 8002c16:	2310      	movs	r3, #16
 8002c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	461a      	mov	r2, r3
 8002c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	3361      	adds	r3, #97	; 0x61
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	701a      	strb	r2, [r3, #0]
}
 8002c40:	e15a      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f040 814f 	bne.w	8002ef8 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c74:	f023 0302 	bic.w	r3, r3, #2
 8002c78:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3361      	adds	r3, #97	; 0x61
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d17d      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3360      	adds	r3, #96	; 0x60
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	333f      	adds	r3, #63	; 0x3f
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d00a      	beq.n	8002cca <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	333f      	adds	r3, #63	; 0x3f
 8002cc2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	f040 8100 	bne.w	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d113      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3355      	adds	r3, #85	; 0x55
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f083 0301 	eor.w	r3, r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3355      	adds	r3, #85	; 0x55
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	f040 80e3 	bne.w	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	334c      	adds	r3, #76	; 0x4c
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80d8 	beq.w	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	212c      	movs	r1, #44	; 0x2c
 8002d20:	fb01 f303 	mul.w	r3, r1, r3
 8002d24:	4413      	add	r3, r2
 8002d26:	334c      	adds	r3, #76	; 0x4c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f202 	mul.w	r2, r0, r2
 8002d34:	440a      	add	r2, r1
 8002d36:	3240      	adds	r2, #64	; 0x40
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	202c      	movs	r0, #44	; 0x2c
 8002d44:	fb00 f202 	mul.w	r2, r0, r2
 8002d48:	440a      	add	r2, r1
 8002d4a:	3240      	adds	r2, #64	; 0x40
 8002d4c:	8812      	ldrh	r2, [r2, #0]
 8002d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80b5 	beq.w	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3355      	adds	r3, #85	; 0x55
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2d8      	uxtb	r0, r3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	212c      	movs	r1, #44	; 0x2c
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	4413      	add	r3, r2
 8002d82:	3355      	adds	r3, #85	; 0x55
 8002d84:	4602      	mov	r2, r0
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e09f      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	212c      	movs	r1, #44	; 0x2c
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	3361      	adds	r3, #97	; 0x61
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d109      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	212c      	movs	r1, #44	; 0x2c
 8002da4:	fb01 f303 	mul.w	r3, r1, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	3360      	adds	r3, #96	; 0x60
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e08b      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3361      	adds	r3, #97	; 0x61
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d109      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e077      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	212c      	movs	r1, #44	; 0x2c
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	3361      	adds	r3, #97	; 0x61
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d109      	bne.n	8002e02 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	212c      	movs	r1, #44	; 0x2c
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	e063      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	212c      	movs	r1, #44	; 0x2c
 8002e08:	fb01 f303 	mul.w	r3, r1, r3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3361      	adds	r3, #97	; 0x61
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d009      	beq.n	8002e2a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	3361      	adds	r3, #97	; 0x61
 8002e24:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d14f      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	335c      	adds	r3, #92	; 0x5c
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	202c      	movs	r0, #44	; 0x2c
 8002e42:	fb00 f303 	mul.w	r3, r0, r3
 8002e46:	440b      	add	r3, r1
 8002e48:	335c      	adds	r3, #92	; 0x5c
 8002e4a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	335c      	adds	r3, #92	; 0x5c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d912      	bls.n	8002e86 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	335c      	adds	r3, #92	; 0x5c
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	212c      	movs	r1, #44	; 0x2c
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3360      	adds	r3, #96	; 0x60
 8002e80:	2204      	movs	r2, #4
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e021      	b.n	8002eca <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	212c      	movs	r1, #44	; 0x2c
 8002e8c:	fb01 f303 	mul.w	r3, r1, r3
 8002e90:	4413      	add	r3, r2
 8002e92:	3360      	adds	r3, #96	; 0x60
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eae:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb6:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2302      	movs	r3, #2
 8002eda:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	b2d9      	uxtb	r1, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	202c      	movs	r0, #44	; 0x2c
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f005 f9f6 	bl	80082e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ef8:	bf00      	nop
 8002efa:	3720      	adds	r7, #32
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	0c5b      	lsrs	r3, r3, #17
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f34:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d004      	beq.n	8002f46 <HCD_RXQLVL_IRQHandler+0x46>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	f000 80a9 	beq.w	8003096 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f44:	e0aa      	b.n	800309c <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a6 	beq.w	800309a <HCD_RXQLVL_IRQHandler+0x19a>
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3344      	adds	r3, #68	; 0x44
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 809b 	beq.w	800309a <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3350      	adds	r3, #80	; 0x50
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	441a      	add	r2, r3
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	202c      	movs	r0, #44	; 0x2c
 8002f7e:	fb00 f303 	mul.w	r3, r0, r3
 8002f82:	440b      	add	r3, r1
 8002f84:	334c      	adds	r3, #76	; 0x4c
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d87a      	bhi.n	8003082 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3344      	adds	r3, #68	; 0x44
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f002 fb59 	bl	800565c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3344      	adds	r3, #68	; 0x44
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	202c      	movs	r0, #44	; 0x2c
 8002fc4:	fb00 f303 	mul.w	r3, r0, r3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3344      	adds	r3, #68	; 0x44
 8002fcc:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3350      	adds	r3, #80	; 0x50
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	441a      	add	r2, r3
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	202c      	movs	r0, #44	; 0x2c
 8002fe8:	fb00 f303 	mul.w	r3, r0, r3
 8002fec:	440b      	add	r3, r1
 8002fee:	3350      	adds	r3, #80	; 0x50
 8002ff0:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	0cdb      	lsrs	r3, r3, #19
 8003002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003006:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3340      	adds	r3, #64	; 0x40
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4293      	cmp	r3, r2
 800301e:	d13c      	bne.n	800309a <HCD_RXQLVL_IRQHandler+0x19a>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d039      	beq.n	800309a <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	015a      	lsls	r2, r3, #5
 800302a:	6a3b      	ldr	r3, [r7, #32]
 800302c:	4413      	add	r3, r2
 800302e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800303c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003044:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	212c      	movs	r1, #44	; 0x2c
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3354      	adds	r3, #84	; 0x54
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2d8      	uxtb	r0, r3
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	212c      	movs	r1, #44	; 0x2c
 8003074:	fb01 f303 	mul.w	r3, r1, r3
 8003078:	4413      	add	r3, r2
 800307a:	3354      	adds	r3, #84	; 0x54
 800307c:	4602      	mov	r2, r0
 800307e:	701a      	strb	r2, [r3, #0]
      break;
 8003080:	e00b      	b.n	800309a <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3360      	adds	r3, #96	; 0x60
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
      break;
 8003094:	e001      	b.n	800309a <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800309a:	bf00      	nop
  }
}
 800309c:	bf00      	nop
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d10b      	bne.n	80030f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d102      	bne.n	80030ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f005 f8e0 	bl	80082ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d132      	bne.n	8003164 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d126      	bne.n	800315e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d113      	bne.n	8003140 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800311e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003122:	d106      	bne.n	8003132 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f002 fbf6 	bl	800591c <USB_InitFSLSPClkSel>
 8003130:	e011      	b.n	8003156 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fbef 	bl	800591c <USB_InitFSLSPClkSel>
 800313e:	e00a      	b.n	8003156 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d106      	bne.n	8003156 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314e:	461a      	mov	r2, r3
 8003150:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003154:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f005 f8d2 	bl	8008300 <HAL_HCD_PortEnabled_Callback>
 800315c:	e002      	b.n	8003164 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f005 f8dc 	bl	800831c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b20      	cmp	r3, #32
 800316c:	d103      	bne.n	8003176 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f043 0320 	orr.w	r3, r3, #32
 8003174:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6013      	str	r3, [r2, #0]
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e12b      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7fd fd14 	bl	8000be0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f0:	f001 f9fc 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a81      	ldr	r2, [pc, #516]	; (8003400 <HAL_I2C_Init+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d807      	bhi.n	8003210 <HAL_I2C_Init+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_I2C_Init+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x92>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_I2C_Init+0x27c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0e7      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_I2C_Init+0x280>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_I2C_Init+0x274>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d802      	bhi.n	8003260 <HAL_I2C_Init+0xd4>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	e009      	b.n	8003274 <HAL_I2C_Init+0xe8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a69      	ldr	r2, [pc, #420]	; (8003410 <HAL_I2C_Init+0x284>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	495c      	ldr	r1, [pc, #368]	; (8003400 <HAL_I2C_Init+0x274>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d819      	bhi.n	80032c8 <HAL_I2C_Init+0x13c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e59      	subs	r1, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032a8:	400b      	ands	r3, r1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_I2C_Init+0x138>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	e051      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c4:	2304      	movs	r3, #4
 80032c6:	e04f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_I2C_Init+0x168>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e012      	b.n	800331a <HAL_I2C_Init+0x18e>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Init+0x196>
 800331e:	2301      	movs	r3, #1
 8003320:	e022      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10e      	bne.n	8003348 <HAL_I2C_Init+0x1bc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e58      	subs	r0, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	440b      	add	r3, r1
 8003338:	fbb0 f3f3 	udiv	r3, r0, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	e00f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e58      	subs	r0, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6911      	ldr	r1, [r2, #16]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	000186a0 	.word	0x000186a0
 8003404:	001e847f 	.word	0x001e847f
 8003408:	003d08ff 	.word	0x003d08ff
 800340c:	431bde83 	.word	0x431bde83
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e128      	b.n	8003678 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d109      	bne.n	8003446 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a90      	ldr	r2, [pc, #576]	; (8003680 <HAL_I2S_Init+0x26c>)
 800343e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fc15 	bl	8000c70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800345c:	f023 030f 	bic.w	r3, r3, #15
 8003460:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2202      	movs	r2, #2
 8003468:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d060      	beq.n	8003534 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800347a:	2310      	movs	r3, #16
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003480:	2320      	movs	r3, #32
 8003482:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b20      	cmp	r3, #32
 800348a:	d802      	bhi.n	8003492 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003492:	2001      	movs	r0, #1
 8003494:	f001 f9e6 	bl	8004864 <HAL_RCCEx_GetPeriphCLKFreq>
 8003498:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a2:	d125      	bne.n	80034f0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d010      	beq.n	80034ce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	3305      	adds	r3, #5
 80034ca:	613b      	str	r3, [r7, #16]
 80034cc:	e01f      	b.n	800350e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	3305      	adds	r3, #5
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	e00e      	b.n	800350e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	461a      	mov	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	3305      	adds	r3, #5
 800350c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4a5c      	ldr	r2, [pc, #368]	; (8003684 <HAL_I2S_Init+0x270>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	021b      	lsls	r3, r3, #8
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e003      	b.n	800353c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003534:	2302      	movs	r3, #2
 8003536:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d902      	bls.n	8003548 <HAL_I2S_Init+0x134>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2bff      	cmp	r3, #255	; 0xff
 8003546:	d907      	bls.n	8003558 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	f043 0210 	orr.w	r2, r3, #16
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e08f      	b.n	8003678 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	ea42 0103 	orr.w	r1, r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	430a      	orrs	r2, r1
 800356a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003576:	f023 030f 	bic.w	r3, r3, #15
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6851      	ldr	r1, [r2, #4]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6892      	ldr	r2, [r2, #8]
 8003582:	4311      	orrs	r1, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68d2      	ldr	r2, [r2, #12]
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6992      	ldr	r2, [r2, #24]
 800358e:	430a      	orrs	r2, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d161      	bne.n	8003668 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a38      	ldr	r2, [pc, #224]	; (8003688 <HAL_I2S_Init+0x274>)
 80035a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a37      	ldr	r2, [pc, #220]	; (800368c <HAL_I2S_Init+0x278>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_I2S_Init+0x1a4>
 80035b4:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_I2S_Init+0x27c>)
 80035b6:	e001      	b.n	80035bc <HAL_I2S_Init+0x1a8>
 80035b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4932      	ldr	r1, [pc, #200]	; (800368c <HAL_I2S_Init+0x278>)
 80035c4:	428a      	cmp	r2, r1
 80035c6:	d101      	bne.n	80035cc <HAL_I2S_Init+0x1b8>
 80035c8:	4a31      	ldr	r2, [pc, #196]	; (8003690 <HAL_I2S_Init+0x27c>)
 80035ca:	e001      	b.n	80035d0 <HAL_I2S_Init+0x1bc>
 80035cc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035d4:	f023 030f 	bic.w	r3, r3, #15
 80035d8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a2b      	ldr	r2, [pc, #172]	; (800368c <HAL_I2S_Init+0x278>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_I2S_Init+0x1d4>
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_I2S_Init+0x27c>)
 80035e6:	e001      	b.n	80035ec <HAL_I2S_Init+0x1d8>
 80035e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ec:	2202      	movs	r2, #2
 80035ee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a25      	ldr	r2, [pc, #148]	; (800368c <HAL_I2S_Init+0x278>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d101      	bne.n	80035fe <HAL_I2S_Init+0x1ea>
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <HAL_I2S_Init+0x27c>)
 80035fc:	e001      	b.n	8003602 <HAL_I2S_Init+0x1ee>
 80035fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800360e:	d003      	beq.n	8003618 <HAL_I2S_Init+0x204>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	e001      	b.n	8003624 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800362e:	4313      	orrs	r3, r2
 8003630:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003638:	4313      	orrs	r3, r2
 800363a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003642:	4313      	orrs	r3, r2
 8003644:	b29a      	uxth	r2, r3
 8003646:	897b      	ldrh	r3, [r7, #10]
 8003648:	4313      	orrs	r3, r2
 800364a:	b29b      	uxth	r3, r3
 800364c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003650:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a0d      	ldr	r2, [pc, #52]	; (800368c <HAL_I2S_Init+0x278>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d101      	bne.n	8003660 <HAL_I2S_Init+0x24c>
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_I2S_Init+0x27c>)
 800365e:	e001      	b.n	8003664 <HAL_I2S_Init+0x250>
 8003660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003664:	897a      	ldrh	r2, [r7, #10]
 8003666:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	0800378b 	.word	0x0800378b
 8003684:	cccccccd 	.word	0xcccccccd
 8003688:	080038a1 	.word	0x080038a1
 800368c:	40003800 	.word	0x40003800
 8003690:	40003400 	.word	0x40003400

08003694 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003714:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ffb8 	bl	8003694 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	b292      	uxth	r2, r2
 8003740:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10e      	bne.n	8003782 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003772:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff93 	bl	80036a8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b086      	sub	sp, #24
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d13a      	bne.n	800381c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d109      	bne.n	80037c4 <I2S_IRQHandler+0x3a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ba:	2b40      	cmp	r3, #64	; 0x40
 80037bc:	d102      	bne.n	80037c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ffb4 	bl	800372c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b40      	cmp	r3, #64	; 0x40
 80037cc:	d126      	bne.n	800381c <I2S_IRQHandler+0x92>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d11f      	bne.n	800381c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0202 	orr.w	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff50 	bl	80036bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b03      	cmp	r3, #3
 8003826:	d136      	bne.n	8003896 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b02      	cmp	r3, #2
 8003830:	d109      	bne.n	8003846 <I2S_IRQHandler+0xbc>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b80      	cmp	r3, #128	; 0x80
 800383e:	d102      	bne.n	8003846 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff ff45 	bl	80036d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d122      	bne.n	8003896 <I2S_IRQHandler+0x10c>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d11b      	bne.n	8003896 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff13 	bl	80036bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4aa2      	ldr	r2, [pc, #648]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038ba:	4ba2      	ldr	r3, [pc, #648]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a9b      	ldr	r2, [pc, #620]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038da:	e001      	b.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ec:	d004      	beq.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 8099 	bne.w	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f925 	bl	8003b5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9c8 	bl	8003cbc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d13a      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d035      	beq.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800394a:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4979      	ldr	r1, [pc, #484]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800395e:	4b79      	ldr	r3, [pc, #484]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800397a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fe88 	bl	80036bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	f040 80be 	bne.w	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80b8 	beq.w	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a59      	ldr	r2, [pc, #356]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039de:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e0:	e001      	b.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4954      	ldr	r1, [pc, #336]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d101      	bne.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039f2:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f4:	e001      	b.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fe4a 	bl	80036bc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a28:	e084      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8be 	bl	8003bc0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8fd 	bl	8003c58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d12f      	bne.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02a      	beq.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2e      	ldr	r2, [pc, #184]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4929      	ldr	r1, [pc, #164]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003aa0:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aa2:	e001      	b.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fdfa 	bl	80036bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d131      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02c      	beq.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ae8:	e001      	b.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4912      	ldr	r1, [pc, #72]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af6:	428b      	cmp	r3, r1
 8003af8:	d101      	bne.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afc:	e001      	b.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fdc5 	bl	80036bc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	e000      	b.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b34:	bf00      	nop
}
 8003b36:	bf00      	nop
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40003800 	.word	0x40003800
 8003b44:	40003400 	.word	0x40003400

08003b48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c99      	adds	r1, r3, #2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d113      	bne.n	8003bb6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ffc9 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c99      	adds	r1, r3, #2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003bd2:	8819      	ldrh	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <I2SEx_TxISR_I2SExt+0x22>
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003be0:	e001      	b.n	8003be6 <I2SEx_TxISR_I2SExt+0x26>
 8003be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be6:	460a      	mov	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d121      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <I2SEx_TxISR_I2SExt+0x50>
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003c0e:	e001      	b.n	8003c14 <I2SEx_TxISR_I2SExt+0x54>
 8003c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	490d      	ldr	r1, [pc, #52]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	d101      	bne.n	8003c24 <I2SEx_TxISR_I2SExt+0x64>
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003c22:	e001      	b.n	8003c28 <I2SEx_TxISR_I2SExt+0x68>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff81 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40003800 	.word	0x40003800
 8003c54:	40003400 	.word	0x40003400

08003c58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68d8      	ldr	r0, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	1c99      	adds	r1, r3, #2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c70:	b282      	uxth	r2, r0
 8003c72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d113      	bne.n	8003cb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff4a 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <I2SEx_RxISR_I2SExt+0x16>
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003cd0:	e001      	b.n	8003cd6 <I2SEx_RxISR_I2SExt+0x1a>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	68d8      	ldr	r0, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	1c99      	adds	r1, r3, #2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ce2:	b282      	uxth	r2, r0
 8003ce4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <I2SEx_RxISR_I2SExt+0x50>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_RxISR_I2SExt+0x54>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_RxISR_I2SExt+0x64>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_RxISR_I2SExt+0x68>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff03 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e264      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d075      	beq.n	8003e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d72:	4ba3      	ldr	r3, [pc, #652]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d00c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7e:	4ba0      	ldr	r3, [pc, #640]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8a:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05b      	beq.n	8003e5c <HAL_RCC_OscConfig+0x108>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d157      	bne.n	8003e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e23f      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x74>
 8003dba:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a90      	ldr	r2, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xb0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x98>
 8003dd2:	4b8b      	ldr	r3, [pc, #556]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a87      	ldr	r2, [pc, #540]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xb0>
 8003dec:	4b84      	ldr	r3, [pc, #528]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a83      	ldr	r2, [pc, #524]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fd f96c 	bl	80010e8 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fd f968 	bl	80010e8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e204      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xc0>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fd f958 	bl	80010e8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fd f954 	bl	80010e8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1f0      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0xe8>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x152>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1c4      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4952      	ldr	r1, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b4f      	ldr	r3, [pc, #316]	; (8004004 <HAL_RCC_OscConfig+0x2b0>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fd f90d 	bl	80010e8 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fd f909 	bl	80010e8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1a5      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4940      	ldr	r1, [pc, #256]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_OscConfig+0x2b0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fd f8ec 	bl	80010e8 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fd f8e8 	bl	80010e8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e184      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d030      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCC_OscConfig+0x2b4>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fd f8cc 	bl	80010e8 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fd f8c8 	bl	80010e8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e164      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x200>
 8003f72:	e015      	b.n	8003fa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x2b4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd f8b5 	bl	80010e8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fd f8b1 	bl	80010e8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e14d      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a0 	beq.w	80040ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d121      	bne.n	800402e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a07      	ldr	r2, [pc, #28]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd f877 	bl	80010e8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e011      	b.n	8004022 <HAL_RCC_OscConfig+0x2ce>
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
 800400c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fd f86a 	bl	80010e8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e106      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x4e4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f0>
 8004036:	4b81      	ldr	r3, [pc, #516]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a80      	ldr	r2, [pc, #512]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	e01c      	b.n	800407e <HAL_RCC_OscConfig+0x32a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b05      	cmp	r3, #5
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_OscConfig+0x312>
 800404c:	4b7b      	ldr	r3, [pc, #492]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a7a      	ldr	r2, [pc, #488]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
 8004058:	4b78      	ldr	r3, [pc, #480]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a77      	ldr	r2, [pc, #476]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e00b      	b.n	800407e <HAL_RCC_OscConfig+0x32a>
 8004066:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a74      	ldr	r2, [pc, #464]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
 8004072:	4b72      	ldr	r3, [pc, #456]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a71      	ldr	r2, [pc, #452]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d015      	beq.n	80040b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fd f82f 	bl	80010e8 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd f82b 	bl	80010e8 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0c5      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RCC_OscConfig+0x33a>
 80040b0:	e014      	b.n	80040dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fd f819 	bl	80010e8 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fd f815 	bl	80010e8 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0af      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	4b5a      	ldr	r3, [pc, #360]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ee      	bne.n	80040ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a55      	ldr	r2, [pc, #340]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 809b 	beq.w	800422e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d05c      	beq.n	80041be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d141      	bne.n	8004190 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fc ffe9 	bl	80010e8 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411a:	f7fc ffe5 	bl	80010e8 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e081      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412c:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	019b      	lsls	r3, r3, #6
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	3b01      	subs	r3, #1
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4937      	ldr	r1, [pc, #220]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fc ffbe 	bl	80010e8 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fc ffba 	bl	80010e8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e056      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x41c>
 800418e:	e04e      	b.n	800422e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fc ffa7 	bl	80010e8 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419e:	f7fc ffa3 	bl	80010e8 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e03f      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x44a>
 80041bc:	e037      	b.n	800422e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e032      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d028      	beq.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d121      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d11a      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004200:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d107      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40007000 	.word	0x40007000
 800423c:	40023800 	.word	0x40023800
 8004240:	42470060 	.word	0x42470060

08004244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0cc      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d90c      	bls.n	8004280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b65      	ldr	r3, [pc, #404]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d044      	beq.n	8004364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d119      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e067      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4934      	ldr	r1, [pc, #208]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004334:	f7fc fed8 	bl	80010e8 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fc fed4 	bl	80010e8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e04f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 020c 	and.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	429a      	cmp	r2, r3
 8004362:	d1eb      	bne.n	800433c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d20c      	bcs.n	800438c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f821 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc fd50 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00
 8004400:	40023800 	.word	0x40023800
 8004404:	0800c864 	.word	0x0800c864
 8004408:	20000000 	.word	0x20000000
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	2300      	movs	r3, #0
 8004422:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004428:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d00d      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x40>
 8004434:	2b08      	cmp	r3, #8
 8004436:	f200 80bd 	bhi.w	80045b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x34>
 800443e:	2b04      	cmp	r3, #4
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x3a>
 8004442:	e0b7      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b61      	ldr	r3, [pc, #388]	; (80045cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004446:	60bb      	str	r3, [r7, #8]
       break;
 8004448:	e0b7      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444a:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800444c:	60bb      	str	r3, [r7, #8]
      break;
 800444e:	e0b4      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004450:	4b5d      	ldr	r3, [pc, #372]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800445a:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04d      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004466:	4b58      	ldr	r3, [pc, #352]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004476:	f04f 0100 	mov.w	r1, #0
 800447a:	ea02 0800 	and.w	r8, r2, r0
 800447e:	ea03 0901 	and.w	r9, r3, r1
 8004482:	4640      	mov	r0, r8
 8004484:	4649      	mov	r1, r9
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	014b      	lsls	r3, r1, #5
 8004490:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004494:	0142      	lsls	r2, r0, #5
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	ebb0 0008 	subs.w	r0, r0, r8
 800449e:	eb61 0109 	sbc.w	r1, r1, r9
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	018b      	lsls	r3, r1, #6
 80044ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044b0:	0182      	lsls	r2, r0, #6
 80044b2:	1a12      	subs	r2, r2, r0
 80044b4:	eb63 0301 	sbc.w	r3, r3, r1
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	00d9      	lsls	r1, r3, #3
 80044c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c6:	00d0      	lsls	r0, r2, #3
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	eb12 0208 	adds.w	r2, r2, r8
 80044d0:	eb43 0309 	adc.w	r3, r3, r9
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0259      	lsls	r1, r3, #9
 80044de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80044e2:	0250      	lsls	r0, r2, #9
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4610      	mov	r0, r2
 80044ea:	4619      	mov	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	f7fb feb6 	bl	8000264 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4613      	mov	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e04a      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004502:	4b31      	ldr	r3, [pc, #196]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	461a      	mov	r2, r3
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	ea02 0400 	and.w	r4, r2, r0
 800451a:	ea03 0501 	and.w	r5, r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	014b      	lsls	r3, r1, #5
 800452c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004530:	0142      	lsls	r2, r0, #5
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	1b00      	subs	r0, r0, r4
 8004538:	eb61 0105 	sbc.w	r1, r1, r5
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	018b      	lsls	r3, r1, #6
 8004546:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800454a:	0182      	lsls	r2, r0, #6
 800454c:	1a12      	subs	r2, r2, r0
 800454e:	eb63 0301 	sbc.w	r3, r3, r1
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f04f 0100 	mov.w	r1, #0
 800455a:	00d9      	lsls	r1, r3, #3
 800455c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004560:	00d0      	lsls	r0, r2, #3
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	1912      	adds	r2, r2, r4
 8004568:	eb45 0303 	adc.w	r3, r5, r3
 800456c:	f04f 0000 	mov.w	r0, #0
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	0299      	lsls	r1, r3, #10
 8004576:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800457a:	0290      	lsls	r0, r2, #10
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	461a      	mov	r2, r3
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	f7fb fe6a 	bl	8000264 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	3301      	adds	r3, #1
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b0:	60bb      	str	r3, [r7, #8]
      break;
 80045b2:	e002      	b.n	80045ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80045b6:	60bb      	str	r3, [r7, #8]
      break;
 80045b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ba:	68bb      	ldr	r3, [r7, #8]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	00f42400 	.word	0x00f42400
 80045d0:	007a1200 	.word	0x007a1200

080045d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045da:	681b      	ldr	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000000 	.word	0x20000000

080045ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045f0:	f7ff fff0 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	0a9b      	lsrs	r3, r3, #10
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	4903      	ldr	r1, [pc, #12]	; (8004610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004602:	5ccb      	ldrb	r3, [r1, r3]
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40023800 	.word	0x40023800
 8004610:	0800c874 	.word	0x0800c874

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004618:	f7ff ffdc 	bl	80045d4 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0b5b      	lsrs	r3, r3, #13
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4903      	ldr	r1, [pc, #12]	; (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40023800 	.word	0x40023800
 8004638:	0800c874 	.word	0x0800c874

0800463c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	220f      	movs	r2, #15
 800464a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800464c:	4b12      	ldr	r3, [pc, #72]	; (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0203 	and.w	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004658:	4b0f      	ldr	r3, [pc, #60]	; (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_RCC_GetClockConfig+0x5c>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	08db      	lsrs	r3, r3, #3
 8004676:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCC_GetClockConfig+0x60>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0207 	and.w	r2, r3, #7
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	40023c00 	.word	0x40023c00

080046a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d035      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046c8:	4b62      	ldr	r3, [pc, #392]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ce:	f7fc fd0b 	bl	80010e8 <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046d6:	f7fc fd07 	bl	80010e8 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e0b0      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e8:	4b5b      	ldr	r3, [pc, #364]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	019a      	lsls	r2, r3, #6
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	071b      	lsls	r3, r3, #28
 8004700:	4955      	ldr	r1, [pc, #340]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004708:	4b52      	ldr	r3, [pc, #328]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800470e:	f7fc fceb 	bl	80010e8 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004716:	f7fc fce7 	bl	80010e8 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e090      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004728:	4b4b      	ldr	r3, [pc, #300]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8083 	beq.w	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b44      	ldr	r3, [pc, #272]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	4a43      	ldr	r2, [pc, #268]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6413      	str	r3, [r2, #64]	; 0x40
 8004752:	4b41      	ldr	r3, [pc, #260]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800475e:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3e      	ldr	r2, [pc, #248]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004768:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800476a:	f7fc fcbd 	bl	80010e8 <HAL_GetTick>
 800476e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004770:	e008      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004772:	f7fc fcb9 	bl	80010e8 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	2b02      	cmp	r3, #2
 800477e:	d901      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e062      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004784:	4b35      	ldr	r3, [pc, #212]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0f0      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004790:	4b31      	ldr	r3, [pc, #196]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004798:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d02f      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d028      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ae:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047c4:	4a24      	ldr	r2, [pc, #144]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d114      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fc fc87 	bl	80010e8 <HAL_GetTick>
 80047da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	e00a      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047de:	f7fc fc83 	bl	80010e8 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e02a      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f4:	4b18      	ldr	r3, [pc, #96]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ee      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480c:	d10d      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800480e:	4b12      	ldr	r3, [pc, #72]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	490d      	ldr	r1, [pc, #52]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]
 8004828:	e005      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800482a:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004830:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004834:	6093      	str	r3, [r2, #8]
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004842:	4905      	ldr	r1, [pc, #20]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004844:	4313      	orrs	r3, r2
 8004846:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	42470068 	.word	0x42470068
 8004858:	40023800 	.word	0x40023800
 800485c:	40007000 	.word	0x40007000
 8004860:	42470e40 	.word	0x42470e40

08004864 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d13e      	bne.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004882:	4b23      	ldr	r3, [pc, #140]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d12f      	bne.n	80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004898:	4b1e      	ldr	r3, [pc, #120]	; (8004914 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800489a:	617b      	str	r3, [r7, #20]
          break;
 800489c:	e02f      	b.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800489e:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048aa:	d108      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ac:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	e007      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048ce:	4b10      	ldr	r3, [pc, #64]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d4:	099b      	lsrs	r3, r3, #6
 80048d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e8:	0f1b      	lsrs	r3, r3, #28
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	617b      	str	r3, [r7, #20]
          break;
 80048f6:	e002      	b.n	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
          break;
 80048fc:	bf00      	nop
        }
      }
      break;
 80048fe:	bf00      	nop
    }
  }
  return frequency;
 8004900:	697b      	ldr	r3, [r7, #20]
}
 8004902:	4618      	mov	r0, r3
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40023800 	.word	0x40023800
 8004914:	00bb8000 	.word	0x00bb8000
 8004918:	007a1200 	.word	0x007a1200
 800491c:	00f42400 	.word	0x00f42400

08004920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07b      	b.n	8004a2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004942:	d009      	beq.n	8004958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
 800494a:	e005      	b.n	8004958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc f9fc 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	431a      	orrs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	ea42 0103 	orr.w	r1, r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0104 	and.w	r1, r3, #4
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0210 	and.w	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3708      	adds	r7, #8
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e041      	b.n	8004ac8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d106      	bne.n	8004a5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f839 	bl	8004ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2202      	movs	r2, #2
 8004a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f000 f9d7 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d001      	beq.n	8004afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e04e      	b.n	8004b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d022      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d01d      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_TIM_Base_Start_IT+0xc8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d018      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d013      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00e      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d111      	bne.n	8004b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d010      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0201 	orr.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b86:	e007      	b.n	8004b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40001800 	.word	0x40001800

08004bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0202 	mvn.w	r2, #2
 8004bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8ee 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f8e0 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f8f1 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0204 	mvn.w	r2, #4
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8c4 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f8b6 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8c7 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0208 	mvn.w	r2, #8
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0303 	and.w	r3, r3, #3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f89a 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f88c 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f89d 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d122      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d11b      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0210 	mvn.w	r2, #16
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f870 	bl	8004de8 <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f862 	bl	8004dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f873 	bl	8004dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d10e      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0201 	mvn.w	r2, #1
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fb ff0c 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d10e      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d60:	2b80      	cmp	r3, #128	; 0x80
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f902 	bl	8004f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d10e      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d107      	bne.n	8004da0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f838 	bl	8004e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	d10e      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b20      	cmp	r3, #32
 8004dba:	d107      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0220 	mvn.w	r2, #32
 8004dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8cc 	bl	8004f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a40      	ldr	r2, [pc, #256]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d00f      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a3d      	ldr	r2, [pc, #244]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00b      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3c      	ldr	r2, [pc, #240]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a3b      	ldr	r2, [pc, #236]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d003      	beq.n	8004e64 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a3a      	ldr	r2, [pc, #232]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d108      	bne.n	8004e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2f      	ldr	r2, [pc, #188]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d02b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e84:	d027      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2c      	ldr	r2, [pc, #176]	; (8004f3c <TIM_Base_SetConfig+0x118>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d023      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2b      	ldr	r2, [pc, #172]	; (8004f40 <TIM_Base_SetConfig+0x11c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01f      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <TIM_Base_SetConfig+0x120>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a29      	ldr	r2, [pc, #164]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d017      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a28      	ldr	r2, [pc, #160]	; (8004f4c <TIM_Base_SetConfig+0x128>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a27      	ldr	r2, [pc, #156]	; (8004f50 <TIM_Base_SetConfig+0x12c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <TIM_Base_SetConfig+0x130>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a25      	ldr	r2, [pc, #148]	; (8004f58 <TIM_Base_SetConfig+0x134>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a24      	ldr	r2, [pc, #144]	; (8004f5c <TIM_Base_SetConfig+0x138>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a23      	ldr	r2, [pc, #140]	; (8004f60 <TIM_Base_SetConfig+0x13c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d108      	bne.n	8004ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	; (8004f38 <TIM_Base_SetConfig+0x114>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0xf8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <TIM_Base_SetConfig+0x124>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40010400 	.word	0x40010400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	40001800 	.word	0x40001800
 8004f5c:	40001c00 	.word	0x40001c00
 8004f60:	40002000 	.word	0x40002000

08004f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e03f      	b.n	800501e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fb ff24 	bl	8000e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f829 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	b09f      	sub	sp, #124	; 0x7c
 800502e:	af00      	add	r7, sp, #0
 8005030:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	68d9      	ldr	r1, [r3, #12]
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	ea40 0301 	orr.w	r3, r0, r1
 8005048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800504a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	431a      	orrs	r2, r3
 8005054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	431a      	orrs	r2, r3
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	4313      	orrs	r3, r2
 8005060:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800506c:	f021 010c 	bic.w	r1, r1, #12
 8005070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005076:	430b      	orrs	r3, r1
 8005078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800507a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005086:	6999      	ldr	r1, [r3, #24]
 8005088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	4bc5      	ldr	r3, [pc, #788]	; (80053ac <UART_SetConfig+0x384>)
 8005098:	429a      	cmp	r2, r3
 800509a:	d004      	beq.n	80050a6 <UART_SetConfig+0x7e>
 800509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4bc3      	ldr	r3, [pc, #780]	; (80053b0 <UART_SetConfig+0x388>)
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d103      	bne.n	80050ae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050a6:	f7ff fab5 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 80050aa:	6778      	str	r0, [r7, #116]	; 0x74
 80050ac:	e002      	b.n	80050b4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7ff fa9d 	bl	80045ec <HAL_RCC_GetPCLK1Freq>
 80050b2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050bc:	f040 80b6 	bne.w	800522c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050c2:	461c      	mov	r4, r3
 80050c4:	f04f 0500 	mov.w	r5, #0
 80050c8:	4622      	mov	r2, r4
 80050ca:	462b      	mov	r3, r5
 80050cc:	1891      	adds	r1, r2, r2
 80050ce:	6439      	str	r1, [r7, #64]	; 0x40
 80050d0:	415b      	adcs	r3, r3
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
 80050d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050d8:	1912      	adds	r2, r2, r4
 80050da:	eb45 0303 	adc.w	r3, r5, r3
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	00d9      	lsls	r1, r3, #3
 80050e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ec:	00d0      	lsls	r0, r2, #3
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	1911      	adds	r1, r2, r4
 80050f4:	6639      	str	r1, [r7, #96]	; 0x60
 80050f6:	416b      	adcs	r3, r5
 80050f8:	667b      	str	r3, [r7, #100]	; 0x64
 80050fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	461a      	mov	r2, r3
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	1891      	adds	r1, r2, r2
 8005106:	63b9      	str	r1, [r7, #56]	; 0x38
 8005108:	415b      	adcs	r3, r3
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005110:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005114:	f7fb f8a6 	bl	8000264 <__aeabi_uldivmod>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4ba5      	ldr	r3, [pc, #660]	; (80053b4 <UART_SetConfig+0x38c>)
 800511e:	fba3 2302 	umull	r2, r3, r3, r2
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	011e      	lsls	r6, r3, #4
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	461c      	mov	r4, r3
 800512a:	f04f 0500 	mov.w	r5, #0
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	1891      	adds	r1, r2, r2
 8005134:	6339      	str	r1, [r7, #48]	; 0x30
 8005136:	415b      	adcs	r3, r3
 8005138:	637b      	str	r3, [r7, #52]	; 0x34
 800513a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800513e:	1912      	adds	r2, r2, r4
 8005140:	eb45 0303 	adc.w	r3, r5, r3
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	00d9      	lsls	r1, r3, #3
 800514e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005152:	00d0      	lsls	r0, r2, #3
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	1911      	adds	r1, r2, r4
 800515a:	65b9      	str	r1, [r7, #88]	; 0x58
 800515c:	416b      	adcs	r3, r5
 800515e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	1891      	adds	r1, r2, r2
 800516c:	62b9      	str	r1, [r7, #40]	; 0x28
 800516e:	415b      	adcs	r3, r3
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005172:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005176:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800517a:	f7fb f873 	bl	8000264 <__aeabi_uldivmod>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4b8c      	ldr	r3, [pc, #560]	; (80053b4 <UART_SetConfig+0x38c>)
 8005184:	fba3 1302 	umull	r1, r3, r3, r2
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	2164      	movs	r1, #100	; 0x64
 800518c:	fb01 f303 	mul.w	r3, r1, r3
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	3332      	adds	r3, #50	; 0x32
 8005196:	4a87      	ldr	r2, [pc, #540]	; (80053b4 <UART_SetConfig+0x38c>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051a4:	441e      	add	r6, r3
 80051a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a8:	4618      	mov	r0, r3
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	4602      	mov	r2, r0
 80051b0:	460b      	mov	r3, r1
 80051b2:	1894      	adds	r4, r2, r2
 80051b4:	623c      	str	r4, [r7, #32]
 80051b6:	415b      	adcs	r3, r3
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051be:	1812      	adds	r2, r2, r0
 80051c0:	eb41 0303 	adc.w	r3, r1, r3
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	f04f 0500 	mov.w	r5, #0
 80051cc:	00dd      	lsls	r5, r3, #3
 80051ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051d2:	00d4      	lsls	r4, r2, #3
 80051d4:	4622      	mov	r2, r4
 80051d6:	462b      	mov	r3, r5
 80051d8:	1814      	adds	r4, r2, r0
 80051da:	653c      	str	r4, [r7, #80]	; 0x50
 80051dc:	414b      	adcs	r3, r1
 80051de:	657b      	str	r3, [r7, #84]	; 0x54
 80051e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	1891      	adds	r1, r2, r2
 80051ec:	61b9      	str	r1, [r7, #24]
 80051ee:	415b      	adcs	r3, r3
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80051fa:	f7fb f833 	bl	8000264 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b6c      	ldr	r3, [pc, #432]	; (80053b4 <UART_SetConfig+0x38c>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a67      	ldr	r2, [pc, #412]	; (80053b4 <UART_SetConfig+0x38c>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 0207 	and.w	r2, r3, #7
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4432      	add	r2, r6
 8005228:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800522a:	e0b9      	b.n	80053a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800522e:	461c      	mov	r4, r3
 8005230:	f04f 0500 	mov.w	r5, #0
 8005234:	4622      	mov	r2, r4
 8005236:	462b      	mov	r3, r5
 8005238:	1891      	adds	r1, r2, r2
 800523a:	6139      	str	r1, [r7, #16]
 800523c:	415b      	adcs	r3, r3
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005244:	1912      	adds	r2, r2, r4
 8005246:	eb45 0303 	adc.w	r3, r5, r3
 800524a:	f04f 0000 	mov.w	r0, #0
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	00d9      	lsls	r1, r3, #3
 8005254:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005258:	00d0      	lsls	r0, r2, #3
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	eb12 0804 	adds.w	r8, r2, r4
 8005262:	eb43 0905 	adc.w	r9, r3, r5
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	4618      	mov	r0, r3
 800526c:	f04f 0100 	mov.w	r1, #0
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	008b      	lsls	r3, r1, #2
 800527a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800527e:	0082      	lsls	r2, r0, #2
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	f7fa ffee 	bl	8000264 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4b49      	ldr	r3, [pc, #292]	; (80053b4 <UART_SetConfig+0x38c>)
 800528e:	fba3 2302 	umull	r2, r3, r3, r2
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	011e      	lsls	r6, r3, #4
 8005296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005298:	4618      	mov	r0, r3
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	1894      	adds	r4, r2, r2
 80052a4:	60bc      	str	r4, [r7, #8]
 80052a6:	415b      	adcs	r3, r3
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052ae:	1812      	adds	r2, r2, r0
 80052b0:	eb41 0303 	adc.w	r3, r1, r3
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	f04f 0500 	mov.w	r5, #0
 80052bc:	00dd      	lsls	r5, r3, #3
 80052be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052c2:	00d4      	lsls	r4, r2, #3
 80052c4:	4622      	mov	r2, r4
 80052c6:	462b      	mov	r3, r5
 80052c8:	1814      	adds	r4, r2, r0
 80052ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80052cc:	414b      	adcs	r3, r1
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	008b      	lsls	r3, r1, #2
 80052e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052e8:	0082      	lsls	r2, r0, #2
 80052ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80052ee:	f7fa ffb9 	bl	8000264 <__aeabi_uldivmod>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4b2f      	ldr	r3, [pc, #188]	; (80053b4 <UART_SetConfig+0x38c>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <UART_SetConfig+0x38c>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005316:	441e      	add	r6, r3
 8005318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531a:	4618      	mov	r0, r3
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	1894      	adds	r4, r2, r2
 8005326:	603c      	str	r4, [r7, #0]
 8005328:	415b      	adcs	r3, r3
 800532a:	607b      	str	r3, [r7, #4]
 800532c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005330:	1812      	adds	r2, r2, r0
 8005332:	eb41 0303 	adc.w	r3, r1, r3
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	f04f 0500 	mov.w	r5, #0
 800533e:	00dd      	lsls	r5, r3, #3
 8005340:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005344:	00d4      	lsls	r4, r2, #3
 8005346:	4622      	mov	r2, r4
 8005348:	462b      	mov	r3, r5
 800534a:	eb12 0a00 	adds.w	sl, r2, r0
 800534e:	eb43 0b01 	adc.w	fp, r3, r1
 8005352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	008b      	lsls	r3, r1, #2
 8005366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800536a:	0082      	lsls	r2, r0, #2
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f7fa ff78 	bl	8000264 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <UART_SetConfig+0x38c>)
 800537a:	fba3 1302 	umull	r1, r3, r3, r2
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2164      	movs	r1, #100	; 0x64
 8005382:	fb01 f303 	mul.w	r3, r1, r3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	3332      	adds	r3, #50	; 0x32
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <UART_SetConfig+0x38c>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4432      	add	r2, r6
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	377c      	adds	r7, #124	; 0x7c
 80053a4:	46bd      	mov	sp, r7
 80053a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053aa:	bf00      	nop
 80053ac:	40011000 	.word	0x40011000
 80053b0:	40011400 	.word	0x40011400
 80053b4:	51eb851f 	.word	0x51eb851f

080053b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b8:	b084      	sub	sp, #16
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	f107 001c 	add.w	r0, r7, #28
 80053c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d122      	bne.n	8005416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d105      	bne.n	800540a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f9a0 	bl	8005750 <USB_CoreReset>
 8005410:	4603      	mov	r3, r0
 8005412:	73fb      	strb	r3, [r7, #15]
 8005414:	e01a      	b.n	800544c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f994 	bl	8005750 <USB_CoreReset>
 8005428:	4603      	mov	r3, r0
 800542a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800542c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
 800543e:	e005      	b.n	800544c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800544c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544e:	2b01      	cmp	r3, #1
 8005450:	d10b      	bne.n	800546a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f043 0206 	orr.w	r2, r3, #6
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f043 0220 	orr.w	r2, r3, #32
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800546a:	7bfb      	ldrb	r3, [r7, #15]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005476:	b004      	add	sp, #16
 8005478:	4770      	bx	lr

0800547a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f043 0201 	orr.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f023 0201 	bic.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d115      	bne.n	800550c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054ec:	2001      	movs	r0, #1
 80054ee:	f7fb fe07 	bl	8001100 <HAL_Delay>
      ms++;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3301      	adds	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f91a 	bl	8005732 <USB_GetMode>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d01e      	beq.n	8005542 <USB_SetCurrentMode+0x84>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b31      	cmp	r3, #49	; 0x31
 8005508:	d9f0      	bls.n	80054ec <USB_SetCurrentMode+0x2e>
 800550a:	e01a      	b.n	8005542 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800551e:	2001      	movs	r0, #1
 8005520:	f7fb fdee 	bl	8001100 <HAL_Delay>
      ms++;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f901 	bl	8005732 <USB_GetMode>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <USB_SetCurrentMode+0x84>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b31      	cmp	r3, #49	; 0x31
 800553a:	d9f0      	bls.n	800551e <USB_SetCurrentMode+0x60>
 800553c:	e001      	b.n	8005542 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e005      	b.n	800554e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b32      	cmp	r3, #50	; 0x32
 8005546:	d101      	bne.n	800554c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	019b      	lsls	r3, r3, #6
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	3301      	adds	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	4a08      	ldr	r2, [pc, #32]	; (800559c <USB_FlushTxFifo+0x44>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e006      	b.n	8005590 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b20      	cmp	r3, #32
 800558c:	d0f1      	beq.n	8005572 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	00030d40 	.word	0x00030d40

080055a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2210      	movs	r2, #16
 80055b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3301      	adds	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	4a08      	ldr	r2, [pc, #32]	; (80055dc <USB_FlushRxFifo+0x3c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d901      	bls.n	80055c2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e006      	b.n	80055d0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d0f1      	beq.n	80055b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	00030d40 	.word	0x00030d40

080055e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b089      	sub	sp, #36	; 0x24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4611      	mov	r1, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	460b      	mov	r3, r1
 80055f0:	71fb      	strb	r3, [r7, #7]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d123      	bne.n	800564e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005606:	88bb      	ldrh	r3, [r7, #4]
 8005608:	3303      	adds	r3, #3
 800560a:	089b      	lsrs	r3, r3, #2
 800560c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800560e:	2300      	movs	r3, #0
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	e018      	b.n	8005646 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	031a      	lsls	r2, r3, #12
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4413      	add	r3, r2
 800561c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005620:	461a      	mov	r2, r3
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	3301      	adds	r3, #1
 8005632:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	3301      	adds	r3, #1
 8005638:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	3301      	adds	r3, #1
 800563e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	3301      	adds	r3, #1
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d3e2      	bcc.n	8005614 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3724      	adds	r7, #36	; 0x24
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800565c:	b480      	push	{r7}
 800565e:	b08b      	sub	sp, #44	; 0x2c
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	089b      	lsrs	r3, r3, #2
 8005676:	b29b      	uxth	r3, r3
 8005678:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	e014      	b.n	80056b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	601a      	str	r2, [r3, #0]
    pDest++;
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	3301      	adds	r3, #1
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	3301      	adds	r3, #1
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	3301      	adds	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	3301      	adds	r3, #1
 80056aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	3301      	adds	r3, #1
 80056b0:	623b      	str	r3, [r7, #32]
 80056b2:	6a3a      	ldr	r2, [r7, #32]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d3e6      	bcc.n	8005688 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056ba:	8bfb      	ldrh	r3, [r7, #30]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01e      	beq.n	80056fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056ca:	461a      	mov	r2, r3
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	701a      	strb	r2, [r3, #0]
      i++;
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	3301      	adds	r3, #1
 80056ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	3301      	adds	r3, #1
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056f2:	8bfb      	ldrh	r3, [r7, #30]
 80056f4:	3b01      	subs	r3, #1
 80056f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056f8:	8bfb      	ldrh	r3, [r7, #30]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ea      	bne.n	80056d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005700:	4618      	mov	r0, r3
 8005702:	372c      	adds	r7, #44	; 0x2c
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005724:	68fb      	ldr	r3, [r7, #12]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0301 	and.w	r3, r3, #1
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	3301      	adds	r3, #1
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <USB_CoreReset+0x60>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e01a      	b.n	80057a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	daf3      	bge.n	800575c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	60fb      	str	r3, [r7, #12]
 800578a:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <USB_CoreReset+0x60>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e006      	b.n	80057a2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d0f1      	beq.n	8005784 <USB_CoreReset+0x34>

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	00030d40 	.word	0x00030d40

080057b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057b4:	b084      	sub	sp, #16
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	f107 001c 	add.w	r0, r7, #28
 80057c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d0:	461a      	mov	r2, r3
 80057d2:	2300      	movs	r3, #0
 80057d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d018      	beq.n	8005838 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10a      	bne.n	8005822 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800581a:	f043 0304 	orr.w	r3, r3, #4
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e014      	b.n	800584c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005830:	f023 0304 	bic.w	r3, r3, #4
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e009      	b.n	800584c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005846:	f023 0304 	bic.w	r3, r3, #4
 800584a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800584c:	2110      	movs	r1, #16
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7ff fe82 	bl	8005558 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff fea3 	bl	80055a0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e015      	b.n	800588c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4413      	add	r3, r2
 8005868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586c:	461a      	mov	r2, r3
 800586e:	f04f 33ff 	mov.w	r3, #4294967295
 8005872:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	461a      	mov	r2, r3
 8005882:	2300      	movs	r3, #0
 8005884:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d3e5      	bcc.n	8005860 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f04f 32ff 	mov.w	r2, #4294967295
 80058a0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a13      	ldr	r2, [pc, #76]	; (8005908 <USB_HostInit+0x154>)
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a13      	ldr	r2, [pc, #76]	; (800590c <USB_HostInit+0x158>)
 80058c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058c4:	e009      	b.n	80058da <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2280      	movs	r2, #128	; 0x80
 80058ca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a10      	ldr	r2, [pc, #64]	; (8005910 <USB_HostInit+0x15c>)
 80058d0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a0f      	ldr	r2, [pc, #60]	; (8005914 <USB_HostInit+0x160>)
 80058d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f043 0210 	orr.w	r2, r3, #16
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699a      	ldr	r2, [r3, #24]
 80058f0:	4b09      	ldr	r3, [pc, #36]	; (8005918 <USB_HostInit+0x164>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr
 8005908:	01000200 	.word	0x01000200
 800590c:	00e00300 	.word	0x00e00300
 8005910:	00600080 	.word	0x00600080
 8005914:	004000e0 	.word	0x004000e0
 8005918:	a3200008 	.word	0xa3200008

0800591c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	f003 0303 	and.w	r3, r3, #3
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005964:	461a      	mov	r2, r3
 8005966:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800596a:	6053      	str	r3, [r2, #4]
 800596c:	e009      	b.n	8005982 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800596e:	78fb      	ldrb	r3, [r7, #3]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d106      	bne.n	8005982 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800597a:	461a      	mov	r2, r3
 800597c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005980:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80059c0:	2064      	movs	r0, #100	; 0x64
 80059c2:	f7fb fb9d 	bl	8001100 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059d2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059d4:	200a      	movs	r0, #10
 80059d6:	f7fb fb93 	bl	8001100 <HAL_Delay>

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	460b      	mov	r3, r1
 80059ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005a08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d109      	bne.n	8005a28 <USB_DriveVbus+0x44>
 8005a14:	78fb      	ldrb	r3, [r7, #3]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d106      	bne.n	8005a28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	d109      	bne.n	8005a48 <USB_DriveVbus+0x64>
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	0c5b      	lsrs	r3, r3, #17
 8005a74:	f003 0303 	and.w	r3, r3, #3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	b29b      	uxth	r3, r3
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
	...

08005aa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	70fb      	strb	r3, [r7, #3]
 8005aba:	460b      	mov	r3, r1
 8005abc:	70bb      	strb	r3, [r7, #2]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ade:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d87e      	bhi.n	8005be4 <USB_HC_Init+0x13c>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <USB_HC_Init+0x44>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005ba7 	.word	0x08005ba7
 8005af4:	08005afd 	.word	0x08005afd
 8005af8:	08005b69 	.word	0x08005b69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005b0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005b10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da10      	bge.n	8005b3a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	78fa      	ldrb	r2, [r7, #3]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	693a      	ldr	r2, [r7, #16]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b36:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b38:	e057      	b.n	8005bea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d051      	beq.n	8005bea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b64:	60d3      	str	r3, [r2, #12]
      break;
 8005b66:	e040      	b.n	8005bea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	461a      	mov	r2, r3
 8005b76:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da34      	bge.n	8005bee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ba4:	e023      	b.n	8005bee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f240 2325 	movw	r3, #549	; 0x225
 8005bb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005bba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	da17      	bge.n	8005bf2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bdc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005be0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005be2:	e006      	b.n	8005bf2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	77fb      	strb	r3, [r7, #31]
      break;
 8005be8:	e004      	b.n	8005bf4 <USB_HC_Init+0x14c>
      break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <USB_HC_Init+0x14c>
      break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <USB_HC_Init+0x14c>
      break;
 8005bf2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	2101      	movs	r1, #1
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	6939      	ldr	r1, [r7, #16]
 8005c0a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	da03      	bge.n	8005c2e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e001      	b.n	8005c32 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ff0f 	bl	8005a56 <USB_GetHostSpeed>
 8005c38:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d106      	bne.n	8005c50 <USB_HC_Init+0x1a8>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d003      	beq.n	8005c50 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c4c:	617b      	str	r3, [r7, #20]
 8005c4e:	e001      	b.n	8005c54 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c54:	787b      	ldrb	r3, [r7, #1]
 8005c56:	059b      	lsls	r3, r3, #22
 8005c58:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c5c:	78bb      	ldrb	r3, [r7, #2]
 8005c5e:	02db      	lsls	r3, r3, #11
 8005c60:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c64:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c6a:	049b      	lsls	r3, r3, #18
 8005c6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c70:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c72:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c78:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	0159      	lsls	r1, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	440b      	add	r3, r1
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c90:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005c92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d10f      	bne.n	8005cba <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cba:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ce0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02d      	beq.n	8005d4a <USB_HC_StartXfer+0x86>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	791b      	ldrb	r3, [r3, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d129      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d117      	bne.n	8005d2c <USB_HC_StartXfer+0x68>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	79db      	ldrb	r3, [r3, #7]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <USB_HC_StartXfer+0x48>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	79db      	ldrb	r3, [r3, #7]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d10f      	bne.n	8005d2c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	6a3a      	ldr	r2, [r7, #32]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	795b      	ldrb	r3, [r3, #5]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fa2f 	bl	80061a4 <USB_DoPing>
      return HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e0f8      	b.n	8005f3c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d018      	beq.n	8005d84 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	8912      	ldrh	r2, [r2, #8]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	8912      	ldrh	r2, [r2, #8]
 8005d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d66:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d6a:	8b7b      	ldrh	r3, [r7, #26]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d90b      	bls.n	8005d88 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d70:	8b7b      	ldrh	r3, [r7, #26]
 8005d72:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	8912      	ldrh	r2, [r2, #8]
 8005d7a:	fb02 f203 	mul.w	r2, r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	e001      	b.n	8005d88 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d84:	2301      	movs	r3, #1
 8005d86:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	8912      	ldrh	r2, [r2, #8]
 8005d96:	fb02 f203 	mul.w	r2, r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	611a      	str	r2, [r3, #16]
 8005d9e:	e003      	b.n	8005da8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005db0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005db2:	04d9      	lsls	r1, r3, #19
 8005db4:	4b63      	ldr	r3, [pc, #396]	; (8005f44 <USB_HC_StartXfer+0x280>)
 8005db6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	7a9b      	ldrb	r3, [r3, #10]
 8005dbe:	075b      	lsls	r3, r3, #29
 8005dc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dc4:	69f9      	ldr	r1, [r7, #28]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	6a39      	ldr	r1, [r7, #32]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005dd4:	79fb      	ldrb	r3, [r7, #7]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68d9      	ldr	r1, [r3, #12]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	460a      	mov	r2, r1
 8005dec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	7e7b      	ldrb	r3, [r7, #25]
 8005e36:	075b      	lsls	r3, r3, #29
 8005e38:	69f9      	ldr	r1, [r7, #28]
 8005e3a:	0148      	lsls	r0, r1, #5
 8005e3c:	6a39      	ldr	r1, [r7, #32]
 8005e3e:	4401      	add	r1, r0
 8005e40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e5e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	78db      	ldrb	r3, [r3, #3]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d004      	beq.n	8005e72 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	e003      	b.n	8005e7a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e78:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e80:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	461a      	mov	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e94:	79fb      	ldrb	r3, [r7, #7]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e04e      	b.n	8005f3c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	78db      	ldrb	r3, [r3, #3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d149      	bne.n	8005f3a <USB_HC_StartXfer+0x276>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d045      	beq.n	8005f3a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	79db      	ldrb	r3, [r3, #7]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d830      	bhi.n	8005f18 <USB_HC_StartXfer+0x254>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <USB_HC_StartXfer+0x1f8>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ecd 	.word	0x08005ecd
 8005ec0:	08005ef1 	.word	0x08005ef1
 8005ec4:	08005ecd 	.word	0x08005ecd
 8005ec8:	08005ef1 	.word	0x08005ef1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	3303      	adds	r3, #3
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ed6:	8afa      	ldrh	r2, [r7, #22]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d91c      	bls.n	8005f1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f043 0220 	orr.w	r2, r3, #32
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	619a      	str	r2, [r3, #24]
        }
        break;
 8005eee:	e015      	b.n	8005f1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	3303      	adds	r3, #3
 8005ef6:	089b      	lsrs	r3, r3, #2
 8005ef8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005efa:	8afa      	ldrh	r2, [r7, #22]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d90a      	bls.n	8005f20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f16:	e003      	b.n	8005f20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f18:	bf00      	nop
 8005f1a:	e002      	b.n	8005f22 <USB_HC_StartXfer+0x25e>
        break;
 8005f1c:	bf00      	nop
 8005f1e:	e000      	b.n	8005f22 <USB_HC_StartXfer+0x25e>
        break;
 8005f20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68d9      	ldr	r1, [r3, #12]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	785a      	ldrb	r2, [r3, #1]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2000      	movs	r0, #0
 8005f32:	9000      	str	r0, [sp, #0]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff fb53 	bl	80055e0 <USB_WritePacket>
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	; 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	1ff80000 	.word	0x1ff80000

08005f48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	b29b      	uxth	r3, r3
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b089      	sub	sp, #36	; 0x24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	0c9b      	lsrs	r3, r3, #18
 8005f92:	f003 0303 	and.w	r3, r3, #3
 8005f96:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	0fdb      	lsrs	r3, r3, #31
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d104      	bne.n	8005fc4 <USB_HC_Halt+0x5a>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e0e8      	b.n	8006196 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <USB_HC_Halt+0x66>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d173      	bne.n	80060b8 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 80cb 	bne.w	8006194 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d143      	bne.n	8006092 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	4413      	add	r3, r2
 8006012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	440a      	add	r2, r1
 8006020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006028:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	4413      	add	r3, r2
 8006032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	440a      	add	r2, r1
 8006040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006048:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	440a      	add	r2, r1
 8006060:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006064:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006068:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	3301      	adds	r3, #1
 800606e:	61fb      	str	r3, [r7, #28]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006076:	d81d      	bhi.n	80060b4 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	4413      	add	r3, r2
 8006080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800608a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800608e:	d0ec      	beq.n	800606a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006090:	e080      	b.n	8006194 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060b2:	e06f      	b.n	8006194 <USB_HC_Halt+0x22a>
            break;
 80060b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060b6:	e06d      	b.n	8006194 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d143      	bne.n	8006170 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	0151      	lsls	r1, r2, #5
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	440a      	add	r2, r1
 80060fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006106:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006126:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006142:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006146:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	3301      	adds	r3, #1
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006154:	d81d      	bhi.n	8006192 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006168:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800616c:	d0ec      	beq.n	8006148 <USB_HC_Halt+0x1de>
 800616e:	e011      	b.n	8006194 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	e000      	b.n	8006194 <USB_HC_Halt+0x22a>
          break;
 8006192:	bf00      	nop
    }
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3724      	adds	r7, #36	; 0x24
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80061b8:	2301      	movs	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	04da      	lsls	r2, r3, #19
 80061c0:	4b15      	ldr	r3, [pc, #84]	; (8006218 <USB_DoPing+0x74>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006202:	461a      	mov	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	1ff80000 	.word	0x1ff80000

0800621c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff f935 	bl	800549c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006232:	2110      	movs	r1, #16
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff f98f 	bl	8005558 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7ff f9b0 	bl	80055a0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006240:	2300      	movs	r3, #0
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	e01f      	b.n	8006286 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800625c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006264:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800626c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	461a      	mov	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3301      	adds	r3, #1
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	2b0f      	cmp	r3, #15
 800628a:	d9dc      	bls.n	8006246 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	e034      	b.n	80062fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	461a      	mov	r2, r3
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	3301      	adds	r3, #1
 80062d0:	617b      	str	r3, [r7, #20]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d8:	d80c      	bhi.n	80062f4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062f0:	d0ec      	beq.n	80062cc <USB_StopHost+0xb0>
 80062f2:	e000      	b.n	80062f6 <USB_StopHost+0xda>
        break;
 80062f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3301      	adds	r3, #1
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d9c7      	bls.n	8006292 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 33ff 	mov.w	r3, #4294967295
 800630e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f04f 32ff 	mov.w	r2, #4294967295
 8006316:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff f8ae 	bl	800547a <USB_EnableGlobalInt>

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af04      	add	r7, sp, #16
 800632e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006330:	2301      	movs	r3, #1
 8006332:	2202      	movs	r2, #2
 8006334:	2102      	movs	r1, #2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fc66 	bl	8006c08 <USBH_FindInterface>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2bff      	cmp	r3, #255	; 0xff
 8006344:	d002      	beq.n	800634c <USBH_CDC_InterfaceInit+0x24>
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d901      	bls.n	8006350 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800634c:	2302      	movs	r3, #2
 800634e:	e13d      	b.n	80065cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc3b 	bl	8006bd0 <USBH_SelectInterface>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006364:	2302      	movs	r3, #2
 8006366:	e131      	b.n	80065cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800636e:	2050      	movs	r0, #80	; 0x50
 8006370:	f006 f914 	bl	800c59c <malloc>
 8006374:	4603      	mov	r3, r0
 8006376:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006388:	2302      	movs	r3, #2
 800638a:	e11f      	b.n	80065cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800638c:	2250      	movs	r2, #80	; 0x50
 800638e:	2100      	movs	r1, #0
 8006390:	68b8      	ldr	r0, [r7, #8]
 8006392:	f006 f92f 	bl	800c5f4 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	211a      	movs	r1, #26
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b25b      	sxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da15      	bge.n	80063da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	211a      	movs	r1, #26
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	4413      	add	r3, r2
 80063ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063be:	781a      	ldrb	r2, [r3, #0]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	211a      	movs	r1, #26
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063d4:	881a      	ldrh	r2, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fe32 	bl	800804a <USBH_AllocPipe>
 80063e6:	4603      	mov	r3, r0
 80063e8:	461a      	mov	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	7819      	ldrb	r1, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	7858      	ldrb	r0, [r3, #1]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	8952      	ldrh	r2, [r2, #10]
 8006406:	9202      	str	r2, [sp, #8]
 8006408:	2203      	movs	r2, #3
 800640a:	9201      	str	r2, [sp, #4]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	4623      	mov	r3, r4
 8006410:	4602      	mov	r2, r0
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fdea 	bl	8007fec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2200      	movs	r2, #0
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f002 f8f9 	bl	8008618 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006426:	2300      	movs	r3, #0
 8006428:	2200      	movs	r2, #0
 800642a:	210a      	movs	r1, #10
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fbeb 	bl	8006c08 <USBH_FindInterface>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2bff      	cmp	r3, #255	; 0xff
 800643a:	d002      	beq.n	8006442 <USBH_CDC_InterfaceInit+0x11a>
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d901      	bls.n	8006446 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006442:	2302      	movs	r3, #2
 8006444:	e0c2      	b.n	80065cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	211a      	movs	r1, #26
 800644c:	fb01 f303 	mul.w	r3, r1, r3
 8006450:	4413      	add	r3, r2
 8006452:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b25b      	sxtb	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	da16      	bge.n	800648c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800645e:	7bfb      	ldrb	r3, [r7, #15]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	211a      	movs	r1, #26
 8006464:	fb01 f303 	mul.w	r3, r1, r3
 8006468:	4413      	add	r3, r2
 800646a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800646e:	781a      	ldrb	r2, [r3, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	211a      	movs	r1, #26
 800647a:	fb01 f303 	mul.w	r3, r1, r3
 800647e:	4413      	add	r3, r2
 8006480:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	835a      	strh	r2, [r3, #26]
 800648a:	e015      	b.n	80064b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	211a      	movs	r1, #26
 8006492:	fb01 f303 	mul.w	r3, r1, r3
 8006496:	4413      	add	r3, r2
 8006498:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800649c:	781a      	ldrb	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	211a      	movs	r1, #26
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80064b2:	881a      	ldrh	r2, [r3, #0]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	211a      	movs	r1, #26
 80064be:	fb01 f303 	mul.w	r3, r1, r3
 80064c2:	4413      	add	r3, r2
 80064c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da16      	bge.n	80064fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	211a      	movs	r1, #26
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	4413      	add	r3, r2
 80064dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	211a      	movs	r1, #26
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	835a      	strh	r2, [r3, #26]
 80064fc:	e015      	b.n	800652a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	211a      	movs	r1, #26
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	4413      	add	r3, r2
 800650a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800650e:	781a      	ldrb	r2, [r3, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	211a      	movs	r1, #26
 800651a:	fb01 f303 	mul.w	r3, r1, r3
 800651e:	4413      	add	r3, r2
 8006520:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006524:	881a      	ldrh	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	7b9b      	ldrb	r3, [r3, #14]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fd8a 	bl	800804a <USBH_AllocPipe>
 8006536:	4603      	mov	r3, r0
 8006538:	461a      	mov	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7bdb      	ldrb	r3, [r3, #15]
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f001 fd80 	bl	800804a <USBH_AllocPipe>
 800654a:	4603      	mov	r3, r0
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	7b59      	ldrb	r1, [r3, #13]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	7b98      	ldrb	r0, [r3, #14]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	8b12      	ldrh	r2, [r2, #24]
 800656a:	9202      	str	r2, [sp, #8]
 800656c:	2202      	movs	r2, #2
 800656e:	9201      	str	r2, [sp, #4]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	4623      	mov	r3, r4
 8006574:	4602      	mov	r2, r0
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fd38 	bl	8007fec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	7b19      	ldrb	r1, [r3, #12]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	7bd8      	ldrb	r0, [r3, #15]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	8b52      	ldrh	r2, [r2, #26]
 8006594:	9202      	str	r2, [sp, #8]
 8006596:	2202      	movs	r2, #2
 8006598:	9201      	str	r2, [sp, #4]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	4623      	mov	r3, r4
 800659e:	4602      	mov	r2, r0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fd23 	bl	8007fec <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	7b5b      	ldrb	r3, [r3, #13]
 80065b2:	2200      	movs	r2, #0
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f002 f82e 	bl	8008618 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	7b1b      	ldrb	r3, [r3, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f002 f827 	bl	8008618 <USBH_LL_SetToggle>

  return USBH_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd90      	pop	{r4, r7, pc}

080065d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fd18 	bl	800802a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f001 fd43 	bl	800808c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	7b1b      	ldrb	r3, [r3, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 fd05 	bl	800802a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	7b1b      	ldrb	r3, [r3, #12]
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f001 fd30 	bl	800808c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	7b5b      	ldrb	r3, [r3, #13]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	7b5b      	ldrb	r3, [r3, #13]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fcf2 	bl	800802a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	7b5b      	ldrb	r3, [r3, #13]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fd1d 	bl	800808c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00b      	beq.n	800667c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	4618      	mov	r0, r3
 800666e:	f005 ff9d 	bl	800c5ac <free>
    phost->pActiveClass->pData = 0U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006678:	2200      	movs	r2, #0
 800667a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3340      	adds	r3, #64	; 0x40
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8b1 	bl	8006806 <GetLineCoding>
 80066a4:	4603      	mov	r3, r0
 80066a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80066a8:	7afb      	ldrb	r3, [r7, #11]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80066b4:	2102      	movs	r1, #2
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80066ba:	7afb      	ldrb	r3, [r7, #11]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d877      	bhi.n	80067d8 <USBH_CDC_Process+0x114>
 80066e8:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <USBH_CDC_Process+0x2c>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006705 	.word	0x08006705
 80066f4:	0800670b 	.word	0x0800670b
 80066f8:	0800673b 	.word	0x0800673b
 80066fc:	080067af 	.word	0x080067af
 8006700:	080067bd 	.word	0x080067bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]
      break;
 8006708:	e06d      	b.n	80067e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f897 	bl	8006844 <SetLineCoding>
 8006716:	4603      	mov	r3, r0
 8006718:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d104      	bne.n	800672a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006728:	e058      	b.n	80067dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d055      	beq.n	80067dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2204      	movs	r2, #4
 8006734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006738:	e050      	b.n	80067dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	3340      	adds	r3, #64	; 0x40
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f860 	bl	8006806 <GetLineCoding>
 8006746:	4603      	mov	r3, r0
 8006748:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d126      	bne.n	800679e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006762:	791b      	ldrb	r3, [r3, #4]
 8006764:	429a      	cmp	r2, r3
 8006766:	d13b      	bne.n	80067e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006772:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006774:	429a      	cmp	r2, r3
 8006776:	d133      	bne.n	80067e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006782:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006784:	429a      	cmp	r2, r3
 8006786:	d12b      	bne.n	80067e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006790:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006792:	429a      	cmp	r2, r3
 8006794:	d124      	bne.n	80067e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f958 	bl	8006a4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800679c:	e020      	b.n	80067e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d01d      	beq.n	80067e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2204      	movs	r2, #4
 80067a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80067ac:	e018      	b.n	80067e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f867 	bl	8006882 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f8da 	bl	800696e <CDC_ProcessReception>
      break;
 80067ba:	e014      	b.n	80067e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 ffe3 	bl	800778a <USBH_ClrFeature>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067d6:	e005      	b.n	80067e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80067d8:	bf00      	nop
 80067da:	e004      	b.n	80067e6 <USBH_CDC_Process+0x122>
      break;
 80067dc:	bf00      	nop
 80067de:	e002      	b.n	80067e6 <USBH_CDC_Process+0x122>
      break;
 80067e0:	bf00      	nop
 80067e2:	e000      	b.n	80067e6 <USBH_CDC_Process+0x122>
      break;
 80067e4:	bf00      	nop

  }

  return status;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	22a1      	movs	r2, #161	; 0xa1
 8006814:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2221      	movs	r2, #33	; 0x21
 800681a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2207      	movs	r2, #7
 800682c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	2207      	movs	r2, #7
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 f988 	bl	8007b4a <USBH_CtlReq>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2221      	movs	r2, #33	; 0x21
 8006852:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2207      	movs	r2, #7
 800686a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2207      	movs	r2, #7
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f969 	bl	8007b4a <USBH_CtlReq>
 8006878:	4603      	mov	r3, r0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af02      	add	r7, sp, #8
 8006888:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006894:	2300      	movs	r3, #0
 8006896:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d002      	beq.n	80068a8 <CDC_ProcessTransmission+0x26>
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d023      	beq.n	80068ee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80068a6:	e05e      	b.n	8006966 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	8b12      	ldrh	r2, [r2, #24]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d90b      	bls.n	80068cc <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	69d9      	ldr	r1, [r3, #28]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8b1a      	ldrh	r2, [r3, #24]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	7b5b      	ldrb	r3, [r3, #13]
 80068c0:	2001      	movs	r0, #1
 80068c2:	9000      	str	r0, [sp, #0]
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fb4e 	bl	8007f66 <USBH_BulkSendData>
 80068ca:	e00b      	b.n	80068e4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	7b5b      	ldrb	r3, [r3, #13]
 80068da:	2001      	movs	r0, #1
 80068dc:	9000      	str	r0, [sp, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fb41 	bl	8007f66 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068ec:	e03b      	b.n	8006966 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	7b5b      	ldrb	r3, [r3, #13]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fe65 	bl	80085c4 <USBH_LL_GetURBState>
 80068fa:	4603      	mov	r3, r0
 80068fc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068fe:	7afb      	ldrb	r3, [r7, #11]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d128      	bne.n	8006956 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	8b12      	ldrh	r2, [r2, #24]
 800690c:	4293      	cmp	r3, r2
 800690e:	d90e      	bls.n	800692e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	8b12      	ldrh	r2, [r2, #24]
 8006918:	1a9a      	subs	r2, r3, r2
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	8b12      	ldrh	r2, [r2, #24]
 8006926:	441a      	add	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	61da      	str	r2, [r3, #28]
 800692c:	e002      	b.n	8006934 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d004      	beq.n	8006946 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006944:	e00e      	b.n	8006964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f868 	bl	8006a24 <USBH_CDC_TransmitCallback>
      break;
 8006954:	e006      	b.n	8006964 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d103      	bne.n	8006964 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006964:	bf00      	nop
  }
}
 8006966:	bf00      	nop
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006980:	2300      	movs	r3, #0
 8006982:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800698a:	2b03      	cmp	r3, #3
 800698c:	d002      	beq.n	8006994 <CDC_ProcessReception+0x26>
 800698e:	2b04      	cmp	r3, #4
 8006990:	d00e      	beq.n	80069b0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006992:	e043      	b.n	8006a1c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	6a19      	ldr	r1, [r3, #32]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	8b5a      	ldrh	r2, [r3, #26]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	7b1b      	ldrb	r3, [r3, #12]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f001 fb05 	bl	8007fb0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2204      	movs	r2, #4
 80069aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069ae:	e035      	b.n	8006a1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	7b1b      	ldrb	r3, [r3, #12]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fe04 	bl	80085c4 <USBH_LL_GetURBState>
 80069bc:	4603      	mov	r3, r0
 80069be:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d129      	bne.n	8006a1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	7b1b      	ldrb	r3, [r3, #12]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fd67 	bl	80084a0 <USBH_LL_GetLastXferSize>
 80069d2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d016      	beq.n	8006a0c <CDC_ProcessReception+0x9e>
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	8b5b      	ldrh	r3, [r3, #26]
 80069e2:	461a      	mov	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d910      	bls.n	8006a0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	6a1a      	ldr	r2, [r3, #32]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	441a      	add	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2203      	movs	r2, #3
 8006a06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006a0a:	e006      	b.n	8006a1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 f80f 	bl	8006a38 <USBH_CDC_ReceiveCallback>
      break;
 8006a1a:	bf00      	nop
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a74:	2302      	movs	r3, #2
 8006a76:	e029      	b.n	8006acc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	79fa      	ldrb	r2, [r7, #7]
 8006a7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f81f 	bl	8006ad4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f001 fc37 	bl	8008338 <USBH_LL_Init>

  return USBH_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	e009      	b.n	8006afa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	33e0      	adds	r3, #224	; 0xe0
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	2200      	movs	r2, #0
 8006af2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b0e      	cmp	r3, #14
 8006afe:	d9f2      	bls.n	8006ae6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b00:	2300      	movs	r3, #0
 8006b02:	60fb      	str	r3, [r7, #12]
 8006b04:	e009      	b.n	8006b1a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b20:	d3f1      	bcc.n	8006b06 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2240      	movs	r2, #64	; 0x40
 8006b46:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d016      	beq.n	8006bbe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10e      	bne.n	8006bb8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	33de      	adds	r3, #222	; 0xde
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
 8006bb6:	e004      	b.n	8006bc2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bb8:	2302      	movs	r3, #2
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e001      	b.n	8006bc2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d204      	bcs.n	8006bf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	78fa      	ldrb	r2, [r7, #3]
 8006bf0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006bf4:	e001      	b.n	8006bfa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	4608      	mov	r0, r1
 8006c12:	4611      	mov	r1, r2
 8006c14:	461a      	mov	r2, r3
 8006c16:	4603      	mov	r3, r0
 8006c18:	70fb      	strb	r3, [r7, #3]
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	70bb      	strb	r3, [r7, #2]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c32:	e025      	b.n	8006c80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	221a      	movs	r2, #26
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	3308      	adds	r3, #8
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	3302      	adds	r3, #2
 8006c44:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	795b      	ldrb	r3, [r3, #5]
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d002      	beq.n	8006c56 <USBH_FindInterface+0x4e>
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	2bff      	cmp	r3, #255	; 0xff
 8006c54:	d111      	bne.n	8006c7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c5a:	78ba      	ldrb	r2, [r7, #2]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d002      	beq.n	8006c66 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c60:	78bb      	ldrb	r3, [r7, #2]
 8006c62:	2bff      	cmp	r3, #255	; 0xff
 8006c64:	d109      	bne.n	8006c7a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c6a:	787a      	ldrb	r2, [r7, #1]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d002      	beq.n	8006c76 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c70:	787b      	ldrb	r3, [r7, #1]
 8006c72:	2bff      	cmp	r3, #255	; 0xff
 8006c74:	d101      	bne.n	8006c7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
 8006c78:	e006      	b.n	8006c88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d9d6      	bls.n	8006c34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c86:	23ff      	movs	r3, #255	; 0xff
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 fb87 	bl	80083b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fca0 	bl	80085ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d102      	bne.n	8006cd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b0b      	cmp	r3, #11
 8006cde:	f200 81b3 	bhi.w	8007048 <USBH_Process+0x394>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <USBH_Process+0x34>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d19 	.word	0x08006d19
 8006cec:	08006d4b 	.word	0x08006d4b
 8006cf0:	08006db3 	.word	0x08006db3
 8006cf4:	08006fe3 	.word	0x08006fe3
 8006cf8:	08007049 	.word	0x08007049
 8006cfc:	08006e57 	.word	0x08006e57
 8006d00:	08006f89 	.word	0x08006f89
 8006d04:	08006e8d 	.word	0x08006e8d
 8006d08:	08006ead 	.word	0x08006ead
 8006d0c:	08006ecd 	.word	0x08006ecd
 8006d10:	08006efb 	.word	0x08006efb
 8006d14:	08006fcb 	.word	0x08006fcb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8193 	beq.w	800704c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d2c:	20c8      	movs	r0, #200	; 0xc8
 8006d2e:	f001 fca3 	bl	8008678 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fb99 	bl	800846a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006d48:	e180      	b.n	800704c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d107      	bne.n	8006d64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006d62:	e182      	b.n	800706a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d6e:	d914      	bls.n	8006d9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d76:	3301      	adds	r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d903      	bls.n	8006d92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	220d      	movs	r2, #13
 8006d8e:	701a      	strb	r2, [r3, #0]
      break;
 8006d90:	e16b      	b.n	800706a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	701a      	strb	r2, [r3, #0]
      break;
 8006d98:	e167      	b.n	800706a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006da0:	f103 020a 	add.w	r2, r3, #10
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006daa:	200a      	movs	r0, #10
 8006dac:	f001 fc64 	bl	8008678 <USBH_Delay>
      break;
 8006db0:	e15b      	b.n	800706a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dc2:	2104      	movs	r1, #4
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dc8:	2064      	movs	r0, #100	; 0x64
 8006dca:	f001 fc55 	bl	8008678 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fb24 	bl	800841c <USBH_LL_GetSpeed>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2205      	movs	r2, #5
 8006de2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006de4:	2100      	movs	r1, #0
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 f92f 	bl	800804a <USBH_AllocPipe>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006df4:	2180      	movs	r1, #128	; 0x80
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f927 	bl	800804a <USBH_AllocPipe>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	7919      	ldrb	r1, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e18:	b292      	uxth	r2, r2
 8006e1a:	9202      	str	r2, [sp, #8]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4603      	mov	r3, r0
 8006e24:	2280      	movs	r2, #128	; 0x80
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 f8e0 	bl	8007fec <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7959      	ldrb	r1, [r3, #5]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e40:	b292      	uxth	r2, r2
 8006e42:	9202      	str	r2, [sp, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	9201      	str	r2, [sp, #4]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f8cc 	bl	8007fec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006e54:	e109      	b.n	800706a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f90c 	bl	8007074 <USBH_HandleEnum>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e60:	7bbb      	ldrb	r3, [r7, #14]
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f040 80f3 	bne.w	8007050 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d103      	bne.n	8006e84 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006e82:	e0e5      	b.n	8007050 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2207      	movs	r2, #7
 8006e88:	701a      	strb	r2, [r3, #0]
      break;
 8006e8a:	e0e1      	b.n	8007050 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80de 	beq.w	8007054 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006eaa:	e0d3      	b.n	8007054 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fc20 	bl	80076fc <USBH_SetCfg>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f040 80ca 	bne.w	8007058 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2209      	movs	r2, #9
 8006ec8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006eca:	e0c5      	b.n	8007058 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ed2:	f003 0320 	and.w	r3, r3, #32
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006eda:	2101      	movs	r1, #1
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc30 	bl	8007742 <USBH_SetFeature>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f040 80b9 	bne.w	800705c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	220a      	movs	r2, #10
 8006eee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006ef0:	e0b4      	b.n	800705c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	701a      	strb	r2, [r3, #0]
      break;
 8006ef8:	e0b0      	b.n	800705c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80ad 	beq.w	8007060 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
 8006f12:	e016      	b.n	8006f42 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f14:	7bfa      	ldrb	r2, [r7, #15]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	32de      	adds	r2, #222	; 0xde
 8006f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1e:	791a      	ldrb	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d108      	bne.n	8006f3c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f2a:	7bfa      	ldrb	r2, [r7, #15]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	32de      	adds	r2, #222	; 0xde
 8006f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f3a:	e005      	b.n	8006f48 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	73fb      	strb	r3, [r7, #15]
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0e5      	beq.n	8006f14 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d109      	bne.n	8006f78 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2206      	movs	r2, #6
 8006f68:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f70:	2103      	movs	r1, #3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006f76:	e073      	b.n	8007060 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	220d      	movs	r2, #13
 8006f7c:	701a      	strb	r2, [r3, #0]
      break;
 8006f7e:	e06f      	b.n	8007060 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	220d      	movs	r2, #13
 8006f84:	701a      	strb	r2, [r3, #0]
      break;
 8006f86:	e06b      	b.n	8007060 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d017      	beq.n	8006fc2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	220b      	movs	r2, #11
 8006fae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006fb0:	e058      	b.n	8007064 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d154      	bne.n	8007064 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	220d      	movs	r2, #13
 8006fbe:	701a      	strb	r2, [r3, #0]
      break;
 8006fc0:	e050      	b.n	8007064 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	220d      	movs	r2, #13
 8006fc6:	701a      	strb	r2, [r3, #0]
      break;
 8006fc8:	e04c      	b.n	8007064 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d049      	beq.n	8007068 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
      }
      break;
 8006fe0:	e042      	b.n	8007068 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fd72 	bl	8006ad4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d009      	beq.n	800700e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800701e:	2105      	movs	r1, #5
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fe2b 	bl	8006c94 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800703e:	e014      	b.n	800706a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f9b5 	bl	80083b0 <USBH_LL_Start>
      break;
 8007046:	e010      	b.n	800706a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007048:	bf00      	nop
 800704a:	e00e      	b.n	800706a <USBH_Process+0x3b6>
      break;
 800704c:	bf00      	nop
 800704e:	e00c      	b.n	800706a <USBH_Process+0x3b6>
      break;
 8007050:	bf00      	nop
 8007052:	e00a      	b.n	800706a <USBH_Process+0x3b6>
    break;
 8007054:	bf00      	nop
 8007056:	e008      	b.n	800706a <USBH_Process+0x3b6>
      break;
 8007058:	bf00      	nop
 800705a:	e006      	b.n	800706a <USBH_Process+0x3b6>
      break;
 800705c:	bf00      	nop
 800705e:	e004      	b.n	800706a <USBH_Process+0x3b6>
      break;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <USBH_Process+0x3b6>
      break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <USBH_Process+0x3b6>
      break;
 8007068:	bf00      	nop
  }
  return USBH_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af04      	add	r7, sp, #16
 800707a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800707c:	2301      	movs	r3, #1
 800707e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007080:	2301      	movs	r3, #1
 8007082:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	785b      	ldrb	r3, [r3, #1]
 8007088:	2b07      	cmp	r3, #7
 800708a:	f200 81c1 	bhi.w	8007410 <USBH_HandleEnum+0x39c>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBH_HandleEnum+0x20>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070b5 	.word	0x080070b5
 8007098:	08007173 	.word	0x08007173
 800709c:	080071dd 	.word	0x080071dd
 80070a0:	0800726b 	.word	0x0800726b
 80070a4:	080072d5 	.word	0x080072d5
 80070a8:	08007345 	.word	0x08007345
 80070ac:	0800738b 	.word	0x0800738b
 80070b0:	080073d1 	.word	0x080073d1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070b4:	2108      	movs	r1, #8
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa50 	bl	800755c <USBH_Get_DevDesc>
 80070bc:	4603      	mov	r3, r0
 80070be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d130      	bne.n	8007128 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7919      	ldrb	r1, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070ea:	b292      	uxth	r2, r2
 80070ec:	9202      	str	r2, [sp, #8]
 80070ee:	2200      	movs	r2, #0
 80070f0:	9201      	str	r2, [sp, #4]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4603      	mov	r3, r0
 80070f6:	2280      	movs	r2, #128	; 0x80
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 ff77 	bl	8007fec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7959      	ldrb	r1, [r3, #5]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007112:	b292      	uxth	r2, r2
 8007114:	9202      	str	r2, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	9201      	str	r2, [sp, #4]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4603      	mov	r3, r0
 800711e:	2200      	movs	r2, #0
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 ff63 	bl	8007fec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007126:	e175      	b.n	8007414 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	2b03      	cmp	r3, #3
 800712c:	f040 8172 	bne.w	8007414 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007136:	3301      	adds	r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007146:	2b03      	cmp	r3, #3
 8007148:	d903      	bls.n	8007152 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	220d      	movs	r2, #13
 800714e:	701a      	strb	r2, [r3, #0]
      break;
 8007150:	e160      	b.n	8007414 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	795b      	ldrb	r3, [r3, #5]
 8007156:	4619      	mov	r1, r3
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 ff97 	bl	800808c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	791b      	ldrb	r3, [r3, #4]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 ff91 	bl	800808c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
      break;
 8007170:	e150      	b.n	8007414 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007172:	2112      	movs	r1, #18
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f9f1 	bl	800755c <USBH_Get_DevDesc>
 800717a:	4603      	mov	r3, r0
 800717c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800717e:	7bbb      	ldrb	r3, [r7, #14]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800718a:	e145      	b.n	8007418 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b03      	cmp	r3, #3
 8007190:	f040 8142 	bne.w	8007418 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800719a:	3301      	adds	r3, #1
 800719c:	b2da      	uxtb	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d903      	bls.n	80071b6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	220d      	movs	r2, #13
 80071b2:	701a      	strb	r2, [r3, #0]
      break;
 80071b4:	e130      	b.n	8007418 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	795b      	ldrb	r3, [r3, #5]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 ff65 	bl	800808c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	791b      	ldrb	r3, [r3, #4]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 ff5f 	bl	800808c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
      break;
 80071da:	e11d      	b.n	8007418 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071dc:	2101      	movs	r1, #1
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa68 	bl	80076b4 <USBH_SetAddress>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d132      	bne.n	8007254 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80071ee:	2002      	movs	r0, #2
 80071f0:	f001 fa42 	bl	8008678 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2203      	movs	r2, #3
 8007200:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7919      	ldrb	r1, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007216:	b292      	uxth	r2, r2
 8007218:	9202      	str	r2, [sp, #8]
 800721a:	2200      	movs	r2, #0
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4603      	mov	r3, r0
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fee1 	bl	8007fec <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7959      	ldrb	r1, [r3, #5]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800723e:	b292      	uxth	r2, r2
 8007240:	9202      	str	r2, [sp, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	9201      	str	r2, [sp, #4]
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	4603      	mov	r3, r0
 800724a:	2200      	movs	r2, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fecd 	bl	8007fec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007252:	e0e3      	b.n	800741c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b03      	cmp	r3, #3
 8007258:	f040 80e0 	bne.w	800741c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	220d      	movs	r2, #13
 8007260:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	705a      	strb	r2, [r3, #1]
      break;
 8007268:	e0d8      	b.n	800741c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800726a:	2109      	movs	r1, #9
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f99d 	bl	80075ac <USBH_Get_CfgDesc>
 8007272:	4603      	mov	r3, r0
 8007274:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2204      	movs	r2, #4
 8007280:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007282:	e0cd      	b.n	8007420 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b03      	cmp	r3, #3
 8007288:	f040 80ca 	bne.w	8007420 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007292:	3301      	adds	r3, #1
 8007294:	b2da      	uxtb	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d903      	bls.n	80072ae <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	220d      	movs	r2, #13
 80072aa:	701a      	strb	r2, [r3, #0]
      break;
 80072ac:	e0b8      	b.n	8007420 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	795b      	ldrb	r3, [r3, #5]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fee9 	bl	800808c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	791b      	ldrb	r3, [r3, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fee3 	bl	800808c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
      break;
 80072d2:	e0a5      	b.n	8007420 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f965 	bl	80075ac <USBH_Get_CfgDesc>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2205      	movs	r2, #5
 80072f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072f2:	e097      	b.n	8007424 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	f040 8094 	bne.w	8007424 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007302:	3301      	adds	r3, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007312:	2b03      	cmp	r3, #3
 8007314:	d903      	bls.n	800731e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	220d      	movs	r2, #13
 800731a:	701a      	strb	r2, [r3, #0]
      break;
 800731c:	e082      	b.n	8007424 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	795b      	ldrb	r3, [r3, #5]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 feb1 	bl	800808c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	791b      	ldrb	r3, [r3, #4]
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 feab 	bl	800808c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	701a      	strb	r2, [r3, #0]
      break;
 8007342:	e06f      	b.n	8007424 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800734a:	2b00      	cmp	r3, #0
 800734c:	d019      	beq.n	8007382 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800735a:	23ff      	movs	r3, #255	; 0xff
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f949 	bl	80075f4 <USBH_Get_StringDesc>
 8007362:	4603      	mov	r3, r0
 8007364:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2206      	movs	r2, #6
 8007370:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007372:	e059      	b.n	8007428 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d156      	bne.n	8007428 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2206      	movs	r2, #6
 800737e:	705a      	strb	r2, [r3, #1]
      break;
 8007380:	e052      	b.n	8007428 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2206      	movs	r2, #6
 8007386:	705a      	strb	r2, [r3, #1]
      break;
 8007388:	e04e      	b.n	8007428 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007390:	2b00      	cmp	r3, #0
 8007392:	d019      	beq.n	80073c8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073a0:	23ff      	movs	r3, #255	; 0xff
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f926 	bl	80075f4 <USBH_Get_StringDesc>
 80073a8:	4603      	mov	r3, r0
 80073aa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073ac:	7bbb      	ldrb	r3, [r7, #14]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2207      	movs	r2, #7
 80073b6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80073b8:	e038      	b.n	800742c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d135      	bne.n	800742c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2207      	movs	r2, #7
 80073c4:	705a      	strb	r2, [r3, #1]
      break;
 80073c6:	e031      	b.n	800742c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2207      	movs	r2, #7
 80073cc:	705a      	strb	r2, [r3, #1]
      break;
 80073ce:	e02d      	b.n	800742c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073e6:	23ff      	movs	r3, #255	; 0xff
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f903 	bl	80075f4 <USBH_Get_StringDesc>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073f2:	7bbb      	ldrb	r3, [r7, #14]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d102      	bne.n	80073fe <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073fc:	e018      	b.n	8007430 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b03      	cmp	r3, #3
 8007402:	d115      	bne.n	8007430 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
      break;
 8007408:	e012      	b.n	8007430 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	73fb      	strb	r3, [r7, #15]
      break;
 800740e:	e00f      	b.n	8007430 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007410:	bf00      	nop
 8007412:	e00e      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007414:	bf00      	nop
 8007416:	e00c      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007418:	bf00      	nop
 800741a:	e00a      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 800741c:	bf00      	nop
 800741e:	e008      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007420:	bf00      	nop
 8007422:	e006      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007424:	bf00      	nop
 8007426:	e004      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007428:	bf00      	nop
 800742a:	e002      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <USBH_HandleEnum+0x3be>
      break;
 8007430:	bf00      	nop
  }
  return Status;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f804 	bl	800747e <USBH_HandleSof>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b0b      	cmp	r3, #11
 800748e:	d10a      	bne.n	80074a6 <USBH_HandleSof+0x28>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
  }
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}

080074ae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80074be:	bf00      	nop
}
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80074da:	bf00      	nop
}
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 ff56 	bl	80083e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	791b      	ldrb	r3, [r3, #4]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fda3 	bl	800808c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	795b      	ldrb	r3, [r3, #5]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fd9d 	bl	800808c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af02      	add	r7, sp, #8
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	b29b      	uxth	r3, r3
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800757a:	2100      	movs	r1, #0
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f864 	bl	800764a <USBH_GetDescriptor>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10a      	bne.n	80075a2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	b292      	uxth	r2, r2
 800759c:	4619      	mov	r1, r3
 800759e:	f000 f918 	bl	80077d2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	331c      	adds	r3, #28
 80075bc:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f83d 	bl	800764a <USBH_GetDescriptor>
 80075d0:	4603      	mov	r3, r0
 80075d2:	72fb      	strb	r3, [r7, #11]
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d107      	bne.n	80075ea <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075e0:	887a      	ldrh	r2, [r7, #2]
 80075e2:	68f9      	ldr	r1, [r7, #12]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f964 	bl	80078b2 <USBH_ParseCfgDesc>
  }

  return status;
 80075ea:	7afb      	ldrb	r3, [r7, #11]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	461a      	mov	r2, r3
 8007600:	460b      	mov	r3, r1
 8007602:	72fb      	strb	r3, [r7, #11]
 8007604:	4613      	mov	r3, r2
 8007606:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	b29b      	uxth	r3, r3
 800760c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007610:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007618:	893b      	ldrh	r3, [r7, #8]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	460b      	mov	r3, r1
 800761e:	2100      	movs	r1, #0
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f812 	bl	800764a <USBH_GetDescriptor>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007636:	893a      	ldrh	r2, [r7, #8]
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fa37 	bl	8007aae <USBH_ParseStringDesc>
  }

  return status;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	607b      	str	r3, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	72fb      	strb	r3, [r7, #11]
 8007658:	4613      	mov	r3, r2
 800765a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	789b      	ldrb	r3, [r3, #2]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d11c      	bne.n	800769e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800766a:	b2da      	uxtb	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2206      	movs	r2, #6
 8007674:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	893a      	ldrh	r2, [r7, #8]
 800767a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800767c:	893b      	ldrh	r3, [r7, #8]
 800767e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007686:	d104      	bne.n	8007692 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f240 4209 	movw	r2, #1033	; 0x409
 800768e:	829a      	strh	r2, [r3, #20]
 8007690:	e002      	b.n	8007698 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8b3a      	ldrh	r2, [r7, #24]
 800769c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800769e:	8b3b      	ldrh	r3, [r7, #24]
 80076a0:	461a      	mov	r2, r3
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fa50 	bl	8007b4a <USBH_CtlReq>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10f      	bne.n	80076e8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2205      	movs	r2, #5
 80076d2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076e8:	2200      	movs	r2, #0
 80076ea:	2100      	movs	r1, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa2c 	bl	8007b4a <USBH_CtlReq>
 80076f2:	4603      	mov	r3, r0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10e      	bne.n	800772e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2209      	movs	r2, #9
 800771a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	887a      	ldrh	r2, [r7, #2]
 8007720:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa09 	bl	8007b4a <USBH_CtlReq>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	789b      	ldrb	r3, [r3, #2]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d10f      	bne.n	8007776 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2203      	movs	r2, #3
 8007760:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007776:	2200      	movs	r2, #0
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f9e5 	bl	8007b4a <USBH_CtlReq>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b082      	sub	sp, #8
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	789b      	ldrb	r3, [r3, #2]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10f      	bne.n	80077be <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80077be:	2200      	movs	r2, #0
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f9c1 	bl	8007b4a <USBH_CtlReq>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	4613      	mov	r3, r2
 80077de:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	781a      	ldrb	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	785a      	ldrb	r2, [r3, #1]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	3302      	adds	r3, #2
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3303      	adds	r3, #3
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b29b      	uxth	r3, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	b29a      	uxth	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	791a      	ldrb	r2, [r3, #4]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	795a      	ldrb	r2, [r3, #5]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	799a      	ldrb	r2, [r3, #6]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	79da      	ldrb	r2, [r3, #7]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	2b08      	cmp	r3, #8
 8007830:	d939      	bls.n	80078a6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3308      	adds	r3, #8
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3309      	adds	r3, #9
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	330a      	adds	r3, #10
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b29a      	uxth	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	330b      	adds	r3, #11
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	330c      	adds	r3, #12
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	330d      	adds	r3, #13
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	b29b      	uxth	r3, r3
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	b29b      	uxth	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	7b9a      	ldrb	r2, [r3, #14]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	7bda      	ldrb	r2, [r3, #15]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	7c1a      	ldrb	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	7c5a      	ldrb	r2, [r3, #17]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	745a      	strb	r2, [r3, #17]
  }
}
 80078a6:	bf00      	nop
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b08a      	sub	sp, #40	; 0x28
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	60f8      	str	r0, [r7, #12]
 80078ba:	60b9      	str	r1, [r7, #8]
 80078bc:	4613      	mov	r3, r2
 80078be:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	785a      	ldrb	r2, [r3, #1]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	3302      	adds	r3, #2
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	3303      	adds	r3, #3
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	791a      	ldrb	r2, [r3, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	795a      	ldrb	r2, [r3, #5]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	799a      	ldrb	r2, [r3, #6]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	79da      	ldrb	r2, [r3, #7]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7a1a      	ldrb	r2, [r3, #8]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007928:	88fb      	ldrh	r3, [r7, #6]
 800792a:	2b09      	cmp	r3, #9
 800792c:	d95f      	bls.n	80079ee <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800792e:	2309      	movs	r3, #9
 8007930:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007932:	2300      	movs	r3, #0
 8007934:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007936:	e051      	b.n	80079dc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007938:	f107 0316 	add.w	r3, r7, #22
 800793c:	4619      	mov	r1, r3
 800793e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007940:	f000 f8e8 	bl	8007b14 <USBH_GetNextDesc>
 8007944:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	2b04      	cmp	r3, #4
 800794c:	d146      	bne.n	80079dc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800794e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007952:	221a      	movs	r2, #26
 8007954:	fb02 f303 	mul.w	r3, r2, r3
 8007958:	3308      	adds	r3, #8
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	3302      	adds	r3, #2
 8007960:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007964:	69f8      	ldr	r0, [r7, #28]
 8007966:	f000 f846 	bl	80079f6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007970:	2300      	movs	r3, #0
 8007972:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007974:	e022      	b.n	80079bc <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007976:	f107 0316 	add.w	r3, r7, #22
 800797a:	4619      	mov	r1, r3
 800797c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800797e:	f000 f8c9 	bl	8007b14 <USBH_GetNextDesc>
 8007982:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b05      	cmp	r3, #5
 800798a:	d117      	bne.n	80079bc <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800798c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007990:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007994:	3201      	adds	r2, #1
 8007996:	00d2      	lsls	r2, r2, #3
 8007998:	211a      	movs	r1, #26
 800799a:	fb01 f303 	mul.w	r3, r1, r3
 800799e:	4413      	add	r3, r2
 80079a0:	3308      	adds	r3, #8
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	3304      	adds	r3, #4
 80079a8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80079aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ac:	69b8      	ldr	r0, [r7, #24]
 80079ae:	f000 f851 	bl	8007a54 <USBH_ParseEPDesc>
            ep_ix++;
 80079b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80079b6:	3301      	adds	r3, #1
 80079b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d204      	bcs.n	80079d2 <USBH_ParseCfgDesc+0x120>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	885a      	ldrh	r2, [r3, #2]
 80079cc:	8afb      	ldrh	r3, [r7, #22]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d8d1      	bhi.n	8007976 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80079d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079d6:	3301      	adds	r3, #1
 80079d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d804      	bhi.n	80079ee <USBH_ParseCfgDesc+0x13c>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	885a      	ldrh	r2, [r3, #2]
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d8a4      	bhi.n	8007938 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80079ee:	bf00      	nop
 80079f0:	3728      	adds	r7, #40	; 0x28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}

080079f6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
 80079fe:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	785a      	ldrb	r2, [r3, #1]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	789a      	ldrb	r2, [r3, #2]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	78da      	ldrb	r2, [r3, #3]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	791a      	ldrb	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	795a      	ldrb	r2, [r3, #5]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	799a      	ldrb	r2, [r3, #6]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	79da      	ldrb	r2, [r3, #7]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	7a1a      	ldrb	r2, [r3, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	721a      	strb	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	785a      	ldrb	r2, [r3, #1]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	789a      	ldrb	r2, [r3, #2]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	78da      	ldrb	r2, [r3, #3]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	3305      	adds	r3, #5
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	4313      	orrs	r3, r2
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	799a      	ldrb	r2, [r3, #6]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	719a      	strb	r2, [r3, #6]
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b087      	sub	sp, #28
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	60f8      	str	r0, [r7, #12]
 8007ab6:	60b9      	str	r1, [r7, #8]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d120      	bne.n	8007b08 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	1e9a      	subs	r2, r3, #2
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	bf28      	it	cs
 8007ad2:	4613      	movcs	r3, r2
 8007ad4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3302      	adds	r3, #2
 8007ada:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007adc:	2300      	movs	r3, #0
 8007ade:	82fb      	strh	r3, [r7, #22]
 8007ae0:	e00b      	b.n	8007afa <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ae2:	8afb      	ldrh	r3, [r7, #22]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	781a      	ldrb	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007af4:	8afb      	ldrh	r3, [r7, #22]
 8007af6:	3302      	adds	r3, #2
 8007af8:	82fb      	strh	r3, [r7, #22]
 8007afa:	8afa      	ldrh	r2, [r7, #22]
 8007afc:	8abb      	ldrh	r3, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3ef      	bcc.n	8007ae2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
  }
}
 8007b08:	bf00      	nop
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	881a      	ldrh	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4413      	add	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b086      	sub	sp, #24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	4613      	mov	r3, r2
 8007b56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	789b      	ldrb	r3, [r3, #2]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d002      	beq.n	8007b6a <USBH_CtlReq+0x20>
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d00f      	beq.n	8007b88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007b68:	e027      	b.n	8007bba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2202      	movs	r2, #2
 8007b80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
      break;
 8007b86:	e018      	b.n	8007bba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 f81b 	bl	8007bc4 <USBH_HandleControl>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <USBH_CtlReq+0x54>
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d106      	bne.n	8007bac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	761a      	strb	r2, [r3, #24]
      break;
 8007baa:	e005      	b.n	8007bb8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d102      	bne.n	8007bb8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	709a      	strb	r2, [r3, #2]
      break;
 8007bb8:	bf00      	nop
  }
  return status;
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7e1b      	ldrb	r3, [r3, #24]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	2b0a      	cmp	r3, #10
 8007bdc:	f200 8156 	bhi.w	8007e8c <USBH_HandleControl+0x2c8>
 8007be0:	a201      	add	r2, pc, #4	; (adr r2, 8007be8 <USBH_HandleControl+0x24>)
 8007be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be6:	bf00      	nop
 8007be8:	08007c15 	.word	0x08007c15
 8007bec:	08007c2f 	.word	0x08007c2f
 8007bf0:	08007c99 	.word	0x08007c99
 8007bf4:	08007cbf 	.word	0x08007cbf
 8007bf8:	08007cf7 	.word	0x08007cf7
 8007bfc:	08007d21 	.word	0x08007d21
 8007c00:	08007d73 	.word	0x08007d73
 8007c04:	08007d95 	.word	0x08007d95
 8007c08:	08007dd1 	.word	0x08007dd1
 8007c0c:	08007df7 	.word	0x08007df7
 8007c10:	08007e35 	.word	0x08007e35
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f103 0110 	add.w	r1, r3, #16
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	795b      	ldrb	r3, [r3, #5]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f943 	bl	8007eac <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	761a      	strb	r2, [r3, #24]
      break;
 8007c2c:	e139      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	795b      	ldrb	r3, [r3, #5]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fcc5 	bl	80085c4 <USBH_LL_GetURBState>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007c3e:	7bbb      	ldrb	r3, [r7, #14]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d11e      	bne.n	8007c82 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7c1b      	ldrb	r3, [r3, #16]
 8007c48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c4c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	8adb      	ldrh	r3, [r3, #22]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007c56:	7b7b      	ldrb	r3, [r7, #13]
 8007c58:	2b80      	cmp	r3, #128	; 0x80
 8007c5a:	d103      	bne.n	8007c64 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2203      	movs	r2, #3
 8007c60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007c62:	e115      	b.n	8007e90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2205      	movs	r2, #5
 8007c68:	761a      	strb	r2, [r3, #24]
      break;
 8007c6a:	e111      	b.n	8007e90 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007c6c:	7b7b      	ldrb	r3, [r7, #13]
 8007c6e:	2b80      	cmp	r3, #128	; 0x80
 8007c70:	d103      	bne.n	8007c7a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2209      	movs	r2, #9
 8007c76:	761a      	strb	r2, [r3, #24]
      break;
 8007c78:	e10a      	b.n	8007e90 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2207      	movs	r2, #7
 8007c7e:	761a      	strb	r2, [r3, #24]
      break;
 8007c80:	e106      	b.n	8007e90 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b04      	cmp	r3, #4
 8007c86:	d003      	beq.n	8007c90 <USBH_HandleControl+0xcc>
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	f040 8100 	bne.w	8007e90 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	220b      	movs	r2, #11
 8007c94:	761a      	strb	r2, [r3, #24]
      break;
 8007c96:	e0fb      	b.n	8007e90 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6899      	ldr	r1, [r3, #8]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	899a      	ldrh	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	791b      	ldrb	r3, [r3, #4]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f93a 	bl	8007f2a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2204      	movs	r2, #4
 8007cba:	761a      	strb	r2, [r3, #24]
      break;
 8007cbc:	e0f1      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	791b      	ldrb	r3, [r3, #4]
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc7d 	bl	80085c4 <USBH_LL_GetURBState>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d102      	bne.n	8007cda <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2209      	movs	r2, #9
 8007cd8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	2b05      	cmp	r3, #5
 8007cde:	d102      	bne.n	8007ce6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ce4:	e0d6      	b.n	8007e94 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	f040 80d3 	bne.w	8007e94 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220b      	movs	r2, #11
 8007cf2:	761a      	strb	r2, [r3, #24]
      break;
 8007cf4:	e0ce      	b.n	8007e94 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6899      	ldr	r1, [r3, #8]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	899a      	ldrh	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	795b      	ldrb	r3, [r3, #5]
 8007d02:	2001      	movs	r0, #1
 8007d04:	9000      	str	r0, [sp, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f8ea 	bl	8007ee0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	761a      	strb	r2, [r3, #24]
      break;
 8007d1e:	e0c0      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	795b      	ldrb	r3, [r3, #5]
 8007d24:	4619      	mov	r1, r3
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fc4c 	bl	80085c4 <USBH_LL_GetURBState>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d103      	bne.n	8007d3e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2207      	movs	r2, #7
 8007d3a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007d3c:	e0ac      	b.n	8007e98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007d3e:	7bbb      	ldrb	r3, [r7, #14]
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	d105      	bne.n	8007d50 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	220c      	movs	r2, #12
 8007d48:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d4e:	e0a3      	b.n	8007e98 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d103      	bne.n	8007d5e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2205      	movs	r2, #5
 8007d5a:	761a      	strb	r2, [r3, #24]
      break;
 8007d5c:	e09c      	b.n	8007e98 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	f040 8099 	bne.w	8007e98 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	220b      	movs	r2, #11
 8007d6a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d70:	e092      	b.n	8007e98 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	791b      	ldrb	r3, [r3, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	2100      	movs	r1, #0
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f8d5 	bl	8007f2a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2208      	movs	r2, #8
 8007d90:	761a      	strb	r2, [r3, #24]

      break;
 8007d92:	e086      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	791b      	ldrb	r3, [r3, #4]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fc12 	bl	80085c4 <USBH_LL_GetURBState>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d105      	bne.n	8007db6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	220d      	movs	r2, #13
 8007dae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007db4:	e072      	b.n	8007e9c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007db6:	7bbb      	ldrb	r3, [r7, #14]
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d103      	bne.n	8007dc4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	220b      	movs	r2, #11
 8007dc0:	761a      	strb	r2, [r3, #24]
      break;
 8007dc2:	e06b      	b.n	8007e9c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007dc4:	7bbb      	ldrb	r3, [r7, #14]
 8007dc6:	2b05      	cmp	r3, #5
 8007dc8:	d168      	bne.n	8007e9c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dce:	e065      	b.n	8007e9c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	795b      	ldrb	r3, [r3, #5]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	9200      	str	r2, [sp, #0]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	2100      	movs	r1, #0
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f87f 	bl	8007ee0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	220a      	movs	r2, #10
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e055      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fbe1 	bl	80085c4 <USBH_LL_GetURBState>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d105      	bne.n	8007e18 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	220d      	movs	r2, #13
 8007e14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007e16:	e043      	b.n	8007ea0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d103      	bne.n	8007e26 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2209      	movs	r2, #9
 8007e22:	761a      	strb	r2, [r3, #24]
      break;
 8007e24:	e03c      	b.n	8007ea0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d139      	bne.n	8007ea0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	220b      	movs	r2, #11
 8007e30:	761a      	strb	r2, [r3, #24]
      break;
 8007e32:	e035      	b.n	8007ea0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7e5b      	ldrb	r3, [r3, #25]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	765a      	strb	r2, [r3, #25]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7e5b      	ldrb	r3, [r3, #25]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d806      	bhi.n	8007e56 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007e54:	e025      	b.n	8007ea2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e5c:	2106      	movs	r1, #6
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	795b      	ldrb	r3, [r3, #5]
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f90c 	bl	800808c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f906 	bl	800808c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8a:	e00a      	b.n	8007ea2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007e8c:	bf00      	nop
 8007e8e:	e008      	b.n	8007ea2 <USBH_HandleControl+0x2de>
      break;
 8007e90:	bf00      	nop
 8007e92:	e006      	b.n	8007ea2 <USBH_HandleControl+0x2de>
      break;
 8007e94:	bf00      	nop
 8007e96:	e004      	b.n	8007ea2 <USBH_HandleControl+0x2de>
      break;
 8007e98:	bf00      	nop
 8007e9a:	e002      	b.n	8007ea2 <USBH_HandleControl+0x2de>
      break;
 8007e9c:	bf00      	nop
 8007e9e:	e000      	b.n	8007ea2 <USBH_HandleControl+0x2de>
      break;
 8007ea0:	bf00      	nop
  }

  return status;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007eba:	79f9      	ldrb	r1, [r7, #7]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	9302      	str	r3, [sp, #8]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f000 fb46 	bl	8008562 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	4611      	mov	r1, r2
 8007eec:	461a      	mov	r2, r3
 8007eee:	460b      	mov	r3, r1
 8007ef0:	80fb      	strh	r3, [r7, #6]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f04:	7979      	ldrb	r1, [r7, #5]
 8007f06:	7e3b      	ldrb	r3, [r7, #24]
 8007f08:	9303      	str	r3, [sp, #12]
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	9302      	str	r3, [sp, #8]
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	2301      	movs	r3, #1
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	2300      	movs	r3, #0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 fb21 	bl	8008562 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b088      	sub	sp, #32
 8007f2e:	af04      	add	r7, sp, #16
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	4611      	mov	r1, r2
 8007f36:	461a      	mov	r2, r3
 8007f38:	460b      	mov	r3, r1
 8007f3a:	80fb      	strh	r3, [r7, #6]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f40:	7979      	ldrb	r1, [r7, #5]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9303      	str	r3, [sp, #12]
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	9302      	str	r3, [sp, #8]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	2201      	movs	r2, #1
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f000 fb03 	bl	8008562 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007f5c:	2300      	movs	r3, #0

}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b088      	sub	sp, #32
 8007f6a:	af04      	add	r7, sp, #16
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4611      	mov	r1, r2
 8007f72:	461a      	mov	r2, r3
 8007f74:	460b      	mov	r3, r1
 8007f76:	80fb      	strh	r3, [r7, #6]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d001      	beq.n	8007f8a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007f8a:	7979      	ldrb	r1, [r7, #5]
 8007f8c:	7e3b      	ldrb	r3, [r7, #24]
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	88fb      	ldrh	r3, [r7, #6]
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fade 	bl	8008562 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af04      	add	r7, sp, #16
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	4611      	mov	r1, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	80fb      	strh	r3, [r7, #6]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007fc6:	7979      	ldrb	r1, [r7, #5]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	88fb      	ldrh	r3, [r7, #6]
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2302      	movs	r3, #2
 8007fda:	2201      	movs	r2, #1
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fac0 	bl	8008562 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	70fb      	strb	r3, [r7, #3]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70bb      	strb	r3, [r7, #2]
 8008002:	4613      	mov	r3, r2
 8008004:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008006:	7878      	ldrb	r0, [r7, #1]
 8008008:	78ba      	ldrb	r2, [r7, #2]
 800800a:	78f9      	ldrb	r1, [r7, #3]
 800800c:	8b3b      	ldrh	r3, [r7, #24]
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	7d3b      	ldrb	r3, [r7, #20]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	7c3b      	ldrb	r3, [r7, #16]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	4603      	mov	r3, r0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa53 	bl	80084c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	460b      	mov	r3, r1
 8008034:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fa72 	bl	8008524 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800804a:	b580      	push	{r7, lr}
 800804c:	b084      	sub	sp, #16
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f836 	bl	80080c8 <USBH_GetFreePipe>
 800805c:	4603      	mov	r3, r0
 800805e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008060:	89fb      	ldrh	r3, [r7, #14]
 8008062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008066:	4293      	cmp	r3, r2
 8008068:	d00a      	beq.n	8008080 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	89fb      	ldrh	r3, [r7, #14]
 800806e:	f003 030f 	and.w	r3, r3, #15
 8008072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	33e0      	adds	r3, #224	; 0xe0
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008080:	89fb      	ldrh	r3, [r7, #14]
 8008082:	b2db      	uxtb	r3, r3
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	2b0a      	cmp	r3, #10
 800809c:	d80d      	bhi.n	80080ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800809e:	78fb      	ldrb	r3, [r7, #3]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	33e0      	adds	r3, #224	; 0xe0
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	33e0      	adds	r3, #224	; 0xe0
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	440b      	add	r3, r1
 80080b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80080ba:	2300      	movs	r3, #0
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e00f      	b.n	80080fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	33e0      	adds	r3, #224	; 0xe0
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	e007      	b.n	8008104 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	3301      	adds	r3, #1
 80080f8:	73fb      	strb	r3, [r7, #15]
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	2b0a      	cmp	r3, #10
 80080fe:	d9ec      	bls.n	80080da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008100:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008114:	2201      	movs	r2, #1
 8008116:	490e      	ldr	r1, [pc, #56]	; (8008150 <MX_USB_HOST_Init+0x40>)
 8008118:	480e      	ldr	r0, [pc, #56]	; (8008154 <MX_USB_HOST_Init+0x44>)
 800811a:	f7fe fca1 	bl	8006a60 <USBH_Init>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008124:	f7f8 fd2e 	bl	8000b84 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008128:	490b      	ldr	r1, [pc, #44]	; (8008158 <MX_USB_HOST_Init+0x48>)
 800812a:	480a      	ldr	r0, [pc, #40]	; (8008154 <MX_USB_HOST_Init+0x44>)
 800812c:	f7fe fd26 	bl	8006b7c <USBH_RegisterClass>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008136:	f7f8 fd25 	bl	8000b84 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800813a:	4806      	ldr	r0, [pc, #24]	; (8008154 <MX_USB_HOST_Init+0x44>)
 800813c:	f7fe fdaa 	bl	8006c94 <USBH_Start>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008146:	f7f8 fd1d 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800814a:	bf00      	nop
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	08008171 	.word	0x08008171
 8008154:	2001356c 	.word	0x2001356c
 8008158:	2000000c 	.word	0x2000000c

0800815c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008160:	4802      	ldr	r0, [pc, #8]	; (800816c <MX_USB_HOST_Process+0x10>)
 8008162:	f7fe fda7 	bl	8006cb4 <USBH_Process>
}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	2001356c 	.word	0x2001356c

08008170 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	460b      	mov	r3, r1
 800817a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800817c:	78fb      	ldrb	r3, [r7, #3]
 800817e:	3b01      	subs	r3, #1
 8008180:	2b04      	cmp	r3, #4
 8008182:	d819      	bhi.n	80081b8 <USBH_UserProcess+0x48>
 8008184:	a201      	add	r2, pc, #4	; (adr r2, 800818c <USBH_UserProcess+0x1c>)
 8008186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818a:	bf00      	nop
 800818c:	080081b9 	.word	0x080081b9
 8008190:	080081a9 	.word	0x080081a9
 8008194:	080081b9 	.word	0x080081b9
 8008198:	080081b1 	.word	0x080081b1
 800819c:	080081a1 	.word	0x080081a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80081a0:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <USBH_UserProcess+0x58>)
 80081a2:	2203      	movs	r2, #3
 80081a4:	701a      	strb	r2, [r3, #0]
  break;
 80081a6:	e008      	b.n	80081ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80081a8:	4b07      	ldr	r3, [pc, #28]	; (80081c8 <USBH_UserProcess+0x58>)
 80081aa:	2202      	movs	r2, #2
 80081ac:	701a      	strb	r2, [r3, #0]
  break;
 80081ae:	e004      	b.n	80081ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80081b0:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <USBH_UserProcess+0x58>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	701a      	strb	r2, [r3, #0]
  break;
 80081b6:	e000      	b.n	80081ba <USBH_UserProcess+0x4a>

  default:
  break;
 80081b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	200000b8 	.word	0x200000b8

080081cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	; 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	605a      	str	r2, [r3, #4]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ec:	d147      	bne.n	800827e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	4b25      	ldr	r3, [pc, #148]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	4a24      	ldr	r2, [pc, #144]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 80081f8:	f043 0301 	orr.w	r3, r3, #1
 80081fc:	6313      	str	r3, [r2, #48]	; 0x30
 80081fe:	4b22      	ldr	r3, [pc, #136]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	613b      	str	r3, [r7, #16]
 8008208:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800820a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800820e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008210:	2300      	movs	r3, #0
 8008212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008214:	2300      	movs	r3, #0
 8008216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008218:	f107 0314 	add.w	r3, r7, #20
 800821c:	4619      	mov	r1, r3
 800821e:	481b      	ldr	r0, [pc, #108]	; (800828c <HAL_HCD_MspInit+0xc0>)
 8008220:	f7f9 f874 	bl	800130c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008224:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822a:	2302      	movs	r3, #2
 800822c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800822e:	2300      	movs	r3, #0
 8008230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008232:	2300      	movs	r3, #0
 8008234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008236:	230a      	movs	r3, #10
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800823a:	f107 0314 	add.w	r3, r7, #20
 800823e:	4619      	mov	r1, r3
 8008240:	4812      	ldr	r0, [pc, #72]	; (800828c <HAL_HCD_MspInit+0xc0>)
 8008242:	f7f9 f863 	bl	800130c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 8008248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824a:	4a0f      	ldr	r2, [pc, #60]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 800824c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008250:	6353      	str	r3, [r2, #52]	; 0x34
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 8008258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800825a:	4a0b      	ldr	r2, [pc, #44]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 800825c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008260:	6453      	str	r3, [r2, #68]	; 0x44
 8008262:	4b09      	ldr	r3, [pc, #36]	; (8008288 <HAL_HCD_MspInit+0xbc>)
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800826a:	60fb      	str	r3, [r7, #12]
 800826c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800826e:	2200      	movs	r2, #0
 8008270:	2100      	movs	r1, #0
 8008272:	2043      	movs	r0, #67	; 0x43
 8008274:	f7f9 f820 	bl	80012b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008278:	2043      	movs	r0, #67	; 0x43
 800827a:	f7f9 f839 	bl	80012f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800827e:	bf00      	nop
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40023800 	.word	0x40023800
 800828c:	40020000 	.word	0x40020000

08008290 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff f8db 	bl	800745a <USBH_LL_IncTimer>
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff f913 	bl	80074e6 <USBH_LL_Connect>
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7ff f91c 	bl	8007514 <USBH_LL_Disconnect>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	4613      	mov	r3, r2
 80082f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f8cd 	bl	80074ae <USBH_LL_PortEnabled>
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff f8cd 	bl	80074ca <USBH_LL_PortDisabled>
}
 8008330:	bf00      	nop
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008346:	2b01      	cmp	r3, #1
 8008348:	d12a      	bne.n	80083a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <USBH_LL_Init+0x74>)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <USBH_LL_Init+0x74>)
 8008356:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800835a:	4b14      	ldr	r3, [pc, #80]	; (80083ac <USBH_LL_Init+0x74>)
 800835c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008360:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <USBH_LL_Init+0x74>)
 8008364:	2208      	movs	r2, #8
 8008366:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <USBH_LL_Init+0x74>)
 800836a:	2201      	movs	r2, #1
 800836c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <USBH_LL_Init+0x74>)
 8008370:	2200      	movs	r2, #0
 8008372:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008374:	4b0d      	ldr	r3, [pc, #52]	; (80083ac <USBH_LL_Init+0x74>)
 8008376:	2202      	movs	r2, #2
 8008378:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <USBH_LL_Init+0x74>)
 800837c:	2200      	movs	r2, #0
 800837e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008380:	480a      	ldr	r0, [pc, #40]	; (80083ac <USBH_LL_Init+0x74>)
 8008382:	f7f9 f992 	bl	80016aa <HAL_HCD_Init>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800838c:	f7f8 fbfa 	bl	8000b84 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008390:	4806      	ldr	r0, [pc, #24]	; (80083ac <USBH_LL_Init+0x74>)
 8008392:	f7f9 fd76 	bl	8001e82 <HAL_HCD_GetCurrentFrame>
 8008396:	4603      	mov	r3, r0
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f7ff f84e 	bl	800743c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20013944 	.word	0x20013944

080083b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 fce5 	bl	8001d96 <HAL_HCD_Start>
 80083cc:	4603      	mov	r3, r0
 80083ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 f95c 	bl	8008690 <USBH_Get_USB_Status>
 80083d8:	4603      	mov	r3, r0
 80083da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f9 fced 	bl	8001ddc <HAL_HCD_Stop>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f941 	bl	8008690 <USBH_Get_USB_Status>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008412:	7bbb      	ldrb	r3, [r7, #14]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008424:	2301      	movs	r3, #1
 8008426:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800842e:	4618      	mov	r0, r3
 8008430:	f7f9 fd35 	bl	8001e9e <HAL_HCD_GetCurrentSpeed>
 8008434:	4603      	mov	r3, r0
 8008436:	2b02      	cmp	r3, #2
 8008438:	d00c      	beq.n	8008454 <USBH_LL_GetSpeed+0x38>
 800843a:	2b02      	cmp	r3, #2
 800843c:	d80d      	bhi.n	800845a <USBH_LL_GetSpeed+0x3e>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <USBH_LL_GetSpeed+0x2c>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d003      	beq.n	800844e <USBH_LL_GetSpeed+0x32>
 8008446:	e008      	b.n	800845a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
    break;
 800844c:	e008      	b.n	8008460 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800844e:	2301      	movs	r3, #1
 8008450:	73fb      	strb	r3, [r7, #15]
    break;
 8008452:	e005      	b.n	8008460 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008454:	2302      	movs	r3, #2
 8008456:	73fb      	strb	r3, [r7, #15]
    break;
 8008458:	e002      	b.n	8008460 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800845a:	2301      	movs	r3, #1
 800845c:	73fb      	strb	r3, [r7, #15]
    break;
 800845e:	bf00      	nop
  }
  return  speed;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008472:	2300      	movs	r3, #0
 8008474:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008480:	4618      	mov	r0, r3
 8008482:	f7f9 fcc8 	bl	8001e16 <HAL_HCD_ResetPort>
 8008486:	4603      	mov	r3, r0
 8008488:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f8ff 	bl	8008690 <USBH_Get_USB_Status>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008496:	7bbb      	ldrb	r3, [r7, #14]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084b2:	78fa      	ldrb	r2, [r7, #3]
 80084b4:	4611      	mov	r1, r2
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7f9 fccf 	bl	8001e5a <HAL_HCD_HC_GetXferCount>
 80084bc:	4603      	mov	r3, r0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084c6:	b590      	push	{r4, r7, lr}
 80084c8:	b089      	sub	sp, #36	; 0x24
 80084ca:	af04      	add	r7, sp, #16
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	4608      	mov	r0, r1
 80084d0:	4611      	mov	r1, r2
 80084d2:	461a      	mov	r2, r3
 80084d4:	4603      	mov	r3, r0
 80084d6:	70fb      	strb	r3, [r7, #3]
 80084d8:	460b      	mov	r3, r1
 80084da:	70bb      	strb	r3, [r7, #2]
 80084dc:	4613      	mov	r3, r2
 80084de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084ee:	787c      	ldrb	r4, [r7, #1]
 80084f0:	78ba      	ldrb	r2, [r7, #2]
 80084f2:	78f9      	ldrb	r1, [r7, #3]
 80084f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	4623      	mov	r3, r4
 8008506:	f7f9 f932 	bl	800176e <HAL_HCD_HC_Init>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 f8bd 	bl	8008690 <USBH_Get_USB_Status>
 8008516:	4603      	mov	r3, r0
 8008518:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851a:	7bbb      	ldrb	r3, [r7, #14]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	bd90      	pop	{r4, r7, pc}

08008524 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7f9 f9a2 	bl	800188c <HAL_HCD_HC_Halt>
 8008548:	4603      	mov	r3, r0
 800854a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 f89e 	bl	8008690 <USBH_Get_USB_Status>
 8008554:	4603      	mov	r3, r0
 8008556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008558:	7bbb      	ldrb	r3, [r7, #14]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008562:	b590      	push	{r4, r7, lr}
 8008564:	b089      	sub	sp, #36	; 0x24
 8008566:	af04      	add	r7, sp, #16
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	4608      	mov	r0, r1
 800856c:	4611      	mov	r1, r2
 800856e:	461a      	mov	r2, r3
 8008570:	4603      	mov	r3, r0
 8008572:	70fb      	strb	r3, [r7, #3]
 8008574:	460b      	mov	r3, r1
 8008576:	70bb      	strb	r3, [r7, #2]
 8008578:	4613      	mov	r3, r2
 800857a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800858a:	787c      	ldrb	r4, [r7, #1]
 800858c:	78ba      	ldrb	r2, [r7, #2]
 800858e:	78f9      	ldrb	r1, [r7, #3]
 8008590:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008594:	9303      	str	r3, [sp, #12]
 8008596:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008598:	9302      	str	r3, [sp, #8]
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	4623      	mov	r3, r4
 80085a6:	f7f9 f995 	bl	80018d4 <HAL_HCD_HC_SubmitRequest>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 f86d 	bl	8008690 <USBH_Get_USB_Status>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd90      	pop	{r4, r7, pc}

080085c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	460b      	mov	r3, r1
 80085ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	4611      	mov	r1, r2
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f9 fc29 	bl	8001e32 <HAL_HCD_HC_GetURBState>
 80085e0:	4603      	mov	r3, r0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d103      	bne.n	8008608 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 f870 	bl	80086e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008608:	20c8      	movs	r0, #200	; 0xc8
 800860a:	f7f8 fd79 	bl	8001100 <HAL_Delay>
  return USBH_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
 8008624:	4613      	mov	r3, r2
 8008626:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800862e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	212c      	movs	r1, #44	; 0x2c
 8008636:	fb01 f303 	mul.w	r3, r1, r3
 800863a:	4413      	add	r3, r2
 800863c:	333b      	adds	r3, #59	; 0x3b
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008644:	78fb      	ldrb	r3, [r7, #3]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	212c      	movs	r1, #44	; 0x2c
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	4413      	add	r3, r2
 8008650:	3354      	adds	r3, #84	; 0x54
 8008652:	78ba      	ldrb	r2, [r7, #2]
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e008      	b.n	800866a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008658:	78fb      	ldrb	r3, [r7, #3]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	212c      	movs	r1, #44	; 0x2c
 800865e:	fb01 f303 	mul.w	r3, r1, r3
 8008662:	4413      	add	r3, r2
 8008664:	3355      	adds	r3, #85	; 0x55
 8008666:	78ba      	ldrb	r2, [r7, #2]
 8008668:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f7f8 fd3d 	bl	8001100 <HAL_Delay>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
	...

08008690 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d817      	bhi.n	80086d4 <USBH_Get_USB_Status+0x44>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <USBH_Get_USB_Status+0x1c>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080086bd 	.word	0x080086bd
 80086b0:	080086c3 	.word	0x080086c3
 80086b4:	080086c9 	.word	0x080086c9
 80086b8:	080086cf 	.word	0x080086cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	e00b      	b.n	80086da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80086c2:	2302      	movs	r3, #2
 80086c4:	73fb      	strb	r3, [r7, #15]
    break;
 80086c6:	e008      	b.n	80086da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
    break;
 80086cc:	e005      	b.n	80086da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80086ce:	2302      	movs	r3, #2
 80086d0:	73fb      	strb	r3, [r7, #15]
    break;
 80086d2:	e002      	b.n	80086da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80086d4:	2302      	movs	r3, #2
 80086d6:	73fb      	strb	r3, [r7, #15]
    break;
 80086d8:	bf00      	nop
  }
  return usb_status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	4603      	mov	r3, r0
 80086f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
 8008700:	e001      	b.n	8008706 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008702:	2301      	movs	r3, #1
 8008704:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	461a      	mov	r2, r3
 800870a:	2101      	movs	r1, #1
 800870c:	4803      	ldr	r0, [pc, #12]	; (800871c <MX_DriverVbusFS+0x34>)
 800870e:	f7f8 ff99 	bl	8001644 <HAL_GPIO_WritePin>
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	40020800 	.word	0x40020800

08008720 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f103 0208 	add.w	r2, r3, #8
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f04f 32ff 	mov.w	r2, #4294967295
 8008738:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f103 0208 	add.w	r2, r3, #8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f103 0208 	add.w	r2, r3, #8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800877a:	b480      	push	{r7}
 800877c:	b085      	sub	sp, #20
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	bf00      	nop
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80087c2:	b480      	push	{r7}
 80087c4:	b085      	sub	sp, #20
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d103      	bne.n	80087e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	60fb      	str	r3, [r7, #12]
 80087e0:	e00c      	b.n	80087fc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3308      	adds	r3, #8
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e002      	b.n	80087f0 <vListInsert+0x2e>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d2f6      	bcs.n	80087ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	601a      	str	r2, [r3, #0]
}
 8008828:	bf00      	nop
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6892      	ldr	r2, [r2, #8]
 800884a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6852      	ldr	r2, [r2, #4]
 8008854:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	429a      	cmp	r2, r3
 800885e:	d103      	bne.n	8008868 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	1e5a      	subs	r2, r3, #1
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <xQueueGenericReset+0x2a>
        __asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	60bb      	str	r3, [r7, #8]
    }
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80088b2:	f002 f831 	bl	800a918 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088be:	68f9      	ldr	r1, [r7, #12]
 80088c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088c2:	fb01 f303 	mul.w	r3, r1, r3
 80088c6:	441a      	add	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e2:	3b01      	subs	r3, #1
 80088e4:	68f9      	ldr	r1, [r7, #12]
 80088e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80088e8:	fb01 f303 	mul.w	r3, r1, r3
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	22ff      	movs	r2, #255	; 0xff
 80088f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	22ff      	movs	r2, #255	; 0xff
 80088fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d114      	bne.n	8008932 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01a      	beq.n	8008946 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3310      	adds	r3, #16
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f945 	bl	8009ba4 <xTaskRemoveFromEventList>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d012      	beq.n	8008946 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008920:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <xQueueGenericReset+0xcc>)
 8008922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008926:	601a      	str	r2, [r3, #0]
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	e009      	b.n	8008946 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3310      	adds	r3, #16
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fef2 	bl	8008720 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3324      	adds	r3, #36	; 0x24
 8008940:	4618      	mov	r0, r3
 8008942:	f7ff feed 	bl	8008720 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008946:	f002 f817 	bl	800a978 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800894a:	2301      	movs	r3, #1
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	e000ed04 	.word	0xe000ed04

08008958 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008958:	b580      	push	{r7, lr}
 800895a:	b08c      	sub	sp, #48	; 0x30
 800895c:	af02      	add	r7, sp, #8
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	4613      	mov	r3, r2
 8008964:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <xQueueGenericCreate+0x2a>
        __asm volatile
 800896c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008970:	f383 8811 	msr	BASEPRI, r3
 8008974:	f3bf 8f6f 	isb	sy
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	61bb      	str	r3, [r7, #24]
    }
 800897e:	bf00      	nop
 8008980:	e7fe      	b.n	8008980 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	fb02 f303 	mul.w	r3, r2, r3
 800898a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <xQueueGenericCreate+0x48>
 8008992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	68fa      	ldr	r2, [r7, #12]
 800899c:	429a      	cmp	r2, r3
 800899e:	d101      	bne.n	80089a4 <xQueueGenericCreate+0x4c>
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <xQueueGenericCreate+0x4e>
 80089a4:	2300      	movs	r3, #0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <xQueueGenericCreate+0x68>
        __asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	617b      	str	r3, [r7, #20]
    }
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80089c6:	d90a      	bls.n	80089de <xQueueGenericCreate+0x86>
        __asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	613b      	str	r3, [r7, #16]
    }
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	3350      	adds	r3, #80	; 0x50
 80089e2:	4618      	mov	r0, r3
 80089e4:	f002 f8c2 	bl	800ab6c <pvPortMalloc>
 80089e8:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00d      	beq.n	8008a0c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	3350      	adds	r3, #80	; 0x50
 80089f8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089fa:	79fa      	ldrb	r2, [r7, #7]
 80089fc:	6a3b      	ldr	r3, [r7, #32]
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	69fa      	ldr	r2, [r7, #28]
 8008a04:	68b9      	ldr	r1, [r7, #8]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f805 	bl	8008a16 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
    }
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3728      	adds	r7, #40	; 0x28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	60b9      	str	r1, [r7, #8]
 8008a20:	607a      	str	r2, [r7, #4]
 8008a22:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d103      	bne.n	8008a32 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e002      	b.n	8008a38 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a44:	2101      	movs	r1, #1
 8008a46:	69b8      	ldr	r0, [r7, #24]
 8008a48:	f7ff ff1e 	bl	8008888 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	68f9      	ldr	r1, [r7, #12]
 8008a5a:	2073      	movs	r0, #115	; 0x73
 8008a5c:	f002 fec4 	bl	800b7e8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b090      	sub	sp, #64	; 0x40
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a76:	2300      	movs	r3, #0
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10a      	bne.n	8008a9a <xQueueGenericSend+0x32>
        __asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <xQueueGenericSend+0x40>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <xQueueGenericSend+0x44>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <xQueueGenericSend+0x46>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <xQueueGenericSend+0x60>
        __asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d103      	bne.n	8008ad6 <xQueueGenericSend+0x6e>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d101      	bne.n	8008ada <xQueueGenericSend+0x72>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e000      	b.n	8008adc <xQueueGenericSend+0x74>
 8008ada:	2300      	movs	r3, #0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10a      	bne.n	8008af6 <xQueueGenericSend+0x8e>
        __asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	623b      	str	r3, [r7, #32]
    }
 8008af2:	bf00      	nop
 8008af4:	e7fe      	b.n	8008af4 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008af6:	f001 f9b9 	bl	8009e6c <xTaskGetSchedulerState>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d102      	bne.n	8008b06 <xQueueGenericSend+0x9e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <xQueueGenericSend+0xa2>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <xQueueGenericSend+0xa4>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <xQueueGenericSend+0xbe>
        __asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	61fb      	str	r3, [r7, #28]
    }
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008b26:	f001 fef7 	bl	800a918 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d302      	bcc.n	8008b3c <xQueueGenericSend+0xd4>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d136      	bne.n	8008baa <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f003 fbba 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4601      	mov	r1, r0
 8008b50:	205a      	movs	r0, #90	; 0x5a
 8008b52:	f002 febf 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b5c:	f000 fa78 	bl	8009050 <prvCopyDataToQueue>
 8008b60:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d010      	beq.n	8008b8c <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 f818 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d013      	beq.n	8008ba2 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8008b7a:	4b4d      	ldr	r3, [pc, #308]	; (8008cb0 <xQueueGenericSend+0x248>)
 8008b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	e00a      	b.n	8008ba2 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008b92:	4b47      	ldr	r3, [pc, #284]	; (8008cb0 <xQueueGenericSend+0x248>)
 8008b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008ba2:	f001 fee9 	bl	800a978 <vPortExitCritical>
                return pdPASS;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e07d      	b.n	8008ca6 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d110      	bne.n	8008bd2 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008bb0:	f001 fee2 	bl	800a978 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f003 fb7e 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	6879      	ldr	r1, [r7, #4]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	205a      	movs	r0, #90	; 0x5a
 8008bca:	f002 fe83 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e069      	b.n	8008ca6 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008bd8:	f107 0314 	add.w	r3, r7, #20
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f001 f847 	bl	8009c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008be6:	f001 fec7 	bl	800a978 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008bea:	f000 fda5 	bl	8009738 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008bee:	f001 fe93 	bl	800a918 <vPortEnterCritical>
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf8:	b25b      	sxtb	r3, r3
 8008bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bfe:	d103      	bne.n	8008c08 <xQueueGenericSend+0x1a0>
 8008c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0e:	b25b      	sxtb	r3, r3
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d103      	bne.n	8008c1e <xQueueGenericSend+0x1b6>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c1e:	f001 feab 	bl	800a978 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c22:	1d3a      	adds	r2, r7, #4
 8008c24:	f107 0314 	add.w	r3, r7, #20
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f001 f836 	bl	8009c9c <xTaskCheckForTimeOut>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d124      	bne.n	8008c80 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c38:	f000 fb02 	bl	8009240 <prvIsQueueFull>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d018      	beq.n	8008c74 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c44:	3310      	adds	r3, #16
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 ff58 	bl	8009b00 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c52:	f000 fa8d 	bl	8009170 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008c56:	f000 fd7d 	bl	8009754 <xTaskResumeAll>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f47f af62 	bne.w	8008b26 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8008c62:	4b13      	ldr	r3, [pc, #76]	; (8008cb0 <xQueueGenericSend+0x248>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	e758      	b.n	8008b26 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c76:	f000 fa7b 	bl	8009170 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008c7a:	f000 fd6b 	bl	8009754 <xTaskResumeAll>
 8008c7e:	e752      	b.n	8008b26 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c82:	f000 fa75 	bl	8009170 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008c86:	f000 fd65 	bl	8009754 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f003 fb13 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	205a      	movs	r0, #90	; 0x5a
 8008ca0:	f002 fe18 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008ca4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3738      	adds	r7, #56	; 0x38
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	e000ed04 	.word	0xe000ed04

08008cb4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b090      	sub	sp, #64	; 0x40
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <xQueueGenericSendFromISR+0x3c>
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <xQueueGenericSendFromISR+0x40>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e000      	b.n	8008cf6 <xQueueGenericSendFromISR+0x42>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10a      	bne.n	8008d10 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d103      	bne.n	8008d1e <xQueueGenericSendFromISR+0x6a>
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <xQueueGenericSendFromISR+0x6e>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <xQueueGenericSendFromISR+0x70>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10a      	bne.n	8008d3e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	623b      	str	r3, [r7, #32]
    }
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d3e:	f001 fed5 	bl	800aaec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008d42:	f3ef 8211 	mrs	r2, BASEPRI
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	61fa      	str	r2, [r7, #28]
 8008d58:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d302      	bcc.n	8008d70 <xQueueGenericSendFromISR+0xbc>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d148      	bne.n	8008e02 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d82:	4618      	mov	r0, r3
 8008d84:	f003 fa98 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	2060      	movs	r0, #96	; 0x60
 8008d90:	f002 fcd0 	bl	800b734 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	68b9      	ldr	r1, [r7, #8]
 8008d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d9a:	f000 f959 	bl	8009050 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008d9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d112      	bne.n	8008dce <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d025      	beq.n	8008dfc <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	3324      	adds	r3, #36	; 0x24
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 fef5 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01d      	beq.n	8008dfc <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d01a      	beq.n	8008dfc <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e016      	b.n	8008dfc <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008dce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8008dd4:	d10a      	bne.n	8008dec <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	617b      	str	r3, [r7, #20]
    }
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008df0:	3301      	adds	r3, #1
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	b25a      	sxtb	r2, r3
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8008e00:	e00b      	b.n	8008e1a <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	4618      	mov	r0, r3
 8008e06:	f003 fa57 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	2060      	movs	r0, #96	; 0x60
 8008e12:	f002 fc8f 	bl	800b734 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8008e24:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3740      	adds	r7, #64	; 0x40
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8008e30:	b590      	push	{r4, r7, lr}
 8008e32:	b08f      	sub	sp, #60	; 0x3c
 8008e34:	af02      	add	r7, sp, #8
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10a      	bne.n	8008e60 <xQueueReceive+0x30>
        __asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	623b      	str	r3, [r7, #32]
    }
 8008e5c:	bf00      	nop
 8008e5e:	e7fe      	b.n	8008e5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d103      	bne.n	8008e6e <xQueueReceive+0x3e>
 8008e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <xQueueReceive+0x42>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e000      	b.n	8008e74 <xQueueReceive+0x44>
 8008e72:	2300      	movs	r3, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xQueueReceive+0x5e>
        __asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	61fb      	str	r3, [r7, #28]
    }
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e8e:	f000 ffed 	bl	8009e6c <xTaskGetSchedulerState>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d102      	bne.n	8008e9e <xQueueReceive+0x6e>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <xQueueReceive+0x72>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <xQueueReceive+0x74>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueReceive+0x8e>
        __asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	61bb      	str	r3, [r7, #24]
    }
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008ebe:	f001 fd2b 	bl	800a918 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d02f      	beq.n	8008f2e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed2:	f000 f927 	bl	8009124 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f003 f9ed 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008ede:	4604      	mov	r4, r0
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f003 f9e9 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2101      	movs	r1, #1
 8008eec:	9100      	str	r1, [sp, #0]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	205c      	movs	r0, #92	; 0x5c
 8008ef2:	f002 fcef 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	691b      	ldr	r3, [r3, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00f      	beq.n	8008f26 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f08:	3310      	adds	r3, #16
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f000 fe4a 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008f16:	4b4d      	ldr	r3, [pc, #308]	; (800904c <xQueueReceive+0x21c>)
 8008f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008f26:	f001 fd27 	bl	800a978 <vPortExitCritical>
                return pdPASS;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e08a      	b.n	8009044 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d113      	bne.n	8008f5c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008f34:	f001 fd20 	bl	800a978 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f003 f9bc 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008f40:	4604      	mov	r4, r0
 8008f42:	2000      	movs	r0, #0
 8008f44:	f003 f9b8 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	9100      	str	r1, [sp, #0]
 8008f50:	4621      	mov	r1, r4
 8008f52:	205c      	movs	r0, #92	; 0x5c
 8008f54:	f002 fcbe 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e073      	b.n	8009044 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d106      	bne.n	8008f70 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008f62:	f107 0310 	add.w	r3, r7, #16
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 fe82 	bl	8009c70 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008f70:	f001 fd02 	bl	800a978 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008f74:	f000 fbe0 	bl	8009738 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008f78:	f001 fcce 	bl	800a918 <vPortEnterCritical>
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f82:	b25b      	sxtb	r3, r3
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f88:	d103      	bne.n	8008f92 <xQueueReceive+0x162>
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d103      	bne.n	8008fa8 <xQueueReceive+0x178>
 8008fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fa8:	f001 fce6 	bl	800a978 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fac:	1d3a      	adds	r2, r7, #4
 8008fae:	f107 0310 	add.w	r3, r7, #16
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fe71 	bl	8009c9c <xTaskCheckForTimeOut>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d124      	bne.n	800900a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fc2:	f000 f927 	bl	8009214 <prvIsQueueEmpty>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d018      	beq.n	8008ffe <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	3324      	adds	r3, #36	; 0x24
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f000 fd93 	bl	8009b00 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fdc:	f000 f8c8 	bl	8009170 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008fe0:	f000 fbb8 	bl	8009754 <xTaskResumeAll>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f47f af69 	bne.w	8008ebe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8008fec:	4b17      	ldr	r3, [pc, #92]	; (800904c <xQueueReceive+0x21c>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	e75f      	b.n	8008ebe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009000:	f000 f8b6 	bl	8009170 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009004:	f000 fba6 	bl	8009754 <xTaskResumeAll>
 8009008:	e759      	b.n	8008ebe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800900a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800900c:	f000 f8b0 	bl	8009170 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009010:	f000 fba0 	bl	8009754 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009016:	f000 f8fd 	bl	8009214 <prvIsQueueEmpty>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	f43f af4e 	beq.w	8008ebe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009024:	4618      	mov	r0, r3
 8009026:	f003 f947 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 800902a:	4604      	mov	r4, r0
 800902c:	2000      	movs	r0, #0
 800902e:	f003 f943 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 8009032:	4602      	mov	r2, r0
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2101      	movs	r1, #1
 8009038:	9100      	str	r1, [sp, #0]
 800903a:	4621      	mov	r1, r4
 800903c:	205c      	movs	r0, #92	; 0x5c
 800903e:	f002 fc49 	bl	800b8d4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009042:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009044:	4618      	mov	r0, r3
 8009046:	3734      	adds	r7, #52	; 0x34
 8009048:	46bd      	mov	sp, r7
 800904a:	bd90      	pop	{r4, r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10d      	bne.n	800908a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d14d      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 ff14 	bl	8009ea8 <xTaskPriorityDisinherit>
 8009080:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	609a      	str	r2, [r3, #8]
 8009088:	e043      	b.n	8009112 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d119      	bne.n	80090c4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6858      	ldr	r0, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009098:	461a      	mov	r2, r3
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	f003 fa9c 	bl	800c5d8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a8:	441a      	add	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d32b      	bcc.n	8009112 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	605a      	str	r2, [r3, #4]
 80090c2:	e026      	b.n	8009112 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68d8      	ldr	r0, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090cc:	461a      	mov	r2, r3
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	f003 fa82 	bl	800c5d8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68da      	ldr	r2, [r3, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	425b      	negs	r3, r3
 80090de:	441a      	add	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68da      	ldr	r2, [r3, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d207      	bcs.n	8009100 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	425b      	negs	r3, r3
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b02      	cmp	r3, #2
 8009104:	d105      	bne.n	8009112 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3b01      	subs	r3, #1
 8009110:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800911a:	697b      	ldr	r3, [r7, #20]
}
 800911c:	4618      	mov	r0, r3
 800911e:	3718      	adds	r7, #24
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	d018      	beq.n	8009168 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68da      	ldr	r2, [r3, #12]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	441a      	add	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	d303      	bcc.n	8009158 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68d9      	ldr	r1, [r3, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009160:	461a      	mov	r2, r3
 8009162:	6838      	ldr	r0, [r7, #0]
 8009164:	f003 fa38 	bl	800c5d8 <memcpy>
    }
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009178:	f001 fbce 	bl	800a918 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009182:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009184:	e011      	b.n	80091aa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d012      	beq.n	80091b4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3324      	adds	r3, #36	; 0x24
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fd06 	bl	8009ba4 <xTaskRemoveFromEventList>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800919e:	f000 fde3 	bl	8009d68 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80091aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	dce9      	bgt.n	8009186 <prvUnlockQueue+0x16>
 80091b2:	e000      	b.n	80091b6 <prvUnlockQueue+0x46>
                        break;
 80091b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	22ff      	movs	r2, #255	; 0xff
 80091ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80091be:	f001 fbdb 	bl	800a978 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80091c2:	f001 fba9 	bl	800a918 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80091ce:	e011      	b.n	80091f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d012      	beq.n	80091fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3310      	adds	r3, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fce1 	bl	8009ba4 <xTaskRemoveFromEventList>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80091e8:	f000 fdbe 	bl	8009d68 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80091f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dce9      	bgt.n	80091d0 <prvUnlockQueue+0x60>
 80091fc:	e000      	b.n	8009200 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80091fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	22ff      	movs	r2, #255	; 0xff
 8009204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8009208:	f001 fbb6 	bl	800a978 <vPortExitCritical>
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800921c:	f001 fb7c 	bl	800a918 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	d102      	bne.n	800922e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e001      	b.n	8009232 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800922e:	2300      	movs	r3, #0
 8009230:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009232:	f001 fba1 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009236:	68fb      	ldr	r3, [r7, #12]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009248:	f001 fb66 	bl	800a918 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009254:	429a      	cmp	r2, r3
 8009256:	d102      	bne.n	800925e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8009258:	2301      	movs	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	e001      	b.n	8009262 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800925e:	2300      	movs	r3, #0
 8009260:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009262:	f001 fb89 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
 800927e:	e01e      	b.n	80092be <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009280:	4a13      	ldr	r2, [pc, #76]	; (80092d0 <vQueueAddToRegistry+0x60>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d115      	bne.n	80092b8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800928c:	4910      	ldr	r1, [pc, #64]	; (80092d0 <vQueueAddToRegistry+0x60>)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8009296:	4a0e      	ldr	r2, [pc, #56]	; (80092d0 <vQueueAddToRegistry+0x60>)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	4413      	add	r3, r2
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f003 f807 	bl	800c2b8 <SEGGER_SYSVIEW_ShrinkId>
 80092aa:	4601      	mov	r1, r0
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	2071      	movs	r0, #113	; 0x71
 80092b2:	f002 fa3f 	bl	800b734 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80092b6:	e006      	b.n	80092c6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3301      	adds	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2b07      	cmp	r3, #7
 80092c2:	d9dd      	bls.n	8009280 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20013c48 	.word	0x20013c48

080092d4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80092e4:	f001 fb18 	bl	800a918 <vPortEnterCritical>
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092ee:	b25b      	sxtb	r3, r3
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d103      	bne.n	80092fe <vQueueWaitForMessageRestricted+0x2a>
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009304:	b25b      	sxtb	r3, r3
 8009306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800930a:	d103      	bne.n	8009314 <vQueueWaitForMessageRestricted+0x40>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009314:	f001 fb30 	bl	800a978 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	2b00      	cmp	r3, #0
 800931e:	d106      	bne.n	800932e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fc0d 	bl	8009b48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800932e:	6978      	ldr	r0, [r7, #20]
 8009330:	f7ff ff1e 	bl	8009170 <prvUnlockQueue>
    }
 8009334:	bf00      	nop
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800933c:	b580      	push	{r7, lr}
 800933e:	b08c      	sub	sp, #48	; 0x30
 8009340:	af04      	add	r7, sp, #16
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	603b      	str	r3, [r7, #0]
 8009348:	4613      	mov	r3, r2
 800934a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800934c:	88fb      	ldrh	r3, [r7, #6]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4618      	mov	r0, r3
 8009352:	f001 fc0b 	bl	800ab6c <pvPortMalloc>
 8009356:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00e      	beq.n	800937c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800935e:	2058      	movs	r0, #88	; 0x58
 8009360:	f001 fc04 	bl	800ab6c <pvPortMalloc>
 8009364:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	631a      	str	r2, [r3, #48]	; 0x30
 8009372:	e005      	b.n	8009380 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f001 fcd9 	bl	800ad2c <vPortFree>
 800937a:	e001      	b.n	8009380 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d013      	beq.n	80093ae <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009386:	88fa      	ldrh	r2, [r7, #6]
 8009388:	2300      	movs	r3, #0
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	9302      	str	r3, [sp, #8]
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	68b9      	ldr	r1, [r7, #8]
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f000 f80e 	bl	80093be <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80093a2:	69f8      	ldr	r0, [r7, #28]
 80093a4:	f000 f8a2 	bl	80094ec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80093a8:	2301      	movs	r3, #1
 80093aa:	61bb      	str	r3, [r7, #24]
 80093ac:	e002      	b.n	80093b4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
 80093b2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80093b4:	69bb      	ldr	r3, [r7, #24]
    }
 80093b6:	4618      	mov	r0, r3
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	607a      	str	r2, [r7, #4]
 80093ca:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	461a      	mov	r2, r3
 80093d6:	21a5      	movs	r1, #165	; 0xa5
 80093d8:	f003 f90c 	bl	800c5f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80093e6:	3b01      	subs	r3, #1
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	f023 0307 	bic.w	r3, r3, #7
 80093f4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	f003 0307 	and.w	r3, r3, #7
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <prvInitialiseNewTask+0x58>
        __asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	f383 8811 	msr	BASEPRI, r3
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	f3bf 8f4f 	dsb	sy
 8009410:	617b      	str	r3, [r7, #20]
    }
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d01f      	beq.n	800945c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800941c:	2300      	movs	r3, #0
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e012      	b.n	8009448 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	4413      	add	r3, r2
 8009428:	7819      	ldrb	r1, [r3, #0]
 800942a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	3334      	adds	r3, #52	; 0x34
 8009432:	460a      	mov	r2, r1
 8009434:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	4413      	add	r3, r2
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d006      	beq.n	8009450 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	3301      	adds	r3, #1
 8009446:	61fb      	str	r3, [r7, #28]
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b09      	cmp	r3, #9
 800944c:	d9e9      	bls.n	8009422 <prvInitialiseNewTask+0x64>
 800944e:	e000      	b.n	8009452 <prvInitialiseNewTask+0x94>
            {
                break;
 8009450:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800945a:	e003      	b.n	8009464 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800945c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009466:	2b04      	cmp	r3, #4
 8009468:	d901      	bls.n	800946e <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800946a:	2304      	movs	r3, #4
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009472:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009478:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	2200      	movs	r2, #0
 800947e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7ff f96b 	bl	8008760 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	3318      	adds	r3, #24
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff f966 	bl	8008760 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009498:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	f1c3 0205 	rsb	r2, r3, #5
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80094aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ac:	3350      	adds	r3, #80	; 0x50
 80094ae:	2204      	movs	r2, #4
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f003 f89e 	bl	800c5f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	3354      	adds	r3, #84	; 0x54
 80094bc:	2201      	movs	r2, #1
 80094be:	2100      	movs	r1, #0
 80094c0:	4618      	mov	r0, r3
 80094c2:	f003 f897 	bl	800c5f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	68f9      	ldr	r1, [r7, #12]
 80094ca:	69b8      	ldr	r0, [r7, #24]
 80094cc:	f001 f8f6 	bl	800a6bc <pxPortInitialiseStack>
 80094d0:	4602      	mov	r2, r0
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80094d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80094e2:	bf00      	nop
 80094e4:	3720      	adds	r7, #32
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80094ec:	b5b0      	push	{r4, r5, r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80094f4:	f001 fa10 	bl	800a918 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80094f8:	4b3b      	ldr	r3, [pc, #236]	; (80095e8 <prvAddNewTaskToReadyList+0xfc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	4a3a      	ldr	r2, [pc, #232]	; (80095e8 <prvAddNewTaskToReadyList+0xfc>)
 8009500:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009502:	4b3a      	ldr	r3, [pc, #232]	; (80095ec <prvAddNewTaskToReadyList+0x100>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d109      	bne.n	800951e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800950a:	4a38      	ldr	r2, [pc, #224]	; (80095ec <prvAddNewTaskToReadyList+0x100>)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009510:	4b35      	ldr	r3, [pc, #212]	; (80095e8 <prvAddNewTaskToReadyList+0xfc>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d110      	bne.n	800953a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009518:	f000 fc4a 	bl	8009db0 <prvInitialiseTaskLists>
 800951c:	e00d      	b.n	800953a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800951e:	4b34      	ldr	r3, [pc, #208]	; (80095f0 <prvAddNewTaskToReadyList+0x104>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d109      	bne.n	800953a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009526:	4b31      	ldr	r3, [pc, #196]	; (80095ec <prvAddNewTaskToReadyList+0x100>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	429a      	cmp	r2, r3
 8009532:	d802      	bhi.n	800953a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009534:	4a2d      	ldr	r2, [pc, #180]	; (80095ec <prvAddNewTaskToReadyList+0x100>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800953a:	4b2e      	ldr	r3, [pc, #184]	; (80095f4 <prvAddNewTaskToReadyList+0x108>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	3301      	adds	r3, #1
 8009540:	4a2c      	ldr	r2, [pc, #176]	; (80095f4 <prvAddNewTaskToReadyList+0x108>)
 8009542:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009544:	4b2b      	ldr	r3, [pc, #172]	; (80095f4 <prvAddNewTaskToReadyList+0x108>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d016      	beq.n	8009580 <prvAddNewTaskToReadyList+0x94>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	f002 fd89 	bl	800c06c <SEGGER_SYSVIEW_OnTaskCreate>
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	461d      	mov	r5, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	461c      	mov	r4, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009576:	1ae3      	subs	r3, r4, r3
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	462b      	mov	r3, r5
 800957c:	f001 fcf4 	bl	800af68 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4618      	mov	r0, r3
 8009584:	f002 fdf6 	bl	800c174 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	2201      	movs	r2, #1
 800958e:	409a      	lsls	r2, r3
 8009590:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <prvAddNewTaskToReadyList+0x10c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4313      	orrs	r3, r2
 8009596:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <prvAddNewTaskToReadyList+0x10c>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4a15      	ldr	r2, [pc, #84]	; (80095fc <prvAddNewTaskToReadyList+0x110>)
 80095a8:	441a      	add	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3304      	adds	r3, #4
 80095ae:	4619      	mov	r1, r3
 80095b0:	4610      	mov	r0, r2
 80095b2:	f7ff f8e2 	bl	800877a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80095b6:	f001 f9df 	bl	800a978 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <prvAddNewTaskToReadyList+0x104>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00e      	beq.n	80095e0 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095c2:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <prvAddNewTaskToReadyList+0x100>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d207      	bcs.n	80095e0 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <prvAddNewTaskToReadyList+0x114>)
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bdb0      	pop	{r4, r5, r7, pc}
 80095e8:	2000017c 	.word	0x2000017c
 80095ec:	200000bc 	.word	0x200000bc
 80095f0:	20000188 	.word	0x20000188
 80095f4:	20000198 	.word	0x20000198
 80095f8:	20000184 	.word	0x20000184
 80095fc:	200000c0 	.word	0x200000c0
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d01b      	beq.n	800964e <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <vTaskDelay+0x68>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <vTaskDelay+0x30>
        __asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	60bb      	str	r3, [r7, #8]
    }
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8009634:	f000 f880 	bl	8009738 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8009638:	6879      	ldr	r1, [r7, #4]
 800963a:	2023      	movs	r0, #35	; 0x23
 800963c:	f002 f83e 	bl	800b6bc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009640:	2100      	movs	r1, #0
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fcb0 	bl	8009fa8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009648:	f000 f884 	bl	8009754 <xTaskResumeAll>
 800964c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d107      	bne.n	8009664 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <vTaskDelay+0x6c>)
 8009656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965a:	601a      	str	r2, [r3, #0]
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	200001a4 	.word	0x200001a4
 8009670:	e000ed04 	.word	0xe000ed04

08009674 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800967a:	4b27      	ldr	r3, [pc, #156]	; (8009718 <vTaskStartScheduler+0xa4>)
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	2300      	movs	r3, #0
 8009680:	9300      	str	r3, [sp, #0]
 8009682:	2300      	movs	r3, #0
 8009684:	2282      	movs	r2, #130	; 0x82
 8009686:	4925      	ldr	r1, [pc, #148]	; (800971c <vTaskStartScheduler+0xa8>)
 8009688:	4825      	ldr	r0, [pc, #148]	; (8009720 <vTaskStartScheduler+0xac>)
 800968a:	f7ff fe57 	bl	800933c <xTaskCreate>
 800968e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d102      	bne.n	800969c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009696:	f000 fcff 	bl	800a098 <xTimerCreateTimerTask>
 800969a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d124      	bne.n	80096ec <vTaskStartScheduler+0x78>
        __asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60bb      	str	r3, [r7, #8]
    }
 80096b4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80096b6:	4b1b      	ldr	r3, [pc, #108]	; (8009724 <vTaskStartScheduler+0xb0>)
 80096b8:	f04f 32ff 	mov.w	r2, #4294967295
 80096bc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80096be:	4b1a      	ldr	r3, [pc, #104]	; (8009728 <vTaskStartScheduler+0xb4>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096c4:	4b19      	ldr	r3, [pc, #100]	; (800972c <vTaskStartScheduler+0xb8>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80096ca:	4b19      	ldr	r3, [pc, #100]	; (8009730 <vTaskStartScheduler+0xbc>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b12      	ldr	r3, [pc, #72]	; (8009718 <vTaskStartScheduler+0xa4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d102      	bne.n	80096dc <vTaskStartScheduler+0x68>
 80096d6:	f002 fcad 	bl	800c034 <SEGGER_SYSVIEW_OnIdle>
 80096da:	e004      	b.n	80096e6 <vTaskStartScheduler+0x72>
 80096dc:	4b14      	ldr	r3, [pc, #80]	; (8009730 <vTaskStartScheduler+0xbc>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f002 fd05 	bl	800c0f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80096e6:	f001 f875 	bl	800a7d4 <xPortStartScheduler>
 80096ea:	e00e      	b.n	800970a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f2:	d10a      	bne.n	800970a <vTaskStartScheduler+0x96>
        __asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	607b      	str	r3, [r7, #4]
    }
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800970a:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <vTaskStartScheduler+0xc0>)
 800970c:	681b      	ldr	r3, [r3, #0]
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	200001a0 	.word	0x200001a0
 800971c:	0800c7dc 	.word	0x0800c7dc
 8009720:	08009d81 	.word	0x08009d81
 8009724:	2000019c 	.word	0x2000019c
 8009728:	20000188 	.word	0x20000188
 800972c:	20000180 	.word	0x20000180
 8009730:	200000bc 	.word	0x200000bc
 8009734:	2000002c 	.word	0x2000002c

08009738 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800973c:	4b04      	ldr	r3, [pc, #16]	; (8009750 <vTaskSuspendAll+0x18>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a03      	ldr	r2, [pc, #12]	; (8009750 <vTaskSuspendAll+0x18>)
 8009744:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009746:	bf00      	nop
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	200001a4 	.word	0x200001a4

08009754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800975e:	2300      	movs	r3, #0
 8009760:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009762:	4b43      	ldr	r3, [pc, #268]	; (8009870 <xTaskResumeAll+0x11c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <xTaskResumeAll+0x2c>
        __asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	f383 8811 	msr	BASEPRI, r3
 8009772:	f3bf 8f6f 	isb	sy
 8009776:	f3bf 8f4f 	dsb	sy
 800977a:	603b      	str	r3, [r7, #0]
    }
 800977c:	bf00      	nop
 800977e:	e7fe      	b.n	800977e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009780:	f001 f8ca 	bl	800a918 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009784:	4b3a      	ldr	r3, [pc, #232]	; (8009870 <xTaskResumeAll+0x11c>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3b01      	subs	r3, #1
 800978a:	4a39      	ldr	r2, [pc, #228]	; (8009870 <xTaskResumeAll+0x11c>)
 800978c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978e:	4b38      	ldr	r3, [pc, #224]	; (8009870 <xTaskResumeAll+0x11c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d165      	bne.n	8009862 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009796:	4b37      	ldr	r3, [pc, #220]	; (8009874 <xTaskResumeAll+0x120>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d061      	beq.n	8009862 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800979e:	e032      	b.n	8009806 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097a0:	4b35      	ldr	r3, [pc, #212]	; (8009878 <xTaskResumeAll+0x124>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3318      	adds	r3, #24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff f841 	bl	8008834 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3304      	adds	r3, #4
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff f83c 	bl	8008834 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4618      	mov	r0, r3
 80097c0:	f002 fcd8 	bl	800c174 <SEGGER_SYSVIEW_OnTaskStartReady>
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	2201      	movs	r2, #1
 80097ca:	409a      	lsls	r2, r3
 80097cc:	4b2b      	ldr	r3, [pc, #172]	; (800987c <xTaskResumeAll+0x128>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	4a2a      	ldr	r2, [pc, #168]	; (800987c <xTaskResumeAll+0x128>)
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4a27      	ldr	r2, [pc, #156]	; (8009880 <xTaskResumeAll+0x12c>)
 80097e4:	441a      	add	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	3304      	adds	r3, #4
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7fe ffc4 	bl	800877a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f6:	4b23      	ldr	r3, [pc, #140]	; (8009884 <xTaskResumeAll+0x130>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d302      	bcc.n	8009806 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8009800:	4b21      	ldr	r3, [pc, #132]	; (8009888 <xTaskResumeAll+0x134>)
 8009802:	2201      	movs	r2, #1
 8009804:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009806:	4b1c      	ldr	r3, [pc, #112]	; (8009878 <xTaskResumeAll+0x124>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d1c8      	bne.n	80097a0 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009814:	f000 fb0e 	bl	8009e34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009818:	4b1c      	ldr	r3, [pc, #112]	; (800988c <xTaskResumeAll+0x138>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d010      	beq.n	8009846 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009824:	f000 f846 	bl	80098b4 <xTaskIncrementTick>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800982e:	4b16      	ldr	r3, [pc, #88]	; (8009888 <xTaskResumeAll+0x134>)
 8009830:	2201      	movs	r2, #1
 8009832:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3b01      	subs	r3, #1
 8009838:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f1      	bne.n	8009824 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8009840:	4b12      	ldr	r3, [pc, #72]	; (800988c <xTaskResumeAll+0x138>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009846:	4b10      	ldr	r3, [pc, #64]	; (8009888 <xTaskResumeAll+0x134>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d009      	beq.n	8009862 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800984e:	2301      	movs	r3, #1
 8009850:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009852:	4b0f      	ldr	r3, [pc, #60]	; (8009890 <xTaskResumeAll+0x13c>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009862:	f001 f889 	bl	800a978 <vPortExitCritical>

    return xAlreadyYielded;
 8009866:	68bb      	ldr	r3, [r7, #8]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	200001a4 	.word	0x200001a4
 8009874:	2000017c 	.word	0x2000017c
 8009878:	20000154 	.word	0x20000154
 800987c:	20000184 	.word	0x20000184
 8009880:	200000c0 	.word	0x200000c0
 8009884:	200000bc 	.word	0x200000bc
 8009888:	20000190 	.word	0x20000190
 800988c:	2000018c 	.word	0x2000018c
 8009890:	e000ed04 	.word	0xe000ed04

08009894 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009894:	b480      	push	{r7}
 8009896:	b083      	sub	sp, #12
 8009898:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <xTaskGetTickCount+0x1c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80098a0:	687b      	ldr	r3, [r7, #4]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20000180 	.word	0x20000180

080098b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098be:	4b50      	ldr	r3, [pc, #320]	; (8009a00 <xTaskIncrementTick+0x14c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f040 8092 	bne.w	80099ec <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098c8:	4b4e      	ldr	r3, [pc, #312]	; (8009a04 <xTaskIncrementTick+0x150>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3301      	adds	r3, #1
 80098ce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80098d0:	4a4c      	ldr	r2, [pc, #304]	; (8009a04 <xTaskIncrementTick+0x150>)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d120      	bne.n	800991e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80098dc:	4b4a      	ldr	r3, [pc, #296]	; (8009a08 <xTaskIncrementTick+0x154>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <xTaskIncrementTick+0x48>
        __asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	603b      	str	r3, [r7, #0]
    }
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <xTaskIncrementTick+0x46>
 80098fc:	4b42      	ldr	r3, [pc, #264]	; (8009a08 <xTaskIncrementTick+0x154>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	4b42      	ldr	r3, [pc, #264]	; (8009a0c <xTaskIncrementTick+0x158>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a40      	ldr	r2, [pc, #256]	; (8009a08 <xTaskIncrementTick+0x154>)
 8009908:	6013      	str	r3, [r2, #0]
 800990a:	4a40      	ldr	r2, [pc, #256]	; (8009a0c <xTaskIncrementTick+0x158>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	4b3f      	ldr	r3, [pc, #252]	; (8009a10 <xTaskIncrementTick+0x15c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	4a3e      	ldr	r2, [pc, #248]	; (8009a10 <xTaskIncrementTick+0x15c>)
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	f000 fa8b 	bl	8009e34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800991e:	4b3d      	ldr	r3, [pc, #244]	; (8009a14 <xTaskIncrementTick+0x160>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	429a      	cmp	r2, r3
 8009926:	d34c      	bcc.n	80099c2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009928:	4b37      	ldr	r3, [pc, #220]	; (8009a08 <xTaskIncrementTick+0x154>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009932:	4b38      	ldr	r3, [pc, #224]	; (8009a14 <xTaskIncrementTick+0x160>)
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	601a      	str	r2, [r3, #0]
                    break;
 800993a:	e042      	b.n	80099c2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800993c:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <xTaskIncrementTick+0x154>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	429a      	cmp	r2, r3
 8009952:	d203      	bcs.n	800995c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009954:	4a2f      	ldr	r2, [pc, #188]	; (8009a14 <xTaskIncrementTick+0x160>)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800995a:	e032      	b.n	80099c2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3304      	adds	r3, #4
 8009960:	4618      	mov	r0, r3
 8009962:	f7fe ff67 	bl	8008834 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3318      	adds	r3, #24
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe ff5e 	bl	8008834 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4618      	mov	r0, r3
 800997c:	f002 fbfa 	bl	800c174 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009984:	2201      	movs	r2, #1
 8009986:	409a      	lsls	r2, r3
 8009988:	4b23      	ldr	r3, [pc, #140]	; (8009a18 <xTaskIncrementTick+0x164>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4313      	orrs	r3, r2
 800998e:	4a22      	ldr	r2, [pc, #136]	; (8009a18 <xTaskIncrementTick+0x164>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4a1f      	ldr	r2, [pc, #124]	; (8009a1c <xTaskIncrementTick+0x168>)
 80099a0:	441a      	add	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	3304      	adds	r3, #4
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f7fe fee6 	bl	800877a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	4b1b      	ldr	r3, [pc, #108]	; (8009a20 <xTaskIncrementTick+0x16c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d3b5      	bcc.n	8009928 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099c0:	e7b2      	b.n	8009928 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099c2:	4b17      	ldr	r3, [pc, #92]	; (8009a20 <xTaskIncrementTick+0x16c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c8:	4914      	ldr	r1, [pc, #80]	; (8009a1c <xTaskIncrementTick+0x168>)
 80099ca:	4613      	mov	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	440b      	add	r3, r1
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d901      	bls.n	80099de <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80099da:	2301      	movs	r3, #1
 80099dc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80099de:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <xTaskIncrementTick+0x170>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d007      	beq.n	80099f6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80099e6:	2301      	movs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	e004      	b.n	80099f6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80099ec:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <xTaskIncrementTick+0x174>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3301      	adds	r3, #1
 80099f2:	4a0d      	ldr	r2, [pc, #52]	; (8009a28 <xTaskIncrementTick+0x174>)
 80099f4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80099f6:	697b      	ldr	r3, [r7, #20]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	200001a4 	.word	0x200001a4
 8009a04:	20000180 	.word	0x20000180
 8009a08:	2000014c 	.word	0x2000014c
 8009a0c:	20000150 	.word	0x20000150
 8009a10:	20000194 	.word	0x20000194
 8009a14:	2000019c 	.word	0x2000019c
 8009a18:	20000184 	.word	0x20000184
 8009a1c:	200000c0 	.word	0x200000c0
 8009a20:	200000bc 	.word	0x200000bc
 8009a24:	20000190 	.word	0x20000190
 8009a28:	2000018c 	.word	0x2000018c

08009a2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a32:	4b2d      	ldr	r3, [pc, #180]	; (8009ae8 <vTaskSwitchContext+0xbc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d003      	beq.n	8009a42 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009a3a:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <vTaskSwitchContext+0xc0>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8009a40:	e04d      	b.n	8009ade <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8009a42:	4b2a      	ldr	r3, [pc, #168]	; (8009aec <vTaskSwitchContext+0xc0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a48:	4b29      	ldr	r3, [pc, #164]	; (8009af0 <vTaskSwitchContext+0xc4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	fab3 f383 	clz	r3, r3
 8009a54:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8009a56:	7afb      	ldrb	r3, [r7, #11]
 8009a58:	f1c3 031f 	rsb	r3, r3, #31
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	4925      	ldr	r1, [pc, #148]	; (8009af4 <vTaskSwitchContext+0xc8>)
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	440b      	add	r3, r1
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <vTaskSwitchContext+0x5c>
        __asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	607b      	str	r3, [r7, #4]
    }
 8009a84:	bf00      	nop
 8009a86:	e7fe      	b.n	8009a86 <vTaskSwitchContext+0x5a>
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4a18      	ldr	r2, [pc, #96]	; (8009af4 <vTaskSwitchContext+0xc8>)
 8009a94:	4413      	add	r3, r2
 8009a96:	613b      	str	r3, [r7, #16]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	605a      	str	r2, [r3, #4]
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d104      	bne.n	8009ab8 <vTaskSwitchContext+0x8c>
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	685a      	ldr	r2, [r3, #4]
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	605a      	str	r2, [r3, #4]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	4a0e      	ldr	r2, [pc, #56]	; (8009af8 <vTaskSwitchContext+0xcc>)
 8009ac0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8009ac2:	4b0d      	ldr	r3, [pc, #52]	; (8009af8 <vTaskSwitchContext+0xcc>)
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <vTaskSwitchContext+0xd0>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d102      	bne.n	8009ad4 <vTaskSwitchContext+0xa8>
 8009ace:	f002 fab1 	bl	800c034 <SEGGER_SYSVIEW_OnIdle>
}
 8009ad2:	e004      	b.n	8009ade <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8009ad4:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <vTaskSwitchContext+0xcc>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f002 fb09 	bl	800c0f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009ade:	bf00      	nop
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200001a4 	.word	0x200001a4
 8009aec:	20000190 	.word	0x20000190
 8009af0:	20000184 	.word	0x20000184
 8009af4:	200000c0 	.word	0x200000c0
 8009af8:	200000bc 	.word	0x200000bc
 8009afc:	200001a0 	.word	0x200001a0

08009b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60fb      	str	r3, [r7, #12]
    }
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <vTaskPlaceOnEventList+0x44>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3318      	adds	r3, #24
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7fe fe47 	bl	80087c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b34:	2101      	movs	r1, #1
 8009b36:	6838      	ldr	r0, [r7, #0]
 8009b38:	f000 fa36 	bl	8009fa8 <prvAddCurrentTaskToDelayedList>
}
 8009b3c:	bf00      	nop
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200000bc 	.word	0x200000bc

08009b48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	617b      	str	r3, [r7, #20]
    }
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b70:	4b0b      	ldr	r3, [pc, #44]	; (8009ba0 <vTaskPlaceOnEventListRestricted+0x58>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3318      	adds	r3, #24
 8009b76:	4619      	mov	r1, r3
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7fe fdfe 	bl	800877a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8009b84:	f04f 33ff 	mov.w	r3, #4294967295
 8009b88:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8009b8a:	2024      	movs	r0, #36	; 0x24
 8009b8c:	f001 fd78 	bl	800b680 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	68b8      	ldr	r0, [r7, #8]
 8009b94:	f000 fa08 	bl	8009fa8 <prvAddCurrentTaskToDelayedList>
    }
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	200000bc 	.word	0x200000bc

08009ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10a      	bne.n	8009bd0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	60fb      	str	r3, [r7, #12]
    }
 8009bcc:	bf00      	nop
 8009bce:	e7fe      	b.n	8009bce <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	3318      	adds	r3, #24
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe fe2d 	bl	8008834 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bda:	4b1f      	ldr	r3, [pc, #124]	; (8009c58 <xTaskRemoveFromEventList+0xb4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d120      	bne.n	8009c24 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	3304      	adds	r3, #4
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe fe24 	bl	8008834 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f002 fac0 	bl	800c174 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	409a      	lsls	r2, r3
 8009bfc:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <xTaskRemoveFromEventList+0xb8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <xTaskRemoveFromEventList+0xb8>)
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4a13      	ldr	r2, [pc, #76]	; (8009c60 <xTaskRemoveFromEventList+0xbc>)
 8009c14:	441a      	add	r2, r3
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fe fdac 	bl	800877a <vListInsertEnd>
 8009c22:	e005      	b.n	8009c30 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	3318      	adds	r3, #24
 8009c28:	4619      	mov	r1, r3
 8009c2a:	480e      	ldr	r0, [pc, #56]	; (8009c64 <xTaskRemoveFromEventList+0xc0>)
 8009c2c:	f7fe fda5 	bl	800877a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c34:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <xTaskRemoveFromEventList+0xc4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d905      	bls.n	8009c4a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <xTaskRemoveFromEventList+0xc8>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
 8009c48:	e001      	b.n	8009c4e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8009c4e:	697b      	ldr	r3, [r7, #20]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200001a4 	.word	0x200001a4
 8009c5c:	20000184 	.word	0x20000184
 8009c60:	200000c0 	.word	0x200000c0
 8009c64:	20000154 	.word	0x20000154
 8009c68:	200000bc 	.word	0x200000bc
 8009c6c:	20000190 	.word	0x20000190

08009c70 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c78:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <vTaskInternalSetTimeOutState+0x24>)
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009c80:	4b05      	ldr	r3, [pc, #20]	; (8009c98 <vTaskInternalSetTimeOutState+0x28>)
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	605a      	str	r2, [r3, #4]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	20000194 	.word	0x20000194
 8009c98:	20000180 	.word	0x20000180

08009c9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	613b      	str	r3, [r7, #16]
    }
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10a      	bne.n	8009cde <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60fb      	str	r3, [r7, #12]
    }
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8009cde:	f000 fe1b 	bl	800a918 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009ce2:	4b1f      	ldr	r3, [pc, #124]	; (8009d60 <xTaskCheckForTimeOut+0xc4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e026      	b.n	8009d50 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b17      	ldr	r3, [pc, #92]	; (8009d64 <xTaskCheckForTimeOut+0xc8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d00a      	beq.n	8009d24 <xTaskCheckForTimeOut+0x88>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d305      	bcc.n	8009d24 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	e015      	b.n	8009d50 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d20b      	bcs.n	8009d46 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	1ad2      	subs	r2, r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff ff98 	bl	8009c70 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	e004      	b.n	8009d50 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009d50:	f000 fe12 	bl	800a978 <vPortExitCritical>

    return xReturn;
 8009d54:	69fb      	ldr	r3, [r7, #28]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3720      	adds	r7, #32
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000180 	.word	0x20000180
 8009d64:	20000194 	.word	0x20000194

08009d68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009d6c:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <vTaskMissedYield+0x14>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	601a      	str	r2, [r3, #0]
}
 8009d72:	bf00      	nop
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20000190 	.word	0x20000190

08009d80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009d88:	f000 f84c 	bl	8009e24 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d8c:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <prvIdleTask+0x28>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d9f9      	bls.n	8009d88 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <prvIdleTask+0x2c>)
 8009d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009da4:	e7f0      	b.n	8009d88 <prvIdleTask+0x8>
 8009da6:	bf00      	nop
 8009da8:	200000c0 	.word	0x200000c0
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009db6:	2300      	movs	r3, #0
 8009db8:	607b      	str	r3, [r7, #4]
 8009dba:	e00c      	b.n	8009dd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4a10      	ldr	r2, [pc, #64]	; (8009e08 <prvInitialiseTaskLists+0x58>)
 8009dc8:	4413      	add	r3, r2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fca8 	bl	8008720 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	607b      	str	r3, [r7, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d9ef      	bls.n	8009dbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009ddc:	480b      	ldr	r0, [pc, #44]	; (8009e0c <prvInitialiseTaskLists+0x5c>)
 8009dde:	f7fe fc9f 	bl	8008720 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009de2:	480b      	ldr	r0, [pc, #44]	; (8009e10 <prvInitialiseTaskLists+0x60>)
 8009de4:	f7fe fc9c 	bl	8008720 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009de8:	480a      	ldr	r0, [pc, #40]	; (8009e14 <prvInitialiseTaskLists+0x64>)
 8009dea:	f7fe fc99 	bl	8008720 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009dee:	480a      	ldr	r0, [pc, #40]	; (8009e18 <prvInitialiseTaskLists+0x68>)
 8009df0:	f7fe fc96 	bl	8008720 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <prvInitialiseTaskLists+0x6c>)
 8009df6:	4a05      	ldr	r2, [pc, #20]	; (8009e0c <prvInitialiseTaskLists+0x5c>)
 8009df8:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <prvInitialiseTaskLists+0x70>)
 8009dfc:	4a04      	ldr	r2, [pc, #16]	; (8009e10 <prvInitialiseTaskLists+0x60>)
 8009dfe:	601a      	str	r2, [r3, #0]
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	200000c0 	.word	0x200000c0
 8009e0c:	20000124 	.word	0x20000124
 8009e10:	20000138 	.word	0x20000138
 8009e14:	20000154 	.word	0x20000154
 8009e18:	20000168 	.word	0x20000168
 8009e1c:	2000014c 	.word	0x2000014c
 8009e20:	20000150 	.word	0x20000150

08009e24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009e28:	bf00      	nop
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
	...

08009e34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e34:	b480      	push	{r7}
 8009e36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e38:	4b0a      	ldr	r3, [pc, #40]	; (8009e64 <prvResetNextTaskUnblockTime+0x30>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d104      	bne.n	8009e4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009e42:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <prvResetNextTaskUnblockTime+0x34>)
 8009e44:	f04f 32ff 	mov.w	r2, #4294967295
 8009e48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009e4a:	e005      	b.n	8009e58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <prvResetNextTaskUnblockTime+0x30>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a04      	ldr	r2, [pc, #16]	; (8009e68 <prvResetNextTaskUnblockTime+0x34>)
 8009e56:	6013      	str	r3, [r2, #0]
}
 8009e58:	bf00      	nop
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	2000014c 	.word	0x2000014c
 8009e68:	2000019c 	.word	0x2000019c

08009e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009e72:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <xTaskGetSchedulerState+0x34>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	e008      	b.n	8009e92 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e80:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <xTaskGetSchedulerState+0x38>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d102      	bne.n	8009e8e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	e001      	b.n	8009e92 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009e92:	687b      	ldr	r3, [r7, #4]
    }
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	20000188 	.word	0x20000188
 8009ea4:	200001a4 	.word	0x200001a4

08009ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d068      	beq.n	8009f90 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009ebe:	4b37      	ldr	r3, [pc, #220]	; (8009f9c <xTaskPriorityDisinherit+0xf4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d00a      	beq.n	8009ede <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	f383 8811 	msr	BASEPRI, r3
 8009ed0:	f3bf 8f6f 	isb	sy
 8009ed4:	f3bf 8f4f 	dsb	sy
 8009ed8:	60fb      	str	r3, [r7, #12]
    }
 8009eda:	bf00      	nop
 8009edc:	e7fe      	b.n	8009edc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10a      	bne.n	8009efc <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	60bb      	str	r3, [r7, #8]
    }
 8009ef8:	bf00      	nop
 8009efa:	e7fe      	b.n	8009efa <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f00:	1e5a      	subs	r2, r3, #1
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d03e      	beq.n	8009f90 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d13a      	bne.n	8009f90 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fc88 	bl	8008834 <uxListRemove>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	2201      	movs	r2, #1
 8009f30:	fa02 f303 	lsl.w	r3, r2, r3
 8009f34:	43da      	mvns	r2, r3
 8009f36:	4b1a      	ldr	r3, [pc, #104]	; (8009fa0 <xTaskPriorityDisinherit+0xf8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	4a18      	ldr	r2, [pc, #96]	; (8009fa0 <xTaskPriorityDisinherit+0xf8>)
 8009f3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4619      	mov	r1, r3
 8009f44:	204a      	movs	r0, #74	; 0x4a
 8009f46:	f001 fbb9 	bl	800b6bc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	f1c3 0205 	rsb	r2, r3, #5
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f62:	2201      	movs	r2, #1
 8009f64:	409a      	lsls	r2, r3
 8009f66:	4b0e      	ldr	r3, [pc, #56]	; (8009fa0 <xTaskPriorityDisinherit+0xf8>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	4a0c      	ldr	r2, [pc, #48]	; (8009fa0 <xTaskPriorityDisinherit+0xf8>)
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f74:	4613      	mov	r3, r2
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <xTaskPriorityDisinherit+0xfc>)
 8009f7e:	441a      	add	r2, r3
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7fe fbf7 	bl	800877a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009f90:	697b      	ldr	r3, [r7, #20]
    }
 8009f92:	4618      	mov	r0, r3
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	200000bc 	.word	0x200000bc
 8009fa0:	20000184 	.word	0x20000184
 8009fa4:	200000c0 	.word	0x200000c0

08009fa8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8009fb2:	4b32      	ldr	r3, [pc, #200]	; (800a07c <prvAddCurrentTaskToDelayedList+0xd4>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb8:	4b31      	ldr	r3, [pc, #196]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fc38 	bl	8008834 <uxListRemove>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10b      	bne.n	8009fe2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009fca:	4b2d      	ldr	r3, [pc, #180]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd6:	43da      	mvns	r2, r3
 8009fd8:	4b2a      	ldr	r3, [pc, #168]	; (800a084 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	4a29      	ldr	r2, [pc, #164]	; (800a084 <prvAddCurrentTaskToDelayedList+0xdc>)
 8009fe0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe8:	d110      	bne.n	800a00c <prvAddCurrentTaskToDelayedList+0x64>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00d      	beq.n	800a00c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8009ff0:	4b23      	ldr	r3, [pc, #140]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	211b      	movs	r1, #27
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f002 f8fe 	bl	800c1f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ffc:	4b20      	ldr	r3, [pc, #128]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3304      	adds	r3, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4820      	ldr	r0, [pc, #128]	; (800a088 <prvAddCurrentTaskToDelayedList+0xe0>)
 800a006:	f7fe fbb8 	bl	800877a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a00a:	e032      	b.n	800a072 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4413      	add	r3, r2
 800a012:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68ba      	ldr	r2, [r7, #8]
 800a01a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	429a      	cmp	r2, r3
 800a022:	d20f      	bcs.n	800a044 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800a024:	4b16      	ldr	r3, [pc, #88]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2104      	movs	r1, #4
 800a02a:	4618      	mov	r0, r3
 800a02c:	f002 f8e4 	bl	800c1f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a030:	4b16      	ldr	r3, [pc, #88]	; (800a08c <prvAddCurrentTaskToDelayedList+0xe4>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	4b12      	ldr	r3, [pc, #72]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3304      	adds	r3, #4
 800a03a:	4619      	mov	r1, r3
 800a03c:	4610      	mov	r0, r2
 800a03e:	f7fe fbc0 	bl	80087c2 <vListInsert>
}
 800a042:	e016      	b.n	800a072 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2104      	movs	r1, #4
 800a04a:	4618      	mov	r0, r3
 800a04c:	f002 f8d4 	bl	800c1f8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a050:	4b0f      	ldr	r3, [pc, #60]	; (800a090 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	3304      	adds	r3, #4
 800a05a:	4619      	mov	r1, r3
 800a05c:	4610      	mov	r0, r2
 800a05e:	f7fe fbb0 	bl	80087c2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800a062:	4b0c      	ldr	r3, [pc, #48]	; (800a094 <prvAddCurrentTaskToDelayedList+0xec>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	429a      	cmp	r2, r3
 800a06a:	d202      	bcs.n	800a072 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800a06c:	4a09      	ldr	r2, [pc, #36]	; (800a094 <prvAddCurrentTaskToDelayedList+0xec>)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	6013      	str	r3, [r2, #0]
}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000180 	.word	0x20000180
 800a080:	200000bc 	.word	0x200000bc
 800a084:	20000184 	.word	0x20000184
 800a088:	20000168 	.word	0x20000168
 800a08c:	20000150 	.word	0x20000150
 800a090:	2000014c 	.word	0x2000014c
 800a094:	2000019c 	.word	0x2000019c

0800a098 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a0a2:	f000 fad5 	bl	800a650 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a0a6:	4b11      	ldr	r3, [pc, #68]	; (800a0ec <xTimerCreateTimerTask+0x54>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <xTimerCreateTimerTask+0x58>)
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a0bc:	490d      	ldr	r1, [pc, #52]	; (800a0f4 <xTimerCreateTimerTask+0x5c>)
 800a0be:	480e      	ldr	r0, [pc, #56]	; (800a0f8 <xTimerCreateTimerTask+0x60>)
 800a0c0:	f7ff f93c 	bl	800933c <xTaskCreate>
 800a0c4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	603b      	str	r3, [r7, #0]
    }
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a0e2:	687b      	ldr	r3, [r7, #4]
    }
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	200001d8 	.word	0x200001d8
 800a0f0:	200001dc 	.word	0x200001dc
 800a0f4:	0800c7e4 	.word	0x0800c7e4
 800a0f8:	0800a231 	.word	0x0800a231

0800a0fc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	; 0x28
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800a10a:	2300      	movs	r3, #0
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d10a      	bne.n	800a12a <xTimerGenericCommand+0x2e>
        __asm volatile
 800a114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a118:	f383 8811 	msr	BASEPRI, r3
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f3bf 8f4f 	dsb	sy
 800a124:	623b      	str	r3, [r7, #32]
    }
 800a126:	bf00      	nop
 800a128:	e7fe      	b.n	800a128 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800a12a:	4b1a      	ldr	r3, [pc, #104]	; (800a194 <xTimerGenericCommand+0x98>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d02a      	beq.n	800a188 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	2b05      	cmp	r3, #5
 800a142:	dc18      	bgt.n	800a176 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a144:	f7ff fe92 	bl	8009e6c <xTaskGetSchedulerState>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d109      	bne.n	800a162 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a14e:	4b11      	ldr	r3, [pc, #68]	; (800a194 <xTimerGenericCommand+0x98>)
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	f107 0114 	add.w	r1, r7, #20
 800a156:	2300      	movs	r3, #0
 800a158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a15a:	f7fe fc85 	bl	8008a68 <xQueueGenericSend>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24
 800a160:	e012      	b.n	800a188 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a162:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <xTimerGenericCommand+0x98>)
 800a164:	6818      	ldr	r0, [r3, #0]
 800a166:	f107 0114 	add.w	r1, r7, #20
 800a16a:	2300      	movs	r3, #0
 800a16c:	2200      	movs	r2, #0
 800a16e:	f7fe fc7b 	bl	8008a68 <xQueueGenericSend>
 800a172:	6278      	str	r0, [r7, #36]	; 0x24
 800a174:	e008      	b.n	800a188 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a176:	4b07      	ldr	r3, [pc, #28]	; (800a194 <xTimerGenericCommand+0x98>)
 800a178:	6818      	ldr	r0, [r3, #0]
 800a17a:	f107 0114 	add.w	r1, r7, #20
 800a17e:	2300      	movs	r3, #0
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	f7fe fd97 	bl	8008cb4 <xQueueGenericSendFromISR>
 800a186:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800a18a:	4618      	mov	r0, r3
 800a18c:	3728      	adds	r7, #40	; 0x28
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	200001d8 	.word	0x200001d8

0800a198 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a2:	4b22      	ldr	r3, [pc, #136]	; (800a22c <prvProcessExpiredTimer+0x94>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7fe fb3f 	bl	8008834 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d022      	beq.n	800a20a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	699a      	ldr	r2, [r3, #24]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	18d1      	adds	r1, r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	6978      	ldr	r0, [r7, #20]
 800a1d2:	f000 f8d1 	bl	800a378 <prvInsertTimerInActiveList>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d01f      	beq.n	800a21c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1dc:	2300      	movs	r3, #0
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	6978      	ldr	r0, [r7, #20]
 800a1e8:	f7ff ff88 	bl	800a0fc <xTimerGenericCommand>
 800a1ec:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d113      	bne.n	800a21c <prvProcessExpiredTimer+0x84>
        __asm volatile
 800a1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f8:	f383 8811 	msr	BASEPRI, r3
 800a1fc:	f3bf 8f6f 	isb	sy
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	60fb      	str	r3, [r7, #12]
    }
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	b2da      	uxtb	r2, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	6a1b      	ldr	r3, [r3, #32]
 800a220:	6978      	ldr	r0, [r7, #20]
 800a222:	4798      	blx	r3
    }
 800a224:	bf00      	nop
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	200001d0 	.word	0x200001d0

0800a230 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a238:	f107 0308 	add.w	r3, r7, #8
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 f857 	bl	800a2f0 <prvGetNextExpireTime>
 800a242:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4619      	mov	r1, r3
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 f803 	bl	800a254 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a24e:	f000 f8d5 	bl	800a3fc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a252:	e7f1      	b.n	800a238 <prvTimerTask+0x8>

0800a254 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a25e:	f7ff fa6b 	bl	8009738 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a262:	f107 0308 	add.w	r3, r7, #8
 800a266:	4618      	mov	r0, r3
 800a268:	f000 f866 	bl	800a338 <prvSampleTimeNow>
 800a26c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d130      	bne.n	800a2d6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d10a      	bne.n	800a290 <prvProcessTimerOrBlockTask+0x3c>
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d806      	bhi.n	800a290 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a282:	f7ff fa67 	bl	8009754 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a286:	68f9      	ldr	r1, [r7, #12]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ff85 	bl	800a198 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a28e:	e024      	b.n	800a2da <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d008      	beq.n	800a2a8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a296:	4b13      	ldr	r3, [pc, #76]	; (800a2e4 <prvProcessTimerOrBlockTask+0x90>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <prvProcessTimerOrBlockTask+0x50>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <prvProcessTimerOrBlockTask+0x52>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a2a8:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <prvProcessTimerOrBlockTask+0x94>)
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	f7ff f80d 	bl	80092d4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a2ba:	f7ff fa4b 	bl	8009754 <xTaskResumeAll>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10a      	bne.n	800a2da <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a2c4:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <prvProcessTimerOrBlockTask+0x98>)
 800a2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	f3bf 8f6f 	isb	sy
    }
 800a2d4:	e001      	b.n	800a2da <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800a2d6:	f7ff fa3d 	bl	8009754 <xTaskResumeAll>
    }
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200001d4 	.word	0x200001d4
 800a2e8:	200001d8 	.word	0x200001d8
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a2f8:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <prvGetNextExpireTime+0x44>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <prvGetNextExpireTime+0x16>
 800a302:	2201      	movs	r2, #1
 800a304:	e000      	b.n	800a308 <prvGetNextExpireTime+0x18>
 800a306:	2200      	movs	r2, #0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d105      	bne.n	800a320 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a314:	4b07      	ldr	r3, [pc, #28]	; (800a334 <prvGetNextExpireTime+0x44>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	e001      	b.n	800a324 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a324:	68fb      	ldr	r3, [r7, #12]
    }
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	200001d0 	.word	0x200001d0

0800a338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a340:	f7ff faa8 	bl	8009894 <xTaskGetTickCount>
 800a344:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a346:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <prvSampleTimeNow+0x3c>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d205      	bcs.n	800a35c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a350:	f000 f91a 	bl	800a588 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	601a      	str	r2, [r3, #0]
 800a35a:	e002      	b.n	800a362 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a362:	4a04      	ldr	r2, [pc, #16]	; (800a374 <prvSampleTimeNow+0x3c>)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a368:	68fb      	ldr	r3, [r7, #12]
    }
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	200001e0 	.word	0x200001e0

0800a378 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a386:	2300      	movs	r3, #0
 800a388:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d812      	bhi.n	800a3c4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	1ad2      	subs	r2, r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d302      	bcc.n	800a3b2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e01b      	b.n	800a3ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a3b2:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <prvInsertTimerInActiveList+0x7c>)
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	4610      	mov	r0, r2
 800a3be:	f7fe fa00 	bl	80087c2 <vListInsert>
 800a3c2:	e012      	b.n	800a3ea <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d206      	bcs.n	800a3da <prvInsertTimerInActiveList+0x62>
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d302      	bcc.n	800a3da <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e007      	b.n	800a3ea <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3da:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <prvInsertTimerInActiveList+0x80>)
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3304      	adds	r3, #4
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	f7fe f9ec 	bl	80087c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a3ea:	697b      	ldr	r3, [r7, #20]
    }
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200001d4 	.word	0x200001d4
 800a3f8:	200001d0 	.word	0x200001d0

0800a3fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08c      	sub	sp, #48	; 0x30
 800a400:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a402:	e0ae      	b.n	800a562 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	2b00      	cmp	r3, #0
 800a408:	f2c0 80aa 	blt.w	800a560 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	3304      	adds	r3, #4
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fa09 	bl	8008834 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a422:	1d3b      	adds	r3, r7, #4
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff ff87 	bl	800a338 <prvSampleTimeNow>
 800a42a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b09      	cmp	r3, #9
 800a430:	f200 8097 	bhi.w	800a562 <prvProcessReceivedCommands+0x166>
 800a434:	a201      	add	r2, pc, #4	; (adr r2, 800a43c <prvProcessReceivedCommands+0x40>)
 800a436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a43a:	bf00      	nop
 800a43c:	0800a465 	.word	0x0800a465
 800a440:	0800a465 	.word	0x0800a465
 800a444:	0800a465 	.word	0x0800a465
 800a448:	0800a4d9 	.word	0x0800a4d9
 800a44c:	0800a4ed 	.word	0x0800a4ed
 800a450:	0800a537 	.word	0x0800a537
 800a454:	0800a465 	.word	0x0800a465
 800a458:	0800a465 	.word	0x0800a465
 800a45c:	0800a4d9 	.word	0x0800a4d9
 800a460:	0800a4ed 	.word	0x0800a4ed
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	699b      	ldr	r3, [r3, #24]
 800a47c:	18d1      	adds	r1, r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a3a      	ldr	r2, [r7, #32]
 800a482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a484:	f7ff ff78 	bl	800a378 <prvInsertTimerInActiveList>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d069      	beq.n	800a562 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a494:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a49c:	f003 0304 	and.w	r3, r3, #4
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d05e      	beq.n	800a562 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4b6:	f7ff fe21 	bl	800a0fc <xTimerGenericCommand>
 800a4ba:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d14f      	bne.n	800a562 <prvProcessReceivedCommands+0x166>
        __asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	61bb      	str	r3, [r7, #24]
    }
 800a4d4:	bf00      	nop
 800a4d6:	e7fe      	b.n	800a4d6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4de:	f023 0301 	bic.w	r3, r3, #1
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800a4ea:	e03a      	b.n	800a562 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4f2:	f043 0301 	orr.w	r3, r3, #1
 800a4f6:	b2da      	uxtb	r2, r3
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a502:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10a      	bne.n	800a522 <prvProcessReceivedCommands+0x126>
        __asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	f383 8811 	msr	BASEPRI, r3
 800a514:	f3bf 8f6f 	isb	sy
 800a518:	f3bf 8f4f 	dsb	sy
 800a51c:	617b      	str	r3, [r7, #20]
    }
 800a51e:	bf00      	nop
 800a520:	e7fe      	b.n	800a520 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	699a      	ldr	r2, [r3, #24]
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	18d1      	adds	r1, r2, r3
 800a52a:	6a3b      	ldr	r3, [r7, #32]
 800a52c:	6a3a      	ldr	r2, [r7, #32]
 800a52e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a530:	f7ff ff22 	bl	800a378 <prvInsertTimerInActiveList>
                        break;
 800a534:	e015      	b.n	800a562 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a53c:	f003 0302 	and.w	r3, r3, #2
 800a540:	2b00      	cmp	r3, #0
 800a542:	d103      	bne.n	800a54c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800a544:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a546:	f000 fbf1 	bl	800ad2c <vPortFree>
 800a54a:	e00a      	b.n	800a562 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a552:	f023 0301 	bic.w	r3, r3, #1
 800a556:	b2da      	uxtb	r2, r3
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a55e:	e000      	b.n	800a562 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800a560:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a562:	4b08      	ldr	r3, [pc, #32]	; (800a584 <prvProcessReceivedCommands+0x188>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f107 0108 	add.w	r1, r7, #8
 800a56a:	2200      	movs	r2, #0
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fc5f 	bl	8008e30 <xQueueReceive>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	f47f af45 	bne.w	800a404 <prvProcessReceivedCommands+0x8>
        }
    }
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	3728      	adds	r7, #40	; 0x28
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	200001d8 	.word	0x200001d8

0800a588 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a588:	b580      	push	{r7, lr}
 800a58a:	b088      	sub	sp, #32
 800a58c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a58e:	e048      	b.n	800a622 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a590:	4b2d      	ldr	r3, [pc, #180]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a59a:	4b2b      	ldr	r3, [pc, #172]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f7fe f943 	bl	8008834 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02e      	beq.n	800a622 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d90e      	bls.n	800a5f4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68fa      	ldr	r2, [r7, #12]
 800a5e0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5e2:	4b19      	ldr	r3, [pc, #100]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f7fe f8e8 	bl	80087c2 <vListInsert>
 800a5f2:	e016      	b.n	800a622 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	693a      	ldr	r2, [r7, #16]
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7ff fd7c 	bl	800a0fc <xTimerGenericCommand>
 800a604:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10a      	bne.n	800a622 <prvSwitchTimerLists+0x9a>
        __asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	603b      	str	r3, [r7, #0]
    }
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1b1      	bne.n	800a590 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800a62c:	4b06      	ldr	r3, [pc, #24]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <prvSwitchTimerLists+0xc4>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a04      	ldr	r2, [pc, #16]	; (800a648 <prvSwitchTimerLists+0xc0>)
 800a638:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <prvSwitchTimerLists+0xc4>)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	6013      	str	r3, [r2, #0]
    }
 800a640:	bf00      	nop
 800a642:	3718      	adds	r7, #24
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	200001d0 	.word	0x200001d0
 800a64c:	200001d4 	.word	0x200001d4

0800a650 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a654:	f000 f960 	bl	800a918 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a658:	4b12      	ldr	r3, [pc, #72]	; (800a6a4 <prvCheckForValidListAndQueue+0x54>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d11d      	bne.n	800a69c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800a660:	4811      	ldr	r0, [pc, #68]	; (800a6a8 <prvCheckForValidListAndQueue+0x58>)
 800a662:	f7fe f85d 	bl	8008720 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a666:	4811      	ldr	r0, [pc, #68]	; (800a6ac <prvCheckForValidListAndQueue+0x5c>)
 800a668:	f7fe f85a 	bl	8008720 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a66c:	4b10      	ldr	r3, [pc, #64]	; (800a6b0 <prvCheckForValidListAndQueue+0x60>)
 800a66e:	4a0e      	ldr	r2, [pc, #56]	; (800a6a8 <prvCheckForValidListAndQueue+0x58>)
 800a670:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <prvCheckForValidListAndQueue+0x64>)
 800a674:	4a0d      	ldr	r2, [pc, #52]	; (800a6ac <prvCheckForValidListAndQueue+0x5c>)
 800a676:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800a678:	2200      	movs	r2, #0
 800a67a:	210c      	movs	r1, #12
 800a67c:	200a      	movs	r0, #10
 800a67e:	f7fe f96b 	bl	8008958 <xQueueGenericCreate>
 800a682:	4603      	mov	r3, r0
 800a684:	4a07      	ldr	r2, [pc, #28]	; (800a6a4 <prvCheckForValidListAndQueue+0x54>)
 800a686:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <prvCheckForValidListAndQueue+0x54>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a690:	4b04      	ldr	r3, [pc, #16]	; (800a6a4 <prvCheckForValidListAndQueue+0x54>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4908      	ldr	r1, [pc, #32]	; (800a6b8 <prvCheckForValidListAndQueue+0x68>)
 800a696:	4618      	mov	r0, r3
 800a698:	f7fe fdea 	bl	8009270 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a69c:	f000 f96c 	bl	800a978 <vPortExitCritical>
    }
 800a6a0:	bf00      	nop
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	200001d8 	.word	0x200001d8
 800a6a8:	200001a8 	.word	0x200001a8
 800a6ac:	200001bc 	.word	0x200001bc
 800a6b0:	200001d0 	.word	0x200001d0
 800a6b4:	200001d4 	.word	0x200001d4
 800a6b8:	0800c7ec 	.word	0x0800c7ec

0800a6bc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f023 0201 	bic.w	r2, r3, #1
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3b04      	subs	r3, #4
 800a6ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800a6ec:	4a0c      	ldr	r2, [pc, #48]	; (800a720 <pxPortInitialiseStack+0x64>)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	3b14      	subs	r3, #20
 800a6f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3b04      	subs	r3, #4
 800a702:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f06f 0202 	mvn.w	r2, #2
 800a70a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3b20      	subs	r3, #32
 800a710:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800a712:	68fb      	ldr	r3, [r7, #12]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	0800a725 	.word	0x0800a725

0800a724 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800a72e:	4b12      	ldr	r3, [pc, #72]	; (800a778 <prvTaskExitError+0x54>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a736:	d00a      	beq.n	800a74e <prvTaskExitError+0x2a>
        __asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	60fb      	str	r3, [r7, #12]
    }
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <prvTaskExitError+0x28>
        __asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	60bb      	str	r3, [r7, #8]
    }
 800a760:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800a762:	bf00      	nop
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0fc      	beq.n	800a764 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	3714      	adds	r7, #20
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	20000030 	.word	0x20000030
 800a77c:	00000000 	.word	0x00000000

0800a780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800a780:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <pxCurrentTCBConst2>)
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	6808      	ldr	r0, [r1, #0]
 800a786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78a:	f380 8809 	msr	PSP, r0
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8811 	msr	BASEPRI, r0
 800a79a:	4770      	bx	lr
 800a79c:	f3af 8000 	nop.w

0800a7a0 <pxCurrentTCBConst2>:
 800a7a0:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop

0800a7a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800a7a8:	4808      	ldr	r0, [pc, #32]	; (800a7cc <prvPortStartFirstTask+0x24>)
 800a7aa:	6800      	ldr	r0, [r0, #0]
 800a7ac:	6800      	ldr	r0, [r0, #0]
 800a7ae:	f380 8808 	msr	MSP, r0
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8814 	msr	CONTROL, r0
 800a7ba:	b662      	cpsie	i
 800a7bc:	b661      	cpsie	f
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	df00      	svc	0
 800a7c8:	bf00      	nop
 800a7ca:	0000      	.short	0x0000
 800a7cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop

0800a7d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7da:	4b46      	ldr	r3, [pc, #280]	; (800a8f4 <xPortStartScheduler+0x120>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a46      	ldr	r2, [pc, #280]	; (800a8f8 <xPortStartScheduler+0x124>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10a      	bne.n	800a7fa <xPortStartScheduler+0x26>
        __asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	613b      	str	r3, [r7, #16]
    }
 800a7f6:	bf00      	nop
 800a7f8:	e7fe      	b.n	800a7f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7fa:	4b3e      	ldr	r3, [pc, #248]	; (800a8f4 <xPortStartScheduler+0x120>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a3f      	ldr	r2, [pc, #252]	; (800a8fc <xPortStartScheduler+0x128>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d10a      	bne.n	800a81a <xPortStartScheduler+0x46>
        __asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60fb      	str	r3, [r7, #12]
    }
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a81a:	4b39      	ldr	r3, [pc, #228]	; (800a900 <xPortStartScheduler+0x12c>)
 800a81c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	22ff      	movs	r2, #255	; 0xff
 800a82a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <xPortStartScheduler+0x130>)
 800a840:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a842:	4b31      	ldr	r3, [pc, #196]	; (800a908 <xPortStartScheduler+0x134>)
 800a844:	2207      	movs	r2, #7
 800a846:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a848:	e009      	b.n	800a85e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800a84a:	4b2f      	ldr	r3, [pc, #188]	; (800a908 <xPortStartScheduler+0x134>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3b01      	subs	r3, #1
 800a850:	4a2d      	ldr	r2, [pc, #180]	; (800a908 <xPortStartScheduler+0x134>)
 800a852:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a854:	78fb      	ldrb	r3, [r7, #3]
 800a856:	b2db      	uxtb	r3, r3
 800a858:	005b      	lsls	r3, r3, #1
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	b2db      	uxtb	r3, r3
 800a862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d0ef      	beq.n	800a84a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a86a:	4b27      	ldr	r3, [pc, #156]	; (800a908 <xPortStartScheduler+0x134>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1c3 0307 	rsb	r3, r3, #7
 800a872:	2b04      	cmp	r3, #4
 800a874:	d00a      	beq.n	800a88c <xPortStartScheduler+0xb8>
        __asm volatile
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	60bb      	str	r3, [r7, #8]
    }
 800a888:	bf00      	nop
 800a88a:	e7fe      	b.n	800a88a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a88c:	4b1e      	ldr	r3, [pc, #120]	; (800a908 <xPortStartScheduler+0x134>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	4a1d      	ldr	r2, [pc, #116]	; (800a908 <xPortStartScheduler+0x134>)
 800a894:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a896:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <xPortStartScheduler+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a89e:	4a1a      	ldr	r2, [pc, #104]	; (800a908 <xPortStartScheduler+0x134>)
 800a8a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	b2da      	uxtb	r2, r3
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800a8aa:	4b18      	ldr	r3, [pc, #96]	; (800a90c <xPortStartScheduler+0x138>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a17      	ldr	r2, [pc, #92]	; (800a90c <xPortStartScheduler+0x138>)
 800a8b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8b4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800a8b6:	4b15      	ldr	r3, [pc, #84]	; (800a90c <xPortStartScheduler+0x138>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a14      	ldr	r2, [pc, #80]	; (800a90c <xPortStartScheduler+0x138>)
 800a8bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8c0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800a8c2:	f000 f8e3 	bl	800aa8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800a8c6:	4b12      	ldr	r3, [pc, #72]	; (800a910 <xPortStartScheduler+0x13c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800a8cc:	f000 f902 	bl	800aad4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8d0:	4b10      	ldr	r3, [pc, #64]	; (800a914 <xPortStartScheduler+0x140>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a0f      	ldr	r2, [pc, #60]	; (800a914 <xPortStartScheduler+0x140>)
 800a8d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8da:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800a8dc:	f7ff ff64 	bl	800a7a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800a8e0:	f7ff f8a4 	bl	8009a2c <vTaskSwitchContext>
    prvTaskExitError();
 800a8e4:	f7ff ff1e 	bl	800a724 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	e000ed00 	.word	0xe000ed00
 800a8f8:	410fc271 	.word	0x410fc271
 800a8fc:	410fc270 	.word	0x410fc270
 800a900:	e000e400 	.word	0xe000e400
 800a904:	200001e4 	.word	0x200001e4
 800a908:	200001e8 	.word	0x200001e8
 800a90c:	e000ed20 	.word	0xe000ed20
 800a910:	20000030 	.word	0x20000030
 800a914:	e000ef34 	.word	0xe000ef34

0800a918 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
        __asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
    }
 800a930:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <vPortEnterCritical+0x58>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	4a0d      	ldr	r2, [pc, #52]	; (800a970 <vPortEnterCritical+0x58>)
 800a93a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800a93c:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <vPortEnterCritical+0x58>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d10f      	bne.n	800a964 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a944:	4b0b      	ldr	r3, [pc, #44]	; (800a974 <vPortEnterCritical+0x5c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <vPortEnterCritical+0x4c>
        __asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a952:	f383 8811 	msr	BASEPRI, r3
 800a956:	f3bf 8f6f 	isb	sy
 800a95a:	f3bf 8f4f 	dsb	sy
 800a95e:	603b      	str	r3, [r7, #0]
    }
 800a960:	bf00      	nop
 800a962:	e7fe      	b.n	800a962 <vPortEnterCritical+0x4a>
    }
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr
 800a970:	20000030 	.word	0x20000030
 800a974:	e000ed04 	.word	0xe000ed04

0800a978 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800a97e:	4b12      	ldr	r3, [pc, #72]	; (800a9c8 <vPortExitCritical+0x50>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10a      	bne.n	800a99c <vPortExitCritical+0x24>
        __asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	607b      	str	r3, [r7, #4]
    }
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <vPortExitCritical+0x50>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	4a09      	ldr	r2, [pc, #36]	; (800a9c8 <vPortExitCritical+0x50>)
 800a9a4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800a9a6:	4b08      	ldr	r3, [pc, #32]	; (800a9c8 <vPortExitCritical+0x50>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <vPortExitCritical+0x42>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	603b      	str	r3, [r7, #0]
        __asm volatile
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	f383 8811 	msr	BASEPRI, r3
    }
 800a9b8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20000030 	.word	0x20000030
 800a9cc:	00000000 	.word	0x00000000

0800a9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800a9d0:	f3ef 8009 	mrs	r0, PSP
 800a9d4:	f3bf 8f6f 	isb	sy
 800a9d8:	4b15      	ldr	r3, [pc, #84]	; (800aa30 <pxCurrentTCBConst>)
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	f01e 0f10 	tst.w	lr, #16
 800a9e0:	bf08      	it	eq
 800a9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ea:	6010      	str	r0, [r2, #0]
 800a9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9f4:	f380 8811 	msr	BASEPRI, r0
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f7ff f814 	bl	8009a2c <vTaskSwitchContext>
 800aa04:	f04f 0000 	mov.w	r0, #0
 800aa08:	f380 8811 	msr	BASEPRI, r0
 800aa0c:	bc09      	pop	{r0, r3}
 800aa0e:	6819      	ldr	r1, [r3, #0]
 800aa10:	6808      	ldr	r0, [r1, #0]
 800aa12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa16:	f01e 0f10 	tst.w	lr, #16
 800aa1a:	bf08      	it	eq
 800aa1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa20:	f380 8809 	msr	PSP, r0
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst>:
 800aa30:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
        __asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
    }
 800aa50:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800aa52:	f001 fa75 	bl	800bf40 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800aa56:	f7fe ff2d 	bl	80098b4 <xTaskIncrementTick>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800aa60:	f001 facc 	bl	800bffc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <SysTick_Handler+0x50>)
 800aa66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	e001      	b.n	800aa72 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800aa6e:	f001 faa9 	bl	800bfc4 <SEGGER_SYSVIEW_RecordExitISR>
 800aa72:	2300      	movs	r3, #0
 800aa74:	603b      	str	r3, [r7, #0]
        __asm volatile
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	f383 8811 	msr	BASEPRI, r3
    }
 800aa7c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	e000ed04 	.word	0xe000ed04

0800aa8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa90:	4b0b      	ldr	r3, [pc, #44]	; (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa96:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <vPortSetupTimerInterrupt+0x38>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <vPortSetupTimerInterrupt+0x3c>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a0a      	ldr	r2, [pc, #40]	; (800aacc <vPortSetupTimerInterrupt+0x40>)
 800aaa2:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <vPortSetupTimerInterrupt+0x44>)
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aaae:	4b04      	ldr	r3, [pc, #16]	; (800aac0 <vPortSetupTimerInterrupt+0x34>)
 800aab0:	2207      	movs	r2, #7
 800aab2:	601a      	str	r2, [r3, #0]
}
 800aab4:	bf00      	nop
 800aab6:	46bd      	mov	sp, r7
 800aab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop
 800aac0:	e000e010 	.word	0xe000e010
 800aac4:	e000e018 	.word	0xe000e018
 800aac8:	20000000 	.word	0x20000000
 800aacc:	10624dd3 	.word	0x10624dd3
 800aad0:	e000e014 	.word	0xe000e014

0800aad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800aad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aae4 <vPortEnableVFP+0x10>
 800aad8:	6801      	ldr	r1, [r0, #0]
 800aada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aade:	6001      	str	r1, [r0, #0]
 800aae0:	4770      	bx	lr
 800aae2:	0000      	.short	0x0000
 800aae4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop

0800aaec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800aaf2:	f3ef 8305 	mrs	r3, IPSR
 800aaf6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b0f      	cmp	r3, #15
 800aafc:	d914      	bls.n	800ab28 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aafe:	4a17      	ldr	r2, [pc, #92]	; (800ab5c <vPortValidateInterruptPriority+0x70>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4413      	add	r3, r2
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab08:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <vPortValidateInterruptPriority+0x74>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	7afa      	ldrb	r2, [r7, #11]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d20a      	bcs.n	800ab28 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	607b      	str	r3, [r7, #4]
    }
 800ab24:	bf00      	nop
 800ab26:	e7fe      	b.n	800ab26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab28:	4b0e      	ldr	r3, [pc, #56]	; (800ab64 <vPortValidateInterruptPriority+0x78>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab30:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <vPortValidateInterruptPriority+0x7c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d90a      	bls.n	800ab4e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	603b      	str	r3, [r7, #0]
    }
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <vPortValidateInterruptPriority+0x60>
    }
 800ab4e:	bf00      	nop
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	e000e3f0 	.word	0xe000e3f0
 800ab60:	200001e4 	.word	0x200001e4
 800ab64:	e000ed0c 	.word	0xe000ed0c
 800ab68:	200001e8 	.word	0x200001e8

0800ab6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	; 0x28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800ab78:	f7fe fdde 	bl	8009738 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800ab7c:	4b65      	ldr	r3, [pc, #404]	; (800ad14 <pvPortMalloc+0x1a8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ab84:	f000 f934 	bl	800adf0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab88:	4b63      	ldr	r3, [pc, #396]	; (800ad18 <pvPortMalloc+0x1ac>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4013      	ands	r3, r2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f040 80a7 	bne.w	800ace4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d02d      	beq.n	800abf8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800ab9c:	2208      	movs	r2, #8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d227      	bcs.n	800abf8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800aba8:	2208      	movs	r2, #8
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f003 0307 	and.w	r3, r3, #7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d021      	beq.n	800abfe <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f023 0307 	bic.w	r3, r3, #7
 800abc0:	3308      	adds	r3, #8
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d214      	bcs.n	800abf2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f023 0307 	bic.w	r3, r3, #7
 800abce:	3308      	adds	r3, #8
 800abd0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f003 0307 	and.w	r3, r3, #7
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d010      	beq.n	800abfe <pvPortMalloc+0x92>
        __asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	617b      	str	r3, [r7, #20]
    }
 800abee:	bf00      	nop
 800abf0:	e7fe      	b.n	800abf0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abf6:	e002      	b.n	800abfe <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	607b      	str	r3, [r7, #4]
 800abfc:	e000      	b.n	800ac00 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800abfe:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d06e      	beq.n	800ace4 <pvPortMalloc+0x178>
 800ac06:	4b45      	ldr	r3, [pc, #276]	; (800ad1c <pvPortMalloc+0x1b0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d869      	bhi.n	800ace4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800ac10:	4b43      	ldr	r3, [pc, #268]	; (800ad20 <pvPortMalloc+0x1b4>)
 800ac12:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800ac14:	4b42      	ldr	r3, [pc, #264]	; (800ad20 <pvPortMalloc+0x1b4>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac1a:	e004      	b.n	800ac26 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d903      	bls.n	800ac38 <pvPortMalloc+0xcc>
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1f1      	bne.n	800ac1c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ac38:	4b36      	ldr	r3, [pc, #216]	; (800ad14 <pvPortMalloc+0x1a8>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d050      	beq.n	800ace4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ac42:	6a3b      	ldr	r3, [r7, #32]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2208      	movs	r2, #8
 800ac48:	4413      	add	r3, r2
 800ac4a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	1ad2      	subs	r2, r2, r3
 800ac5c:	2308      	movs	r3, #8
 800ac5e:	005b      	lsls	r3, r3, #1
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d91f      	bls.n	800aca4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4413      	add	r3, r2
 800ac6a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	f003 0307 	and.w	r3, r3, #7
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00a      	beq.n	800ac8c <pvPortMalloc+0x120>
        __asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	613b      	str	r3, [r7, #16]
    }
 800ac88:	bf00      	nop
 800ac8a:	e7fe      	b.n	800ac8a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	685a      	ldr	r2, [r3, #4]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac9e:	69b8      	ldr	r0, [r7, #24]
 800aca0:	f000 f908 	bl	800aeb4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aca4:	4b1d      	ldr	r3, [pc, #116]	; (800ad1c <pvPortMalloc+0x1b0>)
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	4a1b      	ldr	r2, [pc, #108]	; (800ad1c <pvPortMalloc+0x1b0>)
 800acb0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800acb2:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <pvPortMalloc+0x1b0>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b1b      	ldr	r3, [pc, #108]	; (800ad24 <pvPortMalloc+0x1b8>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d203      	bcs.n	800acc6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800acbe:	4b17      	ldr	r3, [pc, #92]	; (800ad1c <pvPortMalloc+0x1b0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a18      	ldr	r2, [pc, #96]	; (800ad24 <pvPortMalloc+0x1b8>)
 800acc4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800acc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	4b13      	ldr	r3, [pc, #76]	; (800ad18 <pvPortMalloc+0x1ac>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	431a      	orrs	r2, r3
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <pvPortMalloc+0x1bc>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	4a11      	ldr	r2, [pc, #68]	; (800ad28 <pvPortMalloc+0x1bc>)
 800ace2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ace4:	f7fe fd36 	bl	8009754 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	f003 0307 	and.w	r3, r3, #7
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <pvPortMalloc+0x19c>
        __asm volatile
 800acf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf6:	f383 8811 	msr	BASEPRI, r3
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	60fb      	str	r3, [r7, #12]
    }
 800ad04:	bf00      	nop
 800ad06:	e7fe      	b.n	800ad06 <pvPortMalloc+0x19a>
    return pvReturn;
 800ad08:	69fb      	ldr	r3, [r7, #28]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3728      	adds	r7, #40	; 0x28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	20012df4 	.word	0x20012df4
 800ad18:	20012e08 	.word	0x20012e08
 800ad1c:	20012df8 	.word	0x20012df8
 800ad20:	20012dec 	.word	0x20012dec
 800ad24:	20012dfc 	.word	0x20012dfc
 800ad28:	20012e00 	.word	0x20012e00

0800ad2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d04d      	beq.n	800adda <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ad3e:	2308      	movs	r3, #8
 800ad40:	425b      	negs	r3, r3
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	4413      	add	r3, r2
 800ad46:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	685a      	ldr	r2, [r3, #4]
 800ad50:	4b24      	ldr	r3, [pc, #144]	; (800ade4 <vPortFree+0xb8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4013      	ands	r3, r2
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <vPortFree+0x44>
        __asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	60fb      	str	r3, [r7, #12]
    }
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00a      	beq.n	800ad8e <vPortFree+0x62>
        __asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	60bb      	str	r3, [r7, #8]
    }
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	685a      	ldr	r2, [r3, #4]
 800ad92:	4b14      	ldr	r3, [pc, #80]	; (800ade4 <vPortFree+0xb8>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4013      	ands	r3, r2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01e      	beq.n	800adda <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11a      	bne.n	800adda <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	4b0e      	ldr	r3, [pc, #56]	; (800ade4 <vPortFree+0xb8>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	43db      	mvns	r3, r3
 800adae:	401a      	ands	r2, r3
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800adb4:	f7fe fcc0 	bl	8009738 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685a      	ldr	r2, [r3, #4]
 800adbc:	4b0a      	ldr	r3, [pc, #40]	; (800ade8 <vPortFree+0xbc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4413      	add	r3, r2
 800adc2:	4a09      	ldr	r2, [pc, #36]	; (800ade8 <vPortFree+0xbc>)
 800adc4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f000 f874 	bl	800aeb4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800adcc:	4b07      	ldr	r3, [pc, #28]	; (800adec <vPortFree+0xc0>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	3301      	adds	r3, #1
 800add2:	4a06      	ldr	r2, [pc, #24]	; (800adec <vPortFree+0xc0>)
 800add4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800add6:	f7fe fcbd 	bl	8009754 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800adda:	bf00      	nop
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20012e08 	.word	0x20012e08
 800ade8:	20012df8 	.word	0x20012df8
 800adec:	20012e04 	.word	0x20012e04

0800adf0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adf6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800adfa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800adfc:	4b27      	ldr	r3, [pc, #156]	; (800ae9c <prvHeapInit+0xac>)
 800adfe:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3307      	adds	r3, #7
 800ae0e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0307 	bic.w	r3, r3, #7
 800ae16:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	4a1f      	ldr	r2, [pc, #124]	; (800ae9c <prvHeapInit+0xac>)
 800ae20:	4413      	add	r3, r2
 800ae22:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ae28:	4a1d      	ldr	r2, [pc, #116]	; (800aea0 <prvHeapInit+0xb0>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ae2e:	4b1c      	ldr	r3, [pc, #112]	; (800aea0 <prvHeapInit+0xb0>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	4413      	add	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a15      	ldr	r2, [pc, #84]	; (800aea4 <prvHeapInit+0xb4>)
 800ae50:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ae52:	4b14      	ldr	r3, [pc, #80]	; (800aea4 <prvHeapInit+0xb4>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ae5a:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <prvHeapInit+0xb4>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <prvHeapInit+0xb4>)
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	4a0a      	ldr	r2, [pc, #40]	; (800aea8 <prvHeapInit+0xb8>)
 800ae7e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	4a09      	ldr	r2, [pc, #36]	; (800aeac <prvHeapInit+0xbc>)
 800ae86:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae88:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <prvHeapInit+0xc0>)
 800ae8a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae8e:	601a      	str	r2, [r3, #0]
}
 800ae90:	bf00      	nop
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	200001ec 	.word	0x200001ec
 800aea0:	20012dec 	.word	0x20012dec
 800aea4:	20012df4 	.word	0x20012df4
 800aea8:	20012dfc 	.word	0x20012dfc
 800aeac:	20012df8 	.word	0x20012df8
 800aeb0:	20012e08 	.word	0x20012e08

0800aeb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aebc:	4b28      	ldr	r3, [pc, #160]	; (800af60 <prvInsertBlockIntoFreeList+0xac>)
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	e002      	b.n	800aec8 <prvInsertBlockIntoFreeList+0x14>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d8f7      	bhi.n	800aec2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	68ba      	ldr	r2, [r7, #8]
 800aedc:	4413      	add	r3, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d108      	bne.n	800aef6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	685a      	ldr	r2, [r3, #4]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	441a      	add	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	429a      	cmp	r2, r3
 800af08:	d118      	bne.n	800af3c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	4b15      	ldr	r3, [pc, #84]	; (800af64 <prvInsertBlockIntoFreeList+0xb0>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d00d      	beq.n	800af32 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	441a      	add	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	601a      	str	r2, [r3, #0]
 800af30:	e008      	b.n	800af44 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <prvInsertBlockIntoFreeList+0xb0>)
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	601a      	str	r2, [r3, #0]
 800af3a:	e003      	b.n	800af44 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d002      	beq.n	800af52 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20012dec 	.word	0x20012dec
 800af64:	20012df4 	.word	0x20012df4

0800af68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800af76:	2205      	movs	r2, #5
 800af78:	492b      	ldr	r1, [pc, #172]	; (800b028 <SYSVIEW_AddTask+0xc0>)
 800af7a:	68b8      	ldr	r0, [r7, #8]
 800af7c:	f001 fb1e 	bl	800c5bc <memcmp>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d04b      	beq.n	800b01e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800af86:	4b29      	ldr	r3, [pc, #164]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b07      	cmp	r3, #7
 800af8c:	d903      	bls.n	800af96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800af8e:	4828      	ldr	r0, [pc, #160]	; (800b030 <SYSVIEW_AddTask+0xc8>)
 800af90:	f001 fa7e 	bl	800c490 <SEGGER_SYSVIEW_Warn>
    return;
 800af94:	e044      	b.n	800b020 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800af96:	4b25      	ldr	r3, [pc, #148]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4926      	ldr	r1, [pc, #152]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800afaa:	4b20      	ldr	r3, [pc, #128]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4921      	ldr	r1, [pc, #132]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afb0:	4613      	mov	r3, r2
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	4413      	add	r3, r2
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	440b      	add	r3, r1
 800afba:	3304      	adds	r3, #4
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800afc0:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	491b      	ldr	r1, [pc, #108]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3308      	adds	r3, #8
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800afd6:	4b15      	ldr	r3, [pc, #84]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	4916      	ldr	r1, [pc, #88]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800afdc:	4613      	mov	r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	330c      	adds	r3, #12
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	4910      	ldr	r1, [pc, #64]	; (800b034 <SYSVIEW_AddTask+0xcc>)
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	3310      	adds	r3, #16
 800affe:	69ba      	ldr	r2, [r7, #24]
 800b000:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	3301      	adds	r3, #1
 800b008:	4a08      	ldr	r2, [pc, #32]	; (800b02c <SYSVIEW_AddTask+0xc4>)
 800b00a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	9300      	str	r3, [sp, #0]
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f000 f80e 	bl	800b038 <SYSVIEW_SendTaskInfo>
 800b01c:	e000      	b.n	800b020 <SYSVIEW_AddTask+0xb8>
    return;
 800b01e:	bf00      	nop

}
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	0800c7f4 	.word	0x0800c7f4
 800b02c:	20012eac 	.word	0x20012eac
 800b030:	0800c7fc 	.word	0x0800c7fc
 800b034:	20012e0c 	.word	0x20012e0c

0800b038 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800b038:	b580      	push	{r7, lr}
 800b03a:	b08a      	sub	sp, #40	; 0x28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800b046:	f107 0314 	add.w	r3, r7, #20
 800b04a:	2214      	movs	r2, #20
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f001 fad0 	bl	800c5f4 <memset>
  TaskInfo.TaskID     = TaskID;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800b068:	f107 0314 	add.w	r3, r7, #20
 800b06c:	4618      	mov	r0, r3
 800b06e:	f000 fe3d 	bl	800bcec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800b072:	bf00      	nop
 800b074:	3728      	adds	r7, #40	; 0x28
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800b082:	4b24      	ldr	r3, [pc, #144]	; (800b114 <_DoInit+0x98>)
 800b084:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2203      	movs	r2, #3
 800b08a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2203      	movs	r2, #3
 800b090:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a20      	ldr	r2, [pc, #128]	; (800b118 <_DoInit+0x9c>)
 800b096:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a20      	ldr	r2, [pc, #128]	; (800b11c <_DoInit+0xa0>)
 800b09c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a17      	ldr	r2, [pc, #92]	; (800b118 <_DoInit+0x9c>)
 800b0bc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a17      	ldr	r2, [pc, #92]	; (800b120 <_DoInit+0xa4>)
 800b0c2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2210      	movs	r2, #16
 800b0c8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3307      	adds	r3, #7
 800b0e0:	4a10      	ldr	r2, [pc, #64]	; (800b124 <_DoInit+0xa8>)
 800b0e2:	6810      	ldr	r0, [r2, #0]
 800b0e4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b0e6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a0e      	ldr	r2, [pc, #56]	; (800b128 <_DoInit+0xac>)
 800b0ee:	6810      	ldr	r0, [r2, #0]
 800b0f0:	6018      	str	r0, [r3, #0]
 800b0f2:	8891      	ldrh	r1, [r2, #4]
 800b0f4:	7992      	ldrb	r2, [r2, #6]
 800b0f6:	8099      	strh	r1, [r3, #4]
 800b0f8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b0fa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2220      	movs	r2, #32
 800b102:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800b104:	f3bf 8f5f 	dmb	sy
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr
 800b114:	20013c88 	.word	0x20013c88
 800b118:	0800c84c 	.word	0x0800c84c
 800b11c:	20012eb0 	.word	0x20012eb0
 800b120:	200132b0 	.word	0x200132b0
 800b124:	0800c858 	.word	0x0800c858
 800b128:	0800c85c 	.word	0x0800c85c

0800b12c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08c      	sub	sp, #48	; 0x30
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800b138:	4b3e      	ldr	r3, [pc, #248]	; (800b234 <SEGGER_RTT_ReadNoLock+0x108>)
 800b13a:	623b      	str	r3, [r7, #32]
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	b2db      	uxtb	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <SEGGER_RTT_ReadNoLock+0x1e>
 800b146:	f7ff ff99 	bl	800b07c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4613      	mov	r3, r2
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	4413      	add	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	3360      	adds	r3, #96	; 0x60
 800b156:	4a37      	ldr	r2, [pc, #220]	; (800b234 <SEGGER_RTT_ReadNoLock+0x108>)
 800b158:	4413      	add	r3, r2
 800b15a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800b16c:	2300      	movs	r3, #0
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800b170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	429a      	cmp	r2, r3
 800b176:	d92b      	bls.n	800b1d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	689a      	ldr	r2, [r3, #8]
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	1ad3      	subs	r3, r2, r3
 800b180:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4293      	cmp	r3, r2
 800b188:	bf28      	it	cs
 800b18a:	4613      	movcs	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	4413      	add	r3, r2
 800b196:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	6939      	ldr	r1, [r7, #16]
 800b19c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b19e:	f001 fa1b 	bl	800c5d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800b1a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	4413      	add	r3, r2
 800b1c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d101      	bne.n	800b1d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800b1d8:	697a      	ldr	r2, [r7, #20]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	bf28      	it	cs
 800b1e0:	4613      	movcs	r3, r2
 800b1e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d019      	beq.n	800b21e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	4413      	add	r3, r2
 800b1f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	6939      	ldr	r1, [r7, #16]
 800b1f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1fa:	f001 f9ed 	bl	800c5d8 <memcpy>
    NumBytesRead += NumBytesRem;
 800b1fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	4413      	add	r3, r2
 800b204:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800b206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	4413      	add	r3, r2
 800b20c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800b216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	4413      	add	r3, r2
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b228:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3730      	adds	r7, #48	; 0x30
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20013c88 	.word	0x20013c88

0800b238 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b248:	e002      	b.n	800b250 <_EncodeStr+0x18>
    Len++;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	3301      	adds	r3, #1
 800b24e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	4413      	add	r3, r2
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1f6      	bne.n	800b24a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	429a      	cmp	r2, r3
 800b262:	d901      	bls.n	800b268 <_EncodeStr+0x30>
    Len = Limit;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2bfe      	cmp	r3, #254	; 0xfe
 800b26c:	d806      	bhi.n	800b27c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1c5a      	adds	r2, r3, #1
 800b272:	60fa      	str	r2, [r7, #12]
 800b274:	693a      	ldr	r2, [r7, #16]
 800b276:	b2d2      	uxtb	r2, r2
 800b278:	701a      	strb	r2, [r3, #0]
 800b27a:	e011      	b.n	800b2a0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	60fa      	str	r2, [r7, #12]
 800b282:	22ff      	movs	r2, #255	; 0xff
 800b284:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	1c5a      	adds	r2, r3, #1
 800b28a:	60fa      	str	r2, [r7, #12]
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	b2d2      	uxtb	r2, r2
 800b290:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	0a19      	lsrs	r1, r3, #8
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	60fa      	str	r2, [r7, #12]
 800b29c:	b2ca      	uxtb	r2, r1
 800b29e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b2a4:	e00a      	b.n	800b2bc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	1c53      	adds	r3, r2, #1
 800b2aa:	60bb      	str	r3, [r7, #8]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1c59      	adds	r1, r3, #1
 800b2b0:	60f9      	str	r1, [r7, #12]
 800b2b2:	7812      	ldrb	r2, [r2, #0]
 800b2b4:	701a      	strb	r2, [r3, #0]
    n++;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d3f0      	bcc.n	800b2a6 <_EncodeStr+0x6e>
  }
  return pPayload;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	371c      	adds	r7, #28
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800b2d2:	b480      	push	{r7}
 800b2d4:	b083      	sub	sp, #12
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	3304      	adds	r3, #4
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
	...

0800b2ec <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b2f2:	4b36      	ldr	r3, [pc, #216]	; (800b3cc <_HandleIncomingPacket+0xe0>)
 800b2f4:	7e1b      	ldrb	r3, [r3, #24]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	1cfb      	adds	r3, r7, #3
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f7ff ff15 	bl	800b12c <SEGGER_RTT_ReadNoLock>
 800b302:	4603      	mov	r3, r0
 800b304:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dd54      	ble.n	800b3b6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800b30c:	78fb      	ldrb	r3, [r7, #3]
 800b30e:	2b80      	cmp	r3, #128	; 0x80
 800b310:	d032      	beq.n	800b378 <_HandleIncomingPacket+0x8c>
 800b312:	2b80      	cmp	r3, #128	; 0x80
 800b314:	dc42      	bgt.n	800b39c <_HandleIncomingPacket+0xb0>
 800b316:	2b07      	cmp	r3, #7
 800b318:	dc16      	bgt.n	800b348 <_HandleIncomingPacket+0x5c>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd3e      	ble.n	800b39c <_HandleIncomingPacket+0xb0>
 800b31e:	3b01      	subs	r3, #1
 800b320:	2b06      	cmp	r3, #6
 800b322:	d83b      	bhi.n	800b39c <_HandleIncomingPacket+0xb0>
 800b324:	a201      	add	r2, pc, #4	; (adr r2, 800b32c <_HandleIncomingPacket+0x40>)
 800b326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32a:	bf00      	nop
 800b32c:	0800b34f 	.word	0x0800b34f
 800b330:	0800b355 	.word	0x0800b355
 800b334:	0800b35b 	.word	0x0800b35b
 800b338:	0800b361 	.word	0x0800b361
 800b33c:	0800b367 	.word	0x0800b367
 800b340:	0800b36d 	.word	0x0800b36d
 800b344:	0800b373 	.word	0x0800b373
 800b348:	2b7f      	cmp	r3, #127	; 0x7f
 800b34a:	d036      	beq.n	800b3ba <_HandleIncomingPacket+0xce>
 800b34c:	e026      	b.n	800b39c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800b34e:	f000 fb53 	bl	800b9f8 <SEGGER_SYSVIEW_Start>
      break;
 800b352:	e037      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800b354:	f000 fc0a 	bl	800bb6c <SEGGER_SYSVIEW_Stop>
      break;
 800b358:	e034      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800b35a:	f000 fdbf 	bl	800bedc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800b35e:	e031      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800b360:	f000 fda8 	bl	800beb4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800b364:	e02e      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800b366:	f000 fc27 	bl	800bbb8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800b36a:	e02b      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800b36c:	f001 f852 	bl	800c414 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800b370:	e028      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800b372:	f001 f831 	bl	800c3d8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800b376:	e025      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b378:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <_HandleIncomingPacket+0xe0>)
 800b37a:	7e1b      	ldrb	r3, [r3, #24]
 800b37c:	4618      	mov	r0, r3
 800b37e:	1cfb      	adds	r3, r7, #3
 800b380:	2201      	movs	r2, #1
 800b382:	4619      	mov	r1, r3
 800b384:	f7ff fed2 	bl	800b12c <SEGGER_RTT_ReadNoLock>
 800b388:	4603      	mov	r3, r0
 800b38a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	dd15      	ble.n	800b3be <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800b392:	78fb      	ldrb	r3, [r7, #3]
 800b394:	4618      	mov	r0, r3
 800b396:	f000 ff9f 	bl	800c2d8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800b39a:	e010      	b.n	800b3be <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	b25b      	sxtb	r3, r3
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	da0e      	bge.n	800b3c2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800b3a4:	4b09      	ldr	r3, [pc, #36]	; (800b3cc <_HandleIncomingPacket+0xe0>)
 800b3a6:	7e1b      	ldrb	r3, [r3, #24]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	1cfb      	adds	r3, r7, #3
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	4619      	mov	r1, r3
 800b3b0:	f7ff febc 	bl	800b12c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800b3b4:	e005      	b.n	800b3c2 <_HandleIncomingPacket+0xd6>
    }
  }
 800b3b6:	bf00      	nop
 800b3b8:	e004      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
      break;
 800b3ba:	bf00      	nop
 800b3bc:	e002      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
      break;
 800b3be:	bf00      	nop
 800b3c0:	e000      	b.n	800b3c4 <_HandleIncomingPacket+0xd8>
      break;
 800b3c2:	bf00      	nop
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200132c0 	.word	0x200132c0

0800b3d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08c      	sub	sp, #48	; 0x30
 800b3d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800b3da:	1d3b      	adds	r3, r7, #4
 800b3dc:	3301      	adds	r3, #1
 800b3de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3e4:	4b31      	ldr	r3, [pc, #196]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3ea:	e00b      	b.n	800b404 <_TrySendOverflowPacket+0x34>
 800b3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f2:	1c59      	adds	r1, r3, #1
 800b3f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b3f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	09db      	lsrs	r3, r3, #7
 800b402:	62bb      	str	r3, [r7, #40]	; 0x28
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	2b7f      	cmp	r3, #127	; 0x7f
 800b408:	d8f0      	bhi.n	800b3ec <_TrySendOverflowPacket+0x1c>
 800b40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b412:	b2d2      	uxtb	r2, r2
 800b414:	701a      	strb	r2, [r3, #0]
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b41a:	4b25      	ldr	r3, [pc, #148]	; (800b4b0 <_TrySendOverflowPacket+0xe0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b420:	4b22      	ldr	r3, [pc, #136]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	e00b      	b.n	800b44c <_TrySendOverflowPacket+0x7c>
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	b2da      	uxtb	r2, r3
 800b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43a:	1c59      	adds	r1, r3, #1
 800b43c:	6279      	str	r1, [r7, #36]	; 0x24
 800b43e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	09db      	lsrs	r3, r3, #7
 800b44a:	623b      	str	r3, [r7, #32]
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	2b7f      	cmp	r3, #127	; 0x7f
 800b450:	d8f0      	bhi.n	800b434 <_TrySendOverflowPacket+0x64>
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	1c5a      	adds	r2, r3, #1
 800b456:	627a      	str	r2, [r7, #36]	; 0x24
 800b458:	6a3a      	ldr	r2, [r7, #32]
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b460:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800b462:	4b12      	ldr	r3, [pc, #72]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	4618      	mov	r0, r3
 800b468:	1d3b      	adds	r3, r7, #4
 800b46a:	69fa      	ldr	r2, [r7, #28]
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	461a      	mov	r2, r3
 800b470:	1d3b      	adds	r3, r7, #4
 800b472:	4619      	mov	r1, r3
 800b474:	f7f4 feac 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b478:	4603      	mov	r3, r0
 800b47a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d009      	beq.n	800b496 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b482:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800b488:	4b08      	ldr	r3, [pc, #32]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b2da      	uxtb	r2, r3
 800b490:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e004      	b.n	800b4a0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800b496:	4b05      	ldr	r3, [pc, #20]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	3301      	adds	r3, #1
 800b49c:	4a03      	ldr	r2, [pc, #12]	; (800b4ac <_TrySendOverflowPacket+0xdc>)
 800b49e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800b4a0:	693b      	ldr	r3, [r7, #16]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3730      	adds	r7, #48	; 0x30
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	200132c0 	.word	0x200132c0
 800b4b0:	e0001004 	.word	0xe0001004

0800b4b4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b08a      	sub	sp, #40	; 0x28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800b4c0:	4b6c      	ldr	r3, [pc, #432]	; (800b674 <_SendPacket+0x1c0>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d010      	beq.n	800b4ea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800b4c8:	4b6a      	ldr	r3, [pc, #424]	; (800b674 <_SendPacket+0x1c0>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 80a3 	beq.w	800b618 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800b4d2:	4b68      	ldr	r3, [pc, #416]	; (800b674 <_SendPacket+0x1c0>)
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d109      	bne.n	800b4ee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800b4da:	f7ff ff79 	bl	800b3d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800b4de:	4b65      	ldr	r3, [pc, #404]	; (800b674 <_SendPacket+0x1c0>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	f040 809a 	bne.w	800b61c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800b4e8:	e001      	b.n	800b4ee <_SendPacket+0x3a>
    goto Send;
 800b4ea:	bf00      	nop
 800b4ec:	e000      	b.n	800b4f0 <_SendPacket+0x3c>
Send:
 800b4ee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2b1f      	cmp	r3, #31
 800b4f4:	d809      	bhi.n	800b50a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800b4f6:	4b5f      	ldr	r3, [pc, #380]	; (800b674 <_SendPacket+0x1c0>)
 800b4f8:	69da      	ldr	r2, [r3, #28]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b00      	cmp	r3, #0
 800b506:	f040 808b 	bne.w	800b620 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b17      	cmp	r3, #23
 800b50e:	d807      	bhi.n	800b520 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	3b01      	subs	r3, #1
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e03d      	b.n	800b59c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b7f      	cmp	r3, #127	; 0x7f
 800b52c:	d912      	bls.n	800b554 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	09da      	lsrs	r2, r3, #7
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3b01      	subs	r3, #1
 800b536:	60fb      	str	r3, [r7, #12]
 800b538:	b2d2      	uxtb	r2, r2
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	3a01      	subs	r2, #1
 800b546:	60fa      	str	r2, [r7, #12]
 800b548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	701a      	strb	r2, [r3, #0]
 800b552:	e006      	b.n	800b562 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3b01      	subs	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	b2da      	uxtb	r2, r3
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b7f      	cmp	r3, #127	; 0x7f
 800b566:	d912      	bls.n	800b58e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	09da      	lsrs	r2, r3, #7
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3b01      	subs	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
 800b572:	b2d2      	uxtb	r2, r2
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	3a01      	subs	r2, #1
 800b580:	60fa      	str	r2, [r7, #12]
 800b582:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b586:	b2da      	uxtb	r2, r3
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e006      	b.n	800b59c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3b01      	subs	r3, #1
 800b592:	60fb      	str	r3, [r7, #12]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	b2da      	uxtb	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b59c:	4b36      	ldr	r3, [pc, #216]	; (800b678 <_SendPacket+0x1c4>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800b5a2:	4b34      	ldr	r3, [pc, #208]	; (800b674 <_SendPacket+0x1c0>)
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	69ba      	ldr	r2, [r7, #24]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	623b      	str	r3, [r7, #32]
 800b5b4:	e00b      	b.n	800b5ce <_SendPacket+0x11a>
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	1c59      	adds	r1, r3, #1
 800b5be:	6279      	str	r1, [r7, #36]	; 0x24
 800b5c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b5c4:	b2d2      	uxtb	r2, r2
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	09db      	lsrs	r3, r3, #7
 800b5cc:	623b      	str	r3, [r7, #32]
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d2:	d8f0      	bhi.n	800b5b6 <_SendPacket+0x102>
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	1c5a      	adds	r2, r3, #1
 800b5d8:	627a      	str	r2, [r7, #36]	; 0x24
 800b5da:	6a3a      	ldr	r2, [r7, #32]
 800b5dc:	b2d2      	uxtb	r2, r2
 800b5de:	701a      	strb	r2, [r3, #0]
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800b5e4:	4b23      	ldr	r3, [pc, #140]	; (800b674 <_SendPacket+0x1c0>)
 800b5e6:	785b      	ldrb	r3, [r3, #1]
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	f7f4 fdec 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b602:	4a1c      	ldr	r2, [pc, #112]	; (800b674 <_SendPacket+0x1c0>)
 800b604:	69bb      	ldr	r3, [r7, #24]
 800b606:	60d3      	str	r3, [r2, #12]
 800b608:	e00b      	b.n	800b622 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b60a:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <_SendPacket+0x1c0>)
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	3301      	adds	r3, #1
 800b610:	b2da      	uxtb	r2, r3
 800b612:	4b18      	ldr	r3, [pc, #96]	; (800b674 <_SendPacket+0x1c0>)
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	e004      	b.n	800b622 <_SendPacket+0x16e>
    goto SendDone;
 800b618:	bf00      	nop
 800b61a:	e002      	b.n	800b622 <_SendPacket+0x16e>
      goto SendDone;
 800b61c:	bf00      	nop
 800b61e:	e000      	b.n	800b622 <_SendPacket+0x16e>
      goto SendDone;
 800b620:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b622:	4b14      	ldr	r3, [pc, #80]	; (800b674 <_SendPacket+0x1c0>)
 800b624:	7e1b      	ldrb	r3, [r3, #24]
 800b626:	4619      	mov	r1, r3
 800b628:	4a14      	ldr	r2, [pc, #80]	; (800b67c <_SendPacket+0x1c8>)
 800b62a:	460b      	mov	r3, r1
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	440b      	add	r3, r1
 800b630:	00db      	lsls	r3, r3, #3
 800b632:	4413      	add	r3, r2
 800b634:	336c      	adds	r3, #108	; 0x6c
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <_SendPacket+0x1c0>)
 800b63a:	7e1b      	ldrb	r3, [r3, #24]
 800b63c:	4618      	mov	r0, r3
 800b63e:	490f      	ldr	r1, [pc, #60]	; (800b67c <_SendPacket+0x1c8>)
 800b640:	4603      	mov	r3, r0
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	4403      	add	r3, r0
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	440b      	add	r3, r1
 800b64a:	3370      	adds	r3, #112	; 0x70
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d00b      	beq.n	800b66a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b652:	4b08      	ldr	r3, [pc, #32]	; (800b674 <_SendPacket+0x1c0>)
 800b654:	789b      	ldrb	r3, [r3, #2]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d107      	bne.n	800b66a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b65a:	4b06      	ldr	r3, [pc, #24]	; (800b674 <_SendPacket+0x1c0>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b660:	f7ff fe44 	bl	800b2ec <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b664:	4b03      	ldr	r3, [pc, #12]	; (800b674 <_SendPacket+0x1c0>)
 800b666:	2200      	movs	r2, #0
 800b668:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b66a:	bf00      	nop
 800b66c:	3728      	adds	r7, #40	; 0x28
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
 800b672:	bf00      	nop
 800b674:	200132c0 	.word	0x200132c0
 800b678:	e0001004 	.word	0xe0001004
 800b67c:	20013c88 	.word	0x20013c88

0800b680 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b688:	f3ef 8311 	mrs	r3, BASEPRI
 800b68c:	f04f 0120 	mov.w	r1, #32
 800b690:	f381 8811 	msr	BASEPRI, r1
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	4808      	ldr	r0, [pc, #32]	; (800b6b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b698:	f7ff fe1b 	bl	800b2d2 <_PreparePacket>
 800b69c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	68b8      	ldr	r0, [r7, #8]
 800b6a4:	f7ff ff06 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f383 8811 	msr	BASEPRI, r3
}
 800b6ae:	bf00      	nop
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200132f0 	.word	0x200132f0

0800b6bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b6c6:	f3ef 8311 	mrs	r3, BASEPRI
 800b6ca:	f04f 0120 	mov.w	r1, #32
 800b6ce:	f381 8811 	msr	BASEPRI, r1
 800b6d2:	617b      	str	r3, [r7, #20]
 800b6d4:	4816      	ldr	r0, [pc, #88]	; (800b730 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b6d6:	f7ff fdfc 	bl	800b2d2 <_PreparePacket>
 800b6da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	61fb      	str	r3, [r7, #28]
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	61bb      	str	r3, [r7, #24]
 800b6e8:	e00b      	b.n	800b702 <SEGGER_SYSVIEW_RecordU32+0x46>
 800b6ea:	69bb      	ldr	r3, [r7, #24]
 800b6ec:	b2da      	uxtb	r2, r3
 800b6ee:	69fb      	ldr	r3, [r7, #28]
 800b6f0:	1c59      	adds	r1, r3, #1
 800b6f2:	61f9      	str	r1, [r7, #28]
 800b6f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b6f8:	b2d2      	uxtb	r2, r2
 800b6fa:	701a      	strb	r2, [r3, #0]
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	09db      	lsrs	r3, r3, #7
 800b700:	61bb      	str	r3, [r7, #24]
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b7f      	cmp	r3, #127	; 0x7f
 800b706:	d8f0      	bhi.n	800b6ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	61fa      	str	r2, [r7, #28]
 800b70e:	69ba      	ldr	r2, [r7, #24]
 800b710:	b2d2      	uxtb	r2, r2
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	68f9      	ldr	r1, [r7, #12]
 800b71c:	6938      	ldr	r0, [r7, #16]
 800b71e:	f7ff fec9 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f383 8811 	msr	BASEPRI, r3
}
 800b728:	bf00      	nop
 800b72a:	3720      	adds	r7, #32
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	200132f0 	.word	0x200132f0

0800b734 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b734:	b580      	push	{r7, lr}
 800b736:	b08c      	sub	sp, #48	; 0x30
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b740:	f3ef 8311 	mrs	r3, BASEPRI
 800b744:	f04f 0120 	mov.w	r1, #32
 800b748:	f381 8811 	msr	BASEPRI, r1
 800b74c:	61fb      	str	r3, [r7, #28]
 800b74e:	4825      	ldr	r0, [pc, #148]	; (800b7e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b750:	f7ff fdbf 	bl	800b2d2 <_PreparePacket>
 800b754:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	62bb      	str	r3, [r7, #40]	; 0x28
 800b762:	e00b      	b.n	800b77c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b766:	b2da      	uxtb	r2, r3
 800b768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76a:	1c59      	adds	r1, r3, #1
 800b76c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b76e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b772:	b2d2      	uxtb	r2, r2
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b778:	09db      	lsrs	r3, r3, #7
 800b77a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77e:	2b7f      	cmp	r3, #127	; 0x7f
 800b780:	d8f0      	bhi.n	800b764 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	1c5a      	adds	r2, r3, #1
 800b786:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78a:	b2d2      	uxtb	r2, r2
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	627b      	str	r3, [r7, #36]	; 0x24
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	623b      	str	r3, [r7, #32]
 800b79a:	e00b      	b.n	800b7b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	1c59      	adds	r1, r3, #1
 800b7a4:	6279      	str	r1, [r7, #36]	; 0x24
 800b7a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	701a      	strb	r2, [r3, #0]
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	09db      	lsrs	r3, r3, #7
 800b7b2:	623b      	str	r3, [r7, #32]
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7b8:	d8f0      	bhi.n	800b79c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	627a      	str	r2, [r7, #36]	; 0x24
 800b7c0:	6a3a      	ldr	r2, [r7, #32]
 800b7c2:	b2d2      	uxtb	r2, r2
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	6979      	ldr	r1, [r7, #20]
 800b7ce:	69b8      	ldr	r0, [r7, #24]
 800b7d0:	f7ff fe70 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	f383 8811 	msr	BASEPRI, r3
}
 800b7da:	bf00      	nop
 800b7dc:	3730      	adds	r7, #48	; 0x30
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	200132f0 	.word	0x200132f0

0800b7e8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b08e      	sub	sp, #56	; 0x38
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800b7f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b7fa:	f04f 0120 	mov.w	r1, #32
 800b7fe:	f381 8811 	msr	BASEPRI, r1
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	4832      	ldr	r0, [pc, #200]	; (800b8d0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800b806:	f7ff fd64 	bl	800b2d2 <_PreparePacket>
 800b80a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	637b      	str	r3, [r7, #52]	; 0x34
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	633b      	str	r3, [r7, #48]	; 0x30
 800b818:	e00b      	b.n	800b832 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800b81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	1c59      	adds	r1, r3, #1
 800b822:	6379      	str	r1, [r7, #52]	; 0x34
 800b824:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b828:	b2d2      	uxtb	r2, r2
 800b82a:	701a      	strb	r2, [r3, #0]
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	09db      	lsrs	r3, r3, #7
 800b830:	633b      	str	r3, [r7, #48]	; 0x30
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2b7f      	cmp	r3, #127	; 0x7f
 800b836:	d8f0      	bhi.n	800b81a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800b838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	637a      	str	r2, [r7, #52]	; 0x34
 800b83e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b846:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b850:	e00b      	b.n	800b86a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	b2da      	uxtb	r2, r3
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	1c59      	adds	r1, r3, #1
 800b85a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b85c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b860:	b2d2      	uxtb	r2, r2
 800b862:	701a      	strb	r2, [r3, #0]
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	09db      	lsrs	r3, r3, #7
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	2b7f      	cmp	r3, #127	; 0x7f
 800b86e:	d8f0      	bhi.n	800b852 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800b870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b878:	b2d2      	uxtb	r2, r2
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	627b      	str	r3, [r7, #36]	; 0x24
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	623b      	str	r3, [r7, #32]
 800b888:	e00b      	b.n	800b8a2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	1c59      	adds	r1, r3, #1
 800b892:	6279      	str	r1, [r7, #36]	; 0x24
 800b894:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	09db      	lsrs	r3, r3, #7
 800b8a0:	623b      	str	r3, [r7, #32]
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b8a6:	d8f0      	bhi.n	800b88a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	627a      	str	r2, [r7, #36]	; 0x24
 800b8ae:	6a3a      	ldr	r2, [r7, #32]
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	6979      	ldr	r1, [r7, #20]
 800b8bc:	69b8      	ldr	r0, [r7, #24]
 800b8be:	f7ff fdf9 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	f383 8811 	msr	BASEPRI, r3
}
 800b8c8:	bf00      	nop
 800b8ca:	3738      	adds	r7, #56	; 0x38
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	200132f0 	.word	0x200132f0

0800b8d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b090      	sub	sp, #64	; 0x40
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
 800b8e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b8e2:	f3ef 8311 	mrs	r3, BASEPRI
 800b8e6:	f04f 0120 	mov.w	r1, #32
 800b8ea:	f381 8811 	msr	BASEPRI, r1
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	4840      	ldr	r0, [pc, #256]	; (800b9f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800b8f2:	f7ff fcee 	bl	800b2d2 <_PreparePacket>
 800b8f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	63bb      	str	r3, [r7, #56]	; 0x38
 800b904:	e00b      	b.n	800b91e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90c:	1c59      	adds	r1, r3, #1
 800b90e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800b910:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b914:	b2d2      	uxtb	r2, r2
 800b916:	701a      	strb	r2, [r3, #0]
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	09db      	lsrs	r3, r3, #7
 800b91c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	2b7f      	cmp	r3, #127	; 0x7f
 800b922:	d8f0      	bhi.n	800b906 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	1c5a      	adds	r2, r3, #1
 800b928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b92a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b92c:	b2d2      	uxtb	r2, r2
 800b92e:	701a      	strb	r2, [r3, #0]
 800b930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b932:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	637b      	str	r3, [r7, #52]	; 0x34
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	633b      	str	r3, [r7, #48]	; 0x30
 800b93c:	e00b      	b.n	800b956 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	b2da      	uxtb	r2, r3
 800b942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b944:	1c59      	adds	r1, r3, #1
 800b946:	6379      	str	r1, [r7, #52]	; 0x34
 800b948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b94c:	b2d2      	uxtb	r2, r2
 800b94e:	701a      	strb	r2, [r3, #0]
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	09db      	lsrs	r3, r3, #7
 800b954:	633b      	str	r3, [r7, #48]	; 0x30
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	2b7f      	cmp	r3, #127	; 0x7f
 800b95a:	d8f0      	bhi.n	800b93e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800b95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95e:	1c5a      	adds	r2, r3, #1
 800b960:	637a      	str	r2, [r7, #52]	; 0x34
 800b962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b964:	b2d2      	uxtb	r2, r2
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	62bb      	str	r3, [r7, #40]	; 0x28
 800b974:	e00b      	b.n	800b98e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800b976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	1c59      	adds	r1, r3, #1
 800b97e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b984:	b2d2      	uxtb	r2, r2
 800b986:	701a      	strb	r2, [r3, #0]
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	09db      	lsrs	r3, r3, #7
 800b98c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	2b7f      	cmp	r3, #127	; 0x7f
 800b992:	d8f0      	bhi.n	800b976 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800b994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b99c:	b2d2      	uxtb	r2, r2
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9aa:	623b      	str	r3, [r7, #32]
 800b9ac:	e00b      	b.n	800b9c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	b2da      	uxtb	r2, r3
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	1c59      	adds	r1, r3, #1
 800b9b6:	6279      	str	r1, [r7, #36]	; 0x24
 800b9b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	6a3b      	ldr	r3, [r7, #32]
 800b9c2:	09db      	lsrs	r3, r3, #7
 800b9c4:	623b      	str	r3, [r7, #32]
 800b9c6:	6a3b      	ldr	r3, [r7, #32]
 800b9c8:	2b7f      	cmp	r3, #127	; 0x7f
 800b9ca:	d8f0      	bhi.n	800b9ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	1c5a      	adds	r2, r3, #1
 800b9d0:	627a      	str	r2, [r7, #36]	; 0x24
 800b9d2:	6a3a      	ldr	r2, [r7, #32]
 800b9d4:	b2d2      	uxtb	r2, r2
 800b9d6:	701a      	strb	r2, [r3, #0]
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	6979      	ldr	r1, [r7, #20]
 800b9e0:	69b8      	ldr	r0, [r7, #24]
 800b9e2:	f7ff fd67 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	f383 8811 	msr	BASEPRI, r3
}
 800b9ec:	bf00      	nop
 800b9ee:	3740      	adds	r7, #64	; 0x40
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	200132f0 	.word	0x200132f0

0800b9f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b08c      	sub	sp, #48	; 0x30
 800b9fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b9fe:	4b58      	ldr	r3, [pc, #352]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800ba00:	2201      	movs	r2, #1
 800ba02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800ba04:	f3ef 8311 	mrs	r3, BASEPRI
 800ba08:	f04f 0120 	mov.w	r1, #32
 800ba0c:	f381 8811 	msr	BASEPRI, r1
 800ba10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800ba12:	4b53      	ldr	r3, [pc, #332]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800ba14:	785b      	ldrb	r3, [r3, #1]
 800ba16:	220a      	movs	r2, #10
 800ba18:	4952      	ldr	r1, [pc, #328]	; (800bb64 <SEGGER_SYSVIEW_Start+0x16c>)
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7f4 fbd8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800ba26:	200a      	movs	r0, #10
 800ba28:	f7ff fe2a 	bl	800b680 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ba2c:	f3ef 8311 	mrs	r3, BASEPRI
 800ba30:	f04f 0120 	mov.w	r1, #32
 800ba34:	f381 8811 	msr	BASEPRI, r1
 800ba38:	60bb      	str	r3, [r7, #8]
 800ba3a:	484b      	ldr	r0, [pc, #300]	; (800bb68 <SEGGER_SYSVIEW_Start+0x170>)
 800ba3c:	f7ff fc49 	bl	800b2d2 <_PreparePacket>
 800ba40:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba4a:	4b45      	ldr	r3, [pc, #276]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba50:	e00b      	b.n	800ba6a <SEGGER_SYSVIEW_Start+0x72>
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba58:	1c59      	adds	r1, r3, #1
 800ba5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ba5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba60:	b2d2      	uxtb	r2, r2
 800ba62:	701a      	strb	r2, [r3, #0]
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	09db      	lsrs	r3, r3, #7
 800ba68:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	2b7f      	cmp	r3, #127	; 0x7f
 800ba6e:	d8f0      	bhi.n	800ba52 <SEGGER_SYSVIEW_Start+0x5a>
 800ba70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba78:	b2d2      	uxtb	r2, r2
 800ba7a:	701a      	strb	r2, [r3, #0]
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	627b      	str	r3, [r7, #36]	; 0x24
 800ba84:	4b36      	ldr	r3, [pc, #216]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	623b      	str	r3, [r7, #32]
 800ba8a:	e00b      	b.n	800baa4 <SEGGER_SYSVIEW_Start+0xac>
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	b2da      	uxtb	r2, r3
 800ba90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba92:	1c59      	adds	r1, r3, #1
 800ba94:	6279      	str	r1, [r7, #36]	; 0x24
 800ba96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ba9a:	b2d2      	uxtb	r2, r2
 800ba9c:	701a      	strb	r2, [r3, #0]
 800ba9e:	6a3b      	ldr	r3, [r7, #32]
 800baa0:	09db      	lsrs	r3, r3, #7
 800baa2:	623b      	str	r3, [r7, #32]
 800baa4:	6a3b      	ldr	r3, [r7, #32]
 800baa6:	2b7f      	cmp	r3, #127	; 0x7f
 800baa8:	d8f0      	bhi.n	800ba8c <SEGGER_SYSVIEW_Start+0x94>
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	627a      	str	r2, [r7, #36]	; 0x24
 800bab0:	6a3a      	ldr	r2, [r7, #32]
 800bab2:	b2d2      	uxtb	r2, r2
 800bab4:	701a      	strb	r2, [r3, #0]
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	61fb      	str	r3, [r7, #28]
 800babe:	4b28      	ldr	r3, [pc, #160]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	61bb      	str	r3, [r7, #24]
 800bac4:	e00b      	b.n	800bade <SEGGER_SYSVIEW_Start+0xe6>
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	1c59      	adds	r1, r3, #1
 800bace:	61f9      	str	r1, [r7, #28]
 800bad0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bad4:	b2d2      	uxtb	r2, r2
 800bad6:	701a      	strb	r2, [r3, #0]
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	09db      	lsrs	r3, r3, #7
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	69bb      	ldr	r3, [r7, #24]
 800bae0:	2b7f      	cmp	r3, #127	; 0x7f
 800bae2:	d8f0      	bhi.n	800bac6 <SEGGER_SYSVIEW_Start+0xce>
 800bae4:	69fb      	ldr	r3, [r7, #28]
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	61fa      	str	r2, [r7, #28]
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	b2d2      	uxtb	r2, r2
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	2300      	movs	r3, #0
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	e00b      	b.n	800bb16 <SEGGER_SYSVIEW_Start+0x11e>
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	1c59      	adds	r1, r3, #1
 800bb06:	6179      	str	r1, [r7, #20]
 800bb08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bb0c:	b2d2      	uxtb	r2, r2
 800bb0e:	701a      	strb	r2, [r3, #0]
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	09db      	lsrs	r3, r3, #7
 800bb14:	613b      	str	r3, [r7, #16]
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	2b7f      	cmp	r3, #127	; 0x7f
 800bb1a:	d8f0      	bhi.n	800bafe <SEGGER_SYSVIEW_Start+0x106>
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	617a      	str	r2, [r7, #20]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	b2d2      	uxtb	r2, r2
 800bb26:	701a      	strb	r2, [r3, #0]
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bb2c:	2218      	movs	r2, #24
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f7ff fcbf 	bl	800b4b4 <_SendPacket>
      RECORD_END();
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bb3c:	4b08      	ldr	r3, [pc, #32]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800bb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d002      	beq.n	800bb4a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800bb44:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <SEGGER_SYSVIEW_Start+0x168>)
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800bb4a:	f000 f9c7 	bl	800bedc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800bb4e:	f000 f9b1 	bl	800beb4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800bb52:	f000 fc5f 	bl	800c414 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800bb56:	bf00      	nop
 800bb58:	3730      	adds	r7, #48	; 0x30
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	200132c0 	.word	0x200132c0
 800bb64:	0800c87c 	.word	0x0800c87c
 800bb68:	200132f0 	.word	0x200132f0

0800bb6c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bb72:	f3ef 8311 	mrs	r3, BASEPRI
 800bb76:	f04f 0120 	mov.w	r1, #32
 800bb7a:	f381 8811 	msr	BASEPRI, r1
 800bb7e:	607b      	str	r3, [r7, #4]
 800bb80:	480b      	ldr	r0, [pc, #44]	; (800bbb0 <SEGGER_SYSVIEW_Stop+0x44>)
 800bb82:	f7ff fba6 	bl	800b2d2 <_PreparePacket>
 800bb86:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800bb88:	4b0a      	ldr	r3, [pc, #40]	; (800bbb4 <SEGGER_SYSVIEW_Stop+0x48>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d007      	beq.n	800bba0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800bb90:	220b      	movs	r2, #11
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6838      	ldr	r0, [r7, #0]
 800bb96:	f7ff fc8d 	bl	800b4b4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800bb9a:	4b06      	ldr	r3, [pc, #24]	; (800bbb4 <SEGGER_SYSVIEW_Stop+0x48>)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f383 8811 	msr	BASEPRI, r3
}
 800bba6:	bf00      	nop
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	200132f0 	.word	0x200132f0
 800bbb4:	200132c0 	.word	0x200132c0

0800bbb8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b08c      	sub	sp, #48	; 0x30
 800bbbc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800bbbe:	f3ef 8311 	mrs	r3, BASEPRI
 800bbc2:	f04f 0120 	mov.w	r1, #32
 800bbc6:	f381 8811 	msr	BASEPRI, r1
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	4845      	ldr	r0, [pc, #276]	; (800bce4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800bbce:	f7ff fb80 	bl	800b2d2 <_PreparePacket>
 800bbd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbdc:	4b42      	ldr	r3, [pc, #264]	; (800bce8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbe2:	e00b      	b.n	800bbfc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbea:	1c59      	adds	r1, r3, #1
 800bbec:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bbee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf8:	09db      	lsrs	r3, r3, #7
 800bbfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfe:	2b7f      	cmp	r3, #127	; 0x7f
 800bc00:	d8f0      	bhi.n	800bbe4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	627b      	str	r3, [r7, #36]	; 0x24
 800bc16:	4b34      	ldr	r3, [pc, #208]	; (800bce8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	623b      	str	r3, [r7, #32]
 800bc1c:	e00b      	b.n	800bc36 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	1c59      	adds	r1, r3, #1
 800bc26:	6279      	str	r1, [r7, #36]	; 0x24
 800bc28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc2c:	b2d2      	uxtb	r2, r2
 800bc2e:	701a      	strb	r2, [r3, #0]
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	09db      	lsrs	r3, r3, #7
 800bc34:	623b      	str	r3, [r7, #32]
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	2b7f      	cmp	r3, #127	; 0x7f
 800bc3a:	d8f0      	bhi.n	800bc1e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	627a      	str	r2, [r7, #36]	; 0x24
 800bc42:	6a3a      	ldr	r2, [r7, #32]
 800bc44:	b2d2      	uxtb	r2, r2
 800bc46:	701a      	strb	r2, [r3, #0]
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	61fb      	str	r3, [r7, #28]
 800bc50:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bc52:	691b      	ldr	r3, [r3, #16]
 800bc54:	61bb      	str	r3, [r7, #24]
 800bc56:	e00b      	b.n	800bc70 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	1c59      	adds	r1, r3, #1
 800bc60:	61f9      	str	r1, [r7, #28]
 800bc62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc66:	b2d2      	uxtb	r2, r2
 800bc68:	701a      	strb	r2, [r3, #0]
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	09db      	lsrs	r3, r3, #7
 800bc6e:	61bb      	str	r3, [r7, #24]
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2b7f      	cmp	r3, #127	; 0x7f
 800bc74:	d8f0      	bhi.n	800bc58 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	1c5a      	adds	r2, r3, #1
 800bc7a:	61fa      	str	r2, [r7, #28]
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	b2d2      	uxtb	r2, r2
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	613b      	str	r3, [r7, #16]
 800bc8e:	e00b      	b.n	800bca8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	1c59      	adds	r1, r3, #1
 800bc98:	6179      	str	r1, [r7, #20]
 800bc9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	09db      	lsrs	r3, r3, #7
 800bca6:	613b      	str	r3, [r7, #16]
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800bcac:	d8f0      	bhi.n	800bc90 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	1c5a      	adds	r2, r3, #1
 800bcb2:	617a      	str	r2, [r7, #20]
 800bcb4:	693a      	ldr	r2, [r7, #16]
 800bcb6:	b2d2      	uxtb	r2, r2
 800bcb8:	701a      	strb	r2, [r3, #0]
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800bcbe:	2218      	movs	r2, #24
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	68b8      	ldr	r0, [r7, #8]
 800bcc4:	f7ff fbf6 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800bcce:	4b06      	ldr	r3, [pc, #24]	; (800bce8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d002      	beq.n	800bcdc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800bcd6:	4b04      	ldr	r3, [pc, #16]	; (800bce8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800bcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcda:	4798      	blx	r3
  }
}
 800bcdc:	bf00      	nop
 800bcde:	3730      	adds	r7, #48	; 0x30
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	200132f0 	.word	0x200132f0
 800bce8:	200132c0 	.word	0x200132c0

0800bcec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b092      	sub	sp, #72	; 0x48
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800bcf4:	f3ef 8311 	mrs	r3, BASEPRI
 800bcf8:	f04f 0120 	mov.w	r1, #32
 800bcfc:	f381 8811 	msr	BASEPRI, r1
 800bd00:	617b      	str	r3, [r7, #20]
 800bd02:	486a      	ldr	r0, [pc, #424]	; (800beac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800bd04:	f7ff fae5 	bl	800b2d2 <_PreparePacket>
 800bd08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	647b      	str	r3, [r7, #68]	; 0x44
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b66      	ldr	r3, [pc, #408]	; (800beb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd1e:	e00b      	b.n	800bd38 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800bd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd26:	1c59      	adds	r1, r3, #1
 800bd28:	6479      	str	r1, [r7, #68]	; 0x44
 800bd2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd34:	09db      	lsrs	r3, r3, #7
 800bd36:	643b      	str	r3, [r7, #64]	; 0x40
 800bd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd3a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd3c:	d8f0      	bhi.n	800bd20 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800bd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd40:	1c5a      	adds	r2, r3, #1
 800bd42:	647a      	str	r2, [r7, #68]	; 0x44
 800bd44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd58:	e00b      	b.n	800bd72 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd60:	1c59      	adds	r1, r3, #1
 800bd62:	63f9      	str	r1, [r7, #60]	; 0x3c
 800bd64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
 800bd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd6e:	09db      	lsrs	r3, r3, #7
 800bd70:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd74:	2b7f      	cmp	r3, #127	; 0x7f
 800bd76:	d8f0      	bhi.n	800bd5a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800bd7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd86:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	2220      	movs	r2, #32
 800bd8e:	4619      	mov	r1, r3
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff fa51 	bl	800b238 <_EncodeStr>
 800bd96:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800bd98:	2209      	movs	r2, #9
 800bd9a:	68f9      	ldr	r1, [r7, #12]
 800bd9c:	6938      	ldr	r0, [r7, #16]
 800bd9e:	f7ff fb89 	bl	800b4b4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b40      	ldr	r3, [pc, #256]	; (800beb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	633b      	str	r3, [r7, #48]	; 0x30
 800bdb6:	e00b      	b.n	800bdd0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	b2da      	uxtb	r2, r3
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbe:	1c59      	adds	r1, r3, #1
 800bdc0:	6379      	str	r1, [r7, #52]	; 0x34
 800bdc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bdc6:	b2d2      	uxtb	r2, r2
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	09db      	lsrs	r3, r3, #7
 800bdce:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	2b7f      	cmp	r3, #127	; 0x7f
 800bdd4:	d8f0      	bhi.n	800bdb8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800bdd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	637a      	str	r2, [r7, #52]	; 0x34
 800bddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdde:	b2d2      	uxtb	r2, r2
 800bde0:	701a      	strb	r2, [r3, #0]
 800bde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf0:	e00b      	b.n	800be0a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf8:	1c59      	adds	r1, r3, #1
 800bdfa:	62f9      	str	r1, [r7, #44]	; 0x2c
 800bdfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	701a      	strb	r2, [r3, #0]
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	09db      	lsrs	r3, r3, #7
 800be08:	62bb      	str	r3, [r7, #40]	; 0x28
 800be0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0c:	2b7f      	cmp	r3, #127	; 0x7f
 800be0e:	d8f0      	bhi.n	800bdf2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	1c5a      	adds	r2, r3, #1
 800be14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]
 800be1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	627b      	str	r3, [r7, #36]	; 0x24
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	623b      	str	r3, [r7, #32]
 800be2a:	e00b      	b.n	800be44 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be32:	1c59      	adds	r1, r3, #1
 800be34:	6279      	str	r1, [r7, #36]	; 0x24
 800be36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	09db      	lsrs	r3, r3, #7
 800be42:	623b      	str	r3, [r7, #32]
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	2b7f      	cmp	r3, #127	; 0x7f
 800be48:	d8f0      	bhi.n	800be2c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	627a      	str	r2, [r7, #36]	; 0x24
 800be50:	6a3a      	ldr	r2, [r7, #32]
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	61fb      	str	r3, [r7, #28]
 800be5e:	2300      	movs	r3, #0
 800be60:	61bb      	str	r3, [r7, #24]
 800be62:	e00b      	b.n	800be7c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	b2da      	uxtb	r2, r3
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	1c59      	adds	r1, r3, #1
 800be6c:	61f9      	str	r1, [r7, #28]
 800be6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	09db      	lsrs	r3, r3, #7
 800be7a:	61bb      	str	r3, [r7, #24]
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	2b7f      	cmp	r3, #127	; 0x7f
 800be80:	d8f0      	bhi.n	800be64 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	61fa      	str	r2, [r7, #28]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	b2d2      	uxtb	r2, r2
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800be92:	2215      	movs	r2, #21
 800be94:	68f9      	ldr	r1, [r7, #12]
 800be96:	6938      	ldr	r0, [r7, #16]
 800be98:	f7ff fb0c 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	f383 8811 	msr	BASEPRI, r3
}
 800bea2:	bf00      	nop
 800bea4:	3748      	adds	r7, #72	; 0x48
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	200132f0 	.word	0x200132f0
 800beb0:	200132c0 	.word	0x200132c0

0800beb4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800beb8:	4b07      	ldr	r3, [pc, #28]	; (800bed8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800beba:	6a1b      	ldr	r3, [r3, #32]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800bec0:	4b05      	ldr	r3, [pc, #20]	; (800bed8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800beca:	4b03      	ldr	r3, [pc, #12]	; (800bed8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	4798      	blx	r3
  }
}
 800bed2:	bf00      	nop
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop
 800bed8:	200132c0 	.word	0x200132c0

0800bedc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800bedc:	b590      	push	{r4, r7, lr}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800bee2:	4b15      	ldr	r3, [pc, #84]	; (800bf38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bee4:	6a1b      	ldr	r3, [r3, #32]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01a      	beq.n	800bf20 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800beea:	4b13      	ldr	r3, [pc, #76]	; (800bf38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d015      	beq.n	800bf20 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800bef4:	4b10      	ldr	r3, [pc, #64]	; (800bf38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4798      	blx	r3
 800befc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bf00:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800bf02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf06:	f04f 0200 	mov.w	r2, #0
 800bf0a:	f04f 0300 	mov.w	r3, #0
 800bf0e:	000a      	movs	r2, r1
 800bf10:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800bf12:	4613      	mov	r3, r2
 800bf14:	461a      	mov	r2, r3
 800bf16:	4621      	mov	r1, r4
 800bf18:	200d      	movs	r0, #13
 800bf1a:	f7ff fc0b 	bl	800b734 <SEGGER_SYSVIEW_RecordU32x2>
 800bf1e:	e006      	b.n	800bf2e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4619      	mov	r1, r3
 800bf26:	200c      	movs	r0, #12
 800bf28:	f7ff fbc8 	bl	800b6bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd90      	pop	{r4, r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200132c0 	.word	0x200132c0
 800bf3c:	e0001004 	.word	0xe0001004

0800bf40 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b086      	sub	sp, #24
 800bf44:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800bf46:	f3ef 8311 	mrs	r3, BASEPRI
 800bf4a:	f04f 0120 	mov.w	r1, #32
 800bf4e:	f381 8811 	msr	BASEPRI, r1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	4819      	ldr	r0, [pc, #100]	; (800bfbc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800bf56:	f7ff f9bc 	bl	800b2d2 <_PreparePacket>
 800bf5a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800bf60:	4b17      	ldr	r3, [pc, #92]	; (800bfc0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf68:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	e00b      	b.n	800bf8c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	1c59      	adds	r1, r3, #1
 800bf7c:	6179      	str	r1, [r7, #20]
 800bf7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800bf82:	b2d2      	uxtb	r2, r2
 800bf84:	701a      	strb	r2, [r3, #0]
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	09db      	lsrs	r3, r3, #7
 800bf8a:	613b      	str	r3, [r7, #16]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	2b7f      	cmp	r3, #127	; 0x7f
 800bf90:	d8f0      	bhi.n	800bf74 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	1c5a      	adds	r2, r3, #1
 800bf96:	617a      	str	r2, [r7, #20]
 800bf98:	693a      	ldr	r2, [r7, #16]
 800bf9a:	b2d2      	uxtb	r2, r2
 800bf9c:	701a      	strb	r2, [r3, #0]
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	68b8      	ldr	r0, [r7, #8]
 800bfa8:	f7ff fa84 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f383 8811 	msr	BASEPRI, r3
}
 800bfb2:	bf00      	nop
 800bfb4:	3718      	adds	r7, #24
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
 800bfba:	bf00      	nop
 800bfbc:	200132f0 	.word	0x200132f0
 800bfc0:	e000ed04 	.word	0xe000ed04

0800bfc4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800bfca:	f3ef 8311 	mrs	r3, BASEPRI
 800bfce:	f04f 0120 	mov.w	r1, #32
 800bfd2:	f381 8811 	msr	BASEPRI, r1
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	4807      	ldr	r0, [pc, #28]	; (800bff8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800bfda:	f7ff f97a 	bl	800b2d2 <_PreparePacket>
 800bfde:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800bfe0:	2203      	movs	r2, #3
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6838      	ldr	r0, [r7, #0]
 800bfe6:	f7ff fa65 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f383 8811 	msr	BASEPRI, r3
}
 800bff0:	bf00      	nop
 800bff2:	3708      	adds	r7, #8
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	200132f0 	.word	0x200132f0

0800bffc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c002:	f3ef 8311 	mrs	r3, BASEPRI
 800c006:	f04f 0120 	mov.w	r1, #32
 800c00a:	f381 8811 	msr	BASEPRI, r1
 800c00e:	607b      	str	r3, [r7, #4]
 800c010:	4807      	ldr	r0, [pc, #28]	; (800c030 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800c012:	f7ff f95e 	bl	800b2d2 <_PreparePacket>
 800c016:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800c018:	2212      	movs	r2, #18
 800c01a:	6839      	ldr	r1, [r7, #0]
 800c01c:	6838      	ldr	r0, [r7, #0]
 800c01e:	f7ff fa49 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f383 8811 	msr	BASEPRI, r3
}
 800c028:	bf00      	nop
 800c02a:	3708      	adds	r7, #8
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	200132f0 	.word	0x200132f0

0800c034 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c03a:	f3ef 8311 	mrs	r3, BASEPRI
 800c03e:	f04f 0120 	mov.w	r1, #32
 800c042:	f381 8811 	msr	BASEPRI, r1
 800c046:	607b      	str	r3, [r7, #4]
 800c048:	4807      	ldr	r0, [pc, #28]	; (800c068 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800c04a:	f7ff f942 	bl	800b2d2 <_PreparePacket>
 800c04e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800c050:	2211      	movs	r2, #17
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6838      	ldr	r0, [r7, #0]
 800c056:	f7ff fa2d 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f383 8811 	msr	BASEPRI, r3
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	200132f0 	.word	0x200132f0

0800c06c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c074:	f3ef 8311 	mrs	r3, BASEPRI
 800c078:	f04f 0120 	mov.w	r1, #32
 800c07c:	f381 8811 	msr	BASEPRI, r1
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	4819      	ldr	r0, [pc, #100]	; (800c0e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800c084:	f7ff f925 	bl	800b2d2 <_PreparePacket>
 800c088:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c08e:	4b17      	ldr	r3, [pc, #92]	; (800c0ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	1ad3      	subs	r3, r2, r3
 800c096:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	61fb      	str	r3, [r7, #28]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	61bb      	str	r3, [r7, #24]
 800c0a0:	e00b      	b.n	800c0ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	b2da      	uxtb	r2, r3
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	1c59      	adds	r1, r3, #1
 800c0aa:	61f9      	str	r1, [r7, #28]
 800c0ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c0b0:	b2d2      	uxtb	r2, r2
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	09db      	lsrs	r3, r3, #7
 800c0b8:	61bb      	str	r3, [r7, #24]
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	2b7f      	cmp	r3, #127	; 0x7f
 800c0be:	d8f0      	bhi.n	800c0a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	1c5a      	adds	r2, r3, #1
 800c0c4:	61fa      	str	r2, [r7, #28]
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	b2d2      	uxtb	r2, r2
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	68f9      	ldr	r1, [r7, #12]
 800c0d4:	6938      	ldr	r0, [r7, #16]
 800c0d6:	f7ff f9ed 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f383 8811 	msr	BASEPRI, r3
}
 800c0e0:	bf00      	nop
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	200132f0 	.word	0x200132f0
 800c0ec:	200132c0 	.word	0x200132c0

0800c0f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c0f8:	f3ef 8311 	mrs	r3, BASEPRI
 800c0fc:	f04f 0120 	mov.w	r1, #32
 800c100:	f381 8811 	msr	BASEPRI, r1
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	4819      	ldr	r0, [pc, #100]	; (800c16c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800c108:	f7ff f8e3 	bl	800b2d2 <_PreparePacket>
 800c10c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c112:	4b17      	ldr	r3, [pc, #92]	; (800c170 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	1ad3      	subs	r3, r2, r3
 800c11a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	61fb      	str	r3, [r7, #28]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	e00b      	b.n	800c13e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	1c59      	adds	r1, r3, #1
 800c12e:	61f9      	str	r1, [r7, #28]
 800c130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c134:	b2d2      	uxtb	r2, r2
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	09db      	lsrs	r3, r3, #7
 800c13c:	61bb      	str	r3, [r7, #24]
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b7f      	cmp	r3, #127	; 0x7f
 800c142:	d8f0      	bhi.n	800c126 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	61fa      	str	r2, [r7, #28]
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	b2d2      	uxtb	r2, r2
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	69fb      	ldr	r3, [r7, #28]
 800c152:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800c154:	2204      	movs	r2, #4
 800c156:	68f9      	ldr	r1, [r7, #12]
 800c158:	6938      	ldr	r0, [r7, #16]
 800c15a:	f7ff f9ab 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	f383 8811 	msr	BASEPRI, r3
}
 800c164:	bf00      	nop
 800c166:	3720      	adds	r7, #32
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	200132f0 	.word	0x200132f0
 800c170:	200132c0 	.word	0x200132c0

0800c174 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800c174:	b580      	push	{r7, lr}
 800c176:	b088      	sub	sp, #32
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c17c:	f3ef 8311 	mrs	r3, BASEPRI
 800c180:	f04f 0120 	mov.w	r1, #32
 800c184:	f381 8811 	msr	BASEPRI, r1
 800c188:	617b      	str	r3, [r7, #20]
 800c18a:	4819      	ldr	r0, [pc, #100]	; (800c1f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800c18c:	f7ff f8a1 	bl	800b2d2 <_PreparePacket>
 800c190:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c196:	4b17      	ldr	r3, [pc, #92]	; (800c1f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	61bb      	str	r3, [r7, #24]
 800c1a8:	e00b      	b.n	800c1c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800c1aa:	69bb      	ldr	r3, [r7, #24]
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	1c59      	adds	r1, r3, #1
 800c1b2:	61f9      	str	r1, [r7, #28]
 800c1b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c1b8:	b2d2      	uxtb	r2, r2
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	09db      	lsrs	r3, r3, #7
 800c1c0:	61bb      	str	r3, [r7, #24]
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c1c6:	d8f0      	bhi.n	800c1aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	61fa      	str	r2, [r7, #28]
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	b2d2      	uxtb	r2, r2
 800c1d2:	701a      	strb	r2, [r3, #0]
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800c1d8:	2206      	movs	r2, #6
 800c1da:	68f9      	ldr	r1, [r7, #12]
 800c1dc:	6938      	ldr	r0, [r7, #16]
 800c1de:	f7ff f969 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	f383 8811 	msr	BASEPRI, r3
}
 800c1e8:	bf00      	nop
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	200132f0 	.word	0x200132f0
 800c1f4:	200132c0 	.word	0x200132c0

0800c1f8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b08a      	sub	sp, #40	; 0x28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c202:	f3ef 8311 	mrs	r3, BASEPRI
 800c206:	f04f 0120 	mov.w	r1, #32
 800c20a:	f381 8811 	msr	BASEPRI, r1
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	4827      	ldr	r0, [pc, #156]	; (800c2b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800c212:	f7ff f85e 	bl	800b2d2 <_PreparePacket>
 800c216:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800c21c:	4b25      	ldr	r3, [pc, #148]	; (800c2b4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	627b      	str	r3, [r7, #36]	; 0x24
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	623b      	str	r3, [r7, #32]
 800c22e:	e00b      	b.n	800c248 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800c230:	6a3b      	ldr	r3, [r7, #32]
 800c232:	b2da      	uxtb	r2, r3
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	1c59      	adds	r1, r3, #1
 800c238:	6279      	str	r1, [r7, #36]	; 0x24
 800c23a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	09db      	lsrs	r3, r3, #7
 800c246:	623b      	str	r3, [r7, #32]
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	2b7f      	cmp	r3, #127	; 0x7f
 800c24c:	d8f0      	bhi.n	800c230 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800c24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	627a      	str	r2, [r7, #36]	; 0x24
 800c254:	6a3a      	ldr	r2, [r7, #32]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61fb      	str	r3, [r7, #28]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	61bb      	str	r3, [r7, #24]
 800c266:	e00b      	b.n	800c280 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	1c59      	adds	r1, r3, #1
 800c270:	61f9      	str	r1, [r7, #28]
 800c272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
 800c27a:	69bb      	ldr	r3, [r7, #24]
 800c27c:	09db      	lsrs	r3, r3, #7
 800c27e:	61bb      	str	r3, [r7, #24]
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b7f      	cmp	r3, #127	; 0x7f
 800c284:	d8f0      	bhi.n	800c268 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	1c5a      	adds	r2, r3, #1
 800c28a:	61fa      	str	r2, [r7, #28]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	b2d2      	uxtb	r2, r2
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800c296:	2207      	movs	r2, #7
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	6938      	ldr	r0, [r7, #16]
 800c29c:	f7ff f90a 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	f383 8811 	msr	BASEPRI, r3
}
 800c2a6:	bf00      	nop
 800c2a8:	3728      	adds	r7, #40	; 0x28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	200132f0 	.word	0x200132f0
 800c2b4:	200132c0 	.word	0x200132c0

0800c2b8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800c2b8:	b480      	push	{r7}
 800c2ba:	b083      	sub	sp, #12
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800c2c0:	4b04      	ldr	r3, [pc, #16]	; (800c2d4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800c2c2:	691b      	ldr	r3, [r3, #16]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	1ad3      	subs	r3, r2, r3
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	370c      	adds	r7, #12
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	200132c0 	.word	0x200132c0

0800c2d8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08c      	sub	sp, #48	; 0x30
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800c2e2:	4b3b      	ldr	r3, [pc, #236]	; (800c3d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d06d      	beq.n	800c3c6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800c2ea:	4b39      	ldr	r3, [pc, #228]	; (800c3d0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2f4:	e008      	b.n	800c308 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	3301      	adds	r3, #1
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d3f2      	bcc.n	800c2f6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800c310:	e000      	b.n	800c314 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800c312:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d055      	beq.n	800c3c6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c31a:	f3ef 8311 	mrs	r3, BASEPRI
 800c31e:	f04f 0120 	mov.w	r1, #32
 800c322:	f381 8811 	msr	BASEPRI, r1
 800c326:	617b      	str	r3, [r7, #20]
 800c328:	482a      	ldr	r0, [pc, #168]	; (800c3d4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800c32a:	f7fe ffd2 	bl	800b2d2 <_PreparePacket>
 800c32e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	627b      	str	r3, [r7, #36]	; 0x24
 800c338:	79fb      	ldrb	r3, [r7, #7]
 800c33a:	623b      	str	r3, [r7, #32]
 800c33c:	e00b      	b.n	800c356 <SEGGER_SYSVIEW_SendModule+0x7e>
 800c33e:	6a3b      	ldr	r3, [r7, #32]
 800c340:	b2da      	uxtb	r2, r3
 800c342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c344:	1c59      	adds	r1, r3, #1
 800c346:	6279      	str	r1, [r7, #36]	; 0x24
 800c348:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	6a3b      	ldr	r3, [r7, #32]
 800c352:	09db      	lsrs	r3, r3, #7
 800c354:	623b      	str	r3, [r7, #32]
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	2b7f      	cmp	r3, #127	; 0x7f
 800c35a:	d8f0      	bhi.n	800c33e <SEGGER_SYSVIEW_SendModule+0x66>
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	1c5a      	adds	r2, r3, #1
 800c360:	627a      	str	r2, [r7, #36]	; 0x24
 800c362:	6a3a      	ldr	r2, [r7, #32]
 800c364:	b2d2      	uxtb	r2, r2
 800c366:	701a      	strb	r2, [r3, #0]
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	61fb      	str	r3, [r7, #28]
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	61bb      	str	r3, [r7, #24]
 800c376:	e00b      	b.n	800c390 <SEGGER_SYSVIEW_SendModule+0xb8>
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	b2da      	uxtb	r2, r3
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	1c59      	adds	r1, r3, #1
 800c380:	61f9      	str	r1, [r7, #28]
 800c382:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	09db      	lsrs	r3, r3, #7
 800c38e:	61bb      	str	r3, [r7, #24]
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	2b7f      	cmp	r3, #127	; 0x7f
 800c394:	d8f0      	bhi.n	800c378 <SEGGER_SYSVIEW_SendModule+0xa0>
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	61fa      	str	r2, [r7, #28]
 800c39c:	69ba      	ldr	r2, [r7, #24]
 800c39e:	b2d2      	uxtb	r2, r2
 800c3a0:	701a      	strb	r2, [r3, #0]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2280      	movs	r2, #128	; 0x80
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7fe ff42 	bl	800b238 <_EncodeStr>
 800c3b4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800c3b6:	2216      	movs	r2, #22
 800c3b8:	68f9      	ldr	r1, [r7, #12]
 800c3ba:	6938      	ldr	r0, [r7, #16]
 800c3bc:	f7ff f87a 	bl	800b4b4 <_SendPacket>
      RECORD_END();
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800c3c6:	bf00      	nop
 800c3c8:	3730      	adds	r7, #48	; 0x30
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	200132e8 	.word	0x200132e8
 800c3d4:	200132f0 	.word	0x200132f0

0800c3d8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800c3de:	4b0c      	ldr	r3, [pc, #48]	; (800c410 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800c3e6:	4b0a      	ldr	r3, [pc, #40]	; (800c410 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1f2      	bne.n	800c3ec <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800c406:	bf00      	nop
 800c408:	3708      	adds	r7, #8
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	200132e8 	.word	0x200132e8

0800c414 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800c414:	b580      	push	{r7, lr}
 800c416:	b086      	sub	sp, #24
 800c418:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800c41a:	f3ef 8311 	mrs	r3, BASEPRI
 800c41e:	f04f 0120 	mov.w	r1, #32
 800c422:	f381 8811 	msr	BASEPRI, r1
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	4817      	ldr	r0, [pc, #92]	; (800c488 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800c42a:	f7fe ff52 	bl	800b2d2 <_PreparePacket>
 800c42e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	617b      	str	r3, [r7, #20]
 800c438:	4b14      	ldr	r3, [pc, #80]	; (800c48c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	e00b      	b.n	800c458 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	b2da      	uxtb	r2, r3
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	1c59      	adds	r1, r3, #1
 800c448:	6179      	str	r1, [r7, #20]
 800c44a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c44e:	b2d2      	uxtb	r2, r2
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	09db      	lsrs	r3, r3, #7
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2b7f      	cmp	r3, #127	; 0x7f
 800c45c:	d8f0      	bhi.n	800c440 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	617a      	str	r2, [r7, #20]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	b2d2      	uxtb	r2, r2
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800c46e:	221b      	movs	r2, #27
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	68b8      	ldr	r0, [r7, #8]
 800c474:	f7ff f81e 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
 800c480:	3718      	adds	r7, #24
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	200132f0 	.word	0x200132f0
 800c48c:	200132ec 	.word	0x200132ec

0800c490 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800c490:	b580      	push	{r7, lr}
 800c492:	b08a      	sub	sp, #40	; 0x28
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c498:	f3ef 8311 	mrs	r3, BASEPRI
 800c49c:	f04f 0120 	mov.w	r1, #32
 800c4a0:	f381 8811 	msr	BASEPRI, r1
 800c4a4:	617b      	str	r3, [r7, #20]
 800c4a6:	4827      	ldr	r0, [pc, #156]	; (800c544 <SEGGER_SYSVIEW_Warn+0xb4>)
 800c4a8:	f7fe ff13 	bl	800b2d2 <_PreparePacket>
 800c4ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800c4ae:	2280      	movs	r2, #128	; 0x80
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	6938      	ldr	r0, [r7, #16]
 800c4b4:	f7fe fec0 	bl	800b238 <_EncodeStr>
 800c4b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800c4be:	2301      	movs	r3, #1
 800c4c0:	623b      	str	r3, [r7, #32]
 800c4c2:	e00b      	b.n	800c4dc <SEGGER_SYSVIEW_Warn+0x4c>
 800c4c4:	6a3b      	ldr	r3, [r7, #32]
 800c4c6:	b2da      	uxtb	r2, r3
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	1c59      	adds	r1, r3, #1
 800c4cc:	6279      	str	r1, [r7, #36]	; 0x24
 800c4ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c4d2:	b2d2      	uxtb	r2, r2
 800c4d4:	701a      	strb	r2, [r3, #0]
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	09db      	lsrs	r3, r3, #7
 800c4da:	623b      	str	r3, [r7, #32]
 800c4dc:	6a3b      	ldr	r3, [r7, #32]
 800c4de:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e0:	d8f0      	bhi.n	800c4c4 <SEGGER_SYSVIEW_Warn+0x34>
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	1c5a      	adds	r2, r3, #1
 800c4e6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4e8:	6a3a      	ldr	r2, [r7, #32]
 800c4ea:	b2d2      	uxtb	r2, r2
 800c4ec:	701a      	strb	r2, [r3, #0]
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	61fb      	str	r3, [r7, #28]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	61bb      	str	r3, [r7, #24]
 800c4fa:	e00b      	b.n	800c514 <SEGGER_SYSVIEW_Warn+0x84>
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	b2da      	uxtb	r2, r3
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	1c59      	adds	r1, r3, #1
 800c504:	61f9      	str	r1, [r7, #28]
 800c506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800c50a:	b2d2      	uxtb	r2, r2
 800c50c:	701a      	strb	r2, [r3, #0]
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	09db      	lsrs	r3, r3, #7
 800c512:	61bb      	str	r3, [r7, #24]
 800c514:	69bb      	ldr	r3, [r7, #24]
 800c516:	2b7f      	cmp	r3, #127	; 0x7f
 800c518:	d8f0      	bhi.n	800c4fc <SEGGER_SYSVIEW_Warn+0x6c>
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	61fa      	str	r2, [r7, #28]
 800c520:	69ba      	ldr	r2, [r7, #24]
 800c522:	b2d2      	uxtb	r2, r2
 800c524:	701a      	strb	r2, [r3, #0]
 800c526:	69fb      	ldr	r3, [r7, #28]
 800c528:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800c52a:	221a      	movs	r2, #26
 800c52c:	68f9      	ldr	r1, [r7, #12]
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f7fe ffc0 	bl	800b4b4 <_SendPacket>
  RECORD_END();
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f383 8811 	msr	BASEPRI, r3
}
 800c53a:	bf00      	nop
 800c53c:	3728      	adds	r7, #40	; 0x28
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200132f0 	.word	0x200132f0

0800c548 <__errno>:
 800c548:	4b01      	ldr	r3, [pc, #4]	; (800c550 <__errno+0x8>)
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	20000034 	.word	0x20000034

0800c554 <__libc_init_array>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	4d0d      	ldr	r5, [pc, #52]	; (800c58c <__libc_init_array+0x38>)
 800c558:	4c0d      	ldr	r4, [pc, #52]	; (800c590 <__libc_init_array+0x3c>)
 800c55a:	1b64      	subs	r4, r4, r5
 800c55c:	10a4      	asrs	r4, r4, #2
 800c55e:	2600      	movs	r6, #0
 800c560:	42a6      	cmp	r6, r4
 800c562:	d109      	bne.n	800c578 <__libc_init_array+0x24>
 800c564:	4d0b      	ldr	r5, [pc, #44]	; (800c594 <__libc_init_array+0x40>)
 800c566:	4c0c      	ldr	r4, [pc, #48]	; (800c598 <__libc_init_array+0x44>)
 800c568:	f000 f914 	bl	800c794 <_init>
 800c56c:	1b64      	subs	r4, r4, r5
 800c56e:	10a4      	asrs	r4, r4, #2
 800c570:	2600      	movs	r6, #0
 800c572:	42a6      	cmp	r6, r4
 800c574:	d105      	bne.n	800c582 <__libc_init_array+0x2e>
 800c576:	bd70      	pop	{r4, r5, r6, pc}
 800c578:	f855 3b04 	ldr.w	r3, [r5], #4
 800c57c:	4798      	blx	r3
 800c57e:	3601      	adds	r6, #1
 800c580:	e7ee      	b.n	800c560 <__libc_init_array+0xc>
 800c582:	f855 3b04 	ldr.w	r3, [r5], #4
 800c586:	4798      	blx	r3
 800c588:	3601      	adds	r6, #1
 800c58a:	e7f2      	b.n	800c572 <__libc_init_array+0x1e>
 800c58c:	0800c890 	.word	0x0800c890
 800c590:	0800c890 	.word	0x0800c890
 800c594:	0800c890 	.word	0x0800c890
 800c598:	0800c894 	.word	0x0800c894

0800c59c <malloc>:
 800c59c:	4b02      	ldr	r3, [pc, #8]	; (800c5a8 <malloc+0xc>)
 800c59e:	4601      	mov	r1, r0
 800c5a0:	6818      	ldr	r0, [r3, #0]
 800c5a2:	f000 b87f 	b.w	800c6a4 <_malloc_r>
 800c5a6:	bf00      	nop
 800c5a8:	20000034 	.word	0x20000034

0800c5ac <free>:
 800c5ac:	4b02      	ldr	r3, [pc, #8]	; (800c5b8 <free+0xc>)
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	6818      	ldr	r0, [r3, #0]
 800c5b2:	f000 b827 	b.w	800c604 <_free_r>
 800c5b6:	bf00      	nop
 800c5b8:	20000034 	.word	0x20000034

0800c5bc <memcmp>:
 800c5bc:	b530      	push	{r4, r5, lr}
 800c5be:	3901      	subs	r1, #1
 800c5c0:	2400      	movs	r4, #0
 800c5c2:	42a2      	cmp	r2, r4
 800c5c4:	d101      	bne.n	800c5ca <memcmp+0xe>
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	e005      	b.n	800c5d6 <memcmp+0x1a>
 800c5ca:	5d03      	ldrb	r3, [r0, r4]
 800c5cc:	3401      	adds	r4, #1
 800c5ce:	5d0d      	ldrb	r5, [r1, r4]
 800c5d0:	42ab      	cmp	r3, r5
 800c5d2:	d0f6      	beq.n	800c5c2 <memcmp+0x6>
 800c5d4:	1b58      	subs	r0, r3, r5
 800c5d6:	bd30      	pop	{r4, r5, pc}

0800c5d8 <memcpy>:
 800c5d8:	440a      	add	r2, r1
 800c5da:	4291      	cmp	r1, r2
 800c5dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5e0:	d100      	bne.n	800c5e4 <memcpy+0xc>
 800c5e2:	4770      	bx	lr
 800c5e4:	b510      	push	{r4, lr}
 800c5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ee:	4291      	cmp	r1, r2
 800c5f0:	d1f9      	bne.n	800c5e6 <memcpy+0xe>
 800c5f2:	bd10      	pop	{r4, pc}

0800c5f4 <memset>:
 800c5f4:	4402      	add	r2, r0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d100      	bne.n	800c5fe <memset+0xa>
 800c5fc:	4770      	bx	lr
 800c5fe:	f803 1b01 	strb.w	r1, [r3], #1
 800c602:	e7f9      	b.n	800c5f8 <memset+0x4>

0800c604 <_free_r>:
 800c604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c606:	2900      	cmp	r1, #0
 800c608:	d048      	beq.n	800c69c <_free_r+0x98>
 800c60a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c60e:	9001      	str	r0, [sp, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	f1a1 0404 	sub.w	r4, r1, #4
 800c616:	bfb8      	it	lt
 800c618:	18e4      	addlt	r4, r4, r3
 800c61a:	f000 f8ad 	bl	800c778 <__malloc_lock>
 800c61e:	4a20      	ldr	r2, [pc, #128]	; (800c6a0 <_free_r+0x9c>)
 800c620:	9801      	ldr	r0, [sp, #4]
 800c622:	6813      	ldr	r3, [r2, #0]
 800c624:	4615      	mov	r5, r2
 800c626:	b933      	cbnz	r3, 800c636 <_free_r+0x32>
 800c628:	6063      	str	r3, [r4, #4]
 800c62a:	6014      	str	r4, [r2, #0]
 800c62c:	b003      	add	sp, #12
 800c62e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c632:	f000 b8a7 	b.w	800c784 <__malloc_unlock>
 800c636:	42a3      	cmp	r3, r4
 800c638:	d90b      	bls.n	800c652 <_free_r+0x4e>
 800c63a:	6821      	ldr	r1, [r4, #0]
 800c63c:	1862      	adds	r2, r4, r1
 800c63e:	4293      	cmp	r3, r2
 800c640:	bf04      	itt	eq
 800c642:	681a      	ldreq	r2, [r3, #0]
 800c644:	685b      	ldreq	r3, [r3, #4]
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	bf04      	itt	eq
 800c64a:	1852      	addeq	r2, r2, r1
 800c64c:	6022      	streq	r2, [r4, #0]
 800c64e:	602c      	str	r4, [r5, #0]
 800c650:	e7ec      	b.n	800c62c <_free_r+0x28>
 800c652:	461a      	mov	r2, r3
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b10b      	cbz	r3, 800c65c <_free_r+0x58>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d9fa      	bls.n	800c652 <_free_r+0x4e>
 800c65c:	6811      	ldr	r1, [r2, #0]
 800c65e:	1855      	adds	r5, r2, r1
 800c660:	42a5      	cmp	r5, r4
 800c662:	d10b      	bne.n	800c67c <_free_r+0x78>
 800c664:	6824      	ldr	r4, [r4, #0]
 800c666:	4421      	add	r1, r4
 800c668:	1854      	adds	r4, r2, r1
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	d1dd      	bne.n	800c62c <_free_r+0x28>
 800c670:	681c      	ldr	r4, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	6053      	str	r3, [r2, #4]
 800c676:	4421      	add	r1, r4
 800c678:	6011      	str	r1, [r2, #0]
 800c67a:	e7d7      	b.n	800c62c <_free_r+0x28>
 800c67c:	d902      	bls.n	800c684 <_free_r+0x80>
 800c67e:	230c      	movs	r3, #12
 800c680:	6003      	str	r3, [r0, #0]
 800c682:	e7d3      	b.n	800c62c <_free_r+0x28>
 800c684:	6825      	ldr	r5, [r4, #0]
 800c686:	1961      	adds	r1, r4, r5
 800c688:	428b      	cmp	r3, r1
 800c68a:	bf04      	itt	eq
 800c68c:	6819      	ldreq	r1, [r3, #0]
 800c68e:	685b      	ldreq	r3, [r3, #4]
 800c690:	6063      	str	r3, [r4, #4]
 800c692:	bf04      	itt	eq
 800c694:	1949      	addeq	r1, r1, r5
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	6054      	str	r4, [r2, #4]
 800c69a:	e7c7      	b.n	800c62c <_free_r+0x28>
 800c69c:	b003      	add	sp, #12
 800c69e:	bd30      	pop	{r4, r5, pc}
 800c6a0:	200133d4 	.word	0x200133d4

0800c6a4 <_malloc_r>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	1ccd      	adds	r5, r1, #3
 800c6a8:	f025 0503 	bic.w	r5, r5, #3
 800c6ac:	3508      	adds	r5, #8
 800c6ae:	2d0c      	cmp	r5, #12
 800c6b0:	bf38      	it	cc
 800c6b2:	250c      	movcc	r5, #12
 800c6b4:	2d00      	cmp	r5, #0
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	db01      	blt.n	800c6be <_malloc_r+0x1a>
 800c6ba:	42a9      	cmp	r1, r5
 800c6bc:	d903      	bls.n	800c6c6 <_malloc_r+0x22>
 800c6be:	230c      	movs	r3, #12
 800c6c0:	6033      	str	r3, [r6, #0]
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c6:	f000 f857 	bl	800c778 <__malloc_lock>
 800c6ca:	4921      	ldr	r1, [pc, #132]	; (800c750 <_malloc_r+0xac>)
 800c6cc:	680a      	ldr	r2, [r1, #0]
 800c6ce:	4614      	mov	r4, r2
 800c6d0:	b99c      	cbnz	r4, 800c6fa <_malloc_r+0x56>
 800c6d2:	4f20      	ldr	r7, [pc, #128]	; (800c754 <_malloc_r+0xb0>)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	b923      	cbnz	r3, 800c6e2 <_malloc_r+0x3e>
 800c6d8:	4621      	mov	r1, r4
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f000 f83c 	bl	800c758 <_sbrk_r>
 800c6e0:	6038      	str	r0, [r7, #0]
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f000 f837 	bl	800c758 <_sbrk_r>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	d123      	bne.n	800c736 <_malloc_r+0x92>
 800c6ee:	230c      	movs	r3, #12
 800c6f0:	6033      	str	r3, [r6, #0]
 800c6f2:	4630      	mov	r0, r6
 800c6f4:	f000 f846 	bl	800c784 <__malloc_unlock>
 800c6f8:	e7e3      	b.n	800c6c2 <_malloc_r+0x1e>
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	1b5b      	subs	r3, r3, r5
 800c6fe:	d417      	bmi.n	800c730 <_malloc_r+0x8c>
 800c700:	2b0b      	cmp	r3, #11
 800c702:	d903      	bls.n	800c70c <_malloc_r+0x68>
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	441c      	add	r4, r3
 800c708:	6025      	str	r5, [r4, #0]
 800c70a:	e004      	b.n	800c716 <_malloc_r+0x72>
 800c70c:	6863      	ldr	r3, [r4, #4]
 800c70e:	42a2      	cmp	r2, r4
 800c710:	bf0c      	ite	eq
 800c712:	600b      	streq	r3, [r1, #0]
 800c714:	6053      	strne	r3, [r2, #4]
 800c716:	4630      	mov	r0, r6
 800c718:	f000 f834 	bl	800c784 <__malloc_unlock>
 800c71c:	f104 000b 	add.w	r0, r4, #11
 800c720:	1d23      	adds	r3, r4, #4
 800c722:	f020 0007 	bic.w	r0, r0, #7
 800c726:	1ac2      	subs	r2, r0, r3
 800c728:	d0cc      	beq.n	800c6c4 <_malloc_r+0x20>
 800c72a:	1a1b      	subs	r3, r3, r0
 800c72c:	50a3      	str	r3, [r4, r2]
 800c72e:	e7c9      	b.n	800c6c4 <_malloc_r+0x20>
 800c730:	4622      	mov	r2, r4
 800c732:	6864      	ldr	r4, [r4, #4]
 800c734:	e7cc      	b.n	800c6d0 <_malloc_r+0x2c>
 800c736:	1cc4      	adds	r4, r0, #3
 800c738:	f024 0403 	bic.w	r4, r4, #3
 800c73c:	42a0      	cmp	r0, r4
 800c73e:	d0e3      	beq.n	800c708 <_malloc_r+0x64>
 800c740:	1a21      	subs	r1, r4, r0
 800c742:	4630      	mov	r0, r6
 800c744:	f000 f808 	bl	800c758 <_sbrk_r>
 800c748:	3001      	adds	r0, #1
 800c74a:	d1dd      	bne.n	800c708 <_malloc_r+0x64>
 800c74c:	e7cf      	b.n	800c6ee <_malloc_r+0x4a>
 800c74e:	bf00      	nop
 800c750:	200133d4 	.word	0x200133d4
 800c754:	200133d8 	.word	0x200133d8

0800c758 <_sbrk_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4d06      	ldr	r5, [pc, #24]	; (800c774 <_sbrk_r+0x1c>)
 800c75c:	2300      	movs	r3, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	f7f4 fc18 	bl	8000f98 <_sbrk>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_sbrk_r+0x1a>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_sbrk_r+0x1a>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	20013d30 	.word	0x20013d30

0800c778 <__malloc_lock>:
 800c778:	4801      	ldr	r0, [pc, #4]	; (800c780 <__malloc_lock+0x8>)
 800c77a:	f000 b809 	b.w	800c790 <__retarget_lock_acquire_recursive>
 800c77e:	bf00      	nop
 800c780:	20013d38 	.word	0x20013d38

0800c784 <__malloc_unlock>:
 800c784:	4801      	ldr	r0, [pc, #4]	; (800c78c <__malloc_unlock+0x8>)
 800c786:	f000 b804 	b.w	800c792 <__retarget_lock_release_recursive>
 800c78a:	bf00      	nop
 800c78c:	20013d38 	.word	0x20013d38

0800c790 <__retarget_lock_acquire_recursive>:
 800c790:	4770      	bx	lr

0800c792 <__retarget_lock_release_recursive>:
 800c792:	4770      	bx	lr

0800c794 <_init>:
 800c794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c796:	bf00      	nop
 800c798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c79a:	bc08      	pop	{r3}
 800c79c:	469e      	mov	lr, r3
 800c79e:	4770      	bx	lr

0800c7a0 <_fini>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	bf00      	nop
 800c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a6:	bc08      	pop	{r3}
 800c7a8:	469e      	mov	lr, r3
 800c7aa:	4770      	bx	lr
