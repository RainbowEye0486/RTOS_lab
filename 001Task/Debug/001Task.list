
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007610  08007610  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007610  08007610  00017610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007618  08007618  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001448c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014504  20014504  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019473  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003306  00000000  00000000  0003951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b4f  00000000  00000000  0003ec70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014e27  00000000  00000000  000627bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7bca  00000000  00000000  000775e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014f1b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052a0  00000000  00000000  0014f204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800746c 	.word	0x0800746c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800746c 	.word	0x0800746c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001444c 	.word	0x2001444c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f000 fb7f 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f851 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 f8b9 	bl	800078c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 800061a:	4b20      	ldr	r3, [pc, #128]	; (800069c <main+0x94>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <main+0x94>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000626:	f004 fa1d 	bl	8004a64 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800062a:	f005 fcbd 	bl	8005fa8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from task 1", 2, &task1_handle);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <main+0x98>)
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4919      	ldr	r1, [pc, #100]	; (80006a4 <main+0x9c>)
 800063e:	481a      	ldr	r0, [pc, #104]	; (80006a8 <main+0xa0>)
 8000640:	f002 fb8e 	bl	8002d60 <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d00a      	beq.n	8000662 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065e:	bf00      	nop
 8000660:	e7fe      	b.n	8000660 <main+0x58>
  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from task 2", 2, &task2_handle);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <main+0xa4>)
 800066c:	22c8      	movs	r2, #200	; 0xc8
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <main+0xa8>)
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0xac>)
 8000672:	f002 fb75 	bl	8002d60 <xTaskCreate>
 8000676:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d00a      	beq.n	8000694 <main+0x8c>
        __asm volatile
 800067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000682:	f383 8811 	msr	BASEPRI, r3
 8000686:	f3bf 8f6f 	isb	sy
 800068a:	f3bf 8f4f 	dsb	sy
 800068e:	60fb      	str	r3, [r7, #12]
    }
 8000690:	bf00      	nop
 8000692:	e7fe      	b.n	8000692 <main+0x8a>

  vTaskStartScheduler();
 8000694:	f002 fcc8 	bl	8003028 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000698:	e7fe      	b.n	8000698 <main+0x90>
 800069a:	bf00      	nop
 800069c:	e0001000 	.word	0xe0001000
 80006a0:	08007484 	.word	0x08007484
 80006a4:	0800749c 	.word	0x0800749c
 80006a8:	08000a49 	.word	0x08000a49
 80006ac:	080074a4 	.word	0x080074a4
 80006b0:	080074bc 	.word	0x080074bc
 80006b4:	08000a81 	.word	0x08000a81

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fa94 	bl	8006bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	; (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	; 0x32
 800072e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fdc1 	bl	80012c4 <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000748:	f000 f9c8 	bl	8000adc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f822 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000776:	f000 f9b1 	bl	8000adc <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba2      	ldr	r3, [pc, #648]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa1      	ldr	r2, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9f      	ldr	r3, [pc, #636]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9b      	ldr	r3, [pc, #620]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b94      	ldr	r3, [pc, #592]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a93      	ldr	r2, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8c      	ldr	r2, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b86      	ldr	r3, [pc, #536]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a85      	ldr	r2, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b7f      	ldr	r3, [pc, #508]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7e      	ldr	r2, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4879      	ldr	r0, [pc, #484]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000850:	f000 fd1e 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4877      	ldr	r0, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800085a:	f000 fd19 	bl	8001290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4875      	ldr	r0, [pc, #468]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000866:	f000 fd13 	bl	8001290 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	486c      	ldr	r0, [pc, #432]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000882:	f000 fb69 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000886:	2301      	movs	r3, #1
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4866      	ldr	r0, [pc, #408]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800089e:	f000 fb5b 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a2:	2308      	movs	r3, #8
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b2:	2305      	movs	r3, #5
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	485e      	ldr	r0, [pc, #376]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80008be:	f000 fb4b 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	485a      	ldr	r0, [pc, #360]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008d8:	f000 fb3e 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008dc:	2310      	movs	r3, #16
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ec:	2306      	movs	r3, #6
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4852      	ldr	r0, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80008f8:	f000 fb2e 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008fc:	23e0      	movs	r3, #224	; 0xe0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800090c:	2305      	movs	r3, #5
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	484a      	ldr	r0, [pc, #296]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000918:	f000 fb1e 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800091c:	2304      	movs	r3, #4
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000930:	f000 fb12 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000946:	2305      	movs	r3, #5
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	483c      	ldr	r0, [pc, #240]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000952:	f000 fb01 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000956:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	4833      	ldr	r0, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000970:	f000 faf2 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4829      	ldr	r0, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 8000992:	f000 fae1 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4825      	ldr	r0, [pc, #148]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ac:	f000 fad4 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c2:	230a      	movs	r3, #10
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 80009ce:	f000 fac3 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d2:	2320      	movs	r3, #32
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4815      	ldr	r0, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 80009e6:	f000 fab7 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f0:	2312      	movs	r3, #18
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fc:	2304      	movs	r3, #4
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480f      	ldr	r0, [pc, #60]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000a08:	f000 faa6 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000a22:	f000 fa99 	bl	8000f58 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <task1_handler>:

/* USER CODE BEGIN 4 */

void task1_handler(void *parameters) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1) {
		snprintf(msg, 100, (char *)parameters);
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	2164      	movs	r1, #100	; 0x64
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f006 f8d3 	bl	8006c04 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 f810 	bl	8006a88 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <task1_handler+0x34>)
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f3bf 8f4f 	dsb	sy
 8000a74:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, (char *)parameters);
 8000a78:	e7ea      	b.n	8000a50 <task1_handler+0x8>
 8000a7a:	bf00      	nop
 8000a7c:	e000ed04 	.word	0xe000ed04

08000a80 <task2_handler>:
	}
}

void task2_handler(void *parameters) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	; 0x70
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1) {
		snprintf(msg, 100, (char *)parameters);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	2164      	movs	r1, #100	; 0x64
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 f8b7 	bl	8006c04 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 fff4 	bl	8006a88 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <task2_handler+0x34>)
 8000aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, (char *)parameters);
 8000ab0:	e7ea      	b.n	8000a88 <task2_handler+0x8>
 8000ab2:	bf00      	nop
 8000ab4:	e000ed04 	.word	0xe000ed04

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 f943 	bl	8000d54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40001000 	.word	0x40001000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_MspInit+0x4c>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_MspInit+0x4c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b26:	f003 fbe7 	bl	80042f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	6879      	ldr	r1, [r7, #4]
 8000b4c:	2036      	movs	r0, #54	; 0x36
 8000b4e:	f000 f9d9 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f000 f9f2 	bl	8000f3c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6413      	str	r3, [r2, #64]	; 0x40
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xa4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f800 	bl	8001b84 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b84:	f000 ffea 	bl	8001b5c <HAL_RCC_GetPCLK1Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_InitTick+0xa8>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_InitTick+0xac>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_InitTick+0xb0>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_InitTick+0xac>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_InitTick+0xac>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_InitTick+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_InitTick+0xac>)
 8000bbe:	f001 f813 	bl	8001be8 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_InitTick+0xac>)
 8000bca:	f001 f867 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	200143c0 	.word	0x200143c0
 8000be8:	40001000 	.word	0x40001000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler+0x4>

08000bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler+0x4>

08000bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler+0x4>

08000c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <UsageFault_Handler+0x4>

08000c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <TIM6_DAC_IRQHandler+0x10>)
 8000c1e:	f001 f8ad 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200143c0 	.word	0x200143c0

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f005 ff84 	bl	8006b68 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20020000 	.word	0x20020000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	20000094 	.word	0x20000094
 8000c94:	20014508 	.word	0x20014508

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd8:	4c0b      	ldr	r4, [pc, #44]	; (8000d08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ce6:	f7ff ffd7 	bl	8000c98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f005 ff43 	bl	8006b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc8b 	bl	8000608 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d00:	08007620 	.word	0x08007620
  ldr r2, =_sbss
 8000d04:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d08:	20014504 	.word	0x20014504

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <HAL_Init+0x40>)
 8000d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <HAL_Init+0x40>)
 8000d26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a07      	ldr	r2, [pc, #28]	; (8000d50 <HAL_Init+0x40>)
 8000d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f8d8 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff fefa 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff fed0 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008
 8000d78:	20014408 	.word	0x20014408

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20014408 	.word	0x20014408

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b089      	sub	sp, #36	; 0x24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
 8000f72:	e16b      	b.n	800124c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	f040 815a 	bne.w	8001246 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d005      	beq.n	8000faa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d130      	bne.n	800100c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	2203      	movs	r2, #3
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	091b      	lsrs	r3, r3, #4
 8000ff6:	f003 0201 	and.w	r2, r3, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b03      	cmp	r3, #3
 8001016:	d017      	beq.n	8001048 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d123      	bne.n	800109c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	08da      	lsrs	r2, r3, #3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3208      	adds	r2, #8
 800105c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f003 0307 	and.w	r3, r3, #7
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	220f      	movs	r2, #15
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	08da      	lsrs	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3208      	adds	r2, #8
 8001096:	69b9      	ldr	r1, [r7, #24]
 8001098:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0203 	and.w	r2, r3, #3
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f000 80b4 	beq.w	8001246 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b60      	ldr	r3, [pc, #384]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <HAL_GPIO_Init+0x30c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <HAL_GPIO_Init+0x310>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_GPIO_Init+0x314>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_Init+0x226>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a51      	ldr	r2, [pc, #324]	; (8001270 <HAL_GPIO_Init+0x318>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x222>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a50      	ldr	r2, [pc, #320]	; (8001274 <HAL_GPIO_Init+0x31c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x21e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <HAL_GPIO_Init+0x320>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x21a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4e      	ldr	r2, [pc, #312]	; (800127c <HAL_GPIO_Init+0x324>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x216>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <HAL_GPIO_Init+0x328>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x212>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_GPIO_Init+0x32c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x20e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4b      	ldr	r2, [pc, #300]	; (8001288 <HAL_GPIO_Init+0x330>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x20a>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_Init+0x228>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_Init+0x228>
 800117e:	2300      	movs	r3, #0
 8001180:	69fa      	ldr	r2, [r7, #28]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001190:	4935      	ldr	r1, [pc, #212]	; (8001268 <HAL_GPIO_Init+0x310>)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	089b      	lsrs	r3, r3, #2
 8001196:	3302      	adds	r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800119e:	4b3b      	ldr	r3, [pc, #236]	; (800128c <HAL_GPIO_Init+0x334>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c2:	4a32      	ldr	r2, [pc, #200]	; (800128c <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_GPIO_Init+0x334>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ec:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <HAL_GPIO_Init+0x334>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a1d      	ldr	r2, [pc, #116]	; (800128c <HAL_GPIO_Init+0x334>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_GPIO_Init+0x334>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_GPIO_Init+0x334>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	2b0f      	cmp	r3, #15
 8001250:	f67f ae90 	bls.w	8000f74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40013800 	.word	0x40013800
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400
 8001274:	40020800 	.word	0x40020800
 8001278:	40020c00 	.word	0x40020c00
 800127c:	40021000 	.word	0x40021000
 8001280:	40021400 	.word	0x40021400
 8001284:	40021800 	.word	0x40021800
 8001288:	40021c00 	.word	0x40021c00
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
 800129c:	4613      	mov	r3, r2
 800129e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012a0:	787b      	ldrb	r3, [r7, #1]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a6:	887a      	ldrh	r2, [r7, #2]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ac:	e003      	b.n	80012b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	041a      	lsls	r2, r3, #16
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e264      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4ba3      	ldr	r3, [pc, #652]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4ba0      	ldr	r3, [pc, #640]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b9d      	ldr	r3, [pc, #628]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b99      	ldr	r3, [pc, #612]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e23f      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b91      	ldr	r3, [pc, #580]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a90      	ldr	r2, [pc, #576]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b8b      	ldr	r3, [pc, #556]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a8a      	ldr	r2, [pc, #552]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a87      	ldr	r2, [pc, #540]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b84      	ldr	r3, [pc, #528]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a83      	ldr	r2, [pc, #524]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b81      	ldr	r3, [pc, #516]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a80      	ldr	r2, [pc, #512]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcfe 	bl	8000d7c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcfa 	bl	8000d7c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e204      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b76      	ldr	r3, [pc, #472]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcea 	bl	8000d7c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fce6 	bl	8000d7c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f0      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b65      	ldr	r3, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b62      	ldr	r3, [pc, #392]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b5f      	ldr	r3, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c4      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b56      	ldr	r3, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4952      	ldr	r1, [pc, #328]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc9f 	bl	8000d7c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc9b 	bl	8000d7c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a5      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4940      	ldr	r1, [pc, #256]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <HAL_RCC_OscConfig+0x2b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc7e 	bl	8000d7c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc7a 	bl	8000d7c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e184      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d030      	beq.n	8001510 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b30      	ldr	r3, [pc, #192]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc5e 	bl	8000d7c <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc5a 	bl	8000d7c <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e164      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e015      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x2b4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc47 	bl	8000d7c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc43 	bl	8000d7c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e14d      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80a0 	beq.w	800165e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154a:	2301      	movs	r3, #1
 800154c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001556:	2b00      	cmp	r3, #0
 8001558:	d121      	bne.n	800159e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_RCC_OscConfig+0x2b8>)
 8001560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001566:	f7ff fc09 	bl	8000d7c <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800156c:	e011      	b.n	8001592 <HAL_RCC_OscConfig+0x2ce>
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	42470000 	.word	0x42470000
 8001578:	42470e80 	.word	0x42470e80
 800157c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001580:	f7ff fbfc 	bl	8000d7c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e106      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b85      	ldr	r3, [pc, #532]	; (80017a8 <HAL_RCC_OscConfig+0x4e4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x2f0>
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015aa:	4a80      	ldr	r2, [pc, #512]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6713      	str	r3, [r2, #112]	; 0x70
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x312>
 80015bc:	4b7b      	ldr	r3, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c0:	4a7a      	ldr	r2, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6713      	str	r3, [r2, #112]	; 0x70
 80015c8:	4b78      	ldr	r3, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a77      	ldr	r2, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x32a>
 80015d6:	4b75      	ldr	r3, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a74      	ldr	r2, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	4b72      	ldr	r3, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a71      	ldr	r2, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbc1 	bl	8000d7c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff fbbd 	bl	8000d7c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0c5      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x33a>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbab 	bl	8000d7c <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff fba7 	bl	8000d7c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0af      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b5a      	ldr	r3, [pc, #360]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a55      	ldr	r2, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 809b 	beq.w	800179e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001668:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d05c      	beq.n	800172e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d141      	bne.n	8001700 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb7b 	bl	8000d7c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb77 	bl	8000d7c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e081      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169c:	4b43      	ldr	r3, [pc, #268]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	3b01      	subs	r3, #1
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	061b      	lsls	r3, r3, #24
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb50 	bl	8000d7c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e0:	f7ff fb4c 	bl	8000d7c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e056      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x41c>
 80016fe:	e04e      	b.n	800179e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fb39 	bl	8000d7c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170e:	f7ff fb35 	bl	8000d7c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e03f      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f0      	bne.n	800170e <HAL_RCC_OscConfig+0x44a>
 800172c:	e037      	b.n	800179e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e032      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_RCC_OscConfig+0x4e8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d028      	beq.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d121      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d11a      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176a:	4013      	ands	r3, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001770:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001772:	4293      	cmp	r3, r2
 8001774:	d111      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d107      	bne.n	800179a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40007000 	.word	0x40007000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470060 	.word	0x42470060

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa6a 	bl	8000d7c <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa66 	bl	8000d7c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f8ec 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	080075a0 	.word	0x080075a0
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	2300      	movs	r3, #0
 8001992:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80bd 	bhi.w	8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0b7      	b.n	8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80019b6:	60bb      	str	r3, [r7, #8]
       break;
 80019b8:	e0b7      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b61      	ldr	r3, [pc, #388]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019bc:	60bb      	str	r3, [r7, #8]
      break;
 80019be:	e0b4      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d04d      	beq.n	8001a72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	461a      	mov	r2, r3
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	ea02 0800 	and.w	r8, r2, r0
 80019ee:	ea03 0901 	and.w	r9, r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	014b      	lsls	r3, r1, #5
 8001a00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a04:	0142      	lsls	r2, r0, #5
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	ebb0 0008 	subs.w	r0, r0, r8
 8001a0e:	eb61 0109 	sbc.w	r1, r1, r9
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a20:	0182      	lsls	r2, r0, #6
 8001a22:	1a12      	subs	r2, r2, r0
 8001a24:	eb63 0301 	sbc.w	r3, r3, r1
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	00d9      	lsls	r1, r3, #3
 8001a32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a36:	00d0      	lsls	r0, r2, #3
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	eb12 0208 	adds.w	r2, r2, r8
 8001a40:	eb43 0309 	adc.w	r3, r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0259      	lsls	r1, r3, #9
 8001a4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a52:	0250      	lsls	r0, r2, #9
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	f7fe fc54 	bl	8000310 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e04a      	b.n	8001b08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	099b      	lsrs	r3, r3, #6
 8001a78:	461a      	mov	r2, r3
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a82:	f04f 0100 	mov.w	r1, #0
 8001a86:	ea02 0400 	and.w	r4, r2, r0
 8001a8a:	ea03 0501 	and.w	r5, r3, r1
 8001a8e:	4620      	mov	r0, r4
 8001a90:	4629      	mov	r1, r5
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	014b      	lsls	r3, r1, #5
 8001a9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001aa0:	0142      	lsls	r2, r0, #5
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	1b00      	subs	r0, r0, r4
 8001aa8:	eb61 0105 	sbc.w	r1, r1, r5
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	018b      	lsls	r3, r1, #6
 8001ab6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aba:	0182      	lsls	r2, r0, #6
 8001abc:	1a12      	subs	r2, r2, r0
 8001abe:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 0100 	mov.w	r1, #0
 8001aca:	00d9      	lsls	r1, r3, #3
 8001acc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ad0:	00d0      	lsls	r0, r2, #3
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	1912      	adds	r2, r2, r4
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0299      	lsls	r1, r3, #10
 8001ae6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001aea:	0290      	lsls	r0, r2, #10
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	f7fe fc08 	bl	8000310 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b20:	60bb      	str	r3, [r7, #8]
      break;
 8001b22:	e002      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b26:	60bb      	str	r3, [r7, #8]
      break;
 8001b28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	20000000 	.word	0x20000000

08001b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b60:	f7ff fff0 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	4903      	ldr	r1, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080075b0 	.word	0x080075b0

08001b84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	220f      	movs	r2, #15
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	08db      	lsrs	r3, r3, #3
 8001bbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <HAL_RCC_GetClockConfig+0x60>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0207 	and.w	r2, r3, #7
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9d8 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04e      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d01d      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8ee 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8e0 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8f1 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8c4 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8b6 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8c7 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f89a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f88c 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f89d 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f870 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f862 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f873 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fddc 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f902 	bl	8002130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f838 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8cc 	bl	800211c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <TIM_Base_SetConfig+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <TIM_Base_SetConfig+0x124>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <TIM_Base_SetConfig+0x128>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <TIM_Base_SetConfig+0x130>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <TIM_Base_SetConfig+0x134>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <TIM_Base_SetConfig+0x138>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <TIM_Base_SetConfig+0x124>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40000c00 	.word	0x40000c00
 8002100:	40010400 	.word	0x40010400
 8002104:	40014000 	.word	0x40014000
 8002108:	40014400 	.word	0x40014400
 800210c:	40014800 	.word	0x40014800
 8002110:	40001800 	.word	0x40001800
 8002114:	40001c00 	.word	0x40001c00
 8002118:	40002000 	.word	0x40002000

0800211c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 0208 	add.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0208 	add.w	r2, r3, #8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00c      	b.n	8002220 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3308      	adds	r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e002      	b.n	8002214 <vListInsert+0x2e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d2f6      	bcs.n	800220e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6852      	ldr	r2, [r2, #4]
 8002278:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d103      	bne.n	800228c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <xQueueGenericReset+0x2a>
        __asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	60bb      	str	r3, [r7, #8]
    }
 80022d2:	bf00      	nop
 80022d4:	e7fe      	b.n	80022d4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022d6:	f002 f88d 	bl	80043f4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	441a      	add	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	3b01      	subs	r3, #1
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	441a      	add	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22ff      	movs	r2, #255	; 0xff
 800231a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d114      	bne.n	8002356 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01a      	beq.n	800236a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3310      	adds	r3, #16
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f91f 	bl	800357c <xTaskRemoveFromEventList>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <xQueueGenericReset+0xcc>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	e009      	b.n	800236a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fef2 	bl	8002144 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3324      	adds	r3, #36	; 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feed 	bl	8002144 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800236a:	f002 f873 	bl	8004454 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	e000ed04 	.word	0xe000ed04

0800237c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	61bb      	str	r3, [r7, #24]
    }
 80023a2:	bf00      	nop
 80023a4:	e7fe      	b.n	80023a4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <xQueueGenericCreate+0x48>
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d101      	bne.n	80023c8 <xQueueGenericCreate+0x4c>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <xQueueGenericCreate+0x4e>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <xQueueGenericCreate+0x68>
        __asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	617b      	str	r3, [r7, #20]
    }
 80023e0:	bf00      	nop
 80023e2:	e7fe      	b.n	80023e2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023ea:	d90a      	bls.n	8002402 <xQueueGenericCreate+0x86>
        __asm volatile
 80023ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f0:	f383 8811 	msr	BASEPRI, r3
 80023f4:	f3bf 8f6f 	isb	sy
 80023f8:	f3bf 8f4f 	dsb	sy
 80023fc:	613b      	str	r3, [r7, #16]
    }
 80023fe:	bf00      	nop
 8002400:	e7fe      	b.n	8002400 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	3350      	adds	r3, #80	; 0x50
 8002406:	4618      	mov	r0, r3
 8002408:	f002 f920 	bl	800464c <pvPortMalloc>
 800240c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	3350      	adds	r3, #80	; 0x50
 800241c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800241e:	79fa      	ldrb	r2, [r7, #7]
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f805 	bl	800243a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002430:	6a3b      	ldr	r3, [r7, #32]
    }
 8002432:	4618      	mov	r0, r3
 8002434:	3728      	adds	r7, #40	; 0x28
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e002      	b.n	800245c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002468:	2101      	movs	r1, #1
 800246a:	69b8      	ldr	r0, [r7, #24]
 800246c:	f7ff ff1e 	bl	80022ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	78fa      	ldrb	r2, [r7, #3]
 8002474:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	2073      	movs	r0, #115	; 0x73
 8002480:	f003 fc8a 	bl	8005d98 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b090      	sub	sp, #64	; 0x40
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80024a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <xQueueGenericSend+0x32>
        __asm volatile
 80024a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ac:	f383 8811 	msr	BASEPRI, r3
 80024b0:	f3bf 8f6f 	isb	sy
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80024ba:	bf00      	nop
 80024bc:	e7fe      	b.n	80024bc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <xQueueGenericSend+0x40>
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <xQueueGenericSend+0x44>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <xQueueGenericSend+0x46>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <xQueueGenericSend+0x60>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d103      	bne.n	80024fa <xQueueGenericSend+0x6e>
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSend+0x72>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSend+0x74>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0x8e>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	623b      	str	r3, [r7, #32]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800251a:	f001 f993 	bl	8003844 <xTaskGetSchedulerState>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <xQueueGenericSend+0x9e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <xQueueGenericSend+0xa2>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueGenericSend+0xa4>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xQueueGenericSend+0xbe>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61fb      	str	r3, [r7, #28]
    }
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800254a:	f001 ff53 	bl	80043f4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <xQueueGenericSend+0xd4>
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d136      	bne.n	80025ce <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002562:	4618      	mov	r0, r3
 8002564:	f004 f9a4 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	460b      	mov	r3, r1
 8002572:	4601      	mov	r1, r0
 8002574:	205a      	movs	r0, #90	; 0x5a
 8002576:	f003 fc85 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002580:	f000 fa78 	bl	8002a74 <prvCopyDataToQueue>
 8002584:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b00      	cmp	r3, #0
 800258c:	d010      	beq.n	80025b0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	3324      	adds	r3, #36	; 0x24
 8002592:	4618      	mov	r0, r3
 8002594:	f000 fff2 	bl	800357c <xTaskRemoveFromEventList>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800259e:	4b4d      	ldr	r3, [pc, #308]	; (80026d4 <xQueueGenericSend+0x248>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e00a      	b.n	80025c6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80025b6:	4b47      	ldr	r3, [pc, #284]	; (80026d4 <xQueueGenericSend+0x248>)
 80025b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f3bf 8f4f 	dsb	sy
 80025c2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025c6:	f001 ff45 	bl	8004454 <vPortExitCritical>
                return pdPASS;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07d      	b.n	80026ca <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d110      	bne.n	80025f6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025d4:	f001 ff3e 	bl	8004454 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 f968 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	460b      	mov	r3, r1
 80025ea:	4601      	mov	r1, r0
 80025ec:	205a      	movs	r0, #90	; 0x5a
 80025ee:	f003 fc49 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e069      	b.n	80026ca <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4618      	mov	r0, r3
 8002602:	f001 f821 	bl	8003648 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002606:	2301      	movs	r3, #1
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800260a:	f001 ff23 	bl	8004454 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800260e:	f000 fd6d 	bl	80030ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002612:	f001 feef 	bl	80043f4 <vPortEnterCritical>
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800261c:	b25b      	sxtb	r3, r3
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d103      	bne.n	800262c <xQueueGenericSend+0x1a0>
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d103      	bne.n	8002642 <xQueueGenericSend+0x1b6>
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002642:	f001 ff07 	bl	8004454 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002646:	1d3a      	adds	r2, r7, #4
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4611      	mov	r1, r2
 800264e:	4618      	mov	r0, r3
 8002650:	f001 f810 	bl	8003674 <xTaskCheckForTimeOut>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d124      	bne.n	80026a4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800265a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800265c:	f000 fb02 	bl	8002c64 <prvIsQueueFull>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d018      	beq.n	8002698 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	3310      	adds	r3, #16
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f000 ff32 	bl	80034d8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002676:	f000 fa8d 	bl	8002b94 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800267a:	f000 fd45 	bl	8003108 <xTaskResumeAll>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f47f af62 	bne.w	800254a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <xQueueGenericSend+0x248>)
 8002688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	f3bf 8f6f 	isb	sy
 8002696:	e758      	b.n	800254a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800269a:	f000 fa7b 	bl	8002b94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800269e:	f000 fd33 	bl	8003108 <xTaskResumeAll>
 80026a2:	e752      	b.n	800254a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026a6:	f000 fa75 	bl	8002b94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026aa:	f000 fd2d 	bl	8003108 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 f8fd 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	460b      	mov	r3, r1
 80026c0:	4601      	mov	r1, r0
 80026c2:	205a      	movs	r0, #90	; 0x5a
 80026c4:	f003 fbde 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026c8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3738      	adds	r7, #56	; 0x38
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	; 0x40
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10a      	bne.n	8002706 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002702:	bf00      	nop
 8002704:	e7fe      	b.n	8002704 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <xQueueGenericSendFromISR+0x3c>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <xQueueGenericSendFromISR+0x40>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <xQueueGenericSendFromISR+0x42>
 8002718:	2300      	movs	r3, #0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10a      	bne.n	8002734 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002730:	bf00      	nop
 8002732:	e7fe      	b.n	8002732 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d103      	bne.n	8002742 <xQueueGenericSendFromISR+0x6a>
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <xQueueGenericSendFromISR+0x6e>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <xQueueGenericSendFromISR+0x70>
 8002746:	2300      	movs	r3, #0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	623b      	str	r3, [r7, #32]
    }
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002762:	f001 ff33 	bl	80045cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002766:	f3ef 8211 	mrs	r2, BASEPRI
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	61fa      	str	r2, [r7, #28]
 800277c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800277e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	429a      	cmp	r2, r3
 800278c:	d302      	bcc.n	8002794 <xQueueGenericSendFromISR+0xbc>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d148      	bne.n	8002826 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800279a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f882 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 80027ac:	4601      	mov	r1, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	461a      	mov	r2, r3
 80027b2:	2060      	movs	r0, #96	; 0x60
 80027b4:	f003 fa96 	bl	8005ce4 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027be:	f000 f959 	bl	8002a74 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d112      	bne.n	80027f2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d025      	beq.n	8002820 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	3324      	adds	r3, #36	; 0x24
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fecf 	bl	800357c <xTaskRemoveFromEventList>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01d      	beq.n	8002820 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01a      	beq.n	8002820 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e016      	b.n	8002820 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027f6:	2b7f      	cmp	r3, #127	; 0x7f
 80027f8:	d10a      	bne.n	8002810 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	617b      	str	r3, [r7, #20]
    }
 800280c:	bf00      	nop
 800280e:	e7fe      	b.n	800280e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002814:	3301      	adds	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	b25a      	sxtb	r2, r3
 800281a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002820:	2301      	movs	r3, #1
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002824:	e00b      	b.n	800283e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	4618      	mov	r0, r3
 800282a:	f004 f841 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 800282e:	4601      	mov	r1, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	2060      	movs	r0, #96	; 0x60
 8002836:	f003 fa55 	bl	8005ce4 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800283a:	2300      	movs	r3, #0
 800283c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002848:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800284a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800284c:	4618      	mov	r0, r3
 800284e:	3740      	adds	r7, #64	; 0x40
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b08f      	sub	sp, #60	; 0x3c
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <xQueueReceive+0x30>
        __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	623b      	str	r3, [r7, #32]
    }
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <xQueueReceive+0x3e>
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <xQueueReceive+0x42>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueReceive+0x44>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueReceive+0x5e>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	61fb      	str	r3, [r7, #28]
    }
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b2:	f000 ffc7 	bl	8003844 <xTaskGetSchedulerState>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <xQueueReceive+0x6e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueReceive+0x72>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueReceive+0x74>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xQueueReceive+0x8e>
        __asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	61bb      	str	r3, [r7, #24]
    }
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028e2:	f001 fd87 	bl	80043f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d02f      	beq.n	8002952 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f6:	f000 f927 	bl	8002b48 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	4618      	mov	r0, r3
 80028fe:	f003 ffd7 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002902:	4604      	mov	r4, r0
 8002904:	2000      	movs	r0, #0
 8002906:	f003 ffd3 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2101      	movs	r1, #1
 8002910:	9100      	str	r1, [sp, #0]
 8002912:	4621      	mov	r1, r4
 8002914:	205c      	movs	r0, #92	; 0x5c
 8002916:	f003 fab5 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00f      	beq.n	800294a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	3310      	adds	r3, #16
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fe24 	bl	800357c <xTaskRemoveFromEventList>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800293a:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <xQueueReceive+0x21c>)
 800293c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800294a:	f001 fd83 	bl	8004454 <vPortExitCritical>
                return pdPASS;
 800294e:	2301      	movs	r3, #1
 8002950:	e08a      	b.n	8002a68 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d113      	bne.n	8002980 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002958:	f001 fd7c 	bl	8004454 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	4618      	mov	r0, r3
 8002960:	f003 ffa6 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002964:	4604      	mov	r4, r0
 8002966:	2000      	movs	r0, #0
 8002968:	f003 ffa2 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 800296c:	4602      	mov	r2, r0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2101      	movs	r1, #1
 8002972:	9100      	str	r1, [sp, #0]
 8002974:	4621      	mov	r1, r4
 8002976:	205c      	movs	r0, #92	; 0x5c
 8002978:	f003 fa84 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800297c:	2300      	movs	r3, #0
 800297e:	e073      	b.n	8002a68 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002986:	f107 0310 	add.w	r3, r7, #16
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fe5c 	bl	8003648 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002990:	2301      	movs	r3, #1
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002994:	f001 fd5e 	bl	8004454 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002998:	f000 fba8 	bl	80030ec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800299c:	f001 fd2a 	bl	80043f4 <vPortEnterCritical>
 80029a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a6:	b25b      	sxtb	r3, r3
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d103      	bne.n	80029b6 <xQueueReceive+0x162>
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029bc:	b25b      	sxtb	r3, r3
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d103      	bne.n	80029cc <xQueueReceive+0x178>
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029cc:	f001 fd42 	bl	8004454 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029d0:	1d3a      	adds	r2, r7, #4
 80029d2:	f107 0310 	add.w	r3, r7, #16
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 fe4b 	bl	8003674 <xTaskCheckForTimeOut>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d124      	bne.n	8002a2e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e6:	f000 f927 	bl	8002c38 <prvIsQueueEmpty>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d018      	beq.n	8002a22 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f2:	3324      	adds	r3, #36	; 0x24
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 fd6d 	bl	80034d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a00:	f000 f8c8 	bl	8002b94 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a04:	f000 fb80 	bl	8003108 <xTaskResumeAll>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f47f af69 	bne.w	80028e2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <xQueueReceive+0x21c>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	e75f      	b.n	80028e2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a24:	f000 f8b6 	bl	8002b94 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a28:	f000 fb6e 	bl	8003108 <xTaskResumeAll>
 8002a2c:	e759      	b.n	80028e2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a30:	f000 f8b0 	bl	8002b94 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a34:	f000 fb68 	bl	8003108 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a3a:	f000 f8fd 	bl	8002c38 <prvIsQueueEmpty>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f43f af4e 	beq.w	80028e2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 ff31 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002a4e:	4604      	mov	r4, r0
 8002a50:	2000      	movs	r0, #0
 8002a52:	f003 ff2d 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002a56:	4602      	mov	r2, r0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	9100      	str	r1, [sp, #0]
 8002a5e:	4621      	mov	r1, r4
 8002a60:	205c      	movs	r0, #92	; 0x5c
 8002a62:	f003 fa0f 	bl	8005e84 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a66:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3734      	adds	r7, #52	; 0x34
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d14d      	bne.n	8002b36 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 feee 	bl	8003880 <xTaskPriorityDisinherit>
 8002aa4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	e043      	b.n	8002b36 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d119      	bne.n	8002ae8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6858      	ldr	r0, [r3, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	461a      	mov	r2, r3
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	f004 f88a 	bl	8006bd8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	441a      	add	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d32b      	bcc.n	8002b36 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	e026      	b.n	8002b36 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68d8      	ldr	r0, [r3, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	461a      	mov	r2, r3
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	f004 f870 	bl	8006bd8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	425b      	negs	r3, r3
 8002b02:	441a      	add	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d207      	bcs.n	8002b24 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	425b      	negs	r3, r3
 8002b1e:	441a      	add	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d105      	bne.n	8002b36 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b3e:	697b      	ldr	r3, [r7, #20]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d303      	bcc.n	8002b7c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68d9      	ldr	r1, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	461a      	mov	r2, r3
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	f004 f826 	bl	8006bd8 <memcpy>
    }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b9c:	f001 fc2a 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ba6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ba8:	e011      	b.n	8002bce <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d012      	beq.n	8002bd8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3324      	adds	r3, #36	; 0x24
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fce0 	bl	800357c <xTaskRemoveFromEventList>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bc2:	f000 fdbd 	bl	8003740 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	dce9      	bgt.n	8002baa <prvUnlockQueue+0x16>
 8002bd6:	e000      	b.n	8002bda <prvUnlockQueue+0x46>
                        break;
 8002bd8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	22ff      	movs	r2, #255	; 0xff
 8002bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002be2:	f001 fc37 	bl	8004454 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002be6:	f001 fc05 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bf0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bf2:	e011      	b.n	8002c18 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d012      	beq.n	8002c22 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3310      	adds	r3, #16
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fcbb 	bl	800357c <xTaskRemoveFromEventList>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c0c:	f000 fd98 	bl	8003740 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c10:	7bbb      	ldrb	r3, [r7, #14]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	dce9      	bgt.n	8002bf4 <prvUnlockQueue+0x60>
 8002c20:	e000      	b.n	8002c24 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c22:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c2c:	f001 fc12 	bl	8004454 <vPortExitCritical>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c40:	f001 fbd8 	bl	80043f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e001      	b.n	8002c56 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c56:	f001 fbfd 	bl	8004454 <vPortExitCritical>

    return xReturn;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c6c:	f001 fbc2 	bl	80043f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d102      	bne.n	8002c82 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	e001      	b.n	8002c86 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c86:	f001 fbe5 	bl	8004454 <vPortExitCritical>

    return xReturn;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e01e      	b.n	8002ce2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <vQueueAddToRegistry+0x60>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d115      	bne.n	8002cdc <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cb0:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <vQueueAddToRegistry+0x60>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <vQueueAddToRegistry+0x60>)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fdf1 	bl	80068b0 <SEGGER_SYSVIEW_ShrinkId>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2071      	movs	r0, #113	; 0x71
 8002cd6:	f003 f805 	bl	8005ce4 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cda:	e006      	b.n	8002cea <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d9dd      	bls.n	8002ca4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2001440c 	.word	0x2001440c

08002cf8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d08:	f001 fb74 	bl	80043f4 <vPortEnterCritical>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d103      	bne.n	8002d22 <vQueueWaitForMessageRestricted+0x2a>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2e:	d103      	bne.n	8002d38 <vQueueWaitForMessageRestricted+0x40>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d38:	f001 fb8c 	bl	8004454 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fbe7 	bl	8003520 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff1e 	bl	8002b94 <prvUnlockQueue>
    }
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 fc69 	bl	800464c <pvPortMalloc>
 8002d7a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00e      	beq.n	8002da0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d82:	2058      	movs	r0, #88	; 0x58
 8002d84:	f001 fc62 	bl	800464c <pvPortMalloc>
 8002d88:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
 8002d96:	e005      	b.n	8002da4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d98:	6978      	ldr	r0, [r7, #20]
 8002d9a:	f001 fd37 	bl	800480c <vPortFree>
 8002d9e:	e001      	b.n	8002da4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d013      	beq.n	8002dd2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9303      	str	r3, [sp, #12]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	9302      	str	r3, [sp, #8]
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f80e 	bl	8002de2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dc6:	69f8      	ldr	r0, [r7, #28]
 8002dc8:	f000 f8a2 	bl	8002f10 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e002      	b.n	8002dd8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
    }
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b088      	sub	sp, #32
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	461a      	mov	r2, r3
 8002dfa:	21a5      	movs	r1, #165	; 0xa5
 8002dfc:	f003 fefa 	bl	8006bf4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f023 0307 	bic.w	r3, r3, #7
 8002e18:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	617b      	str	r3, [r7, #20]
    }
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01f      	beq.n	8002e80 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e012      	b.n	8002e6c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	7819      	ldrb	r1, [r3, #0]
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	4413      	add	r3, r2
 8002e54:	3334      	adds	r3, #52	; 0x34
 8002e56:	460a      	mov	r2, r1
 8002e58:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	4413      	add	r3, r2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	d9e9      	bls.n	8002e46 <prvInitialiseNewTask+0x64>
 8002e72:	e000      	b.n	8002e76 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e74:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e7e:	e003      	b.n	8002e88 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d901      	bls.n	8002e92 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f96b 	bl	8002184 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff f966 	bl	8002184 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ebc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	f1c3 0205 	rsb	r2, r3, #5
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	3350      	adds	r3, #80	; 0x50
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f003 fe8c 	bl	8006bf4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	3354      	adds	r3, #84	; 0x54
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fe85 	bl	8006bf4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	69b8      	ldr	r0, [r7, #24]
 8002ef0:	f001 f8d0 	bl	8004094 <pxPortInitialiseStack>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f06:	bf00      	nop
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f18:	f001 fa6c 	bl	80043f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f1c:	4b3b      	ldr	r3, [pc, #236]	; (800300c <prvAddNewTaskToReadyList+0xfc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a3a      	ldr	r2, [pc, #232]	; (800300c <prvAddNewTaskToReadyList+0xfc>)
 8002f24:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <prvAddNewTaskToReadyList+0x100>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f2e:	4a38      	ldr	r2, [pc, #224]	; (8003010 <prvAddNewTaskToReadyList+0x100>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <prvAddNewTaskToReadyList+0xfc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d110      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f3c:	f000 fc24 	bl	8003788 <prvInitialiseTaskLists>
 8002f40:	e00d      	b.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f42:	4b34      	ldr	r3, [pc, #208]	; (8003014 <prvAddNewTaskToReadyList+0x104>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f4a:	4b31      	ldr	r3, [pc, #196]	; (8003010 <prvAddNewTaskToReadyList+0x100>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d802      	bhi.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f58:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <prvAddNewTaskToReadyList+0x100>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <prvAddNewTaskToReadyList+0x108>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a2c      	ldr	r2, [pc, #176]	; (8003018 <prvAddNewTaskToReadyList+0x108>)
 8002f66:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <prvAddNewTaskToReadyList+0x108>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <prvAddNewTaskToReadyList+0x94>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fb73 	bl	8006664 <SEGGER_SYSVIEW_OnTaskCreate>
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	461d      	mov	r5, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	461c      	mov	r4, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	1ae3      	subs	r3, r4, r3
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	462b      	mov	r3, r5
 8002fa0:	f001 fdfa 	bl	8004b98 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f003 fbe0 	bl	800676c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <prvAddNewTaskToReadyList+0x10c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <prvAddNewTaskToReadyList+0x10c>)
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4a15      	ldr	r2, [pc, #84]	; (8003020 <prvAddNewTaskToReadyList+0x110>)
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f7ff f8e2 	bl	800219e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fda:	f001 fa3b 	bl	8004454 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <prvAddNewTaskToReadyList+0x104>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <prvAddNewTaskToReadyList+0x100>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d207      	bcs.n	8003004 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <prvAddNewTaskToReadyList+0x114>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bdb0      	pop	{r4, r5, r7, pc}
 800300c:	20000158 	.word	0x20000158
 8003010:	20000098 	.word	0x20000098
 8003014:	20000164 	.word	0x20000164
 8003018:	20000174 	.word	0x20000174
 800301c:	20000160 	.word	0x20000160
 8003020:	2000009c 	.word	0x2000009c
 8003024:	e000ed04 	.word	0xe000ed04

08003028 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <vTaskStartScheduler+0xa4>)
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2300      	movs	r3, #0
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	2282      	movs	r2, #130	; 0x82
 800303a:	4925      	ldr	r1, [pc, #148]	; (80030d0 <vTaskStartScheduler+0xa8>)
 800303c:	4825      	ldr	r0, [pc, #148]	; (80030d4 <vTaskStartScheduler+0xac>)
 800303e:	f7ff fe8f 	bl	8002d60 <xTaskCreate>
 8003042:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d102      	bne.n	8003050 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800304a:	f000 fd11 	bl	8003a70 <xTimerCreateTimerTask>
 800304e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d124      	bne.n	80030a0 <vTaskStartScheduler+0x78>
        __asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	60bb      	str	r3, [r7, #8]
    }
 8003068:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <vTaskStartScheduler+0xb0>)
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <vTaskStartScheduler+0xb4>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <vTaskStartScheduler+0xb8>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800307e:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <vTaskStartScheduler+0xbc>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <vTaskStartScheduler+0xa4>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d102      	bne.n	8003090 <vTaskStartScheduler+0x68>
 800308a:	f003 facf 	bl	800662c <SEGGER_SYSVIEW_OnIdle>
 800308e:	e004      	b.n	800309a <vTaskStartScheduler+0x72>
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <vTaskStartScheduler+0xbc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f003 fb27 	bl	80066e8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800309a:	f001 f88b 	bl	80041b4 <xPortStartScheduler>
 800309e:	e00e      	b.n	80030be <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a6:	d10a      	bne.n	80030be <vTaskStartScheduler+0x96>
        __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	607b      	str	r3, [r7, #4]
    }
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <vTaskStartScheduler+0xc0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000017c 	.word	0x2000017c
 80030d0:	080074c4 	.word	0x080074c4
 80030d4:	08003759 	.word	0x08003759
 80030d8:	20000178 	.word	0x20000178
 80030dc:	20000164 	.word	0x20000164
 80030e0:	2000015c 	.word	0x2000015c
 80030e4:	20000098 	.word	0x20000098
 80030e8:	2000000c 	.word	0x2000000c

080030ec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030f0:	4b04      	ldr	r3, [pc, #16]	; (8003104 <vTaskSuspendAll+0x18>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3301      	adds	r3, #1
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <vTaskSuspendAll+0x18>)
 80030f8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030fa:	bf00      	nop
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20000180 	.word	0x20000180

08003108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003116:	4b43      	ldr	r3, [pc, #268]	; (8003224 <xTaskResumeAll+0x11c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <xTaskResumeAll+0x2c>
        __asm volatile
 800311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
 800312a:	f3bf 8f4f 	dsb	sy
 800312e:	603b      	str	r3, [r7, #0]
    }
 8003130:	bf00      	nop
 8003132:	e7fe      	b.n	8003132 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003134:	f001 f95e 	bl	80043f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003138:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <xTaskResumeAll+0x11c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3b01      	subs	r3, #1
 800313e:	4a39      	ldr	r2, [pc, #228]	; (8003224 <xTaskResumeAll+0x11c>)
 8003140:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <xTaskResumeAll+0x11c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d165      	bne.n	8003216 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <xTaskResumeAll+0x120>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d061      	beq.n	8003216 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003152:	e032      	b.n	80031ba <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <xTaskResumeAll+0x124>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3318      	adds	r3, #24
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff f879 	bl	8002258 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f874 	bl	8002258 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fafa 	bl	800676c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	2201      	movs	r2, #1
 800317e:	409a      	lsls	r2, r3
 8003180:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <xTaskResumeAll+0x128>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4313      	orrs	r3, r2
 8003186:	4a2a      	ldr	r2, [pc, #168]	; (8003230 <xTaskResumeAll+0x128>)
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4a27      	ldr	r2, [pc, #156]	; (8003234 <xTaskResumeAll+0x12c>)
 8003198:	441a      	add	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3304      	adds	r3, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4610      	mov	r0, r2
 80031a2:	f7fe fffc 	bl	800219e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031aa:	4b23      	ldr	r3, [pc, #140]	; (8003238 <xTaskResumeAll+0x130>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <xTaskResumeAll+0x134>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <xTaskResumeAll+0x124>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1c8      	bne.n	8003154 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80031c8:	f000 fb20 	bl	800380c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80031cc:	4b1c      	ldr	r3, [pc, #112]	; (8003240 <xTaskResumeAll+0x138>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80031d8:	f000 f858 	bl	800328c <xTaskIncrementTick>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <xTaskResumeAll+0x134>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f1      	bne.n	80031d8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <xTaskResumeAll+0x138>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <xTaskResumeAll+0x134>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003202:	2301      	movs	r3, #1
 8003204:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003206:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <xTaskResumeAll+0x13c>)
 8003208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003216:	f001 f91d 	bl	8004454 <vPortExitCritical>

    return xAlreadyYielded;
 800321a:	68bb      	ldr	r3, [r7, #8]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000180 	.word	0x20000180
 8003228:	20000158 	.word	0x20000158
 800322c:	20000130 	.word	0x20000130
 8003230:	20000160 	.word	0x20000160
 8003234:	2000009c 	.word	0x2000009c
 8003238:	20000098 	.word	0x20000098
 800323c:	2000016c 	.word	0x2000016c
 8003240:	20000168 	.word	0x20000168
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <xTaskGetTickCount+0x1c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	2000015c 	.word	0x2000015c

08003268 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326e:	f001 f9ad 	bl	80045cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <xTaskGetTickCountFromISR+0x20>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800327c:	683b      	ldr	r3, [r7, #0]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	2000015c 	.word	0x2000015c

0800328c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003296:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <xTaskIncrementTick+0x14c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8092 	bne.w	80033c4 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032a0:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <xTaskIncrementTick+0x150>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032a8:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <xTaskIncrementTick+0x150>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d120      	bne.n	80032f6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <xTaskIncrementTick+0x154>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <xTaskIncrementTick+0x48>
        __asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	603b      	str	r3, [r7, #0]
    }
 80032d0:	bf00      	nop
 80032d2:	e7fe      	b.n	80032d2 <xTaskIncrementTick+0x46>
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <xTaskIncrementTick+0x154>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <xTaskIncrementTick+0x158>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <xTaskIncrementTick+0x154>)
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4a40      	ldr	r2, [pc, #256]	; (80033e4 <xTaskIncrementTick+0x158>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <xTaskIncrementTick+0x15c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3301      	adds	r3, #1
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <xTaskIncrementTick+0x15c>)
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	f000 fa8b 	bl	800380c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032f6:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <xTaskIncrementTick+0x160>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d34c      	bcc.n	800339a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003300:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <xTaskIncrementTick+0x154>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <xTaskIncrementTick+0x160>)
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	601a      	str	r2, [r3, #0]
                    break;
 8003312:	e042      	b.n	800339a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <xTaskIncrementTick+0x154>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d203      	bcs.n	8003334 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800332c:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <xTaskIncrementTick+0x160>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003332:	e032      	b.n	800339a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	3304      	adds	r3, #4
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe ff8d 	bl	8002258 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3318      	adds	r3, #24
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff84 	bl	8002258 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fa0a 	bl	800676c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <xTaskIncrementTick+0x164>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4313      	orrs	r3, r2
 8003366:	4a22      	ldr	r2, [pc, #136]	; (80033f0 <xTaskIncrementTick+0x164>)
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <xTaskIncrementTick+0x168>)
 8003378:	441a      	add	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7fe ff0c 	bl	800219e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <xTaskIncrementTick+0x16c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	429a      	cmp	r2, r3
 8003392:	d3b5      	bcc.n	8003300 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003394:	2301      	movs	r3, #1
 8003396:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003398:	e7b2      	b.n	8003300 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800339a:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <xTaskIncrementTick+0x16c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a0:	4914      	ldr	r1, [pc, #80]	; (80033f4 <xTaskIncrementTick+0x168>)
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d901      	bls.n	80033b6 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80033b2:	2301      	movs	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <xTaskIncrementTick+0x170>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e004      	b.n	80033ce <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <xTaskIncrementTick+0x174>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3301      	adds	r3, #1
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <xTaskIncrementTick+0x174>)
 80033cc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80033ce:	697b      	ldr	r3, [r7, #20]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000180 	.word	0x20000180
 80033dc:	2000015c 	.word	0x2000015c
 80033e0:	20000128 	.word	0x20000128
 80033e4:	2000012c 	.word	0x2000012c
 80033e8:	20000170 	.word	0x20000170
 80033ec:	20000178 	.word	0x20000178
 80033f0:	20000160 	.word	0x20000160
 80033f4:	2000009c 	.word	0x2000009c
 80033f8:	20000098 	.word	0x20000098
 80033fc:	2000016c 	.word	0x2000016c
 8003400:	20000168 	.word	0x20000168

08003404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800340a:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <vTaskSwitchContext+0xbc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003412:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <vTaskSwitchContext+0xc0>)
 8003414:	2201      	movs	r2, #1
 8003416:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003418:	e04d      	b.n	80034b6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <vTaskSwitchContext+0xc0>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <vTaskSwitchContext+0xc4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	f1c3 031f 	rsb	r3, r3, #31
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	4925      	ldr	r1, [pc, #148]	; (80034cc <vTaskSwitchContext+0xc8>)
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <vTaskSwitchContext+0x5c>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	607b      	str	r3, [r7, #4]
    }
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <vTaskSwitchContext+0x5a>
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <vTaskSwitchContext+0xc8>)
 800346c:	4413      	add	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3308      	adds	r3, #8
 8003482:	429a      	cmp	r2, r3
 8003484:	d104      	bne.n	8003490 <vTaskSwitchContext+0x8c>
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <vTaskSwitchContext+0xcc>)
 8003498:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800349a:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <vTaskSwitchContext+0xcc>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <vTaskSwitchContext+0xd0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d102      	bne.n	80034ac <vTaskSwitchContext+0xa8>
 80034a6:	f003 f8c1 	bl	800662c <SEGGER_SYSVIEW_OnIdle>
}
 80034aa:	e004      	b.n	80034b6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80034ac:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <vTaskSwitchContext+0xcc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f919 	bl	80066e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000180 	.word	0x20000180
 80034c4:	2000016c 	.word	0x2000016c
 80034c8:	20000160 	.word	0x20000160
 80034cc:	2000009c 	.word	0x2000009c
 80034d0:	20000098 	.word	0x20000098
 80034d4:	2000017c 	.word	0x2000017c

080034d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	60fb      	str	r3, [r7, #12]
    }
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <vTaskPlaceOnEventList+0x44>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3318      	adds	r3, #24
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe fe6d 	bl	80021e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800350c:	2101      	movs	r1, #1
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	f000 fa36 	bl	8003980 <prvAddCurrentTaskToDelayedList>
}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000098 	.word	0x20000098

08003520 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	617b      	str	r3, [r7, #20]
    }
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <vTaskPlaceOnEventListRestricted+0x58>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3318      	adds	r3, #24
 800354e:	4619      	mov	r1, r3
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7fe fe24 	bl	800219e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800355c:	f04f 33ff 	mov.w	r3, #4294967295
 8003560:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003562:	2024      	movs	r0, #36	; 0x24
 8003564:	f002 fb64 	bl	8005c30 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f000 fa08 	bl	8003980 <prvAddCurrentTaskToDelayedList>
    }
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000098 	.word	0x20000098

0800357c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003596:	f383 8811 	msr	BASEPRI, r3
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	f3bf 8f4f 	dsb	sy
 80035a2:	60fb      	str	r3, [r7, #12]
    }
 80035a4:	bf00      	nop
 80035a6:	e7fe      	b.n	80035a6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	3318      	adds	r3, #24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe fe53 	bl	8002258 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <xTaskRemoveFromEventList+0xb4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d120      	bne.n	80035fc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3304      	adds	r3, #4
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fe4a 	bl	8002258 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 f8d0 	bl	800676c <SEGGER_SYSVIEW_OnTaskStartReady>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	409a      	lsls	r2, r3
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <xTaskRemoveFromEventList+0xb8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4313      	orrs	r3, r2
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <xTaskRemoveFromEventList+0xb8>)
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <xTaskRemoveFromEventList+0xbc>)
 80035ec:	441a      	add	r2, r3
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fdd2 	bl	800219e <vListInsertEnd>
 80035fa:	e005      	b.n	8003608 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	3318      	adds	r3, #24
 8003600:	4619      	mov	r1, r3
 8003602:	480e      	ldr	r0, [pc, #56]	; (800363c <xTaskRemoveFromEventList+0xc0>)
 8003604:	f7fe fdcb 	bl	800219e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <xTaskRemoveFromEventList+0xc4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	429a      	cmp	r2, r3
 8003614:	d905      	bls.n	8003622 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003616:	2301      	movs	r3, #1
 8003618:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <xTaskRemoveFromEventList+0xc8>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e001      	b.n	8003626 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003622:	2300      	movs	r3, #0
 8003624:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003626:	697b      	ldr	r3, [r7, #20]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000180 	.word	0x20000180
 8003634:	20000160 	.word	0x20000160
 8003638:	2000009c 	.word	0x2000009c
 800363c:	20000130 	.word	0x20000130
 8003640:	20000098 	.word	0x20000098
 8003644:	2000016c 	.word	0x2000016c

08003648 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <vTaskInternalSetTimeOutState+0x24>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <vTaskInternalSetTimeOutState+0x28>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	605a      	str	r2, [r3, #4]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	20000170 	.word	0x20000170
 8003670:	2000015c 	.word	0x2000015c

08003674 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	613b      	str	r3, [r7, #16]
    }
 8003696:	bf00      	nop
 8003698:	e7fe      	b.n	8003698 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	60fb      	str	r3, [r7, #12]
    }
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80036b6:	f000 fe9d 	bl	80043f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <xTaskCheckForTimeOut+0xc4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	d102      	bne.n	80036da <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	e026      	b.n	8003728 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <xTaskCheckForTimeOut+0xc8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d00a      	beq.n	80036fc <xTaskCheckForTimeOut+0x88>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d305      	bcc.n	80036fc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e015      	b.n	8003728 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	429a      	cmp	r2, r3
 8003704:	d20b      	bcs.n	800371e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff98 	bl	8003648 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e004      	b.n	8003728 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003724:	2301      	movs	r3, #1
 8003726:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003728:	f000 fe94 	bl	8004454 <vPortExitCritical>

    return xReturn;
 800372c:	69fb      	ldr	r3, [r7, #28]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	2000015c 	.word	0x2000015c
 800373c:	20000170 	.word	0x20000170

08003740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <vTaskMissedYield+0x14>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	2000016c 	.word	0x2000016c

08003758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003760:	f000 f84c 	bl	80037fc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <prvIdleTask+0x28>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d9f9      	bls.n	8003760 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <prvIdleTask+0x2c>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800377c:	e7f0      	b.n	8003760 <prvIdleTask+0x8>
 800377e:	bf00      	nop
 8003780:	2000009c 	.word	0x2000009c
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	e00c      	b.n	80037ae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <prvInitialiseTaskLists+0x58>)
 80037a0:	4413      	add	r3, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fcce 	bl	8002144 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d9ef      	bls.n	8003794 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <prvInitialiseTaskLists+0x5c>)
 80037b6:	f7fe fcc5 	bl	8002144 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037ba:	480b      	ldr	r0, [pc, #44]	; (80037e8 <prvInitialiseTaskLists+0x60>)
 80037bc:	f7fe fcc2 	bl	8002144 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037c0:	480a      	ldr	r0, [pc, #40]	; (80037ec <prvInitialiseTaskLists+0x64>)
 80037c2:	f7fe fcbf 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80037c6:	480a      	ldr	r0, [pc, #40]	; (80037f0 <prvInitialiseTaskLists+0x68>)
 80037c8:	f7fe fcbc 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <prvInitialiseTaskLists+0x6c>)
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <prvInitialiseTaskLists+0x5c>)
 80037d0:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <prvInitialiseTaskLists+0x70>)
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <prvInitialiseTaskLists+0x60>)
 80037d6:	601a      	str	r2, [r3, #0]
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	2000009c 	.word	0x2000009c
 80037e4:	20000100 	.word	0x20000100
 80037e8:	20000114 	.word	0x20000114
 80037ec:	20000130 	.word	0x20000130
 80037f0:	20000144 	.word	0x20000144
 80037f4:	20000128 	.word	0x20000128
 80037f8:	2000012c 	.word	0x2000012c

080037fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0

                prvDeleteTCB( pxTCB );
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvResetNextTaskUnblockTime+0x30>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800381a:	4b09      	ldr	r3, [pc, #36]	; (8003840 <prvResetNextTaskUnblockTime+0x34>)
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003822:	e005      	b.n	8003830 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <prvResetNextTaskUnblockTime+0x30>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <prvResetNextTaskUnblockTime+0x34>)
 800382e:	6013      	str	r3, [r2, #0]
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000128 	.word	0x20000128
 8003840:	20000178 	.word	0x20000178

08003844 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <xTaskGetSchedulerState+0x34>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003852:	2301      	movs	r3, #1
 8003854:	607b      	str	r3, [r7, #4]
 8003856:	e008      	b.n	800386a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <xTaskGetSchedulerState+0x38>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003860:	2302      	movs	r3, #2
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e001      	b.n	800386a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800386a:	687b      	ldr	r3, [r7, #4]
    }
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	20000164 	.word	0x20000164
 800387c:	20000180 	.word	0x20000180

08003880 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d068      	beq.n	8003968 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003896:	4b37      	ldr	r3, [pc, #220]	; (8003974 <xTaskPriorityDisinherit+0xf4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	429a      	cmp	r2, r3
 800389e:	d00a      	beq.n	80038b6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80038a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	60fb      	str	r3, [r7, #12]
    }
 80038b2:	bf00      	nop
 80038b4:	e7fe      	b.n	80038b4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10a      	bne.n	80038d4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	60bb      	str	r3, [r7, #8]
    }
 80038d0:	bf00      	nop
 80038d2:	e7fe      	b.n	80038d2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	1e5a      	subs	r2, r3, #1
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d03e      	beq.n	8003968 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d13a      	bne.n	8003968 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fcae 	bl	8002258 <uxListRemove>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43da      	mvns	r2, r3
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <xTaskPriorityDisinherit+0xf8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4013      	ands	r3, r2
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <xTaskPriorityDisinherit+0xf8>)
 8003916:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4619      	mov	r1, r3
 800391c:	204a      	movs	r0, #74	; 0x4a
 800391e:	f002 f9a5 	bl	8005c6c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f1c3 0205 	rsb	r2, r3, #5
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <xTaskPriorityDisinherit+0xf8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <xTaskPriorityDisinherit+0xf8>)
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <xTaskPriorityDisinherit+0xfc>)
 8003956:	441a      	add	r2, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	3304      	adds	r3, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4610      	mov	r0, r2
 8003960:	f7fe fc1d 	bl	800219e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003968:	697b      	ldr	r3, [r7, #20]
    }
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000098 	.word	0x20000098
 8003978:	20000160 	.word	0x20000160
 800397c:	2000009c 	.word	0x2000009c

08003980 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800398a:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <prvAddCurrentTaskToDelayedList+0xd4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003990:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3304      	adds	r3, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fc5e 	bl	8002258 <uxListRemove>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10b      	bne.n	80039ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	2201      	movs	r2, #1
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xdc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4013      	ands	r3, r2
 80039b6:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <prvAddCurrentTaskToDelayedList+0xdc>)
 80039b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d110      	bne.n	80039e4 <prvAddCurrentTaskToDelayedList+0x64>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00d      	beq.n	80039e4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	211b      	movs	r1, #27
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 ff0e 	bl	80067f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4820      	ldr	r0, [pc, #128]	; (8003a60 <prvAddCurrentTaskToDelayedList+0xe0>)
 80039de:	f7fe fbde 	bl	800219e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80039e2:	e032      	b.n	8003a4a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039ec:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d20f      	bcs.n	8003a1c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2104      	movs	r1, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 fef4 	bl	80067f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a08:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3304      	adds	r3, #4
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f7fe fbe6 	bl	80021e6 <vListInsert>
}
 8003a1a:	e016      	b.n	8003a4a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2104      	movs	r1, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 fee4 	bl	80067f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4619      	mov	r1, r3
 8003a34:	4610      	mov	r0, r2
 8003a36:	f7fe fbd6 	bl	80021e6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d202      	bcs.n	8003a4a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a44:	4a09      	ldr	r2, [pc, #36]	; (8003a6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6013      	str	r3, [r2, #0]
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	2000015c 	.word	0x2000015c
 8003a58:	20000098 	.word	0x20000098
 8003a5c:	20000160 	.word	0x20000160
 8003a60:	20000144 	.word	0x20000144
 8003a64:	2000012c 	.word	0x2000012c
 8003a68:	20000128 	.word	0x20000128
 8003a6c:	20000178 	.word	0x20000178

08003a70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a7a:	f000 fad5 	bl	8004028 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <xTimerCreateTimerTask+0x54>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00b      	beq.n	8003a9e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <xTimerCreateTimerTask+0x58>)
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a94:	490d      	ldr	r1, [pc, #52]	; (8003acc <xTimerCreateTimerTask+0x5c>)
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <xTimerCreateTimerTask+0x60>)
 8003a98:	f7ff f962 	bl	8002d60 <xTaskCreate>
 8003a9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	603b      	str	r3, [r7, #0]
    }
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003aba:	687b      	ldr	r3, [r7, #4]
    }
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200001b4 	.word	0x200001b4
 8003ac8:	200001b8 	.word	0x200001b8
 8003acc:	080074cc 	.word	0x080074cc
 8003ad0:	08003c09 	.word	0x08003c09

08003ad4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08a      	sub	sp, #40	; 0x28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10a      	bne.n	8003b02 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	623b      	str	r3, [r7, #32]
    }
 8003afe:	bf00      	nop
 8003b00:	e7fe      	b.n	8003b00 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <xTimerGenericCommand+0x98>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02a      	beq.n	8003b60 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	dc18      	bgt.n	8003b4e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b1c:	f7ff fe92 	bl	8003844 <xTaskGetSchedulerState>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d109      	bne.n	8003b3a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <xTimerGenericCommand+0x98>)
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	f107 0114 	add.w	r1, r7, #20
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b32:	f7fe fcab 	bl	800248c <xQueueGenericSend>
 8003b36:	6278      	str	r0, [r7, #36]	; 0x24
 8003b38:	e012      	b.n	8003b60 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <xTimerGenericCommand+0x98>)
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f107 0114 	add.w	r1, r7, #20
 8003b42:	2300      	movs	r3, #0
 8003b44:	2200      	movs	r2, #0
 8003b46:	f7fe fca1 	bl	800248c <xQueueGenericSend>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24
 8003b4c:	e008      	b.n	8003b60 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b4e:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <xTimerGenericCommand+0x98>)
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f107 0114 	add.w	r1, r7, #20
 8003b56:	2300      	movs	r3, #0
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f7fe fdbd 	bl	80026d8 <xQueueGenericSendFromISR>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b62:	4618      	mov	r0, r3
 8003b64:	3728      	adds	r7, #40	; 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200001b4 	.word	0x200001b4

08003b70 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b088      	sub	sp, #32
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7a:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <prvProcessExpiredTimer+0x94>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fb65 	bl	8002258 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d022      	beq.n	8003be2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	18d1      	adds	r1, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	6978      	ldr	r0, [r7, #20]
 8003baa:	f000 f8d1 	bl	8003d50 <prvInsertTimerInActiveList>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01f      	beq.n	8003bf4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6978      	ldr	r0, [r7, #20]
 8003bc0:	f7ff ff88 	bl	8003ad4 <xTimerGenericCommand>
 8003bc4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d113      	bne.n	8003bf4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	60fb      	str	r3, [r7, #12]
    }
 8003bde:	bf00      	nop
 8003be0:	e7fe      	b.n	8003be0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	6978      	ldr	r0, [r7, #20]
 8003bfa:	4798      	blx	r3
    }
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200001ac 	.word	0x200001ac

08003c08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c10:	f107 0308 	add.w	r3, r7, #8
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f857 	bl	8003cc8 <prvGetNextExpireTime>
 8003c1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f803 	bl	8003c2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c26:	f000 f8d5 	bl	8003dd4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c2a:	e7f1      	b.n	8003c10 <prvTimerTask+0x8>

08003c2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c36:	f7ff fa59 	bl	80030ec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 f866 	bl	8003d10 <prvSampleTimeNow>
 8003c44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d130      	bne.n	8003cae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <prvProcessTimerOrBlockTask+0x3c>
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d806      	bhi.n	8003c68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c5a:	f7ff fa55 	bl	8003108 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff85 	bl	8003b70 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c66:	e024      	b.n	8003cb2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c6e:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <prvProcessTimerOrBlockTask+0x90>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <prvProcessTimerOrBlockTask+0x50>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <prvProcessTimerOrBlockTask+0x52>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <prvProcessTimerOrBlockTask+0x94>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	f7ff f833 	bl	8002cf8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c92:	f7ff fa39 	bl	8003108 <xTaskResumeAll>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c9c:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <prvProcessTimerOrBlockTask+0x98>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
    }
 8003cac:	e001      	b.n	8003cb2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003cae:	f7ff fa2b 	bl	8003108 <xTaskResumeAll>
    }
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	200001b0 	.word	0x200001b0
 8003cc0:	200001b4 	.word	0x200001b4
 8003cc4:	e000ed04 	.word	0xe000ed04

08003cc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <prvGetNextExpireTime+0x44>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <prvGetNextExpireTime+0x16>
 8003cda:	2201      	movs	r2, #1
 8003cdc:	e000      	b.n	8003ce0 <prvGetNextExpireTime+0x18>
 8003cde:	2200      	movs	r2, #0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cec:	4b07      	ldr	r3, [pc, #28]	; (8003d0c <prvGetNextExpireTime+0x44>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e001      	b.n	8003cfc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    }
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	200001ac 	.word	0x200001ac

08003d10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d18:	f7ff fa96 	bl	8003248 <xTaskGetTickCount>
 8003d1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <prvSampleTimeNow+0x3c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d205      	bcs.n	8003d34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d28:	f000 f91a 	bl	8003f60 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e002      	b.n	8003d3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d3a:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <prvSampleTimeNow+0x3c>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d40:	68fb      	ldr	r3, [r7, #12]
    }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200001bc 	.word	0x200001bc

08003d50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d812      	bhi.n	8003d9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad2      	subs	r2, r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e01b      	b.n	8003dc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <prvInsertTimerInActiveList+0x7c>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f7fe fa26 	bl	80021e6 <vListInsert>
 8003d9a:	e012      	b.n	8003dc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d206      	bcs.n	8003db2 <prvInsertTimerInActiveList+0x62>
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e007      	b.n	8003dc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <prvInsertTimerInActiveList+0x80>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	f7fe fa12 	bl	80021e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dc2:	697b      	ldr	r3, [r7, #20]
    }
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	200001b0 	.word	0x200001b0
 8003dd0:	200001ac 	.word	0x200001ac

08003dd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	; 0x30
 8003dd8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003dda:	e0ae      	b.n	8003f3a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f2c0 80aa 	blt.w	8003f38 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	3304      	adds	r3, #4
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fe fa2f 	bl	8002258 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dfa:	1d3b      	adds	r3, r7, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff87 	bl	8003d10 <prvSampleTimeNow>
 8003e02:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b09      	cmp	r3, #9
 8003e08:	f200 8097 	bhi.w	8003f3a <prvProcessReceivedCommands+0x166>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <prvProcessReceivedCommands+0x40>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e3d 	.word	0x08003e3d
 8003e1c:	08003e3d 	.word	0x08003e3d
 8003e20:	08003eb1 	.word	0x08003eb1
 8003e24:	08003ec5 	.word	0x08003ec5
 8003e28:	08003f0f 	.word	0x08003f0f
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e3d 	.word	0x08003e3d
 8003e34:	08003eb1 	.word	0x08003eb1
 8003e38:	08003ec5 	.word	0x08003ec5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	18d1      	adds	r1, r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a3a      	ldr	r2, [r7, #32]
 8003e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5c:	f7ff ff78 	bl	8003d50 <prvInsertTimerInActiveList>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d069      	beq.n	8003f3a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e6c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d05e      	beq.n	8003f3a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	441a      	add	r2, r3
 8003e84:	2300      	movs	r3, #0
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8e:	f7ff fe21 	bl	8003ad4 <xTimerGenericCommand>
 8003e92:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d14f      	bne.n	8003f3a <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	61bb      	str	r3, [r7, #24]
    }
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003ec2:	e03a      	b.n	8003f3a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10a      	bne.n	8003efa <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	617b      	str	r3, [r7, #20]
    }
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	18d1      	adds	r1, r2, r3
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	6a3a      	ldr	r2, [r7, #32]
 8003f06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f08:	f7ff ff22 	bl	8003d50 <prvInsertTimerInActiveList>
                        break;
 8003f0c:	e015      	b.n	8003f3a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f1e:	f000 fc75 	bl	800480c <vPortFree>
 8003f22:	e00a      	b.n	8003f3a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f36:	e000      	b.n	8003f3a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f38:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <prvProcessReceivedCommands+0x188>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f107 0108 	add.w	r1, r7, #8
 8003f42:	2200      	movs	r2, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fc85 	bl	8002854 <xQueueReceive>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f af45 	bne.w	8003ddc <prvProcessReceivedCommands+0x8>
        }
    }
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200001b4 	.word	0x200001b4

08003f60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b088      	sub	sp, #32
 8003f64:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f66:	e048      	b.n	8003ffa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f68:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f72:	4b2b      	ldr	r3, [pc, #172]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe f969 	bl	8002258 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02e      	beq.n	8003ffa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d90e      	bls.n	8003fcc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fba:	4b19      	ldr	r3, [pc, #100]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe f90e 	bl	80021e6 <vListInsert>
 8003fca:	e016      	b.n	8003ffa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7ff fd7c 	bl	8003ad4 <xTimerGenericCommand>
 8003fdc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	603b      	str	r3, [r7, #0]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1b1      	bne.n	8003f68 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800400a:	4b06      	ldr	r3, [pc, #24]	; (8004024 <prvSwitchTimerLists+0xc4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a04      	ldr	r2, [pc, #16]	; (8004020 <prvSwitchTimerLists+0xc0>)
 8004010:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004012:	4a04      	ldr	r2, [pc, #16]	; (8004024 <prvSwitchTimerLists+0xc4>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	6013      	str	r3, [r2, #0]
    }
 8004018:	bf00      	nop
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200001ac 	.word	0x200001ac
 8004024:	200001b0 	.word	0x200001b0

08004028 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800402c:	f000 f9e2 	bl	80043f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <prvCheckForValidListAndQueue+0x54>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d11d      	bne.n	8004074 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004038:	4811      	ldr	r0, [pc, #68]	; (8004080 <prvCheckForValidListAndQueue+0x58>)
 800403a:	f7fe f883 	bl	8002144 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800403e:	4811      	ldr	r0, [pc, #68]	; (8004084 <prvCheckForValidListAndQueue+0x5c>)
 8004040:	f7fe f880 	bl	8002144 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <prvCheckForValidListAndQueue+0x60>)
 8004046:	4a0e      	ldr	r2, [pc, #56]	; (8004080 <prvCheckForValidListAndQueue+0x58>)
 8004048:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <prvCheckForValidListAndQueue+0x64>)
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <prvCheckForValidListAndQueue+0x5c>)
 800404e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004050:	2200      	movs	r2, #0
 8004052:	210c      	movs	r1, #12
 8004054:	200a      	movs	r0, #10
 8004056:	f7fe f991 	bl	800237c <xQueueGenericCreate>
 800405a:	4603      	mov	r3, r0
 800405c:	4a07      	ldr	r2, [pc, #28]	; (800407c <prvCheckForValidListAndQueue+0x54>)
 800405e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <prvCheckForValidListAndQueue+0x54>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <prvCheckForValidListAndQueue+0x54>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4908      	ldr	r1, [pc, #32]	; (8004090 <prvCheckForValidListAndQueue+0x68>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fe10 	bl	8002c94 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004074:	f000 f9ee 	bl	8004454 <vPortExitCritical>
    }
 8004078:	bf00      	nop
 800407a:	bd80      	pop	{r7, pc}
 800407c:	200001b4 	.word	0x200001b4
 8004080:	20000184 	.word	0x20000184
 8004084:	20000198 	.word	0x20000198
 8004088:	200001ac 	.word	0x200001ac
 800408c:	200001b0 	.word	0x200001b0
 8004090:	080074d4 	.word	0x080074d4

08004094 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3b04      	subs	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3b04      	subs	r3, #4
 80040c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040c4:	4a0c      	ldr	r2, [pc, #48]	; (80040f8 <pxPortInitialiseStack+0x64>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b14      	subs	r3, #20
 80040ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3b04      	subs	r3, #4
 80040da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f06f 0202 	mvn.w	r2, #2
 80040e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b20      	subs	r3, #32
 80040e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80040ea:	68fb      	ldr	r3, [r7, #12]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	080040fd 	.word	0x080040fd

080040fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <prvTaskExitError+0x54>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d00a      	beq.n	8004126 <prvTaskExitError+0x2a>
        __asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
    }
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <prvTaskExitError+0x28>
        __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	60bb      	str	r3, [r7, #8]
    }
 8004138:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800413a:	bf00      	nop
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0fc      	beq.n	800413c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004142:	bf00      	nop
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000010 	.word	0x20000010
	...

08004160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004160:	4b07      	ldr	r3, [pc, #28]	; (8004180 <pxCurrentTCBConst2>)
 8004162:	6819      	ldr	r1, [r3, #0]
 8004164:	6808      	ldr	r0, [r1, #0]
 8004166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416a:	f380 8809 	msr	PSP, r0
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f04f 0000 	mov.w	r0, #0
 8004176:	f380 8811 	msr	BASEPRI, r0
 800417a:	4770      	bx	lr
 800417c:	f3af 8000 	nop.w

08004180 <pxCurrentTCBConst2>:
 8004180:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop

08004188 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004188:	4808      	ldr	r0, [pc, #32]	; (80041ac <prvPortStartFirstTask+0x24>)
 800418a:	6800      	ldr	r0, [r0, #0]
 800418c:	6800      	ldr	r0, [r0, #0]
 800418e:	f380 8808 	msr	MSP, r0
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8814 	msr	CONTROL, r0
 800419a:	b662      	cpsie	i
 800419c:	b661      	cpsie	f
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	df00      	svc	0
 80041a8:	bf00      	nop
 80041aa:	0000      	.short	0x0000
 80041ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop

080041b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041ba:	4b46      	ldr	r3, [pc, #280]	; (80042d4 <xPortStartScheduler+0x120>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a46      	ldr	r2, [pc, #280]	; (80042d8 <xPortStartScheduler+0x124>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10a      	bne.n	80041da <xPortStartScheduler+0x26>
        __asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	613b      	str	r3, [r7, #16]
    }
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041da:	4b3e      	ldr	r3, [pc, #248]	; (80042d4 <xPortStartScheduler+0x120>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3f      	ldr	r2, [pc, #252]	; (80042dc <xPortStartScheduler+0x128>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10a      	bne.n	80041fa <xPortStartScheduler+0x46>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	60fb      	str	r3, [r7, #12]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <xPortStartScheduler+0x12c>)
 80041fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	22ff      	movs	r2, #255	; 0xff
 800420a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b2db      	uxtb	r3, r3
 8004212:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <xPortStartScheduler+0x130>)
 8004220:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004222:	4b31      	ldr	r3, [pc, #196]	; (80042e8 <xPortStartScheduler+0x134>)
 8004224:	2207      	movs	r2, #7
 8004226:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004228:	e009      	b.n	800423e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800422a:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <xPortStartScheduler+0x134>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <xPortStartScheduler+0x134>)
 8004232:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	b2db      	uxtb	r3, r3
 800423c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b80      	cmp	r3, #128	; 0x80
 8004248:	d0ef      	beq.n	800422a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800424a:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <xPortStartScheduler+0x134>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1c3 0307 	rsb	r3, r3, #7
 8004252:	2b04      	cmp	r3, #4
 8004254:	d00a      	beq.n	800426c <xPortStartScheduler+0xb8>
        __asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60bb      	str	r3, [r7, #8]
    }
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800426c:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <xPortStartScheduler+0x134>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <xPortStartScheduler+0x134>)
 8004274:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004276:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <xPortStartScheduler+0x134>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800427e:	4a1a      	ldr	r2, [pc, #104]	; (80042e8 <xPortStartScheduler+0x134>)
 8004280:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800428a:	4b18      	ldr	r3, [pc, #96]	; (80042ec <xPortStartScheduler+0x138>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <xPortStartScheduler+0x138>)
 8004290:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004294:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <xPortStartScheduler+0x138>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a14      	ldr	r2, [pc, #80]	; (80042ec <xPortStartScheduler+0x138>)
 800429c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80042a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80042a2:	f000 f963 	bl	800456c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <xPortStartScheduler+0x13c>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80042ac:	f000 f982 	bl	80045b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <xPortStartScheduler+0x140>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <xPortStartScheduler+0x140>)
 80042b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80042ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042bc:	f7ff ff64 	bl	8004188 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042c0:	f7ff f8a0 	bl	8003404 <vTaskSwitchContext>
    prvTaskExitError();
 80042c4:	f7ff ff1a 	bl	80040fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	e000ed00 	.word	0xe000ed00
 80042d8:	410fc271 	.word	0x410fc271
 80042dc:	410fc270 	.word	0x410fc270
 80042e0:	e000e400 	.word	0xe000e400
 80042e4:	200001c0 	.word	0x200001c0
 80042e8:	200001c4 	.word	0x200001c4
 80042ec:	e000ed20 	.word	0xe000ed20
 80042f0:	20000010 	.word	0x20000010
 80042f4:	e000ef34 	.word	0xe000ef34

080042f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042fe:	4b37      	ldr	r3, [pc, #220]	; (80043dc <vInitPrioGroupValue+0xe4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a37      	ldr	r2, [pc, #220]	; (80043e0 <vInitPrioGroupValue+0xe8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10a      	bne.n	800431e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
    }
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800431e:	4b2f      	ldr	r3, [pc, #188]	; (80043dc <vInitPrioGroupValue+0xe4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a30      	ldr	r2, [pc, #192]	; (80043e4 <vInitPrioGroupValue+0xec>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d10a      	bne.n	800433e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
    }
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <vInitPrioGroupValue+0xf0>)
 8004340:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	22ff      	movs	r2, #255	; 0xff
 800434e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b22      	ldr	r3, [pc, #136]	; (80043ec <vInitPrioGroupValue+0xf4>)
 8004364:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436c:	e009      	b.n	8004382 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 8004376:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d0ef      	beq.n	800436e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800438e:	4b18      	ldr	r3, [pc, #96]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1c3 0307 	rsb	r3, r3, #7
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00a      	beq.n	80043b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
    }
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	021b      	lsls	r3, r3, #8
 80043b6:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 80043b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043ba:	4b0d      	ldr	r3, [pc, #52]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043c2:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <vInitPrioGroupValue+0xf8>)
 80043c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00
 80043e0:	410fc271 	.word	0x410fc271
 80043e4:	410fc270 	.word	0x410fc270
 80043e8:	e000e400 	.word	0xe000e400
 80043ec:	200001c0 	.word	0x200001c0
 80043f0:	200001c4 	.word	0x200001c4

080043f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
        __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
    }
 800440c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <vPortEnterCritical+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <vPortEnterCritical+0x58>)
 8004416:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <vPortEnterCritical+0x58>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10f      	bne.n	8004440 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <vPortEnterCritical+0x5c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <vPortEnterCritical+0x4c>
        __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
    }
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <vPortEnterCritical+0x4a>
    }
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000010 	.word	0x20000010
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800445a:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <vPortExitCritical+0x50>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <vPortExitCritical+0x24>
        __asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	607b      	str	r3, [r7, #4]
    }
 8004474:	bf00      	nop
 8004476:	e7fe      	b.n	8004476 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <vPortExitCritical+0x50>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3b01      	subs	r3, #1
 800447e:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <vPortExitCritical+0x50>)
 8004480:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <vPortExitCritical+0x50>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <vPortExitCritical+0x42>
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f383 8811 	msr	BASEPRI, r3
    }
 8004494:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000010 	.word	0x20000010
	...

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe ff90 	bl	8003404 <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
    }
 8004530:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004532:	f002 f801 	bl	8006538 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004536:	f7fe fea9 	bl	800328c <xTaskIncrementTick>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004540:	f002 f858 	bl	80065f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <SysTick_Handler+0x50>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e001      	b.n	8004552 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800454e:	f002 f835 	bl	80065bc <SEGGER_SYSVIEW_RecordExitISR>
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f383 8811 	msr	BASEPRI, r3
    }
 800455c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <vPortSetupTimerInterrupt+0x38>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <vPortSetupTimerInterrupt+0x40>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a09      	ldr	r2, [pc, #36]	; (80045b0 <vPortSetupTimerInterrupt+0x44>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000e018 	.word	0xe000e018
 80045a8:	20000000 	.word	0x20000000
 80045ac:	10624dd3 	.word	0x10624dd3
 80045b0:	e000e014 	.word	0xe000e014

080045b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045c4 <vPortEnableVFP+0x10>
 80045b8:	6801      	ldr	r1, [r0, #0]
 80045ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045be:	6001      	str	r1, [r0, #0]
 80045c0:	4770      	bx	lr
 80045c2:	0000      	.short	0x0000
 80045c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop

080045cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045d2:	f3ef 8305 	mrs	r3, IPSR
 80045d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d914      	bls.n	8004608 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045de:	4a17      	ldr	r2, [pc, #92]	; (800463c <vPortValidateInterruptPriority+0x70>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <vPortValidateInterruptPriority+0x74>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	7afa      	ldrb	r2, [r7, #11]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20a      	bcs.n	8004608 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
    }
 8004604:	bf00      	nop
 8004606:	e7fe      	b.n	8004606 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <vPortValidateInterruptPriority+0x78>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <vPortValidateInterruptPriority+0x7c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d90a      	bls.n	800462e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	603b      	str	r3, [r7, #0]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <vPortValidateInterruptPriority+0x60>
    }
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	e000e3f0 	.word	0xe000e3f0
 8004640:	200001c0 	.word	0x200001c0
 8004644:	e000ed0c 	.word	0xe000ed0c
 8004648:	200001c4 	.word	0x200001c4

0800464c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004658:	f7fe fd48 	bl	80030ec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800465c:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <pvPortMalloc+0x1a8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004664:	f000 f934 	bl	80048d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004668:	4b63      	ldr	r3, [pc, #396]	; (80047f8 <pvPortMalloc+0x1ac>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4013      	ands	r3, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	f040 80a7 	bne.w	80047c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d02d      	beq.n	80046d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800467c:	2208      	movs	r2, #8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	429a      	cmp	r2, r3
 8004686:	d227      	bcs.n	80046d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004688:	2208      	movs	r2, #8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	2b00      	cmp	r3, #0
 8004698:	d021      	beq.n	80046de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	3308      	adds	r3, #8
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d214      	bcs.n	80046d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	3308      	adds	r3, #8
 80046b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d010      	beq.n	80046de <pvPortMalloc+0x92>
        __asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	617b      	str	r3, [r7, #20]
    }
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d6:	e002      	b.n	80046de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e000      	b.n	80046e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d06e      	beq.n	80047c4 <pvPortMalloc+0x178>
 80046e6:	4b45      	ldr	r3, [pc, #276]	; (80047fc <pvPortMalloc+0x1b0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d869      	bhi.n	80047c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046f0:	4b43      	ldr	r3, [pc, #268]	; (8004800 <pvPortMalloc+0x1b4>)
 80046f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80046f4:	4b42      	ldr	r3, [pc, #264]	; (8004800 <pvPortMalloc+0x1b4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046fa:	e004      	b.n	8004706 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d903      	bls.n	8004718 <pvPortMalloc+0xcc>
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f1      	bne.n	80046fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <pvPortMalloc+0x1a8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	429a      	cmp	r2, r3
 8004720:	d050      	beq.n	80047c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2208      	movs	r2, #8
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	1ad2      	subs	r2, r2, r3
 800473c:	2308      	movs	r3, #8
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	429a      	cmp	r2, r3
 8004742:	d91f      	bls.n	8004784 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <pvPortMalloc+0x120>
        __asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	613b      	str	r3, [r7, #16]
    }
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad2      	subs	r2, r2, r3
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800477e:	69b8      	ldr	r0, [r7, #24]
 8004780:	f000 f908 	bl	8004994 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004784:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <pvPortMalloc+0x1b0>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <pvPortMalloc+0x1b0>)
 8004790:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004792:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <pvPortMalloc+0x1b0>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <pvPortMalloc+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d203      	bcs.n	80047a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <pvPortMalloc+0x1b0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <pvPortMalloc+0x1b8>)
 80047a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <pvPortMalloc+0x1ac>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <pvPortMalloc+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	4a11      	ldr	r2, [pc, #68]	; (8004808 <pvPortMalloc+0x1bc>)
 80047c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047c4:	f7fe fca0 	bl	8003108 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <pvPortMalloc+0x19c>
        __asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	60fb      	str	r3, [r7, #12]
    }
 80047e4:	bf00      	nop
 80047e6:	e7fe      	b.n	80047e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047e8:	69fb      	ldr	r3, [r7, #28]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3728      	adds	r7, #40	; 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20012dd0 	.word	0x20012dd0
 80047f8:	20012de4 	.word	0x20012de4
 80047fc:	20012dd4 	.word	0x20012dd4
 8004800:	20012dc8 	.word	0x20012dc8
 8004804:	20012dd8 	.word	0x20012dd8
 8004808:	20012ddc 	.word	0x20012ddc

0800480c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d04d      	beq.n	80048ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800481e:	2308      	movs	r3, #8
 8004820:	425b      	negs	r3, r3
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4413      	add	r3, r2
 8004826:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685a      	ldr	r2, [r3, #4]
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <vPortFree+0xb8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10a      	bne.n	8004850 <vPortFree+0x44>
        __asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	60fb      	str	r3, [r7, #12]
    }
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <vPortFree+0x62>
        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60bb      	str	r3, [r7, #8]
    }
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <vPortFree+0xb8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4013      	ands	r3, r2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01e      	beq.n	80048ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d11a      	bne.n	80048ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <vPortFree+0xb8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	43db      	mvns	r3, r3
 800488e:	401a      	ands	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004894:	f7fe fc2a 	bl	80030ec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <vPortFree+0xbc>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4413      	add	r3, r2
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <vPortFree+0xbc>)
 80048a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048a6:	6938      	ldr	r0, [r7, #16]
 80048a8:	f000 f874 	bl	8004994 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <vPortFree+0xc0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <vPortFree+0xc0>)
 80048b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048b6:	f7fe fc27 	bl	8003108 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048ba:	bf00      	nop
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20012de4 	.word	0x20012de4
 80048c8:	20012dd4 	.word	0x20012dd4
 80048cc:	20012de0 	.word	0x20012de0

080048d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048dc:	4b27      	ldr	r3, [pc, #156]	; (800497c <prvHeapInit+0xac>)
 80048de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00c      	beq.n	8004904 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3307      	adds	r3, #7
 80048ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	4a1f      	ldr	r2, [pc, #124]	; (800497c <prvHeapInit+0xac>)
 8004900:	4413      	add	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004908:	4a1d      	ldr	r2, [pc, #116]	; (8004980 <prvHeapInit+0xb0>)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <prvHeapInit+0xb0>)
 8004910:	2200      	movs	r2, #0
 8004912:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800491c:	2208      	movs	r2, #8
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <prvHeapInit+0xb4>)
 8004930:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <prvHeapInit+0xb4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <prvHeapInit+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <prvHeapInit+0xb4>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <prvHeapInit+0xb8>)
 800495e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a09      	ldr	r2, [pc, #36]	; (800498c <prvHeapInit+0xbc>)
 8004966:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004968:	4b09      	ldr	r3, [pc, #36]	; (8004990 <prvHeapInit+0xc0>)
 800496a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800496e:	601a      	str	r2, [r3, #0]
}
 8004970:	bf00      	nop
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	200001c8 	.word	0x200001c8
 8004980:	20012dc8 	.word	0x20012dc8
 8004984:	20012dd0 	.word	0x20012dd0
 8004988:	20012dd8 	.word	0x20012dd8
 800498c:	20012dd4 	.word	0x20012dd4
 8004990:	20012de4 	.word	0x20012de4

08004994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <prvInsertBlockIntoFreeList+0xac>)
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e002      	b.n	80049a8 <prvInsertBlockIntoFreeList+0x14>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d8f7      	bhi.n	80049a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d108      	bne.n	80049d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	441a      	add	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d118      	bne.n	8004a1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d00d      	beq.n	8004a12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e008      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a12:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e003      	b.n	8004a24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d002      	beq.n	8004a32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20012dc8 	.word	0x20012dc8
 8004a44:	20012dd0 	.word	0x20012dd0

08004a48 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a4c:	4803      	ldr	r0, [pc, #12]	; (8004a5c <_cbSendSystemDesc+0x14>)
 8004a4e:	f001 fd1d 	bl	800648c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a52:	4803      	ldr	r0, [pc, #12]	; (8004a60 <_cbSendSystemDesc+0x18>)
 8004a54:	f001 fd1a 	bl	800648c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a58:	bf00      	nop
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	080074dc 	.word	0x080074dc
 8004a60:	08007518 	.word	0x08007518

08004a64 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a72:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a74:	f001 f888 	bl	8005b88 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a7c:	f001 f8c8 	bl	8005c10 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000000 	.word	0x20000000
 8004a88:	08004a49 	.word	0x08004a49
 8004a8c:	080075b8 	.word	0x080075b8

08004a90 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	e033      	b.n	8004b04 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a9c:	491e      	ldr	r1, [pc, #120]	; (8004b18 <_cbSendTaskList+0x88>)
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	6818      	ldr	r0, [r3, #0]
 8004aac:	491a      	ldr	r1, [pc, #104]	; (8004b18 <_cbSendTaskList+0x88>)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	3304      	adds	r3, #4
 8004abc:	6819      	ldr	r1, [r3, #0]
 8004abe:	4c16      	ldr	r4, [pc, #88]	; (8004b18 <_cbSendTaskList+0x88>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4423      	add	r3, r4
 8004acc:	3308      	adds	r3, #8
 8004ace:	681c      	ldr	r4, [r3, #0]
 8004ad0:	4d11      	ldr	r5, [pc, #68]	; (8004b18 <_cbSendTaskList+0x88>)
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	442b      	add	r3, r5
 8004ade:	330c      	adds	r3, #12
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	4e0d      	ldr	r6, [pc, #52]	; (8004b18 <_cbSendTaskList+0x88>)
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4433      	add	r3, r6
 8004af0:	3310      	adds	r3, #16
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	462b      	mov	r3, r5
 8004af8:	4622      	mov	r2, r4
 8004afa:	f000 f8b5 	bl	8004c68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3301      	adds	r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <_cbSendTaskList+0x8c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3c6      	bcc.n	8004a9c <_cbSendTaskList+0xc>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b18:	20012de8 	.word	0x20012de8
 8004b1c:	20012e88 	.word	0x20012e88

08004b20 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b20:	b5b0      	push	{r4, r5, r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b26:	f7fe fb9f 	bl	8003268 <xTaskGetTickCountFromISR>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	f04f 0400 	mov.w	r4, #0
 8004b42:	f04f 0500 	mov.w	r5, #0
 8004b46:	015d      	lsls	r5, r3, #5
 8004b48:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004b4c:	0154      	lsls	r4, r2, #5
 8004b4e:	4622      	mov	r2, r4
 8004b50:	462b      	mov	r3, r5
 8004b52:	1a12      	subs	r2, r2, r0
 8004b54:	eb63 0301 	sbc.w	r3, r3, r1
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	f04f 0500 	mov.w	r5, #0
 8004b60:	009d      	lsls	r5, r3, #2
 8004b62:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004b66:	0094      	lsls	r4, r2, #2
 8004b68:	4622      	mov	r2, r4
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	1812      	adds	r2, r2, r0
 8004b6e:	eb41 0303 	adc.w	r3, r1, r3
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	00d9      	lsls	r1, r3, #3
 8004b7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b80:	00d0      	lsls	r0, r2, #3
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bdb0      	pop	{r4, r5, r7, pc}

08004b98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	492b      	ldr	r1, [pc, #172]	; (8004c58 <SYSVIEW_AddTask+0xc0>)
 8004baa:	68b8      	ldr	r0, [r7, #8]
 8004bac:	f002 f806 	bl	8006bbc <memcmp>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d04b      	beq.n	8004c4e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bb6:	4b29      	ldr	r3, [pc, #164]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b07      	cmp	r3, #7
 8004bbc:	d903      	bls.n	8004bc6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bbe:	4828      	ldr	r0, [pc, #160]	; (8004c60 <SYSVIEW_AddTask+0xc8>)
 8004bc0:	f001 ff76 	bl	8006ab0 <SEGGER_SYSVIEW_Warn>
    return;
 8004bc4:	e044      	b.n	8004c50 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004bc6:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4926      	ldr	r1, [pc, #152]	; (8004c64 <SYSVIEW_AddTask+0xcc>)
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4921      	ldr	r1, [pc, #132]	; (8004c64 <SYSVIEW_AddTask+0xcc>)
 8004be0:	4613      	mov	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3304      	adds	r3, #4
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	491b      	ldr	r1, [pc, #108]	; (8004c64 <SYSVIEW_AddTask+0xcc>)
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3308      	adds	r3, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4916      	ldr	r1, [pc, #88]	; (8004c64 <SYSVIEW_AddTask+0xcc>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	330c      	adds	r3, #12
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4910      	ldr	r1, [pc, #64]	; (8004c64 <SYSVIEW_AddTask+0xcc>)
 8004c22:	4613      	mov	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3310      	adds	r3, #16
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3301      	adds	r3, #1
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <SYSVIEW_AddTask+0xc4>)
 8004c3a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f80e 	bl	8004c68 <SYSVIEW_SendTaskInfo>
 8004c4c:	e000      	b.n	8004c50 <SYSVIEW_AddTask+0xb8>
    return;
 8004c4e:	bf00      	nop

}
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	08007528 	.word	0x08007528
 8004c5c:	20012e88 	.word	0x20012e88
 8004c60:	08007530 	.word	0x08007530
 8004c64:	20012de8 	.word	0x20012de8

08004c68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	2214      	movs	r2, #20
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f001 ffb8 	bl	8006bf4 <memset>
  TaskInfo.TaskID     = TaskID;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c98:	f107 0314 	add.w	r3, r7, #20
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f001 fafd 	bl	800629c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ca2:	bf00      	nop
 8004ca4:	3728      	adds	r7, #40	; 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <_DoInit+0x98>)
 8004cb4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a20      	ldr	r2, [pc, #128]	; (8004d48 <_DoInit+0x9c>)
 8004cc6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <_DoInit+0xa0>)
 8004ccc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cd4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <_DoInit+0x9c>)
 8004cec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <_DoInit+0xa4>)
 8004cf2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3307      	adds	r3, #7
 8004d10:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <_DoInit+0xa8>)
 8004d12:	6810      	ldr	r0, [r2, #0]
 8004d14:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d16:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <_DoInit+0xac>)
 8004d1e:	6810      	ldr	r0, [r2, #0]
 8004d20:	6018      	str	r0, [r3, #0]
 8004d22:	8891      	ldrh	r1, [r2, #4]
 8004d24:	7992      	ldrb	r2, [r2, #6]
 8004d26:	8099      	strh	r1, [r3, #4]
 8004d28:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d2a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d34:	f3bf 8f5f 	dmb	sy
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	2001444c 	.word	0x2001444c
 8004d48:	08007580 	.word	0x08007580
 8004d4c:	20012e8c 	.word	0x20012e8c
 8004d50:	2001328c 	.word	0x2001328c
 8004d54:	0800758c 	.word	0x0800758c
 8004d58:	08007590 	.word	0x08007590

08004d5c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	; 0x30
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d6a:	623b      	str	r3, [r7, #32]
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <SEGGER_RTT_ReadNoLock+0x1e>
 8004d76:	f7ff ff99 	bl	8004cac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	3360      	adds	r3, #96	; 0x60
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d92b      	bls.n	8004e00 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4293      	cmp	r3, r2
 8004db8:	bf28      	it	cs
 8004dba:	4613      	movcs	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	4413      	add	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	6939      	ldr	r1, [r7, #16]
 8004dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dce:	f001 ff03 	bl	8006bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	4413      	add	r3, r2
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4413      	add	r3, r2
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d101      	bne.n	8004e00 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	bf28      	it	cs
 8004e10:	4613      	movcs	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d019      	beq.n	8004e4e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	4413      	add	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	6939      	ldr	r1, [r7, #16]
 8004e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e2a:	f001 fed5 	bl	8006bd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8004e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e58:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3730      	adds	r7, #48	; 0x30
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	2001444c 	.word	0x2001444c

08004e68 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e76:	4b3d      	ldr	r3, [pc, #244]	; (8004f6c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e84:	f7ff ff12 	bl	8004cac <_DoInit>
  SEGGER_RTT_LOCK();
 8004e88:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8c:	f04f 0120 	mov.w	r1, #32
 8004e90:	f381 8811 	msr	BASEPRI, r1
 8004e94:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e96:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e98:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	3304      	adds	r3, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dbeb      	blt.n	8004e9e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ec6:	e000      	b.n	8004eca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ec8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	da3f      	bge.n	8004f54 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ed4:	6939      	ldr	r1, [r7, #16]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004ee8:	6939      	ldr	r1, [r7, #16]
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	4613      	mov	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	4413      	add	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3304      	adds	r3, #4
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004efe:	6939      	ldr	r1, [r7, #16]
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	4613      	mov	r3, r2
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	4413      	add	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f12:	6939      	ldr	r1, [r7, #16]
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3328      	adds	r3, #40	; 0x28
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004f26:	6939      	ldr	r1, [r7, #16]
 8004f28:	69fa      	ldr	r2, [r7, #28]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	3324      	adds	r3, #36	; 0x24
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	4413      	add	r3, r2
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	440b      	add	r3, r1
 8004f48:	332c      	adds	r3, #44	; 0x2c
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f4e:	f3bf 8f5f 	dmb	sy
 8004f52:	e002      	b.n	8004f5a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004f60:	69fb      	ldr	r3, [r7, #28]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2001444c 	.word	0x2001444c

08004f70 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	; 0x28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004f7e:	4b21      	ldr	r3, [pc, #132]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004f8c:	f7ff fe8e 	bl	8004cac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f90:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f92:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d82c      	bhi.n	8004ff4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9e:	f04f 0120 	mov.w	r1, #32
 8004fa2:	f381 8811 	msr	BASEPRI, r1
 8004fa6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4613      	mov	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	4413      	add	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	3360      	adds	r3, #96	; 0x60
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00e      	beq.n	8004fde <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fe4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	e002      	b.n	8004ffa <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3728      	adds	r7, #40	; 0x28
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	2001444c 	.word	0x2001444c

08005008 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00f      	beq.n	800503e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800501e:	e002      	b.n	8005026 <_EncodeStr+0x1e>
      Len++;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3301      	adds	r3, #1
 8005024:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f6      	bne.n	8005020 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	d901      	bls.n	800503e <_EncodeStr+0x36>
      Len = Limit;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2bfe      	cmp	r3, #254	; 0xfe
 8005042:	d806      	bhi.n	8005052 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	60fa      	str	r2, [r7, #12]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	e011      	b.n	8005076 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	60fa      	str	r2, [r7, #12]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	60fa      	str	r2, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	0a19      	lsrs	r1, r3, #8
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	60fa      	str	r2, [r7, #12]
 8005072:	b2ca      	uxtb	r2, r1
 8005074:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800507a:	e00a      	b.n	8005092 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	1c53      	adds	r3, r2, #1
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	60f9      	str	r1, [r7, #12]
 8005088:	7812      	ldrb	r2, [r2, #0]
 800508a:	701a      	strb	r2, [r3, #0]
    n++;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	3301      	adds	r3, #1
 8005090:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	429a      	cmp	r2, r3
 8005098:	d3f0      	bcc.n	800507c <_EncodeStr+0x74>
  }
  return pPayload;
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	4618      	mov	r0, r3
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3304      	adds	r3, #4
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050c6:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <_HandleIncomingPacket+0xe0>)
 80050c8:	7e1b      	ldrb	r3, [r3, #24]
 80050ca:	4618      	mov	r0, r3
 80050cc:	1cfb      	adds	r3, r7, #3
 80050ce:	2201      	movs	r2, #1
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7ff fe43 	bl	8004d5c <SEGGER_RTT_ReadNoLock>
 80050d6:	4603      	mov	r3, r0
 80050d8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dd54      	ble.n	800518a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d032      	beq.n	800514c <_HandleIncomingPacket+0x8c>
 80050e6:	2b80      	cmp	r3, #128	; 0x80
 80050e8:	dc42      	bgt.n	8005170 <_HandleIncomingPacket+0xb0>
 80050ea:	2b07      	cmp	r3, #7
 80050ec:	dc16      	bgt.n	800511c <_HandleIncomingPacket+0x5c>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dd3e      	ble.n	8005170 <_HandleIncomingPacket+0xb0>
 80050f2:	3b01      	subs	r3, #1
 80050f4:	2b06      	cmp	r3, #6
 80050f6:	d83b      	bhi.n	8005170 <_HandleIncomingPacket+0xb0>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <_HandleIncomingPacket+0x40>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005123 	.word	0x08005123
 8005104:	08005129 	.word	0x08005129
 8005108:	0800512f 	.word	0x0800512f
 800510c:	08005135 	.word	0x08005135
 8005110:	0800513b 	.word	0x0800513b
 8005114:	08005141 	.word	0x08005141
 8005118:	08005147 	.word	0x08005147
 800511c:	2b7f      	cmp	r3, #127	; 0x7f
 800511e:	d036      	beq.n	800518e <_HandleIncomingPacket+0xce>
 8005120:	e026      	b.n	8005170 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005122:	f000 ff41 	bl	8005fa8 <SEGGER_SYSVIEW_Start>
      break;
 8005126:	e037      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005128:	f000 fff8 	bl	800611c <SEGGER_SYSVIEW_Stop>
      break;
 800512c:	e034      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800512e:	f001 f9d1 	bl	80064d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005132:	e031      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005134:	f001 f996 	bl	8006464 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005138:	e02e      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800513a:	f001 f815 	bl	8006168 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800513e:	e02b      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005140:	f001 fc64 	bl	8006a0c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005144:	e028      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005146:	f001 fc43 	bl	80069d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800514a:	e025      	b.n	8005198 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800514c:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <_HandleIncomingPacket+0xe0>)
 800514e:	7e1b      	ldrb	r3, [r3, #24]
 8005150:	4618      	mov	r0, r3
 8005152:	1cfb      	adds	r3, r7, #3
 8005154:	2201      	movs	r2, #1
 8005156:	4619      	mov	r1, r3
 8005158:	f7ff fe00 	bl	8004d5c <SEGGER_RTT_ReadNoLock>
 800515c:	4603      	mov	r3, r0
 800515e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dd15      	ble.n	8005192 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	4618      	mov	r0, r3
 800516a:	f001 fbb1 	bl	80068d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800516e:	e010      	b.n	8005192 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	b25b      	sxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	da0e      	bge.n	8005196 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <_HandleIncomingPacket+0xe0>)
 800517a:	7e1b      	ldrb	r3, [r3, #24]
 800517c:	4618      	mov	r0, r3
 800517e:	1cfb      	adds	r3, r7, #3
 8005180:	2201      	movs	r2, #1
 8005182:	4619      	mov	r1, r3
 8005184:	f7ff fdea 	bl	8004d5c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005188:	e005      	b.n	8005196 <_HandleIncomingPacket+0xd6>
    }
  }
 800518a:	bf00      	nop
 800518c:	e004      	b.n	8005198 <_HandleIncomingPacket+0xd8>
      break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <_HandleIncomingPacket+0xd8>
      break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <_HandleIncomingPacket+0xd8>
      break;
 8005196:	bf00      	nop
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	200142a4 	.word	0x200142a4

080051a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051aa:	2301      	movs	r3, #1
 80051ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051ae:	1d3b      	adds	r3, r7, #4
 80051b0:	3301      	adds	r3, #1
 80051b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b8:	4b31      	ldr	r3, [pc, #196]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	e00b      	b.n	80051d8 <_TrySendOverflowPacket+0x34>
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	09db      	lsrs	r3, r3, #7
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b7f      	cmp	r3, #127	; 0x7f
 80051dc:	d8f0      	bhi.n	80051c0 <_TrySendOverflowPacket+0x1c>
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80051ee:	4b25      	ldr	r3, [pc, #148]	; (8005284 <_TrySendOverflowPacket+0xe0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80051f4:	4b22      	ldr	r3, [pc, #136]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	e00b      	b.n	8005220 <_TrySendOverflowPacket+0x7c>
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	1c59      	adds	r1, r3, #1
 8005210:	6279      	str	r1, [r7, #36]	; 0x24
 8005212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	09db      	lsrs	r3, r3, #7
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2b7f      	cmp	r3, #127	; 0x7f
 8005224:	d8f0      	bhi.n	8005208 <_TrySendOverflowPacket+0x64>
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	627a      	str	r2, [r7, #36]	; 0x24
 800522c:	6a3a      	ldr	r2, [r7, #32]
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005236:	4b12      	ldr	r3, [pc, #72]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 8005238:	785b      	ldrb	r3, [r3, #1]
 800523a:	4618      	mov	r0, r3
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	461a      	mov	r2, r3
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	4619      	mov	r1, r3
 8005248:	f7fa ffc2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800524c:	4603      	mov	r3, r0
 800524e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800525c:	4b08      	ldr	r3, [pc, #32]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	b2da      	uxtb	r2, r3
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	e004      	b.n	8005274 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	3301      	adds	r3, #1
 8005270:	4a03      	ldr	r2, [pc, #12]	; (8005280 <_TrySendOverflowPacket+0xdc>)
 8005272:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005274:	693b      	ldr	r3, [r7, #16]
}
 8005276:	4618      	mov	r0, r3
 8005278:	3730      	adds	r7, #48	; 0x30
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	200142a4 	.word	0x200142a4
 8005284:	e0001004 	.word	0xe0001004

08005288 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b08a      	sub	sp, #40	; 0x28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005294:	4b6c      	ldr	r3, [pc, #432]	; (8005448 <_SendPacket+0x1c0>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d010      	beq.n	80052be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800529c:	4b6a      	ldr	r3, [pc, #424]	; (8005448 <_SendPacket+0x1c0>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80a3 	beq.w	80053ec <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052a6:	4b68      	ldr	r3, [pc, #416]	; (8005448 <_SendPacket+0x1c0>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d109      	bne.n	80052c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052ae:	f7ff ff79 	bl	80051a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052b2:	4b65      	ldr	r3, [pc, #404]	; (8005448 <_SendPacket+0x1c0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	f040 809a 	bne.w	80053f0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80052bc:	e001      	b.n	80052c2 <_SendPacket+0x3a>
    goto Send;
 80052be:	bf00      	nop
 80052c0:	e000      	b.n	80052c4 <_SendPacket+0x3c>
Send:
 80052c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b1f      	cmp	r3, #31
 80052c8:	d809      	bhi.n	80052de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052ca:	4b5f      	ldr	r3, [pc, #380]	; (8005448 <_SendPacket+0x1c0>)
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f040 808b 	bne.w	80053f4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b17      	cmp	r3, #23
 80052e2:	d807      	bhi.n	80052f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e03d      	b.n	8005370 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005300:	d912      	bls.n	8005328 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	09da      	lsrs	r2, r3, #7
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	3a01      	subs	r2, #1
 800531a:	60fa      	str	r2, [r7, #12]
 800531c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005320:	b2da      	uxtb	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	e006      	b.n	8005336 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3b01      	subs	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b7f      	cmp	r3, #127	; 0x7f
 800533a:	d912      	bls.n	8005362 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	09da      	lsrs	r2, r3, #7
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3b01      	subs	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	b2db      	uxtb	r3, r3
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	3a01      	subs	r2, #1
 8005354:	60fa      	str	r2, [r7, #12]
 8005356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800535a:	b2da      	uxtb	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	701a      	strb	r2, [r3, #0]
 8005360:	e006      	b.n	8005370 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	3b01      	subs	r3, #1
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <_SendPacket+0x1c4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <_SendPacket+0x1c0>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	e00b      	b.n	80053a2 <_SendPacket+0x11a>
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	1c59      	adds	r1, r3, #1
 8005392:	6279      	str	r1, [r7, #36]	; 0x24
 8005394:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	09db      	lsrs	r3, r3, #7
 80053a0:	623b      	str	r3, [r7, #32]
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	2b7f      	cmp	r3, #127	; 0x7f
 80053a6:	d8f0      	bhi.n	800538a <_SendPacket+0x102>
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	627a      	str	r2, [r7, #36]	; 0x24
 80053ae:	6a3a      	ldr	r2, [r7, #32]
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80053b8:	4b23      	ldr	r3, [pc, #140]	; (8005448 <_SendPacket+0x1c0>)
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	4618      	mov	r0, r3
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	f7fa ff02 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053cc:	4603      	mov	r3, r0
 80053ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <_SendPacket+0x1c0>)
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	60d3      	str	r3, [r2, #12]
 80053dc:	e00b      	b.n	80053f6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053de:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <_SendPacket+0x1c0>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	4b18      	ldr	r3, [pc, #96]	; (8005448 <_SendPacket+0x1c0>)
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e004      	b.n	80053f6 <_SendPacket+0x16e>
    goto SendDone;
 80053ec:	bf00      	nop
 80053ee:	e002      	b.n	80053f6 <_SendPacket+0x16e>
      goto SendDone;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <_SendPacket+0x16e>
      goto SendDone;
 80053f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <_SendPacket+0x1c0>)
 80053f8:	7e1b      	ldrb	r3, [r3, #24]
 80053fa:	4619      	mov	r1, r3
 80053fc:	4a14      	ldr	r2, [pc, #80]	; (8005450 <_SendPacket+0x1c8>)
 80053fe:	460b      	mov	r3, r1
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	440b      	add	r3, r1
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	336c      	adds	r3, #108	; 0x6c
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <_SendPacket+0x1c0>)
 800540e:	7e1b      	ldrb	r3, [r3, #24]
 8005410:	4618      	mov	r0, r3
 8005412:	490f      	ldr	r1, [pc, #60]	; (8005450 <_SendPacket+0x1c8>)
 8005414:	4603      	mov	r3, r0
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4403      	add	r3, r0
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	3370      	adds	r3, #112	; 0x70
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d00b      	beq.n	800543e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <_SendPacket+0x1c0>)
 8005428:	789b      	ldrb	r3, [r3, #2]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d107      	bne.n	800543e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <_SendPacket+0x1c0>)
 8005430:	2201      	movs	r2, #1
 8005432:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005434:	f7ff fe44 	bl	80050c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005438:	4b03      	ldr	r3, [pc, #12]	; (8005448 <_SendPacket+0x1c0>)
 800543a:	2200      	movs	r2, #0
 800543c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800543e:	bf00      	nop
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	200142a4 	.word	0x200142a4
 800544c:	e0001004 	.word	0xe0001004
 8005450:	2001444c 	.word	0x2001444c

08005454 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	; 0x28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3301      	adds	r3, #1
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d80a      	bhi.n	8005484 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	1c59      	adds	r1, r3, #1
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6051      	str	r1, [r2, #4]
 8005478:	78fa      	ldrb	r2, [r7, #3]
 800547a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d15a      	bne.n	8005542 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	e00b      	b.n	80054c6 <_StoreChar+0x72>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	6279      	str	r1, [r7, #36]	; 0x24
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <_StoreChar+0x5a>
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	627a      	str	r2, [r7, #36]	; 0x24
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e00b      	b.n	80054fe <_StoreChar+0xaa>
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	61f9      	str	r1, [r7, #28]
 80054f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	09db      	lsrs	r3, r3, #7
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b7f      	cmp	r3, #127	; 0x7f
 8005502:	d8f0      	bhi.n	80054e6 <_StoreChar+0x92>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	61fa      	str	r2, [r7, #28]
 800550a:	69ba      	ldr	r2, [r7, #24]
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	221a      	movs	r2, #26
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff feb3 	bl	8005288 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fdbe 	bl	80050a8 <_PreparePacket>
 800552c:	4602      	mov	r2, r0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	611a      	str	r2, [r3, #16]
  }
}
 8005542:	bf00      	nop
 8005544:	3728      	adds	r7, #40	; 0x28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800555e:	2301      	movs	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005562:	2301      	movs	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005566:	e007      	b.n	8005578 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005570:	623b      	str	r3, [r7, #32]
    Width++;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3301      	adds	r3, #1
 8005576:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d2f3      	bcs.n	8005568 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	429a      	cmp	r2, r3
 8005586:	d901      	bls.n	800558c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d11f      	bne.n	80055d6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01c      	beq.n	80055d6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <_PrintUnsigned+0x66>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d102      	bne.n	80055b2 <_PrintUnsigned+0x66>
        c = '0';
 80055ac:	2330      	movs	r3, #48	; 0x30
 80055ae:	76fb      	strb	r3, [r7, #27]
 80055b0:	e001      	b.n	80055b6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80055b2:	2320      	movs	r3, #32
 80055b4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055b6:	e007      	b.n	80055c8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	3b01      	subs	r3, #1
 80055bc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80055be:	7efb      	ldrb	r3, [r7, #27]
 80055c0:	4619      	mov	r1, r3
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff ff46 	bl	8005454 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <_PrintUnsigned+0x8a>
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3f0      	bcc.n	80055b8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d903      	bls.n	80055e4 <_PrintUnsigned+0x98>
      NumDigits--;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	3b01      	subs	r3, #1
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	e009      	b.n	80055f8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d200      	bcs.n	80055f8 <_PrintUnsigned+0xac>
        break;
 80055f6:	e005      	b.n	8005604 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	fb02 f303 	mul.w	r3, r2, r3
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005602:	e7e8      	b.n	80055d6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800561c:	4a15      	ldr	r2, [pc, #84]	; (8005674 <_PrintUnsigned+0x128>)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4413      	add	r3, r2
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff14 	bl	8005454 <_StoreChar>
    Digit /= Base;
 800562c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e3      	bne.n	8005604 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d011      	beq.n	800566a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00e      	beq.n	800566a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800564c:	e006      	b.n	800565c <_PrintUnsigned+0x110>
        FieldWidth--;
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	3b01      	subs	r3, #1
 8005652:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005654:	2120      	movs	r1, #32
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff fefc 	bl	8005454 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <_PrintUnsigned+0x11e>
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	429a      	cmp	r2, r3
 8005668:	d3f1      	bcc.n	800564e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800566a:	bf00      	nop
 800566c:	3728      	adds	r7, #40	; 0x28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	080075cc 	.word	0x080075cc

08005678 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af02      	add	r7, sp, #8
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	bfb8      	it	lt
 800568c:	425b      	neglt	r3, r3
 800568e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005690:	2301      	movs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005694:	e007      	b.n	80056a6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	fb92 f3f3 	sdiv	r3, r2, r3
 800569e:	613b      	str	r3, [r7, #16]
    Width++;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3301      	adds	r3, #1
 80056a4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	daf3      	bge.n	8005696 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d901      	bls.n	80056ba <_PrintInt+0x42>
    Width = NumDigits;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <_PrintInt+0x5e>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	db04      	blt.n	80056d0 <_PrintInt+0x58>
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <_PrintInt+0x5e>
    FieldWidth--;
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	3b01      	subs	r3, #1
 80056d4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <_PrintInt+0x6e>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d016      	beq.n	8005714 <_PrintInt+0x9c>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00e      	beq.n	8005714 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056f6:	e006      	b.n	8005706 <_PrintInt+0x8e>
        FieldWidth--;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80056fe:	2120      	movs	r1, #32
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fea7 	bl	8005454 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <_PrintInt+0x9c>
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	429a      	cmp	r2, r3
 8005712:	d3f1      	bcc.n	80056f8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da07      	bge.n	800572a <_PrintInt+0xb2>
    v = -v;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	425b      	negs	r3, r3
 800571e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005720:	212d      	movs	r1, #45	; 0x2d
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fe96 	bl	8005454 <_StoreChar>
 8005728:	e008      	b.n	800573c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005734:	212b      	movs	r1, #43	; 0x2b
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fe8c 	bl	8005454 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d019      	beq.n	800577a <_PrintInt+0x102>
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d114      	bne.n	800577a <_PrintInt+0x102>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d111      	bne.n	800577a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800575c:	e006      	b.n	800576c <_PrintInt+0xf4>
        FieldWidth--;
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	3b01      	subs	r3, #1
 8005762:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005764:	2130      	movs	r1, #48	; 0x30
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff fe74 	bl	8005454 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d003      	beq.n	800577a <_PrintInt+0x102>
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	429a      	cmp	r2, r3
 8005778:	d3f1      	bcc.n	800575e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff fedf 	bl	800554c <_PrintUnsigned>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b098      	sub	sp, #96	; 0x60
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057a4:	f3ef 8311 	mrs	r3, BASEPRI
 80057a8:	f04f 0120 	mov.w	r1, #32
 80057ac:	f381 8811 	msr	BASEPRI, r1
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 80057b2:	48b7      	ldr	r0, [pc, #732]	; (8005a90 <_VPrintTarget+0x2f8>)
 80057b4:	f7ff fc78 	bl	80050a8 <_PreparePacket>
 80057b8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80057ba:	4bb5      	ldr	r3, [pc, #724]	; (8005a90 <_VPrintTarget+0x2f8>)
 80057bc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	3301      	adds	r3, #1
 80057ca:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80057de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8183 	beq.w	8005aee <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80057e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ec:	2b25      	cmp	r3, #37	; 0x25
 80057ee:	f040 8170 	bne.w	8005ad2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80057f2:	2300      	movs	r3, #0
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005802:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005806:	3b23      	subs	r3, #35	; 0x23
 8005808:	2b0d      	cmp	r3, #13
 800580a:	d83f      	bhi.n	800588c <_VPrintTarget+0xf4>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <_VPrintTarget+0x7c>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	0800587d 	.word	0x0800587d
 8005818:	0800588d 	.word	0x0800588d
 800581c:	0800588d 	.word	0x0800588d
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	0800588d 	.word	0x0800588d
 8005834:	0800586d 	.word	0x0800586d
 8005838:	0800588d 	.word	0x0800588d
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800585d 	.word	0x0800585d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800584c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800584e:	f043 0301 	orr.w	r3, r3, #1
 8005852:	64bb      	str	r3, [r7, #72]	; 0x48
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e01a      	b.n	8005892 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800585c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800585e:	f043 0302 	orr.w	r3, r3, #2
 8005862:	64bb      	str	r3, [r7, #72]	; 0x48
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e012      	b.n	8005892 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	f043 0304 	orr.w	r3, r3, #4
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e00a      	b.n	8005892 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587e:	f043 0308 	orr.w	r3, r3, #8
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e002      	b.n	8005892 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800588c:	2300      	movs	r3, #0
 800588e:	653b      	str	r3, [r7, #80]	; 0x50
 8005890:	bf00      	nop
        }
      } while (v);
 8005892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1b0      	bne.n	80057fa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005898:	2300      	movs	r3, #0
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80058a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058a8:	2b2f      	cmp	r3, #47	; 0x2f
 80058aa:	d912      	bls.n	80058d2 <_VPrintTarget+0x13a>
 80058ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b0:	2b39      	cmp	r3, #57	; 0x39
 80058b2:	d80e      	bhi.n	80058d2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3301      	adds	r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80058ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	461a      	mov	r2, r3
 80058c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ca:	4413      	add	r3, r2
 80058cc:	3b30      	subs	r3, #48	; 0x30
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80058d0:	e7e4      	b.n	800589c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80058d2:	2300      	movs	r3, #0
 80058d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80058de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e2:	2b2e      	cmp	r3, #46	; 0x2e
 80058e4:	d11d      	bne.n	8005922 <_VPrintTarget+0x18a>
        sFormat++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3301      	adds	r3, #1
 80058ea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80058f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058f8:	2b2f      	cmp	r3, #47	; 0x2f
 80058fa:	d912      	bls.n	8005922 <_VPrintTarget+0x18a>
 80058fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005900:	2b39      	cmp	r3, #57	; 0x39
 8005902:	d80e      	bhi.n	8005922 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800590a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	461a      	mov	r2, r3
 8005916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800591a:	4413      	add	r3, r2
 800591c:	3b30      	subs	r3, #48	; 0x30
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005920:	e7e4      	b.n	80058ec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800592a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800592e:	2b6c      	cmp	r3, #108	; 0x6c
 8005930:	d003      	beq.n	800593a <_VPrintTarget+0x1a2>
 8005932:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005936:	2b68      	cmp	r3, #104	; 0x68
 8005938:	d107      	bne.n	800594a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005948:	e7ef      	b.n	800592a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800594a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800594e:	2b25      	cmp	r3, #37	; 0x25
 8005950:	f000 80b3 	beq.w	8005aba <_VPrintTarget+0x322>
 8005954:	2b25      	cmp	r3, #37	; 0x25
 8005956:	f2c0 80b7 	blt.w	8005ac8 <_VPrintTarget+0x330>
 800595a:	2b78      	cmp	r3, #120	; 0x78
 800595c:	f300 80b4 	bgt.w	8005ac8 <_VPrintTarget+0x330>
 8005960:	2b58      	cmp	r3, #88	; 0x58
 8005962:	f2c0 80b1 	blt.w	8005ac8 <_VPrintTarget+0x330>
 8005966:	3b58      	subs	r3, #88	; 0x58
 8005968:	2b20      	cmp	r3, #32
 800596a:	f200 80ad 	bhi.w	8005ac8 <_VPrintTarget+0x330>
 800596e:	a201      	add	r2, pc, #4	; (adr r2, 8005974 <_VPrintTarget+0x1dc>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	08005a6b 	.word	0x08005a6b
 8005978:	08005ac9 	.word	0x08005ac9
 800597c:	08005ac9 	.word	0x08005ac9
 8005980:	08005ac9 	.word	0x08005ac9
 8005984:	08005ac9 	.word	0x08005ac9
 8005988:	08005ac9 	.word	0x08005ac9
 800598c:	08005ac9 	.word	0x08005ac9
 8005990:	08005ac9 	.word	0x08005ac9
 8005994:	08005ac9 	.word	0x08005ac9
 8005998:	08005ac9 	.word	0x08005ac9
 800599c:	08005ac9 	.word	0x08005ac9
 80059a0:	080059f9 	.word	0x080059f9
 80059a4:	08005a1f 	.word	0x08005a1f
 80059a8:	08005ac9 	.word	0x08005ac9
 80059ac:	08005ac9 	.word	0x08005ac9
 80059b0:	08005ac9 	.word	0x08005ac9
 80059b4:	08005ac9 	.word	0x08005ac9
 80059b8:	08005ac9 	.word	0x08005ac9
 80059bc:	08005ac9 	.word	0x08005ac9
 80059c0:	08005ac9 	.word	0x08005ac9
 80059c4:	08005ac9 	.word	0x08005ac9
 80059c8:	08005ac9 	.word	0x08005ac9
 80059cc:	08005ac9 	.word	0x08005ac9
 80059d0:	08005ac9 	.word	0x08005ac9
 80059d4:	08005a95 	.word	0x08005a95
 80059d8:	08005ac9 	.word	0x08005ac9
 80059dc:	08005ac9 	.word	0x08005ac9
 80059e0:	08005ac9 	.word	0x08005ac9
 80059e4:	08005ac9 	.word	0x08005ac9
 80059e8:	08005a45 	.word	0x08005a45
 80059ec:	08005ac9 	.word	0x08005ac9
 80059f0:	08005ac9 	.word	0x08005ac9
 80059f4:	08005a6b 	.word	0x08005a6b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	1d19      	adds	r1, r3, #4
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6011      	str	r1, [r2, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005a0c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005a10:	f107 0314 	add.w	r3, r7, #20
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fd1c 	bl	8005454 <_StoreChar>
        break;
 8005a1c:	e055      	b.n	8005aca <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	1d19      	adds	r1, r3, #4
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6011      	str	r1, [r2, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a2c:	f107 0014 	add.w	r0, r7, #20
 8005a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3a:	220a      	movs	r2, #10
 8005a3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a3e:	f7ff fe1b 	bl	8005678 <_PrintInt>
        break;
 8005a42:	e042      	b.n	8005aca <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	1d19      	adds	r1, r3, #4
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a54:	f107 0014 	add.w	r0, r7, #20
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a62:	220a      	movs	r2, #10
 8005a64:	f7ff fd72 	bl	800554c <_PrintUnsigned>
        break;
 8005a68:	e02f      	b.n	8005aca <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	1d19      	adds	r1, r3, #4
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6011      	str	r1, [r2, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a7a:	f107 0014 	add.w	r0, r7, #20
 8005a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a88:	2210      	movs	r2, #16
 8005a8a:	f7ff fd5f 	bl	800554c <_PrintUnsigned>
        break;
 8005a8e:	e01c      	b.n	8005aca <_VPrintTarget+0x332>
 8005a90:	200142d4 	.word	0x200142d4
      case 'p':
        v = va_arg(*pParamList, int);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005aa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005aa4:	f107 0014 	add.w	r0, r7, #20
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	2308      	movs	r3, #8
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	f7ff fd4a 	bl	800554c <_PrintUnsigned>
        break;
 8005ab8:	e007      	b.n	8005aca <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	2125      	movs	r1, #37	; 0x25
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff fcc7 	bl	8005454 <_StoreChar>
        break;
 8005ac6:	e000      	b.n	8005aca <_VPrintTarget+0x332>
      default:
        break;
 8005ac8:	bf00      	nop
      }
      sFormat++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e007      	b.n	8005ae2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ad2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ad6:	f107 0314 	add.w	r3, r7, #20
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fcb9 	bl	8005454 <_StoreChar>
    }
  } while (*sFormat);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f47f ae72 	bne.w	80057d0 <_VPrintTarget+0x38>
 8005aec:	e000      	b.n	8005af0 <_VPrintTarget+0x358>
      break;
 8005aee:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d041      	beq.n	8005b7a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b06:	e00b      	b.n	8005b20 <_VPrintTarget+0x388>
 8005b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b0e:	1c59      	adds	r1, r3, #1
 8005b10:	6439      	str	r1, [r7, #64]	; 0x40
 8005b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1c:	09db      	lsrs	r3, r3, #7
 8005b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	2b7f      	cmp	r3, #127	; 0x7f
 8005b24:	d8f0      	bhi.n	8005b08 <_VPrintTarget+0x370>
 8005b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	643a      	str	r2, [r7, #64]	; 0x40
 8005b2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b34:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3e:	e00b      	b.n	8005b58 <_VPrintTarget+0x3c0>
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b54:	09db      	lsrs	r3, r3, #7
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b5c:	d8f0      	bhi.n	8005b40 <_VPrintTarget+0x3a8>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	69b9      	ldr	r1, [r7, #24]
 8005b72:	221a      	movs	r2, #26
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fb87 	bl	8005288 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b80:	bf00      	nop
 8005b82:	3758      	adds	r7, #88	; 0x58
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005b96:	2300      	movs	r3, #0
 8005b98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b9c:	4917      	ldr	r1, [pc, #92]	; (8005bfc <SEGGER_SYSVIEW_Init+0x74>)
 8005b9e:	4818      	ldr	r0, [pc, #96]	; (8005c00 <SEGGER_SYSVIEW_Init+0x78>)
 8005ba0:	f7ff f962 	bl	8004e68 <SEGGER_RTT_AllocUpBuffer>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	b2da      	uxtb	r2, r3
 8005ba8:	4b16      	ldr	r3, [pc, #88]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005baa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005bac:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bae:	785a      	ldrb	r2, [r3, #1]
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bb2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bb4:	4b13      	ldr	r3, [pc, #76]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bb6:	7e1b      	ldrb	r3, [r3, #24]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	2308      	movs	r3, #8
 8005bc0:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <SEGGER_SYSVIEW_Init+0x80>)
 8005bc2:	490f      	ldr	r1, [pc, #60]	; (8005c00 <SEGGER_SYSVIEW_Init+0x78>)
 8005bc4:	f7ff f9d4 	bl	8004f70 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <SEGGER_SYSVIEW_Init+0x84>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a0c      	ldr	r2, [pc, #48]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bd4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005bd6:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005bdc:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005be2:	4a08      	ldr	r2, [pc, #32]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005be8:	4a06      	ldr	r2, [pc, #24]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005bee:	4b05      	ldr	r3, [pc, #20]	; (8005c04 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	2001329c 	.word	0x2001329c
 8005c00:	08007598 	.word	0x08007598
 8005c04:	200142a4 	.word	0x200142a4
 8005c08:	2001429c 	.word	0x2001429c
 8005c0c:	e0001004 	.word	0xe0001004

08005c10 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6113      	str	r3, [r2, #16]
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	200142a4 	.word	0x200142a4

08005c30 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c38:	f3ef 8311 	mrs	r3, BASEPRI
 8005c3c:	f04f 0120 	mov.w	r1, #32
 8005c40:	f381 8811 	msr	BASEPRI, r1
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	4808      	ldr	r0, [pc, #32]	; (8005c68 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c48:	f7ff fa2e 	bl	80050a8 <_PreparePacket>
 8005c4c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f7ff fb18 	bl	8005288 <_SendPacket>
  RECORD_END();
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f383 8811 	msr	BASEPRI, r3
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200142d4 	.word	0x200142d4

08005c6c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c76:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7a:	f04f 0120 	mov.w	r1, #32
 8005c7e:	f381 8811 	msr	BASEPRI, r1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	4816      	ldr	r0, [pc, #88]	; (8005ce0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c86:	f7ff fa0f 	bl	80050a8 <_PreparePacket>
 8005c8a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e00b      	b.n	8005cb2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	61f9      	str	r1, [r7, #28]
 8005ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	61bb      	str	r3, [r7, #24]
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb6:	d8f0      	bhi.n	8005c9a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	61fa      	str	r2, [r7, #28]
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6938      	ldr	r0, [r7, #16]
 8005cce:	f7ff fadb 	bl	8005288 <_SendPacket>
  RECORD_END();
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f383 8811 	msr	BASEPRI, r3
}
 8005cd8:	bf00      	nop
 8005cda:	3720      	adds	r7, #32
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	200142d4 	.word	0x200142d4

08005ce4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cf4:	f04f 0120 	mov.w	r1, #32
 8005cf8:	f381 8811 	msr	BASEPRI, r1
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	4825      	ldr	r0, [pc, #148]	; (8005d94 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d00:	f7ff f9d2 	bl	80050a8 <_PreparePacket>
 8005d04:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d12:	e00b      	b.n	8005d2c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d28:	09db      	lsrs	r3, r3, #7
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d30:	d8f0      	bhi.n	8005d14 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	623b      	str	r3, [r7, #32]
 8005d4a:	e00b      	b.n	8005d64 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	6279      	str	r1, [r7, #36]	; 0x24
 8005d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	2b7f      	cmp	r3, #127	; 0x7f
 8005d68:	d8f0      	bhi.n	8005d4c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d78:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	69b8      	ldr	r0, [r7, #24]
 8005d80:	f7ff fa82 	bl	8005288 <_SendPacket>
  RECORD_END();
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f383 8811 	msr	BASEPRI, r3
}
 8005d8a:	bf00      	nop
 8005d8c:	3730      	adds	r7, #48	; 0x30
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200142d4 	.word	0x200142d4

08005d98 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08e      	sub	sp, #56	; 0x38
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005da6:	f3ef 8311 	mrs	r3, BASEPRI
 8005daa:	f04f 0120 	mov.w	r1, #32
 8005dae:	f381 8811 	msr	BASEPRI, r1
 8005db2:	61fb      	str	r3, [r7, #28]
 8005db4:	4832      	ldr	r0, [pc, #200]	; (8005e80 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005db6:	f7ff f977 	bl	80050a8 <_PreparePacket>
 8005dba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc8:	e00b      	b.n	8005de2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	1c59      	adds	r1, r3, #1
 8005dd2:	6379      	str	r1, [r7, #52]	; 0x34
 8005dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	701a      	strb	r2, [r3, #0]
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	09db      	lsrs	r3, r3, #7
 8005de0:	633b      	str	r3, [r7, #48]	; 0x30
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	2b7f      	cmp	r3, #127	; 0x7f
 8005de6:	d8f0      	bhi.n	8005dca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	637a      	str	r2, [r7, #52]	; 0x34
 8005dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e00:	e00b      	b.n	8005e1a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1e:	d8f0      	bhi.n	8005e02 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	e00b      	b.n	8005e52 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	1c59      	adds	r1, r3, #1
 8005e42:	6279      	str	r1, [r7, #36]	; 0x24
 8005e44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	09db      	lsrs	r3, r3, #7
 8005e50:	623b      	str	r3, [r7, #32]
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	2b7f      	cmp	r3, #127	; 0x7f
 8005e56:	d8f0      	bhi.n	8005e3a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e5e:	6a3a      	ldr	r2, [r7, #32]
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	6979      	ldr	r1, [r7, #20]
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f7ff fa0b 	bl	8005288 <_SendPacket>
  RECORD_END();
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f383 8811 	msr	BASEPRI, r3
}
 8005e78:	bf00      	nop
 8005e7a:	3738      	adds	r7, #56	; 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	200142d4 	.word	0x200142d4

08005e84 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	; 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e92:	f3ef 8311 	mrs	r3, BASEPRI
 8005e96:	f04f 0120 	mov.w	r1, #32
 8005e9a:	f381 8811 	msr	BASEPRI, r1
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	4840      	ldr	r0, [pc, #256]	; (8005fa4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ea2:	f7ff f901 	bl	80050a8 <_PreparePacket>
 8005ea6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb4:	e00b      	b.n	8005ece <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebc:	1c59      	adds	r1, r3, #1
 8005ebe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	09db      	lsrs	r3, r3, #7
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed2:	d8f0      	bhi.n	8005eb6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	633b      	str	r3, [r7, #48]	; 0x30
 8005eec:	e00b      	b.n	8005f06 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	6379      	str	r1, [r7, #52]	; 0x34
 8005ef8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	09db      	lsrs	r3, r3, #7
 8005f04:	633b      	str	r3, [r7, #48]	; 0x30
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	2b7f      	cmp	r3, #127	; 0x7f
 8005f0a:	d8f0      	bhi.n	8005eee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	637a      	str	r2, [r7, #52]	; 0x34
 8005f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f24:	e00b      	b.n	8005f3e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2c:	1c59      	adds	r1, r3, #1
 8005f2e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	09db      	lsrs	r3, r3, #7
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	2b7f      	cmp	r3, #127	; 0x7f
 8005f42:	d8f0      	bhi.n	8005f26 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	623b      	str	r3, [r7, #32]
 8005f5c:	e00b      	b.n	8005f76 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	6279      	str	r1, [r7, #36]	; 0x24
 8005f68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	09db      	lsrs	r3, r3, #7
 8005f74:	623b      	str	r3, [r7, #32]
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	2b7f      	cmp	r3, #127	; 0x7f
 8005f7a:	d8f0      	bhi.n	8005f5e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1c5a      	adds	r2, r3, #1
 8005f80:	627a      	str	r2, [r7, #36]	; 0x24
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6979      	ldr	r1, [r7, #20]
 8005f90:	69b8      	ldr	r0, [r7, #24]
 8005f92:	f7ff f979 	bl	8005288 <_SendPacket>
  RECORD_END();
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f383 8811 	msr	BASEPRI, r3
}
 8005f9c:	bf00      	nop
 8005f9e:	3740      	adds	r7, #64	; 0x40
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	200142d4 	.word	0x200142d4

08005fa8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08c      	sub	sp, #48	; 0x30
 8005fac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fae:	4b58      	ldr	r3, [pc, #352]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb8:	f04f 0120 	mov.w	r1, #32
 8005fbc:	f381 8811 	msr	BASEPRI, r1
 8005fc0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005fc2:	4b53      	ldr	r3, [pc, #332]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 8005fc4:	785b      	ldrb	r3, [r3, #1]
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	4952      	ldr	r1, [pc, #328]	; (8006114 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fa f900 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fd6:	200a      	movs	r0, #10
 8005fd8:	f7ff fe2a 	bl	8005c30 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe0:	f04f 0120 	mov.w	r1, #32
 8005fe4:	f381 8811 	msr	BASEPRI, r1
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	484b      	ldr	r0, [pc, #300]	; (8006118 <SEGGER_SYSVIEW_Start+0x170>)
 8005fec:	f7ff f85c 	bl	80050a8 <_PreparePacket>
 8005ff0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffa:	4b45      	ldr	r3, [pc, #276]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006000:	e00b      	b.n	800601a <SEGGER_SYSVIEW_Start+0x72>
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006004:	b2da      	uxtb	r2, r3
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	1c59      	adds	r1, r3, #1
 800600a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800600c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	09db      	lsrs	r3, r3, #7
 8006018:	62bb      	str	r3, [r7, #40]	; 0x28
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2b7f      	cmp	r3, #127	; 0x7f
 800601e:	d8f0      	bhi.n	8006002 <SEGGER_SYSVIEW_Start+0x5a>
 8006020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	627b      	str	r3, [r7, #36]	; 0x24
 8006034:	4b36      	ldr	r3, [pc, #216]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	e00b      	b.n	8006054 <SEGGER_SYSVIEW_Start+0xac>
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	b2da      	uxtb	r2, r3
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	1c59      	adds	r1, r3, #1
 8006044:	6279      	str	r1, [r7, #36]	; 0x24
 8006046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	09db      	lsrs	r3, r3, #7
 8006052:	623b      	str	r3, [r7, #32]
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	2b7f      	cmp	r3, #127	; 0x7f
 8006058:	d8f0      	bhi.n	800603c <SEGGER_SYSVIEW_Start+0x94>
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	627a      	str	r2, [r7, #36]	; 0x24
 8006060:	6a3a      	ldr	r2, [r7, #32]
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	61fb      	str	r3, [r7, #28]
 800606e:	4b28      	ldr	r3, [pc, #160]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	e00b      	b.n	800608e <SEGGER_SYSVIEW_Start+0xe6>
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	b2da      	uxtb	r2, r3
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	61f9      	str	r1, [r7, #28]
 8006080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	09db      	lsrs	r3, r3, #7
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	2b7f      	cmp	r3, #127	; 0x7f
 8006092:	d8f0      	bhi.n	8006076 <SEGGER_SYSVIEW_Start+0xce>
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	61fa      	str	r2, [r7, #28]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	2300      	movs	r3, #0
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e00b      	b.n	80060c6 <SEGGER_SYSVIEW_Start+0x11e>
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	6179      	str	r1, [r7, #20]
 80060b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ca:	d8f0      	bhi.n	80060ae <SEGGER_SYSVIEW_Start+0x106>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	617a      	str	r2, [r7, #20]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060dc:	2218      	movs	r2, #24
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff f8d1 	bl	8005288 <_SendPacket>
      RECORD_END();
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80060f4:	4b06      	ldr	r3, [pc, #24]	; (8006110 <SEGGER_SYSVIEW_Start+0x168>)
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80060fa:	f000 f9eb 	bl	80064d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80060fe:	f000 f9b1 	bl	8006464 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006102:	f000 fc83 	bl	8006a0c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006106:	bf00      	nop
 8006108:	3730      	adds	r7, #48	; 0x30
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	200142a4 	.word	0x200142a4
 8006114:	080075c0 	.word	0x080075c0
 8006118:	200142d4 	.word	0x200142d4

0800611c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006122:	f3ef 8311 	mrs	r3, BASEPRI
 8006126:	f04f 0120 	mov.w	r1, #32
 800612a:	f381 8811 	msr	BASEPRI, r1
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	480b      	ldr	r0, [pc, #44]	; (8006160 <SEGGER_SYSVIEW_Stop+0x44>)
 8006132:	f7fe ffb9 	bl	80050a8 <_PreparePacket>
 8006136:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <SEGGER_SYSVIEW_Stop+0x48>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006140:	220b      	movs	r2, #11
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6838      	ldr	r0, [r7, #0]
 8006146:	f7ff f89f 	bl	8005288 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <SEGGER_SYSVIEW_Stop+0x48>)
 800614c:	2200      	movs	r2, #0
 800614e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f383 8811 	msr	BASEPRI, r3
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	200142d4 	.word	0x200142d4
 8006164:	200142a4 	.word	0x200142a4

08006168 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b08c      	sub	sp, #48	; 0x30
 800616c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800616e:	f3ef 8311 	mrs	r3, BASEPRI
 8006172:	f04f 0120 	mov.w	r1, #32
 8006176:	f381 8811 	msr	BASEPRI, r1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	4845      	ldr	r0, [pc, #276]	; (8006294 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800617e:	f7fe ff93 	bl	80050a8 <_PreparePacket>
 8006182:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800618c:	4b42      	ldr	r3, [pc, #264]	; (8006298 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	62bb      	str	r3, [r7, #40]	; 0x28
 8006192:	e00b      	b.n	80061ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	b2da      	uxtb	r2, r3
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	1c59      	adds	r1, r3, #1
 800619c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800619e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	09db      	lsrs	r3, r3, #7
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	2b7f      	cmp	r3, #127	; 0x7f
 80061b0:	d8f0      	bhi.n	8006194 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	627b      	str	r3, [r7, #36]	; 0x24
 80061c6:	4b34      	ldr	r3, [pc, #208]	; (8006298 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	623b      	str	r3, [r7, #32]
 80061cc:	e00b      	b.n	80061e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	1c59      	adds	r1, r3, #1
 80061d6:	6279      	str	r1, [r7, #36]	; 0x24
 80061d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	09db      	lsrs	r3, r3, #7
 80061e4:	623b      	str	r3, [r7, #32]
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	2b7f      	cmp	r3, #127	; 0x7f
 80061ea:	d8f0      	bhi.n	80061ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	627a      	str	r2, [r7, #36]	; 0x24
 80061f2:	6a3a      	ldr	r2, [r7, #32]
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	61fb      	str	r3, [r7, #28]
 8006200:	4b25      	ldr	r3, [pc, #148]	; (8006298 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	e00b      	b.n	8006220 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	b2da      	uxtb	r2, r3
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	61f9      	str	r1, [r7, #28]
 8006212:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	09db      	lsrs	r3, r3, #7
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b7f      	cmp	r3, #127	; 0x7f
 8006224:	d8f0      	bhi.n	8006208 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	61fa      	str	r2, [r7, #28]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	6179      	str	r1, [r7, #20]
 800624a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	613b      	str	r3, [r7, #16]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b7f      	cmp	r3, #127	; 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	617a      	str	r2, [r7, #20]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800626e:	2218      	movs	r2, #24
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	68b8      	ldr	r0, [r7, #8]
 8006274:	f7ff f808 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006286:	4b04      	ldr	r3, [pc, #16]	; (8006298 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628a:	4798      	blx	r3
  }
}
 800628c:	bf00      	nop
 800628e:	3730      	adds	r7, #48	; 0x30
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	200142d4 	.word	0x200142d4
 8006298:	200142a4 	.word	0x200142a4

0800629c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b092      	sub	sp, #72	; 0x48
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062a4:	f3ef 8311 	mrs	r3, BASEPRI
 80062a8:	f04f 0120 	mov.w	r1, #32
 80062ac:	f381 8811 	msr	BASEPRI, r1
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	486a      	ldr	r0, [pc, #424]	; (800645c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062b4:	f7fe fef8 	bl	80050a8 <_PreparePacket>
 80062b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	647b      	str	r3, [r7, #68]	; 0x44
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	4b66      	ldr	r3, [pc, #408]	; (8006460 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	643b      	str	r3, [r7, #64]	; 0x40
 80062ce:	e00b      	b.n	80062e8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	6479      	str	r1, [r7, #68]	; 0x44
 80062da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	643b      	str	r3, [r7, #64]	; 0x40
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	2b7f      	cmp	r3, #127	; 0x7f
 80062ec:	d8f0      	bhi.n	80062d0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80062ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	647a      	str	r2, [r7, #68]	; 0x44
 80062f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	63bb      	str	r3, [r7, #56]	; 0x38
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800630a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	63bb      	str	r3, [r7, #56]	; 0x38
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800632e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006336:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	4619      	mov	r1, r3
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f7fe fe61 	bl	8005008 <_EncodeStr>
 8006346:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006348:	2209      	movs	r2, #9
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	6938      	ldr	r0, [r7, #16]
 800634e:	f7fe ff9b 	bl	8005288 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4b40      	ldr	r3, [pc, #256]	; (8006460 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	633b      	str	r3, [r7, #48]	; 0x30
 8006366:	e00b      	b.n	8006380 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	b2da      	uxtb	r2, r3
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	6379      	str	r1, [r7, #52]	; 0x34
 8006372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	09db      	lsrs	r3, r3, #7
 800637e:	633b      	str	r3, [r7, #48]	; 0x30
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	2b7f      	cmp	r3, #127	; 0x7f
 8006384:	d8f0      	bhi.n	8006368 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	637a      	str	r2, [r7, #52]	; 0x34
 800638c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a0:	e00b      	b.n	80063ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	1c59      	adds	r1, r3, #1
 80063aa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b6:	09db      	lsrs	r3, r3, #7
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	2b7f      	cmp	r3, #127	; 0x7f
 80063be:	d8f0      	bhi.n	80063a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	623b      	str	r3, [r7, #32]
 80063da:	e00b      	b.n	80063f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	b2da      	uxtb	r2, r3
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	1c59      	adds	r1, r3, #1
 80063e4:	6279      	str	r1, [r7, #36]	; 0x24
 80063e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ea:	b2d2      	uxtb	r2, r2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	09db      	lsrs	r3, r3, #7
 80063f2:	623b      	str	r3, [r7, #32]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	2b7f      	cmp	r3, #127	; 0x7f
 80063f8:	d8f0      	bhi.n	80063dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006400:	6a3a      	ldr	r2, [r7, #32]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	61f9      	str	r1, [r7, #28]
 800641e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b7f      	cmp	r3, #127	; 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006442:	2215      	movs	r2, #21
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7fe ff1e 	bl	8005288 <_SendPacket>
  RECORD_END();
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f383 8811 	msr	BASEPRI, r3
}
 8006452:	bf00      	nop
 8006454:	3748      	adds	r7, #72	; 0x48
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	200142d4 	.word	0x200142d4
 8006460:	200142a4 	.word	0x200142a4

08006464 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d003      	beq.n	8006482 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800647a:	4b03      	ldr	r3, [pc, #12]	; (8006488 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4798      	blx	r3
  }
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200142a4 	.word	0x200142a4

0800648c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006494:	f3ef 8311 	mrs	r3, BASEPRI
 8006498:	f04f 0120 	mov.w	r1, #32
 800649c:	f381 8811 	msr	BASEPRI, r1
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	480b      	ldr	r0, [pc, #44]	; (80064d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064a4:	f7fe fe00 	bl	80050a8 <_PreparePacket>
 80064a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064aa:	2280      	movs	r2, #128	; 0x80
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	6938      	ldr	r0, [r7, #16]
 80064b0:	f7fe fdaa 	bl	8005008 <_EncodeStr>
 80064b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064b6:	220e      	movs	r2, #14
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	6938      	ldr	r0, [r7, #16]
 80064bc:	f7fe fee4 	bl	8005288 <_SendPacket>
  RECORD_END();
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f383 8811 	msr	BASEPRI, r3
}
 80064c6:	bf00      	nop
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200142d4 	.word	0x200142d4

080064d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064da:	4b15      	ldr	r3, [pc, #84]	; (8006530 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01a      	beq.n	8006518 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d015      	beq.n	8006518 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4798      	blx	r3
 80064f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80064f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80064fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	000a      	movs	r2, r1
 8006508:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800650a:	4613      	mov	r3, r2
 800650c:	461a      	mov	r2, r3
 800650e:	4621      	mov	r1, r4
 8006510:	200d      	movs	r0, #13
 8006512:	f7ff fbe7 	bl	8005ce4 <SEGGER_SYSVIEW_RecordU32x2>
 8006516:	e006      	b.n	8006526 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006518:	4b06      	ldr	r3, [pc, #24]	; (8006534 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	200c      	movs	r0, #12
 8006520:	f7ff fba4 	bl	8005c6c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bd90      	pop	{r4, r7, pc}
 800652e:	bf00      	nop
 8006530:	200142a4 	.word	0x200142a4
 8006534:	e0001004 	.word	0xe0001004

08006538 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	f04f 0120 	mov.w	r1, #32
 8006546:	f381 8811 	msr	BASEPRI, r1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	4819      	ldr	r0, [pc, #100]	; (80065b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800654e:	f7fe fdab 	bl	80050a8 <_PreparePacket>
 8006552:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006560:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e00b      	b.n	8006584 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	6179      	str	r1, [r7, #20]
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	617a      	str	r2, [r7, #20]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800659a:	2202      	movs	r2, #2
 800659c:	6879      	ldr	r1, [r7, #4]
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f7fe fe72 	bl	8005288 <_SendPacket>
  RECORD_END();
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f383 8811 	msr	BASEPRI, r3
}
 80065aa:	bf00      	nop
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200142d4 	.word	0x200142d4
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065c2:	f3ef 8311 	mrs	r3, BASEPRI
 80065c6:	f04f 0120 	mov.w	r1, #32
 80065ca:	f381 8811 	msr	BASEPRI, r1
 80065ce:	607b      	str	r3, [r7, #4]
 80065d0:	4807      	ldr	r0, [pc, #28]	; (80065f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065d2:	f7fe fd69 	bl	80050a8 <_PreparePacket>
 80065d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065d8:	2203      	movs	r2, #3
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6838      	ldr	r0, [r7, #0]
 80065de:	f7fe fe53 	bl	8005288 <_SendPacket>
  RECORD_END();
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f383 8811 	msr	BASEPRI, r3
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	200142d4 	.word	0x200142d4

080065f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065fa:	f3ef 8311 	mrs	r3, BASEPRI
 80065fe:	f04f 0120 	mov.w	r1, #32
 8006602:	f381 8811 	msr	BASEPRI, r1
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	4807      	ldr	r0, [pc, #28]	; (8006628 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800660a:	f7fe fd4d 	bl	80050a8 <_PreparePacket>
 800660e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006610:	2212      	movs	r2, #18
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6838      	ldr	r0, [r7, #0]
 8006616:	f7fe fe37 	bl	8005288 <_SendPacket>
  RECORD_END();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f383 8811 	msr	BASEPRI, r3
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	200142d4 	.word	0x200142d4

0800662c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006632:	f3ef 8311 	mrs	r3, BASEPRI
 8006636:	f04f 0120 	mov.w	r1, #32
 800663a:	f381 8811 	msr	BASEPRI, r1
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	4807      	ldr	r0, [pc, #28]	; (8006660 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006642:	f7fe fd31 	bl	80050a8 <_PreparePacket>
 8006646:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006648:	2211      	movs	r2, #17
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6838      	ldr	r0, [r7, #0]
 800664e:	f7fe fe1b 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f383 8811 	msr	BASEPRI, r3
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200142d4 	.word	0x200142d4

08006664 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800666c:	f3ef 8311 	mrs	r3, BASEPRI
 8006670:	f04f 0120 	mov.w	r1, #32
 8006674:	f381 8811 	msr	BASEPRI, r1
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	4819      	ldr	r0, [pc, #100]	; (80066e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800667c:	f7fe fd14 	bl	80050a8 <_PreparePacket>
 8006680:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006686:	4b17      	ldr	r3, [pc, #92]	; (80066e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	61fb      	str	r3, [r7, #28]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	e00b      	b.n	80066b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	b2da      	uxtb	r2, r3
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	1c59      	adds	r1, r3, #1
 80066a2:	61f9      	str	r1, [r7, #28]
 80066a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	2b7f      	cmp	r3, #127	; 0x7f
 80066b6:	d8f0      	bhi.n	800669a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	1c5a      	adds	r2, r3, #1
 80066bc:	61fa      	str	r2, [r7, #28]
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066c8:	2208      	movs	r2, #8
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	6938      	ldr	r0, [r7, #16]
 80066ce:	f7fe fddb 	bl	8005288 <_SendPacket>
  RECORD_END();
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f383 8811 	msr	BASEPRI, r3
}
 80066d8:	bf00      	nop
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	200142d4 	.word	0x200142d4
 80066e4:	200142a4 	.word	0x200142a4

080066e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b088      	sub	sp, #32
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f0:	f3ef 8311 	mrs	r3, BASEPRI
 80066f4:	f04f 0120 	mov.w	r1, #32
 80066f8:	f381 8811 	msr	BASEPRI, r1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	4819      	ldr	r0, [pc, #100]	; (8006764 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006700:	f7fe fcd2 	bl	80050a8 <_PreparePacket>
 8006704:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800670a:	4b17      	ldr	r3, [pc, #92]	; (8006768 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	e00b      	b.n	8006736 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	61f9      	str	r1, [r7, #28]
 8006728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	2b7f      	cmp	r3, #127	; 0x7f
 800673a:	d8f0      	bhi.n	800671e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	61fa      	str	r2, [r7, #28]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800674c:	2204      	movs	r2, #4
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	6938      	ldr	r0, [r7, #16]
 8006752:	f7fe fd99 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f383 8811 	msr	BASEPRI, r3
}
 800675c:	bf00      	nop
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200142d4 	.word	0x200142d4
 8006768:	200142a4 	.word	0x200142a4

0800676c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006774:	f3ef 8311 	mrs	r3, BASEPRI
 8006778:	f04f 0120 	mov.w	r1, #32
 800677c:	f381 8811 	msr	BASEPRI, r1
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	4819      	ldr	r0, [pc, #100]	; (80067e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006784:	f7fe fc90 	bl	80050a8 <_PreparePacket>
 8006788:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	61bb      	str	r3, [r7, #24]
 80067a0:	e00b      	b.n	80067ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	1c59      	adds	r1, r3, #1
 80067aa:	61f9      	str	r1, [r7, #28]
 80067ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b0:	b2d2      	uxtb	r2, r2
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	09db      	lsrs	r3, r3, #7
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b7f      	cmp	r3, #127	; 0x7f
 80067be:	d8f0      	bhi.n	80067a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	61fa      	str	r2, [r7, #28]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067d0:	2206      	movs	r2, #6
 80067d2:	68f9      	ldr	r1, [r7, #12]
 80067d4:	6938      	ldr	r0, [r7, #16]
 80067d6:	f7fe fd57 	bl	8005288 <_SendPacket>
  RECORD_END();
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f383 8811 	msr	BASEPRI, r3
}
 80067e0:	bf00      	nop
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	200142d4 	.word	0x200142d4
 80067ec:	200142a4 	.word	0x200142a4

080067f0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08a      	sub	sp, #40	; 0x28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80067fa:	f3ef 8311 	mrs	r3, BASEPRI
 80067fe:	f04f 0120 	mov.w	r1, #32
 8006802:	f381 8811 	msr	BASEPRI, r1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	4827      	ldr	r0, [pc, #156]	; (80068a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800680a:	f7fe fc4d 	bl	80050a8 <_PreparePacket>
 800680e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	623b      	str	r3, [r7, #32]
 8006826:	e00b      	b.n	8006840 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	6279      	str	r1, [r7, #36]	; 0x24
 8006832:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	09db      	lsrs	r3, r3, #7
 800683e:	623b      	str	r3, [r7, #32]
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	2b7f      	cmp	r3, #127	; 0x7f
 8006844:	d8f0      	bhi.n	8006828 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	627a      	str	r2, [r7, #36]	; 0x24
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	61fb      	str	r3, [r7, #28]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	e00b      	b.n	8006878 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	b2da      	uxtb	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1c59      	adds	r1, r3, #1
 8006868:	61f9      	str	r1, [r7, #28]
 800686a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	09db      	lsrs	r3, r3, #7
 8006876:	61bb      	str	r3, [r7, #24]
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2b7f      	cmp	r3, #127	; 0x7f
 800687c:	d8f0      	bhi.n	8006860 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	61fa      	str	r2, [r7, #28]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800688e:	2207      	movs	r2, #7
 8006890:	68f9      	ldr	r1, [r7, #12]
 8006892:	6938      	ldr	r0, [r7, #16]
 8006894:	f7fe fcf8 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f383 8811 	msr	BASEPRI, r3
}
 800689e:	bf00      	nop
 80068a0:	3728      	adds	r7, #40	; 0x28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	200142d4 	.word	0x200142d4
 80068ac:	200142a4 	.word	0x200142a4

080068b0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	1ad3      	subs	r3, r2, r3
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	200142a4 	.word	0x200142a4

080068d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08c      	sub	sp, #48	; 0x30
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068da:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d06d      	beq.n	80069be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068e2:	4b39      	ldr	r3, [pc, #228]	; (80069c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068e8:	2300      	movs	r3, #0
 80068ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ec:	e008      	b.n	8006900 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d007      	beq.n	800690a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	3301      	adds	r3, #1
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006904:	429a      	cmp	r2, r3
 8006906:	d3f2      	bcc.n	80068ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8006908:	e000      	b.n	800690c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800690a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d055      	beq.n	80069be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006912:	f3ef 8311 	mrs	r3, BASEPRI
 8006916:	f04f 0120 	mov.w	r1, #32
 800691a:	f381 8811 	msr	BASEPRI, r1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	482a      	ldr	r0, [pc, #168]	; (80069cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006922:	f7fe fbc1 	bl	80050a8 <_PreparePacket>
 8006926:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	623b      	str	r3, [r7, #32]
 8006934:	e00b      	b.n	800694e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	b2da      	uxtb	r2, r3
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	1c59      	adds	r1, r3, #1
 800693e:	6279      	str	r1, [r7, #36]	; 0x24
 8006940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	09db      	lsrs	r3, r3, #7
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	6a3b      	ldr	r3, [r7, #32]
 8006950:	2b7f      	cmp	r3, #127	; 0x7f
 8006952:	d8f0      	bhi.n	8006936 <SEGGER_SYSVIEW_SendModule+0x66>
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	627a      	str	r2, [r7, #36]	; 0x24
 800695a:	6a3a      	ldr	r2, [r7, #32]
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	61fb      	str	r3, [r7, #28]
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e00b      	b.n	8006988 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	61f9      	str	r1, [r7, #28]
 800697a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	09db      	lsrs	r3, r3, #7
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b7f      	cmp	r3, #127	; 0x7f
 800698c:	d8f0      	bhi.n	8006970 <SEGGER_SYSVIEW_SendModule+0xa0>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	61fa      	str	r2, [r7, #28]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800699e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2280      	movs	r2, #128	; 0x80
 80069a4:	4619      	mov	r1, r3
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7fe fb2e 	bl	8005008 <_EncodeStr>
 80069ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80069ae:	2216      	movs	r2, #22
 80069b0:	68f9      	ldr	r1, [r7, #12]
 80069b2:	6938      	ldr	r0, [r7, #16]
 80069b4:	f7fe fc68 	bl	8005288 <_SendPacket>
      RECORD_END();
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80069be:	bf00      	nop
 80069c0:	3730      	adds	r7, #48	; 0x30
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200142cc 	.word	0x200142cc
 80069cc:	200142d4 	.word	0x200142d4

080069d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00f      	beq.n	80069fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069de:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f2      	bne.n	80069e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	200142cc 	.word	0x200142cc

08006a0c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a12:	f3ef 8311 	mrs	r3, BASEPRI
 8006a16:	f04f 0120 	mov.w	r1, #32
 8006a1a:	f381 8811 	msr	BASEPRI, r1
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	4817      	ldr	r0, [pc, #92]	; (8006a80 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a22:	f7fe fb41 	bl	80050a8 <_PreparePacket>
 8006a26:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e00b      	b.n	8006a50 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	1c59      	adds	r1, r3, #1
 8006a40:	6179      	str	r1, [r7, #20]
 8006a42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	09db      	lsrs	r3, r3, #7
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b7f      	cmp	r3, #127	; 0x7f
 8006a54:	d8f0      	bhi.n	8006a38 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	617a      	str	r2, [r7, #20]
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a66:	221b      	movs	r2, #27
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	68b8      	ldr	r0, [r7, #8]
 8006a6c:	f7fe fc0c 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f383 8811 	msr	BASEPRI, r3
}
 8006a76:	bf00      	nop
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200142d4 	.word	0x200142d4
 8006a84:	200142d0 	.word	0x200142d0

08006a88 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006a88:	b40f      	push	{r0, r1, r2, r3}
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006a90:	f107 0314 	add.w	r3, r7, #20
 8006a94:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a96:	1d3b      	adds	r3, r7, #4
 8006a98:	461a      	mov	r2, r3
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6938      	ldr	r0, [r7, #16]
 8006a9e:	f7fe fe7b 	bl	8005798 <_VPrintTarget>
  va_end(ParamList);
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aac:	b004      	add	sp, #16
 8006aae:	4770      	bx	lr

08006ab0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ab8:	f3ef 8311 	mrs	r3, BASEPRI
 8006abc:	f04f 0120 	mov.w	r1, #32
 8006ac0:	f381 8811 	msr	BASEPRI, r1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	4827      	ldr	r0, [pc, #156]	; (8006b64 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006ac8:	f7fe faee 	bl	80050a8 <_PreparePacket>
 8006acc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ace:	2280      	movs	r2, #128	; 0x80
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f7fe fa98 	bl	8005008 <_EncodeStr>
 8006ad8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
 8006ade:	2301      	movs	r3, #1
 8006ae0:	623b      	str	r3, [r7, #32]
 8006ae2:	e00b      	b.n	8006afc <SEGGER_SYSVIEW_Warn+0x4c>
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	6279      	str	r1, [r7, #36]	; 0x24
 8006aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	09db      	lsrs	r3, r3, #7
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	2b7f      	cmp	r3, #127	; 0x7f
 8006b00:	d8f0      	bhi.n	8006ae4 <SEGGER_SYSVIEW_Warn+0x34>
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	627a      	str	r2, [r7, #36]	; 0x24
 8006b08:	6a3a      	ldr	r2, [r7, #32]
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e00b      	b.n	8006b34 <SEGGER_SYSVIEW_Warn+0x84>
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	61f9      	str	r1, [r7, #28]
 8006b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	09db      	lsrs	r3, r3, #7
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b7f      	cmp	r3, #127	; 0x7f
 8006b38:	d8f0      	bhi.n	8006b1c <SEGGER_SYSVIEW_Warn+0x6c>
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b4a:	221a      	movs	r2, #26
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	6938      	ldr	r0, [r7, #16]
 8006b50:	f7fe fb9a 	bl	8005288 <_SendPacket>
  RECORD_END();
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f383 8811 	msr	BASEPRI, r3
}
 8006b5a:	bf00      	nop
 8006b5c:	3728      	adds	r7, #40	; 0x28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	200142d4 	.word	0x200142d4

08006b68 <__errno>:
 8006b68:	4b01      	ldr	r3, [pc, #4]	; (8006b70 <__errno+0x8>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000014 	.word	0x20000014

08006b74 <__libc_init_array>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	4d0d      	ldr	r5, [pc, #52]	; (8006bac <__libc_init_array+0x38>)
 8006b78:	4c0d      	ldr	r4, [pc, #52]	; (8006bb0 <__libc_init_array+0x3c>)
 8006b7a:	1b64      	subs	r4, r4, r5
 8006b7c:	10a4      	asrs	r4, r4, #2
 8006b7e:	2600      	movs	r6, #0
 8006b80:	42a6      	cmp	r6, r4
 8006b82:	d109      	bne.n	8006b98 <__libc_init_array+0x24>
 8006b84:	4d0b      	ldr	r5, [pc, #44]	; (8006bb4 <__libc_init_array+0x40>)
 8006b86:	4c0c      	ldr	r4, [pc, #48]	; (8006bb8 <__libc_init_array+0x44>)
 8006b88:	f000 fc70 	bl	800746c <_init>
 8006b8c:	1b64      	subs	r4, r4, r5
 8006b8e:	10a4      	asrs	r4, r4, #2
 8006b90:	2600      	movs	r6, #0
 8006b92:	42a6      	cmp	r6, r4
 8006b94:	d105      	bne.n	8006ba2 <__libc_init_array+0x2e>
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9c:	4798      	blx	r3
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	e7ee      	b.n	8006b80 <__libc_init_array+0xc>
 8006ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba6:	4798      	blx	r3
 8006ba8:	3601      	adds	r6, #1
 8006baa:	e7f2      	b.n	8006b92 <__libc_init_array+0x1e>
 8006bac:	08007618 	.word	0x08007618
 8006bb0:	08007618 	.word	0x08007618
 8006bb4:	08007618 	.word	0x08007618
 8006bb8:	0800761c 	.word	0x0800761c

08006bbc <memcmp>:
 8006bbc:	b530      	push	{r4, r5, lr}
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	2400      	movs	r4, #0
 8006bc2:	42a2      	cmp	r2, r4
 8006bc4:	d101      	bne.n	8006bca <memcmp+0xe>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e005      	b.n	8006bd6 <memcmp+0x1a>
 8006bca:	5d03      	ldrb	r3, [r0, r4]
 8006bcc:	3401      	adds	r4, #1
 8006bce:	5d0d      	ldrb	r5, [r1, r4]
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	d0f6      	beq.n	8006bc2 <memcmp+0x6>
 8006bd4:	1b58      	subs	r0, r3, r5
 8006bd6:	bd30      	pop	{r4, r5, pc}

08006bd8 <memcpy>:
 8006bd8:	440a      	add	r2, r1
 8006bda:	4291      	cmp	r1, r2
 8006bdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006be0:	d100      	bne.n	8006be4 <memcpy+0xc>
 8006be2:	4770      	bx	lr
 8006be4:	b510      	push	{r4, lr}
 8006be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	d1f9      	bne.n	8006be6 <memcpy+0xe>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <memset>:
 8006bf4:	4402      	add	r2, r0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d100      	bne.n	8006bfe <memset+0xa>
 8006bfc:	4770      	bx	lr
 8006bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8006c02:	e7f9      	b.n	8006bf8 <memset+0x4>

08006c04 <sniprintf>:
 8006c04:	b40c      	push	{r2, r3}
 8006c06:	b530      	push	{r4, r5, lr}
 8006c08:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <sniprintf+0x64>)
 8006c0a:	1e0c      	subs	r4, r1, #0
 8006c0c:	681d      	ldr	r5, [r3, #0]
 8006c0e:	b09d      	sub	sp, #116	; 0x74
 8006c10:	da08      	bge.n	8006c24 <sniprintf+0x20>
 8006c12:	238b      	movs	r3, #139	; 0x8b
 8006c14:	602b      	str	r3, [r5, #0]
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	b01d      	add	sp, #116	; 0x74
 8006c1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c20:	b002      	add	sp, #8
 8006c22:	4770      	bx	lr
 8006c24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c2c:	bf14      	ite	ne
 8006c2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c32:	4623      	moveq	r3, r4
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c3c:	9002      	str	r0, [sp, #8]
 8006c3e:	9006      	str	r0, [sp, #24]
 8006c40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c46:	ab21      	add	r3, sp, #132	; 0x84
 8006c48:	a902      	add	r1, sp, #8
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	f000 f869 	bl	8006d24 <_svfiprintf_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	bfbc      	itt	lt
 8006c56:	238b      	movlt	r3, #139	; 0x8b
 8006c58:	602b      	strlt	r3, [r5, #0]
 8006c5a:	2c00      	cmp	r4, #0
 8006c5c:	d0dd      	beq.n	8006c1a <sniprintf+0x16>
 8006c5e:	9b02      	ldr	r3, [sp, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e7d9      	b.n	8006c1a <sniprintf+0x16>
 8006c66:	bf00      	nop
 8006c68:	20000014 	.word	0x20000014

08006c6c <__ssputs_r>:
 8006c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	688e      	ldr	r6, [r1, #8]
 8006c72:	429e      	cmp	r6, r3
 8006c74:	4682      	mov	sl, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	4690      	mov	r8, r2
 8006c7a:	461f      	mov	r7, r3
 8006c7c:	d838      	bhi.n	8006cf0 <__ssputs_r+0x84>
 8006c7e:	898a      	ldrh	r2, [r1, #12]
 8006c80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c84:	d032      	beq.n	8006cec <__ssputs_r+0x80>
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	6909      	ldr	r1, [r1, #16]
 8006c8a:	eba5 0901 	sub.w	r9, r5, r1
 8006c8e:	6965      	ldr	r5, [r4, #20]
 8006c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c98:	3301      	adds	r3, #1
 8006c9a:	444b      	add	r3, r9
 8006c9c:	106d      	asrs	r5, r5, #1
 8006c9e:	429d      	cmp	r5, r3
 8006ca0:	bf38      	it	cc
 8006ca2:	461d      	movcc	r5, r3
 8006ca4:	0553      	lsls	r3, r2, #21
 8006ca6:	d531      	bpl.n	8006d0c <__ssputs_r+0xa0>
 8006ca8:	4629      	mov	r1, r5
 8006caa:	f000 fb39 	bl	8007320 <_malloc_r>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	b950      	cbnz	r0, 8006cc8 <__ssputs_r+0x5c>
 8006cb2:	230c      	movs	r3, #12
 8006cb4:	f8ca 3000 	str.w	r3, [sl]
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc8:	6921      	ldr	r1, [r4, #16]
 8006cca:	464a      	mov	r2, r9
 8006ccc:	f7ff ff84 	bl	8006bd8 <memcpy>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cda:	81a3      	strh	r3, [r4, #12]
 8006cdc:	6126      	str	r6, [r4, #16]
 8006cde:	6165      	str	r5, [r4, #20]
 8006ce0:	444e      	add	r6, r9
 8006ce2:	eba5 0509 	sub.w	r5, r5, r9
 8006ce6:	6026      	str	r6, [r4, #0]
 8006ce8:	60a5      	str	r5, [r4, #8]
 8006cea:	463e      	mov	r6, r7
 8006cec:	42be      	cmp	r6, r7
 8006cee:	d900      	bls.n	8006cf2 <__ssputs_r+0x86>
 8006cf0:	463e      	mov	r6, r7
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	f000 faa8 	bl	800724c <memmove>
 8006cfc:	68a3      	ldr	r3, [r4, #8]
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	1b9b      	subs	r3, r3, r6
 8006d02:	4432      	add	r2, r6
 8006d04:	60a3      	str	r3, [r4, #8]
 8006d06:	6022      	str	r2, [r4, #0]
 8006d08:	2000      	movs	r0, #0
 8006d0a:	e7db      	b.n	8006cc4 <__ssputs_r+0x58>
 8006d0c:	462a      	mov	r2, r5
 8006d0e:	f000 fb61 	bl	80073d4 <_realloc_r>
 8006d12:	4606      	mov	r6, r0
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d1e1      	bne.n	8006cdc <__ssputs_r+0x70>
 8006d18:	6921      	ldr	r1, [r4, #16]
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	f000 fab0 	bl	8007280 <_free_r>
 8006d20:	e7c7      	b.n	8006cb2 <__ssputs_r+0x46>
	...

08006d24 <_svfiprintf_r>:
 8006d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d28:	4698      	mov	r8, r3
 8006d2a:	898b      	ldrh	r3, [r1, #12]
 8006d2c:	061b      	lsls	r3, r3, #24
 8006d2e:	b09d      	sub	sp, #116	; 0x74
 8006d30:	4607      	mov	r7, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4614      	mov	r4, r2
 8006d36:	d50e      	bpl.n	8006d56 <_svfiprintf_r+0x32>
 8006d38:	690b      	ldr	r3, [r1, #16]
 8006d3a:	b963      	cbnz	r3, 8006d56 <_svfiprintf_r+0x32>
 8006d3c:	2140      	movs	r1, #64	; 0x40
 8006d3e:	f000 faef 	bl	8007320 <_malloc_r>
 8006d42:	6028      	str	r0, [r5, #0]
 8006d44:	6128      	str	r0, [r5, #16]
 8006d46:	b920      	cbnz	r0, 8006d52 <_svfiprintf_r+0x2e>
 8006d48:	230c      	movs	r3, #12
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	e0d1      	b.n	8006ef6 <_svfiprintf_r+0x1d2>
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	616b      	str	r3, [r5, #20]
 8006d56:	2300      	movs	r3, #0
 8006d58:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5a:	2320      	movs	r3, #32
 8006d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d64:	2330      	movs	r3, #48	; 0x30
 8006d66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f10 <_svfiprintf_r+0x1ec>
 8006d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d6e:	f04f 0901 	mov.w	r9, #1
 8006d72:	4623      	mov	r3, r4
 8006d74:	469a      	mov	sl, r3
 8006d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d7a:	b10a      	cbz	r2, 8006d80 <_svfiprintf_r+0x5c>
 8006d7c:	2a25      	cmp	r2, #37	; 0x25
 8006d7e:	d1f9      	bne.n	8006d74 <_svfiprintf_r+0x50>
 8006d80:	ebba 0b04 	subs.w	fp, sl, r4
 8006d84:	d00b      	beq.n	8006d9e <_svfiprintf_r+0x7a>
 8006d86:	465b      	mov	r3, fp
 8006d88:	4622      	mov	r2, r4
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	f7ff ff6d 	bl	8006c6c <__ssputs_r>
 8006d92:	3001      	adds	r0, #1
 8006d94:	f000 80aa 	beq.w	8006eec <_svfiprintf_r+0x1c8>
 8006d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d9a:	445a      	add	r2, fp
 8006d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 80a2 	beq.w	8006eec <_svfiprintf_r+0x1c8>
 8006da8:	2300      	movs	r3, #0
 8006daa:	f04f 32ff 	mov.w	r2, #4294967295
 8006dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006db2:	f10a 0a01 	add.w	sl, sl, #1
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc0:	4654      	mov	r4, sl
 8006dc2:	2205      	movs	r2, #5
 8006dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc8:	4851      	ldr	r0, [pc, #324]	; (8006f10 <_svfiprintf_r+0x1ec>)
 8006dca:	f7f9 fa51 	bl	8000270 <memchr>
 8006dce:	9a04      	ldr	r2, [sp, #16]
 8006dd0:	b9d8      	cbnz	r0, 8006e0a <_svfiprintf_r+0xe6>
 8006dd2:	06d0      	lsls	r0, r2, #27
 8006dd4:	bf44      	itt	mi
 8006dd6:	2320      	movmi	r3, #32
 8006dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ddc:	0711      	lsls	r1, r2, #28
 8006dde:	bf44      	itt	mi
 8006de0:	232b      	movmi	r3, #43	; 0x2b
 8006de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dea:	2b2a      	cmp	r3, #42	; 0x2a
 8006dec:	d015      	beq.n	8006e1a <_svfiprintf_r+0xf6>
 8006dee:	9a07      	ldr	r2, [sp, #28]
 8006df0:	4654      	mov	r4, sl
 8006df2:	2000      	movs	r0, #0
 8006df4:	f04f 0c0a 	mov.w	ip, #10
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dfe:	3b30      	subs	r3, #48	; 0x30
 8006e00:	2b09      	cmp	r3, #9
 8006e02:	d94e      	bls.n	8006ea2 <_svfiprintf_r+0x17e>
 8006e04:	b1b0      	cbz	r0, 8006e34 <_svfiprintf_r+0x110>
 8006e06:	9207      	str	r2, [sp, #28]
 8006e08:	e014      	b.n	8006e34 <_svfiprintf_r+0x110>
 8006e0a:	eba0 0308 	sub.w	r3, r0, r8
 8006e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	9304      	str	r3, [sp, #16]
 8006e16:	46a2      	mov	sl, r4
 8006e18:	e7d2      	b.n	8006dc0 <_svfiprintf_r+0x9c>
 8006e1a:	9b03      	ldr	r3, [sp, #12]
 8006e1c:	1d19      	adds	r1, r3, #4
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	9103      	str	r1, [sp, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bfbb      	ittet	lt
 8006e26:	425b      	neglt	r3, r3
 8006e28:	f042 0202 	orrlt.w	r2, r2, #2
 8006e2c:	9307      	strge	r3, [sp, #28]
 8006e2e:	9307      	strlt	r3, [sp, #28]
 8006e30:	bfb8      	it	lt
 8006e32:	9204      	strlt	r2, [sp, #16]
 8006e34:	7823      	ldrb	r3, [r4, #0]
 8006e36:	2b2e      	cmp	r3, #46	; 0x2e
 8006e38:	d10c      	bne.n	8006e54 <_svfiprintf_r+0x130>
 8006e3a:	7863      	ldrb	r3, [r4, #1]
 8006e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e3e:	d135      	bne.n	8006eac <_svfiprintf_r+0x188>
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	1d1a      	adds	r2, r3, #4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	9203      	str	r2, [sp, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bfb8      	it	lt
 8006e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e50:	3402      	adds	r4, #2
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f20 <_svfiprintf_r+0x1fc>
 8006e58:	7821      	ldrb	r1, [r4, #0]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4650      	mov	r0, sl
 8006e5e:	f7f9 fa07 	bl	8000270 <memchr>
 8006e62:	b140      	cbz	r0, 8006e76 <_svfiprintf_r+0x152>
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	eba0 000a 	sub.w	r0, r0, sl
 8006e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	4303      	orrs	r3, r0
 8006e72:	3401      	adds	r4, #1
 8006e74:	9304      	str	r3, [sp, #16]
 8006e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e7a:	4826      	ldr	r0, [pc, #152]	; (8006f14 <_svfiprintf_r+0x1f0>)
 8006e7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e80:	2206      	movs	r2, #6
 8006e82:	f7f9 f9f5 	bl	8000270 <memchr>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d038      	beq.n	8006efc <_svfiprintf_r+0x1d8>
 8006e8a:	4b23      	ldr	r3, [pc, #140]	; (8006f18 <_svfiprintf_r+0x1f4>)
 8006e8c:	bb1b      	cbnz	r3, 8006ed6 <_svfiprintf_r+0x1b2>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	3307      	adds	r3, #7
 8006e92:	f023 0307 	bic.w	r3, r3, #7
 8006e96:	3308      	adds	r3, #8
 8006e98:	9303      	str	r3, [sp, #12]
 8006e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9c:	4433      	add	r3, r6
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	e767      	b.n	8006d72 <_svfiprintf_r+0x4e>
 8006ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	2001      	movs	r0, #1
 8006eaa:	e7a5      	b.n	8006df8 <_svfiprintf_r+0xd4>
 8006eac:	2300      	movs	r3, #0
 8006eae:	3401      	adds	r4, #1
 8006eb0:	9305      	str	r3, [sp, #20]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f04f 0c0a 	mov.w	ip, #10
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ebe:	3a30      	subs	r2, #48	; 0x30
 8006ec0:	2a09      	cmp	r2, #9
 8006ec2:	d903      	bls.n	8006ecc <_svfiprintf_r+0x1a8>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d0c5      	beq.n	8006e54 <_svfiprintf_r+0x130>
 8006ec8:	9105      	str	r1, [sp, #20]
 8006eca:	e7c3      	b.n	8006e54 <_svfiprintf_r+0x130>
 8006ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e7f0      	b.n	8006eb8 <_svfiprintf_r+0x194>
 8006ed6:	ab03      	add	r3, sp, #12
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	462a      	mov	r2, r5
 8006edc:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <_svfiprintf_r+0x1f8>)
 8006ede:	a904      	add	r1, sp, #16
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	f3af 8000 	nop.w
 8006ee6:	1c42      	adds	r2, r0, #1
 8006ee8:	4606      	mov	r6, r0
 8006eea:	d1d6      	bne.n	8006e9a <_svfiprintf_r+0x176>
 8006eec:	89ab      	ldrh	r3, [r5, #12]
 8006eee:	065b      	lsls	r3, r3, #25
 8006ef0:	f53f af2c 	bmi.w	8006d4c <_svfiprintf_r+0x28>
 8006ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ef6:	b01d      	add	sp, #116	; 0x74
 8006ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006efc:	ab03      	add	r3, sp, #12
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	462a      	mov	r2, r5
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <_svfiprintf_r+0x1f8>)
 8006f04:	a904      	add	r1, sp, #16
 8006f06:	4638      	mov	r0, r7
 8006f08:	f000 f87a 	bl	8007000 <_printf_i>
 8006f0c:	e7eb      	b.n	8006ee6 <_svfiprintf_r+0x1c2>
 8006f0e:	bf00      	nop
 8006f10:	080075dc 	.word	0x080075dc
 8006f14:	080075e6 	.word	0x080075e6
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	08006c6d 	.word	0x08006c6d
 8006f20:	080075e2 	.word	0x080075e2

08006f24 <_printf_common>:
 8006f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	4616      	mov	r6, r2
 8006f2a:	4699      	mov	r9, r3
 8006f2c:	688a      	ldr	r2, [r1, #8]
 8006f2e:	690b      	ldr	r3, [r1, #16]
 8006f30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f34:	4293      	cmp	r3, r2
 8006f36:	bfb8      	it	lt
 8006f38:	4613      	movlt	r3, r2
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f40:	4607      	mov	r7, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	b10a      	cbz	r2, 8006f4a <_printf_common+0x26>
 8006f46:	3301      	adds	r3, #1
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	0699      	lsls	r1, r3, #26
 8006f4e:	bf42      	ittt	mi
 8006f50:	6833      	ldrmi	r3, [r6, #0]
 8006f52:	3302      	addmi	r3, #2
 8006f54:	6033      	strmi	r3, [r6, #0]
 8006f56:	6825      	ldr	r5, [r4, #0]
 8006f58:	f015 0506 	ands.w	r5, r5, #6
 8006f5c:	d106      	bne.n	8006f6c <_printf_common+0x48>
 8006f5e:	f104 0a19 	add.w	sl, r4, #25
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	6832      	ldr	r2, [r6, #0]
 8006f66:	1a9b      	subs	r3, r3, r2
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dc26      	bgt.n	8006fba <_printf_common+0x96>
 8006f6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f70:	1e13      	subs	r3, r2, #0
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	bf18      	it	ne
 8006f76:	2301      	movne	r3, #1
 8006f78:	0692      	lsls	r2, r2, #26
 8006f7a:	d42b      	bmi.n	8006fd4 <_printf_common+0xb0>
 8006f7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f80:	4649      	mov	r1, r9
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c0      	blx	r8
 8006f86:	3001      	adds	r0, #1
 8006f88:	d01e      	beq.n	8006fc8 <_printf_common+0xa4>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	68e5      	ldr	r5, [r4, #12]
 8006f8e:	6832      	ldr	r2, [r6, #0]
 8006f90:	f003 0306 	and.w	r3, r3, #6
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	bf08      	it	eq
 8006f98:	1aad      	subeq	r5, r5, r2
 8006f9a:	68a3      	ldr	r3, [r4, #8]
 8006f9c:	6922      	ldr	r2, [r4, #16]
 8006f9e:	bf0c      	ite	eq
 8006fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fa4:	2500      	movne	r5, #0
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	bfc4      	itt	gt
 8006faa:	1a9b      	subgt	r3, r3, r2
 8006fac:	18ed      	addgt	r5, r5, r3
 8006fae:	2600      	movs	r6, #0
 8006fb0:	341a      	adds	r4, #26
 8006fb2:	42b5      	cmp	r5, r6
 8006fb4:	d11a      	bne.n	8006fec <_printf_common+0xc8>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	e008      	b.n	8006fcc <_printf_common+0xa8>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	47c0      	blx	r8
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d103      	bne.n	8006fd0 <_printf_common+0xac>
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd0:	3501      	adds	r5, #1
 8006fd2:	e7c6      	b.n	8006f62 <_printf_common+0x3e>
 8006fd4:	18e1      	adds	r1, r4, r3
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	2030      	movs	r0, #48	; 0x30
 8006fda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fde:	4422      	add	r2, r4
 8006fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fe8:	3302      	adds	r3, #2
 8006fea:	e7c7      	b.n	8006f7c <_printf_common+0x58>
 8006fec:	2301      	movs	r3, #1
 8006fee:	4622      	mov	r2, r4
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	47c0      	blx	r8
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d0e6      	beq.n	8006fc8 <_printf_common+0xa4>
 8006ffa:	3601      	adds	r6, #1
 8006ffc:	e7d9      	b.n	8006fb2 <_printf_common+0x8e>
	...

08007000 <_printf_i>:
 8007000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	460c      	mov	r4, r1
 8007006:	4691      	mov	r9, r2
 8007008:	7e27      	ldrb	r7, [r4, #24]
 800700a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800700c:	2f78      	cmp	r7, #120	; 0x78
 800700e:	4680      	mov	r8, r0
 8007010:	469a      	mov	sl, r3
 8007012:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007016:	d807      	bhi.n	8007028 <_printf_i+0x28>
 8007018:	2f62      	cmp	r7, #98	; 0x62
 800701a:	d80a      	bhi.n	8007032 <_printf_i+0x32>
 800701c:	2f00      	cmp	r7, #0
 800701e:	f000 80d8 	beq.w	80071d2 <_printf_i+0x1d2>
 8007022:	2f58      	cmp	r7, #88	; 0x58
 8007024:	f000 80a3 	beq.w	800716e <_printf_i+0x16e>
 8007028:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800702c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007030:	e03a      	b.n	80070a8 <_printf_i+0xa8>
 8007032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007036:	2b15      	cmp	r3, #21
 8007038:	d8f6      	bhi.n	8007028 <_printf_i+0x28>
 800703a:	a001      	add	r0, pc, #4	; (adr r0, 8007040 <_printf_i+0x40>)
 800703c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007040:	08007099 	.word	0x08007099
 8007044:	080070ad 	.word	0x080070ad
 8007048:	08007029 	.word	0x08007029
 800704c:	08007029 	.word	0x08007029
 8007050:	08007029 	.word	0x08007029
 8007054:	08007029 	.word	0x08007029
 8007058:	080070ad 	.word	0x080070ad
 800705c:	08007029 	.word	0x08007029
 8007060:	08007029 	.word	0x08007029
 8007064:	08007029 	.word	0x08007029
 8007068:	08007029 	.word	0x08007029
 800706c:	080071b9 	.word	0x080071b9
 8007070:	080070dd 	.word	0x080070dd
 8007074:	0800719b 	.word	0x0800719b
 8007078:	08007029 	.word	0x08007029
 800707c:	08007029 	.word	0x08007029
 8007080:	080071db 	.word	0x080071db
 8007084:	08007029 	.word	0x08007029
 8007088:	080070dd 	.word	0x080070dd
 800708c:	08007029 	.word	0x08007029
 8007090:	08007029 	.word	0x08007029
 8007094:	080071a3 	.word	0x080071a3
 8007098:	680b      	ldr	r3, [r1, #0]
 800709a:	1d1a      	adds	r2, r3, #4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	600a      	str	r2, [r1, #0]
 80070a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0a3      	b.n	80071f4 <_printf_i+0x1f4>
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	6808      	ldr	r0, [r1, #0]
 80070b0:	062e      	lsls	r6, r5, #24
 80070b2:	f100 0304 	add.w	r3, r0, #4
 80070b6:	d50a      	bpl.n	80070ce <_printf_i+0xce>
 80070b8:	6805      	ldr	r5, [r0, #0]
 80070ba:	600b      	str	r3, [r1, #0]
 80070bc:	2d00      	cmp	r5, #0
 80070be:	da03      	bge.n	80070c8 <_printf_i+0xc8>
 80070c0:	232d      	movs	r3, #45	; 0x2d
 80070c2:	426d      	negs	r5, r5
 80070c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c8:	485e      	ldr	r0, [pc, #376]	; (8007244 <_printf_i+0x244>)
 80070ca:	230a      	movs	r3, #10
 80070cc:	e019      	b.n	8007102 <_printf_i+0x102>
 80070ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070d2:	6805      	ldr	r5, [r0, #0]
 80070d4:	600b      	str	r3, [r1, #0]
 80070d6:	bf18      	it	ne
 80070d8:	b22d      	sxthne	r5, r5
 80070da:	e7ef      	b.n	80070bc <_printf_i+0xbc>
 80070dc:	680b      	ldr	r3, [r1, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	1d18      	adds	r0, r3, #4
 80070e2:	6008      	str	r0, [r1, #0]
 80070e4:	0628      	lsls	r0, r5, #24
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0xec>
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <_printf_i+0xf2>
 80070ec:	0669      	lsls	r1, r5, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0xe8>
 80070f0:	881d      	ldrh	r5, [r3, #0]
 80070f2:	4854      	ldr	r0, [pc, #336]	; (8007244 <_printf_i+0x244>)
 80070f4:	2f6f      	cmp	r7, #111	; 0x6f
 80070f6:	bf0c      	ite	eq
 80070f8:	2308      	moveq	r3, #8
 80070fa:	230a      	movne	r3, #10
 80070fc:	2100      	movs	r1, #0
 80070fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007102:	6866      	ldr	r6, [r4, #4]
 8007104:	60a6      	str	r6, [r4, #8]
 8007106:	2e00      	cmp	r6, #0
 8007108:	bfa2      	ittt	ge
 800710a:	6821      	ldrge	r1, [r4, #0]
 800710c:	f021 0104 	bicge.w	r1, r1, #4
 8007110:	6021      	strge	r1, [r4, #0]
 8007112:	b90d      	cbnz	r5, 8007118 <_printf_i+0x118>
 8007114:	2e00      	cmp	r6, #0
 8007116:	d04d      	beq.n	80071b4 <_printf_i+0x1b4>
 8007118:	4616      	mov	r6, r2
 800711a:	fbb5 f1f3 	udiv	r1, r5, r3
 800711e:	fb03 5711 	mls	r7, r3, r1, r5
 8007122:	5dc7      	ldrb	r7, [r0, r7]
 8007124:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007128:	462f      	mov	r7, r5
 800712a:	42bb      	cmp	r3, r7
 800712c:	460d      	mov	r5, r1
 800712e:	d9f4      	bls.n	800711a <_printf_i+0x11a>
 8007130:	2b08      	cmp	r3, #8
 8007132:	d10b      	bne.n	800714c <_printf_i+0x14c>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07df      	lsls	r7, r3, #31
 8007138:	d508      	bpl.n	800714c <_printf_i+0x14c>
 800713a:	6923      	ldr	r3, [r4, #16]
 800713c:	6861      	ldr	r1, [r4, #4]
 800713e:	4299      	cmp	r1, r3
 8007140:	bfde      	ittt	le
 8007142:	2330      	movle	r3, #48	; 0x30
 8007144:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007148:	f106 36ff 	addle.w	r6, r6, #4294967295
 800714c:	1b92      	subs	r2, r2, r6
 800714e:	6122      	str	r2, [r4, #16]
 8007150:	f8cd a000 	str.w	sl, [sp]
 8007154:	464b      	mov	r3, r9
 8007156:	aa03      	add	r2, sp, #12
 8007158:	4621      	mov	r1, r4
 800715a:	4640      	mov	r0, r8
 800715c:	f7ff fee2 	bl	8006f24 <_printf_common>
 8007160:	3001      	adds	r0, #1
 8007162:	d14c      	bne.n	80071fe <_printf_i+0x1fe>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	b004      	add	sp, #16
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716e:	4835      	ldr	r0, [pc, #212]	; (8007244 <_printf_i+0x244>)
 8007170:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	680e      	ldr	r6, [r1, #0]
 8007178:	061f      	lsls	r7, r3, #24
 800717a:	f856 5b04 	ldr.w	r5, [r6], #4
 800717e:	600e      	str	r6, [r1, #0]
 8007180:	d514      	bpl.n	80071ac <_printf_i+0x1ac>
 8007182:	07d9      	lsls	r1, r3, #31
 8007184:	bf44      	itt	mi
 8007186:	f043 0320 	orrmi.w	r3, r3, #32
 800718a:	6023      	strmi	r3, [r4, #0]
 800718c:	b91d      	cbnz	r5, 8007196 <_printf_i+0x196>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	f023 0320 	bic.w	r3, r3, #32
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	2310      	movs	r3, #16
 8007198:	e7b0      	b.n	80070fc <_printf_i+0xfc>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	f043 0320 	orr.w	r3, r3, #32
 80071a0:	6023      	str	r3, [r4, #0]
 80071a2:	2378      	movs	r3, #120	; 0x78
 80071a4:	4828      	ldr	r0, [pc, #160]	; (8007248 <_printf_i+0x248>)
 80071a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071aa:	e7e3      	b.n	8007174 <_printf_i+0x174>
 80071ac:	065e      	lsls	r6, r3, #25
 80071ae:	bf48      	it	mi
 80071b0:	b2ad      	uxthmi	r5, r5
 80071b2:	e7e6      	b.n	8007182 <_printf_i+0x182>
 80071b4:	4616      	mov	r6, r2
 80071b6:	e7bb      	b.n	8007130 <_printf_i+0x130>
 80071b8:	680b      	ldr	r3, [r1, #0]
 80071ba:	6826      	ldr	r6, [r4, #0]
 80071bc:	6960      	ldr	r0, [r4, #20]
 80071be:	1d1d      	adds	r5, r3, #4
 80071c0:	600d      	str	r5, [r1, #0]
 80071c2:	0635      	lsls	r5, r6, #24
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	d501      	bpl.n	80071cc <_printf_i+0x1cc>
 80071c8:	6018      	str	r0, [r3, #0]
 80071ca:	e002      	b.n	80071d2 <_printf_i+0x1d2>
 80071cc:	0671      	lsls	r1, r6, #25
 80071ce:	d5fb      	bpl.n	80071c8 <_printf_i+0x1c8>
 80071d0:	8018      	strh	r0, [r3, #0]
 80071d2:	2300      	movs	r3, #0
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	4616      	mov	r6, r2
 80071d8:	e7ba      	b.n	8007150 <_printf_i+0x150>
 80071da:	680b      	ldr	r3, [r1, #0]
 80071dc:	1d1a      	adds	r2, r3, #4
 80071de:	600a      	str	r2, [r1, #0]
 80071e0:	681e      	ldr	r6, [r3, #0]
 80071e2:	6862      	ldr	r2, [r4, #4]
 80071e4:	2100      	movs	r1, #0
 80071e6:	4630      	mov	r0, r6
 80071e8:	f7f9 f842 	bl	8000270 <memchr>
 80071ec:	b108      	cbz	r0, 80071f2 <_printf_i+0x1f2>
 80071ee:	1b80      	subs	r0, r0, r6
 80071f0:	6060      	str	r0, [r4, #4]
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	2300      	movs	r3, #0
 80071f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fc:	e7a8      	b.n	8007150 <_printf_i+0x150>
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	4632      	mov	r2, r6
 8007202:	4649      	mov	r1, r9
 8007204:	4640      	mov	r0, r8
 8007206:	47d0      	blx	sl
 8007208:	3001      	adds	r0, #1
 800720a:	d0ab      	beq.n	8007164 <_printf_i+0x164>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	079b      	lsls	r3, r3, #30
 8007210:	d413      	bmi.n	800723a <_printf_i+0x23a>
 8007212:	68e0      	ldr	r0, [r4, #12]
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	4298      	cmp	r0, r3
 8007218:	bfb8      	it	lt
 800721a:	4618      	movlt	r0, r3
 800721c:	e7a4      	b.n	8007168 <_printf_i+0x168>
 800721e:	2301      	movs	r3, #1
 8007220:	4632      	mov	r2, r6
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d09b      	beq.n	8007164 <_printf_i+0x164>
 800722c:	3501      	adds	r5, #1
 800722e:	68e3      	ldr	r3, [r4, #12]
 8007230:	9903      	ldr	r1, [sp, #12]
 8007232:	1a5b      	subs	r3, r3, r1
 8007234:	42ab      	cmp	r3, r5
 8007236:	dcf2      	bgt.n	800721e <_printf_i+0x21e>
 8007238:	e7eb      	b.n	8007212 <_printf_i+0x212>
 800723a:	2500      	movs	r5, #0
 800723c:	f104 0619 	add.w	r6, r4, #25
 8007240:	e7f5      	b.n	800722e <_printf_i+0x22e>
 8007242:	bf00      	nop
 8007244:	080075ed 	.word	0x080075ed
 8007248:	080075fe 	.word	0x080075fe

0800724c <memmove>:
 800724c:	4288      	cmp	r0, r1
 800724e:	b510      	push	{r4, lr}
 8007250:	eb01 0402 	add.w	r4, r1, r2
 8007254:	d902      	bls.n	800725c <memmove+0x10>
 8007256:	4284      	cmp	r4, r0
 8007258:	4623      	mov	r3, r4
 800725a:	d807      	bhi.n	800726c <memmove+0x20>
 800725c:	1e43      	subs	r3, r0, #1
 800725e:	42a1      	cmp	r1, r4
 8007260:	d008      	beq.n	8007274 <memmove+0x28>
 8007262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800726a:	e7f8      	b.n	800725e <memmove+0x12>
 800726c:	4402      	add	r2, r0
 800726e:	4601      	mov	r1, r0
 8007270:	428a      	cmp	r2, r1
 8007272:	d100      	bne.n	8007276 <memmove+0x2a>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800727a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800727e:	e7f7      	b.n	8007270 <memmove+0x24>

08007280 <_free_r>:
 8007280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007282:	2900      	cmp	r1, #0
 8007284:	d048      	beq.n	8007318 <_free_r+0x98>
 8007286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800728a:	9001      	str	r0, [sp, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f1a1 0404 	sub.w	r4, r1, #4
 8007292:	bfb8      	it	lt
 8007294:	18e4      	addlt	r4, r4, r3
 8007296:	f000 f8d3 	bl	8007440 <__malloc_lock>
 800729a:	4a20      	ldr	r2, [pc, #128]	; (800731c <_free_r+0x9c>)
 800729c:	9801      	ldr	r0, [sp, #4]
 800729e:	6813      	ldr	r3, [r2, #0]
 80072a0:	4615      	mov	r5, r2
 80072a2:	b933      	cbnz	r3, 80072b2 <_free_r+0x32>
 80072a4:	6063      	str	r3, [r4, #4]
 80072a6:	6014      	str	r4, [r2, #0]
 80072a8:	b003      	add	sp, #12
 80072aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072ae:	f000 b8cd 	b.w	800744c <__malloc_unlock>
 80072b2:	42a3      	cmp	r3, r4
 80072b4:	d90b      	bls.n	80072ce <_free_r+0x4e>
 80072b6:	6821      	ldr	r1, [r4, #0]
 80072b8:	1862      	adds	r2, r4, r1
 80072ba:	4293      	cmp	r3, r2
 80072bc:	bf04      	itt	eq
 80072be:	681a      	ldreq	r2, [r3, #0]
 80072c0:	685b      	ldreq	r3, [r3, #4]
 80072c2:	6063      	str	r3, [r4, #4]
 80072c4:	bf04      	itt	eq
 80072c6:	1852      	addeq	r2, r2, r1
 80072c8:	6022      	streq	r2, [r4, #0]
 80072ca:	602c      	str	r4, [r5, #0]
 80072cc:	e7ec      	b.n	80072a8 <_free_r+0x28>
 80072ce:	461a      	mov	r2, r3
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	b10b      	cbz	r3, 80072d8 <_free_r+0x58>
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d9fa      	bls.n	80072ce <_free_r+0x4e>
 80072d8:	6811      	ldr	r1, [r2, #0]
 80072da:	1855      	adds	r5, r2, r1
 80072dc:	42a5      	cmp	r5, r4
 80072de:	d10b      	bne.n	80072f8 <_free_r+0x78>
 80072e0:	6824      	ldr	r4, [r4, #0]
 80072e2:	4421      	add	r1, r4
 80072e4:	1854      	adds	r4, r2, r1
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	6011      	str	r1, [r2, #0]
 80072ea:	d1dd      	bne.n	80072a8 <_free_r+0x28>
 80072ec:	681c      	ldr	r4, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	6053      	str	r3, [r2, #4]
 80072f2:	4421      	add	r1, r4
 80072f4:	6011      	str	r1, [r2, #0]
 80072f6:	e7d7      	b.n	80072a8 <_free_r+0x28>
 80072f8:	d902      	bls.n	8007300 <_free_r+0x80>
 80072fa:	230c      	movs	r3, #12
 80072fc:	6003      	str	r3, [r0, #0]
 80072fe:	e7d3      	b.n	80072a8 <_free_r+0x28>
 8007300:	6825      	ldr	r5, [r4, #0]
 8007302:	1961      	adds	r1, r4, r5
 8007304:	428b      	cmp	r3, r1
 8007306:	bf04      	itt	eq
 8007308:	6819      	ldreq	r1, [r3, #0]
 800730a:	685b      	ldreq	r3, [r3, #4]
 800730c:	6063      	str	r3, [r4, #4]
 800730e:	bf04      	itt	eq
 8007310:	1949      	addeq	r1, r1, r5
 8007312:	6021      	streq	r1, [r4, #0]
 8007314:	6054      	str	r4, [r2, #4]
 8007316:	e7c7      	b.n	80072a8 <_free_r+0x28>
 8007318:	b003      	add	sp, #12
 800731a:	bd30      	pop	{r4, r5, pc}
 800731c:	200143b8 	.word	0x200143b8

08007320 <_malloc_r>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	1ccd      	adds	r5, r1, #3
 8007324:	f025 0503 	bic.w	r5, r5, #3
 8007328:	3508      	adds	r5, #8
 800732a:	2d0c      	cmp	r5, #12
 800732c:	bf38      	it	cc
 800732e:	250c      	movcc	r5, #12
 8007330:	2d00      	cmp	r5, #0
 8007332:	4606      	mov	r6, r0
 8007334:	db01      	blt.n	800733a <_malloc_r+0x1a>
 8007336:	42a9      	cmp	r1, r5
 8007338:	d903      	bls.n	8007342 <_malloc_r+0x22>
 800733a:	230c      	movs	r3, #12
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	2000      	movs	r0, #0
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007342:	f000 f87d 	bl	8007440 <__malloc_lock>
 8007346:	4921      	ldr	r1, [pc, #132]	; (80073cc <_malloc_r+0xac>)
 8007348:	680a      	ldr	r2, [r1, #0]
 800734a:	4614      	mov	r4, r2
 800734c:	b99c      	cbnz	r4, 8007376 <_malloc_r+0x56>
 800734e:	4f20      	ldr	r7, [pc, #128]	; (80073d0 <_malloc_r+0xb0>)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	b923      	cbnz	r3, 800735e <_malloc_r+0x3e>
 8007354:	4621      	mov	r1, r4
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f862 	bl	8007420 <_sbrk_r>
 800735c:	6038      	str	r0, [r7, #0]
 800735e:	4629      	mov	r1, r5
 8007360:	4630      	mov	r0, r6
 8007362:	f000 f85d 	bl	8007420 <_sbrk_r>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	d123      	bne.n	80073b2 <_malloc_r+0x92>
 800736a:	230c      	movs	r3, #12
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	4630      	mov	r0, r6
 8007370:	f000 f86c 	bl	800744c <__malloc_unlock>
 8007374:	e7e3      	b.n	800733e <_malloc_r+0x1e>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	1b5b      	subs	r3, r3, r5
 800737a:	d417      	bmi.n	80073ac <_malloc_r+0x8c>
 800737c:	2b0b      	cmp	r3, #11
 800737e:	d903      	bls.n	8007388 <_malloc_r+0x68>
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	441c      	add	r4, r3
 8007384:	6025      	str	r5, [r4, #0]
 8007386:	e004      	b.n	8007392 <_malloc_r+0x72>
 8007388:	6863      	ldr	r3, [r4, #4]
 800738a:	42a2      	cmp	r2, r4
 800738c:	bf0c      	ite	eq
 800738e:	600b      	streq	r3, [r1, #0]
 8007390:	6053      	strne	r3, [r2, #4]
 8007392:	4630      	mov	r0, r6
 8007394:	f000 f85a 	bl	800744c <__malloc_unlock>
 8007398:	f104 000b 	add.w	r0, r4, #11
 800739c:	1d23      	adds	r3, r4, #4
 800739e:	f020 0007 	bic.w	r0, r0, #7
 80073a2:	1ac2      	subs	r2, r0, r3
 80073a4:	d0cc      	beq.n	8007340 <_malloc_r+0x20>
 80073a6:	1a1b      	subs	r3, r3, r0
 80073a8:	50a3      	str	r3, [r4, r2]
 80073aa:	e7c9      	b.n	8007340 <_malloc_r+0x20>
 80073ac:	4622      	mov	r2, r4
 80073ae:	6864      	ldr	r4, [r4, #4]
 80073b0:	e7cc      	b.n	800734c <_malloc_r+0x2c>
 80073b2:	1cc4      	adds	r4, r0, #3
 80073b4:	f024 0403 	bic.w	r4, r4, #3
 80073b8:	42a0      	cmp	r0, r4
 80073ba:	d0e3      	beq.n	8007384 <_malloc_r+0x64>
 80073bc:	1a21      	subs	r1, r4, r0
 80073be:	4630      	mov	r0, r6
 80073c0:	f000 f82e 	bl	8007420 <_sbrk_r>
 80073c4:	3001      	adds	r0, #1
 80073c6:	d1dd      	bne.n	8007384 <_malloc_r+0x64>
 80073c8:	e7cf      	b.n	800736a <_malloc_r+0x4a>
 80073ca:	bf00      	nop
 80073cc:	200143b8 	.word	0x200143b8
 80073d0:	200143bc 	.word	0x200143bc

080073d4 <_realloc_r>:
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d6:	4607      	mov	r7, r0
 80073d8:	4614      	mov	r4, r2
 80073da:	460e      	mov	r6, r1
 80073dc:	b921      	cbnz	r1, 80073e8 <_realloc_r+0x14>
 80073de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80073e2:	4611      	mov	r1, r2
 80073e4:	f7ff bf9c 	b.w	8007320 <_malloc_r>
 80073e8:	b922      	cbnz	r2, 80073f4 <_realloc_r+0x20>
 80073ea:	f7ff ff49 	bl	8007280 <_free_r>
 80073ee:	4625      	mov	r5, r4
 80073f0:	4628      	mov	r0, r5
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	f000 f830 	bl	8007458 <_malloc_usable_size_r>
 80073f8:	42a0      	cmp	r0, r4
 80073fa:	d20f      	bcs.n	800741c <_realloc_r+0x48>
 80073fc:	4621      	mov	r1, r4
 80073fe:	4638      	mov	r0, r7
 8007400:	f7ff ff8e 	bl	8007320 <_malloc_r>
 8007404:	4605      	mov	r5, r0
 8007406:	2800      	cmp	r0, #0
 8007408:	d0f2      	beq.n	80073f0 <_realloc_r+0x1c>
 800740a:	4631      	mov	r1, r6
 800740c:	4622      	mov	r2, r4
 800740e:	f7ff fbe3 	bl	8006bd8 <memcpy>
 8007412:	4631      	mov	r1, r6
 8007414:	4638      	mov	r0, r7
 8007416:	f7ff ff33 	bl	8007280 <_free_r>
 800741a:	e7e9      	b.n	80073f0 <_realloc_r+0x1c>
 800741c:	4635      	mov	r5, r6
 800741e:	e7e7      	b.n	80073f0 <_realloc_r+0x1c>

08007420 <_sbrk_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4d06      	ldr	r5, [pc, #24]	; (800743c <_sbrk_r+0x1c>)
 8007424:	2300      	movs	r3, #0
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	602b      	str	r3, [r5, #0]
 800742c:	f7f9 fbfe 	bl	8000c2c <_sbrk>
 8007430:	1c43      	adds	r3, r0, #1
 8007432:	d102      	bne.n	800743a <_sbrk_r+0x1a>
 8007434:	682b      	ldr	r3, [r5, #0]
 8007436:	b103      	cbz	r3, 800743a <_sbrk_r+0x1a>
 8007438:	6023      	str	r3, [r4, #0]
 800743a:	bd38      	pop	{r3, r4, r5, pc}
 800743c:	200144f4 	.word	0x200144f4

08007440 <__malloc_lock>:
 8007440:	4801      	ldr	r0, [pc, #4]	; (8007448 <__malloc_lock+0x8>)
 8007442:	f000 b811 	b.w	8007468 <__retarget_lock_acquire_recursive>
 8007446:	bf00      	nop
 8007448:	200144fc 	.word	0x200144fc

0800744c <__malloc_unlock>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__malloc_unlock+0x8>)
 800744e:	f000 b80c 	b.w	800746a <__retarget_lock_release_recursive>
 8007452:	bf00      	nop
 8007454:	200144fc 	.word	0x200144fc

08007458 <_malloc_usable_size_r>:
 8007458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800745c:	1f18      	subs	r0, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	bfbc      	itt	lt
 8007462:	580b      	ldrlt	r3, [r1, r0]
 8007464:	18c0      	addlt	r0, r0, r3
 8007466:	4770      	bx	lr

08007468 <__retarget_lock_acquire_recursive>:
 8007468:	4770      	bx	lr

0800746a <__retarget_lock_release_recursive>:
 800746a:	4770      	bx	lr

0800746c <_init>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	bf00      	nop
 8007470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007472:	bc08      	pop	{r3}
 8007474:	469e      	mov	lr, r3
 8007476:	4770      	bx	lr

08007478 <_fini>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	bf00      	nop
 800747c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747e:	bc08      	pop	{r3}
 8007480:	469e      	mov	lr, r3
 8007482:	4770      	bx	lr
